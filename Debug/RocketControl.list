
RocketControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065e0  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006770  08006770  00016770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067b0  080067b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080067b0  080067b0  000167b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067b8  080067b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067b8  080067b8  000167b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067bc  080067bc  000167bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080067c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  2000000c  080067cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  200001f4  080067cc  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d18  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ea2  00000000  00000000  00034d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  00037bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  00038f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000484f  00000000  00000000  0003a1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018aeb  00000000  00000000  0003e9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc44f  00000000  00000000  000574da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00123929  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051ac  00000000  00000000  0012397c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006758 	.word	0x08006758

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08006758 	.word	0x08006758

080001d0 <__aeabi_ldivmod>:
 80001d0:	b97b      	cbnz	r3, 80001f2 <__aeabi_ldivmod+0x22>
 80001d2:	b972      	cbnz	r2, 80001f2 <__aeabi_ldivmod+0x22>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bfbe      	ittt	lt
 80001d8:	2000      	movlt	r0, #0
 80001da:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001de:	e006      	blt.n	80001ee <__aeabi_ldivmod+0x1e>
 80001e0:	bf08      	it	eq
 80001e2:	2800      	cmpeq	r0, #0
 80001e4:	bf1c      	itt	ne
 80001e6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001ea:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ee:	f000 b9bf 	b.w	8000570 <__aeabi_idiv0>
 80001f2:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fa:	2900      	cmp	r1, #0
 80001fc:	db09      	blt.n	8000212 <__aeabi_ldivmod+0x42>
 80001fe:	2b00      	cmp	r3, #0
 8000200:	db1a      	blt.n	8000238 <__aeabi_ldivmod+0x68>
 8000202:	f000 f84d 	bl	80002a0 <__udivmoddi4>
 8000206:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020e:	b004      	add	sp, #16
 8000210:	4770      	bx	lr
 8000212:	4240      	negs	r0, r0
 8000214:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000218:	2b00      	cmp	r3, #0
 800021a:	db1b      	blt.n	8000254 <__aeabi_ldivmod+0x84>
 800021c:	f000 f840 	bl	80002a0 <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4240      	negs	r0, r0
 800022c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000230:	4252      	negs	r2, r2
 8000232:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000236:	4770      	bx	lr
 8000238:	4252      	negs	r2, r2
 800023a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800023e:	f000 f82f 	bl	80002a0 <__udivmoddi4>
 8000242:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000246:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024a:	b004      	add	sp, #16
 800024c:	4240      	negs	r0, r0
 800024e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000252:	4770      	bx	lr
 8000254:	4252      	negs	r2, r2
 8000256:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025a:	f000 f821 	bl	80002a0 <__udivmoddi4>
 800025e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000266:	b004      	add	sp, #16
 8000268:	4252      	negs	r2, r2
 800026a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026e:	4770      	bx	lr

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	460b      	mov	r3, r1
 800057e:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8000584:	78fb      	ldrb	r3, [r7, #3]
 8000586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800058a:	b2db      	uxtb	r3, r3
 800058c:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6858      	ldr	r0, [r3, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	8adb      	ldrh	r3, [r3, #22]
 8000596:	2200      	movs	r2, #0
 8000598:	4619      	mov	r1, r3
 800059a:	f002 f945 	bl	8002828 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6818      	ldr	r0, [r3, #0]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	1cf9      	adds	r1, r7, #3
 80005a8:	2201      	movs	r2, #1
 80005aa:	f004 fa48 	bl	8004a3e <HAL_SPI_Transmit>
 80005ae:	4603      	mov	r3, r0
 80005b0:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6818      	ldr	r0, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	f107 010f 	add.w	r1, r7, #15
 80005be:	2201      	movs	r2, #1
 80005c0:	f004 fbab 	bl	8004d1a <HAL_SPI_Receive>
 80005c4:	4603      	mov	r3, r0
 80005c6:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6858      	ldr	r0, [r3, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	8adb      	ldrh	r3, [r3, #22]
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	f002 f928 	bl	8002828 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
 80005ea:	460b      	mov	r3, r1
 80005ec:	70fb      	strb	r3, [r7, #3]
 80005ee:	4613      	mov	r3, r2
 80005f0:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 80005f2:	78fb      	ldrb	r3, [r7, #3]
 80005f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005f8:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 80005fa:	78bb      	ldrb	r3, [r7, #2]
 80005fc:	021b      	lsls	r3, r3, #8
 80005fe:	b21a      	sxth	r2, r3
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	b21b      	sxth	r3, r3
 8000604:	4313      	orrs	r3, r2
 8000606:	b21b      	sxth	r3, r3
 8000608:	b29b      	uxth	r3, r3
 800060a:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6858      	ldr	r0, [r3, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	8adb      	ldrh	r3, [r3, #22]
 8000614:	2200      	movs	r2, #0
 8000616:	4619      	mov	r1, r3
 8000618:	f002 f906 	bl	8002828 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6818      	ldr	r0, [r3, #0]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f107 010a 	add.w	r1, r7, #10
 8000628:	2202      	movs	r2, #2
 800062a:	f004 fa08 	bl	8004a3e <HAL_SPI_Transmit>
 800062e:	4603      	mov	r3, r0
 8000630:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6858      	ldr	r0, [r3, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	8adb      	ldrh	r3, [r3, #22]
 800063a:	2201      	movs	r2, #1
 800063c:	4619      	mov	r1, r3
 800063e:	f002 f8f3 	bl	8002828 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	460b      	mov	r3, r1
 8000654:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8000656:	78fb      	ldrb	r3, [r7, #3]
 8000658:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800065c:	b2db      	uxtb	r3, r3
 800065e:	461a      	mov	r2, r3
 8000660:	2101      	movs	r1, #1
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f7ff ffbd 	bl	80005e2 <write_register>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 800067c:	78fb      	ldrb	r3, [r7, #3]
 800067e:	2b2c      	cmp	r3, #44	; 0x2c
 8000680:	d801      	bhi.n	8000686 <set_OCP+0x16>
    imax = 45;
 8000682:	232d      	movs	r3, #45	; 0x2d
 8000684:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8000686:	78fb      	ldrb	r3, [r7, #3]
 8000688:	2bf0      	cmp	r3, #240	; 0xf0
 800068a:	d901      	bls.n	8000690 <set_OCP+0x20>
    imax = 240;
 800068c:	23f0      	movs	r3, #240	; 0xf0
 800068e:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	2b81      	cmp	r3, #129	; 0x81
 8000694:	d809      	bhi.n	80006aa <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8000696:	78fb      	ldrb	r3, [r7, #3]
 8000698:	3b2d      	subs	r3, #45	; 0x2d
 800069a:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <set_OCP+0x68>)
 800069c:	fb82 1203 	smull	r1, r2, r2, r3
 80006a0:	1052      	asrs	r2, r2, #1
 80006a2:	17db      	asrs	r3, r3, #31
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	73fb      	strb	r3, [r7, #15]
 80006a8:	e008      	b.n	80006bc <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 80006aa:	78fb      	ldrb	r3, [r7, #3]
 80006ac:	331e      	adds	r3, #30
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <set_OCP+0x68>)
 80006b0:	fb82 1203 	smull	r1, r2, r2, r3
 80006b4:	1092      	asrs	r2, r2, #2
 80006b6:	17db      	asrs	r3, r3, #31
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	f043 0320 	orr.w	r3, r3, #32
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	210b      	movs	r1, #11
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff ff8a 	bl	80005e2 <write_register>
}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	66666667 	.word	0x66666667

080006dc <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 80006dc:	b5b0      	push	{r4, r5, r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 80006e4:	211d      	movs	r1, #29
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ff44 	bl	8000574 <read_register>
 80006ec:	4603      	mov	r3, r0
 80006ee:	091b      	lsrs	r3, r3, #4
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2200      	movs	r2, #0
 80006f6:	461c      	mov	r4, r3
 80006f8:	4615      	mov	r5, r2
 80006fa:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 80006fe:	211e      	movs	r1, #30
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff ff37 	bl	8000574 <read_register>
 8000706:	4603      	mov	r3, r0
 8000708:	091b      	lsrs	r3, r3, #4
 800070a:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 800070c:	2304      	movs	r3, #4
 800070e:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	2b0a      	cmp	r3, #10
 8000714:	d908      	bls.n	8000728 <set_low_data_rate_optimization+0x4c>
 8000716:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800071a:	1fd1      	subs	r1, r2, #7
 800071c:	430b      	orrs	r3, r1
 800071e:	d103      	bne.n	8000728 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8000720:	7ffb      	ldrb	r3, [r7, #31]
 8000722:	f043 0308 	orr.w	r3, r3, #8
 8000726:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8000728:	7ffb      	ldrb	r3, [r7, #31]
 800072a:	461a      	mov	r2, r3
 800072c:	2126      	movs	r1, #38	; 0x26
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff ff57 	bl	80005e2 <write_register>
}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bdb0      	pop	{r4, r5, r7, pc}

0800073c <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8000744:	2100      	movs	r1, #0
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ff7f 	bl	800064a <set_mode>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 800075c:	2101      	movs	r1, #1
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff ff73 	bl	800064a <set_mode>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8000774:	211d      	movs	r1, #29
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff fefc 	bl	8000574 <read_register>
 800077c:	4603      	mov	r3, r0
 800077e:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	f023 0301 	bic.w	r3, r3, #1
 8000786:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	461a      	mov	r2, r3
 800078c:	211d      	movs	r1, #29
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff ff27 	bl	80005e2 <write_register>
}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	691b      	ldr	r3, [r3, #16]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d10e      	bne.n	80007ce <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	2b0f      	cmp	r3, #15
 80007b4:	d901      	bls.n	80007ba <lora_set_tx_power+0x1e>
      level = 15;
 80007b6:	230f      	movs	r3, #15
 80007b8:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80007ba:	78fb      	ldrb	r3, [r7, #3]
 80007bc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	461a      	mov	r2, r3
 80007c4:	2109      	movs	r1, #9
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff ff0b 	bl	80005e2 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 80007cc:	e02e      	b.n	800082c <lora_set_tx_power+0x90>
    if (level > 20) {
 80007ce:	78fb      	ldrb	r3, [r7, #3]
 80007d0:	2b14      	cmp	r3, #20
 80007d2:	d901      	bls.n	80007d8 <lora_set_tx_power+0x3c>
      level = 20;
 80007d4:	2314      	movs	r3, #20
 80007d6:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 80007d8:	78fb      	ldrb	r3, [r7, #3]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d801      	bhi.n	80007e2 <lora_set_tx_power+0x46>
      level = 2;
 80007de:	2302      	movs	r3, #2
 80007e0:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 80007e2:	78fb      	ldrb	r3, [r7, #3]
 80007e4:	2b11      	cmp	r3, #17
 80007e6:	d90c      	bls.n	8000802 <lora_set_tx_power+0x66>
      level -= 3;
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	3b03      	subs	r3, #3
 80007ec:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 80007ee:	2287      	movs	r2, #135	; 0x87
 80007f0:	214d      	movs	r1, #77	; 0x4d
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fef5 	bl	80005e2 <write_register>
      set_OCP(lora, 140);
 80007f8:	218c      	movs	r1, #140	; 0x8c
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff38 	bl	8000670 <set_OCP>
 8000800:	e008      	b.n	8000814 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8000802:	2284      	movs	r2, #132	; 0x84
 8000804:	214d      	movs	r1, #77	; 0x4d
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff feeb 	bl	80005e2 <write_register>
      set_OCP(lora, 97);
 800080c:	2161      	movs	r1, #97	; 0x61
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ff2e 	bl	8000670 <set_OCP>
    level -= 2;
 8000814:	78fb      	ldrb	r3, [r7, #3]
 8000816:	3b02      	subs	r3, #2
 8000818:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000820:	b2db      	uxtb	r3, r3
 8000822:	461a      	mov	r2, r3
 8000824:	2109      	movs	r1, #9
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff fedb 	bl	80005e2 <write_register>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8000840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	f04f 0100 	mov.w	r1, #0
 800084c:	04d9      	lsls	r1, r3, #19
 800084e:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000852:	04d0      	lsls	r0, r2, #19
 8000854:	4a19      	ldr	r2, [pc, #100]	; (80008bc <lora_set_frequency+0x88>)
 8000856:	f04f 0300 	mov.w	r3, #0
 800085a:	f7ff fd09 	bl	8000270 <__aeabi_uldivmod>
 800085e:	4602      	mov	r2, r0
 8000860:	460b      	mov	r3, r1
 8000862:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8000866:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800086a:	f04f 0200 	mov.w	r2, #0
 800086e:	f04f 0300 	mov.w	r3, #0
 8000872:	0c02      	lsrs	r2, r0, #16
 8000874:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000878:	0c0b      	lsrs	r3, r1, #16
 800087a:	b2d3      	uxtb	r3, r2
 800087c:	461a      	mov	r2, r3
 800087e:	2106      	movs	r1, #6
 8000880:	68f8      	ldr	r0, [r7, #12]
 8000882:	f7ff feae 	bl	80005e2 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8000886:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800088a:	f04f 0200 	mov.w	r2, #0
 800088e:	f04f 0300 	mov.w	r3, #0
 8000892:	0a02      	lsrs	r2, r0, #8
 8000894:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000898:	0a0b      	lsrs	r3, r1, #8
 800089a:	b2d3      	uxtb	r3, r2
 800089c:	461a      	mov	r2, r3
 800089e:	2107      	movs	r1, #7
 80008a0:	68f8      	ldr	r0, [r7, #12]
 80008a2:	f7ff fe9e 	bl	80005e2 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80008a6:	7c3b      	ldrb	r3, [r7, #16]
 80008a8:	461a      	mov	r2, r3
 80008aa:	2108      	movs	r1, #8
 80008ac:	68f8      	ldr	r0, [r7, #12]
 80008ae:	f7ff fe98 	bl	80005e2 <write_register>
}
 80008b2:	bf00      	nop
 80008b4:	3718      	adds	r7, #24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	01e84800 	.word	0x01e84800

080008c0 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 80008cc:	78fb      	ldrb	r3, [r7, #3]
 80008ce:	2b05      	cmp	r3, #5
 80008d0:	d802      	bhi.n	80008d8 <lora_set_spreading_factor+0x18>
    sf = 6;
 80008d2:	2306      	movs	r3, #6
 80008d4:	70fb      	strb	r3, [r7, #3]
 80008d6:	e004      	b.n	80008e2 <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	2b0c      	cmp	r3, #12
 80008dc:	d901      	bls.n	80008e2 <lora_set_spreading_factor+0x22>
    sf = 12;
 80008de:	230c      	movs	r3, #12
 80008e0:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	2b06      	cmp	r3, #6
 80008e6:	d10a      	bne.n	80008fe <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 80008e8:	22c5      	movs	r2, #197	; 0xc5
 80008ea:	2131      	movs	r1, #49	; 0x31
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff fe78 	bl	80005e2 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 80008f2:	220c      	movs	r2, #12
 80008f4:	2137      	movs	r1, #55	; 0x37
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff fe73 	bl	80005e2 <write_register>
 80008fc:	e009      	b.n	8000912 <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 80008fe:	22c3      	movs	r2, #195	; 0xc3
 8000900:	2131      	movs	r1, #49	; 0x31
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff fe6d 	bl	80005e2 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8000908:	220a      	movs	r2, #10
 800090a:	2137      	movs	r1, #55	; 0x37
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff fe68 	bl	80005e2 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8000912:	211e      	movs	r1, #30
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff fe2d 	bl	8000574 <read_register>
 800091a:	4603      	mov	r3, r0
 800091c:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 800091e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000922:	f003 030f 	and.w	r3, r3, #15
 8000926:	b25a      	sxtb	r2, r3
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	011b      	lsls	r3, r3, #4
 800092c:	b25b      	sxtb	r3, r3
 800092e:	4313      	orrs	r3, r2
 8000930:	b25b      	sxtb	r3, r3
 8000932:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	461a      	mov	r2, r3
 8000938:	211e      	movs	r1, #30
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff fe51 	bl	80005e2 <write_register>

  set_low_data_rate_optimization(lora);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff fecb 	bl	80006dc <set_low_data_rate_optimization>
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	460b      	mov	r3, r1
 8000958:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 800095a:	887b      	ldrh	r3, [r7, #2]
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	b29b      	uxth	r3, r3
 8000960:	b2db      	uxtb	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	2120      	movs	r1, #32
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff fe3b 	bl	80005e2 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 800096c:	887b      	ldrh	r3, [r7, #2]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	f003 030f 	and.w	r3, r3, #15
 8000974:	b2db      	uxtb	r3, r3
 8000976:	461a      	mov	r2, r3
 8000978:	2121      	movs	r1, #33	; 0x21
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff fe31 	bl	80005e2 <write_register>
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8000990:	2142      	movs	r1, #66	; 0x42
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff fdee 	bl	8000574 <read_register>
 8000998:	4603      	mov	r3, r0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <lora_init>:
	HAL_Delay(100);
}

uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, GPIO_TypeDef *reset_port, uint16_t reset_pin,  uint64_t freq)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b086      	sub	sp, #24
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	60f8      	str	r0, [r7, #12]
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	887a      	ldrh	r2, [r7, #2]
 80009c0:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 80009c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2201      	movs	r2, #1
 80009cc:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	2200      	movs	r2, #0
 80009d2:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2200      	movs	r2, #0
 80009d8:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009e0:	609a      	str	r2, [r3, #8]

  lora->reset_port = reset_port;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6a3a      	ldr	r2, [r7, #32]
 80009e6:	619a      	str	r2, [r3, #24]
  lora->reset_pin = reset_pin;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80009ec:	839a      	strh	r2, [r3, #28]

  // Check version
  uint8_t ver = lora_version(lora);
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f7ff ffca 	bl	8000988 <lora_version>
 80009f4:	4603      	mov	r3, r0
 80009f6:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	2b12      	cmp	r3, #18
 80009fc:	d001      	beq.n	8000a02 <lora_init+0x60>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 80009fe:	2304      	movs	r3, #4
 8000a00:	e031      	b.n	8000a66 <lora_init+0xc4>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	f7ff fe9a 	bl	800073c <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f7ff fe97 	bl	800073c <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000a0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f7ff ff0e 	bl	8000834 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000a18:	2107      	movs	r1, #7
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f7ff ff50 	bl	80008c0 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000a20:	210a      	movs	r1, #10
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f7ff ff93 	bl	800094e <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f7ff fe9f 	bl	800076c <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8000a2e:	210c      	movs	r1, #12
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f7ff fd9f 	bl	8000574 <read_register>
 8000a36:	4603      	mov	r3, r0
 8000a38:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000a3a:	7dbb      	ldrb	r3, [r7, #22]
 8000a3c:	f043 0303 	orr.w	r3, r3, #3
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	461a      	mov	r2, r3
 8000a44:	210c      	movs	r1, #12
 8000a46:	68f8      	ldr	r0, [r7, #12]
 8000a48:	f7ff fdcb 	bl	80005e2 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	2126      	movs	r1, #38	; 0x26
 8000a50:	68f8      	ldr	r0, [r7, #12]
 8000a52:	f7ff fdc6 	bl	80005e2 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8000a56:	2111      	movs	r1, #17
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f7ff fe9f 	bl	800079c <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8000a5e:	68f8      	ldr	r0, [r7, #12]
 8000a60:	f7ff fe78 	bl	8000754 <lora_mode_standby>

  return LORA_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <bmp280_init_default_params>:
#define BMP280_RESET_VALUE     0xB6

BMP280_HandleTypedef bmp280;


void bmp280_init_default_params(bmp280_params_t *params) {
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2203      	movs	r2, #3
 8000a7a:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2203      	movs	r2, #3
 8000a86:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2203      	movs	r2, #3
 8000a92:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2203      	movs	r2, #3
 8000a98:	715a      	strb	r2, [r3, #5]
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b08a      	sub	sp, #40	; 0x28
 8000aaa:	af04      	add	r7, sp, #16
 8000aac:	60f8      	str	r0, [r7, #12]
 8000aae:	460b      	mov	r3, r1
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ac0:	7afb      	ldrb	r3, [r7, #11]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	8af9      	ldrh	r1, [r7, #22]
 8000ac6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000aca:	9302      	str	r3, [sp, #8]
 8000acc:	2302      	movs	r3, #2
 8000ace:	9301      	str	r3, [sp, #4]
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	f002 f862 	bl	8002ba0 <HAL_I2C_Mem_Read>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d10b      	bne.n	8000afa <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000ae2:	7d7b      	ldrb	r3, [r7, #21]
 8000ae4:	021b      	lsls	r3, r3, #8
 8000ae6:	b21a      	sxth	r2, r3
 8000ae8:	7d3b      	ldrb	r3, [r7, #20]
 8000aea:	b21b      	sxth	r3, r3
 8000aec:	4313      	orrs	r3, r2
 8000aee:	b21b      	sxth	r3, r3
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	801a      	strh	r2, [r3, #0]
		return true;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e000      	b.n	8000afc <read_register16+0x56>
	} else
		return false;
 8000afa:	2300      	movs	r3, #0

}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b08b      	sub	sp, #44	; 0x2c
 8000b08:	af04      	add	r7, sp, #16
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	460b      	mov	r3, r1
 8000b12:	72fb      	strb	r3, [r7, #11]
 8000b14:	4613      	mov	r3, r2
 8000b16:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000b24:	7afb      	ldrb	r3, [r7, #11]
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	7abb      	ldrb	r3, [r7, #10]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	8af9      	ldrh	r1, [r7, #22]
 8000b2e:	f241 3488 	movw	r4, #5000	; 0x1388
 8000b32:	9402      	str	r4, [sp, #8]
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	f002 f830 	bl	8002ba0 <HAL_I2C_Mem_Read>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d101      	bne.n	8000b4a <read_data+0x46>
		return 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	e000      	b.n	8000b4c <read_data+0x48>
	else
		return 1;
 8000b4a:	2301      	movs	r3, #1

}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	371c      	adds	r7, #28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd90      	pop	{r4, r7, pc}

08000b54 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	2188      	movs	r1, #136	; 0x88
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ff9f 	bl	8000aa6 <read_register16>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d06f      	beq.n	8000c4e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3302      	adds	r3, #2
 8000b72:	461a      	mov	r2, r3
 8000b74:	218a      	movs	r1, #138	; 0x8a
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ff95 	bl	8000aa6 <read_register16>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d065      	beq.n	8000c4e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3304      	adds	r3, #4
 8000b86:	461a      	mov	r2, r3
 8000b88:	218c      	movs	r1, #140	; 0x8c
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ff8b 	bl	8000aa6 <read_register16>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d05b      	beq.n	8000c4e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3306      	adds	r3, #6
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	218e      	movs	r1, #142	; 0x8e
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ff81 	bl	8000aa6 <read_register16>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d051      	beq.n	8000c4e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3308      	adds	r3, #8
 8000bae:	461a      	mov	r2, r3
 8000bb0:	2190      	movs	r1, #144	; 0x90
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ff77 	bl	8000aa6 <read_register16>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d047      	beq.n	8000c4e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	330a      	adds	r3, #10
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	2192      	movs	r1, #146	; 0x92
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff ff6d 	bl	8000aa6 <read_register16>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d03d      	beq.n	8000c4e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	330c      	adds	r3, #12
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	2194      	movs	r1, #148	; 0x94
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ff63 	bl	8000aa6 <read_register16>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d033      	beq.n	8000c4e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	330e      	adds	r3, #14
 8000bea:	461a      	mov	r2, r3
 8000bec:	2196      	movs	r1, #150	; 0x96
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ff59 	bl	8000aa6 <read_register16>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d029      	beq.n	8000c4e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3310      	adds	r3, #16
 8000bfe:	461a      	mov	r2, r3
 8000c00:	2198      	movs	r1, #152	; 0x98
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ff4f 	bl	8000aa6 <read_register16>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d01f      	beq.n	8000c4e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3312      	adds	r3, #18
 8000c12:	461a      	mov	r2, r3
 8000c14:	219a      	movs	r1, #154	; 0x9a
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff ff45 	bl	8000aa6 <read_register16>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d015      	beq.n	8000c4e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3314      	adds	r3, #20
 8000c26:	461a      	mov	r2, r3
 8000c28:	219c      	movs	r1, #156	; 0x9c
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ff3b 	bl	8000aa6 <read_register16>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d00b      	beq.n	8000c4e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	219e      	movs	r1, #158	; 0x9e
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ff31 	bl	8000aa6 <read_register16>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <read_calibration_data+0xfa>

		return true;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e000      	b.n	8000c50 <read_calibration_data+0xfc>
	}

	return false;
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f103 0218 	add.w	r2, r3, #24
 8000c66:	2301      	movs	r3, #1
 8000c68:	21a1      	movs	r1, #161	; 0xa1
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ff4a 	bl	8000b04 <read_data>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	331a      	adds	r3, #26
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	21e1      	movs	r1, #225	; 0xe1
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ff11 	bl	8000aa6 <read_register16>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d041      	beq.n	8000d0e <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f103 021c 	add.w	r2, r3, #28
 8000c90:	2301      	movs	r3, #1
 8000c92:	21e3      	movs	r1, #227	; 0xe3
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff35 	bl	8000b04 <read_data>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d136      	bne.n	8000d0e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8000ca0:	f107 030e 	add.w	r3, r7, #14
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	21e4      	movs	r1, #228	; 0xe4
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff fefc 	bl	8000aa6 <read_register16>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d02c      	beq.n	8000d0e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	461a      	mov	r2, r3
 8000cba:	21e5      	movs	r1, #229	; 0xe5
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff fef2 	bl	8000aa6 <read_register16>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d022      	beq.n	8000d0e <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8000cce:	2301      	movs	r3, #1
 8000cd0:	21e7      	movs	r1, #231	; 0xe7
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ff16 	bl	8000b04 <read_data>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d117      	bne.n	8000d0e <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8000cde:	89fb      	ldrh	r3, [r7, #14]
 8000ce0:	011b      	lsls	r3, r3, #4
 8000ce2:	b21b      	sxth	r3, r3
 8000ce4:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	89fb      	ldrh	r3, [r7, #14]
 8000cec:	121b      	asrs	r3, r3, #8
 8000cee:	b21b      	sxth	r3, r3
 8000cf0:	f003 030f 	and.w	r3, r3, #15
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	b21a      	sxth	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8000cfe:	89bb      	ldrh	r3, [r7, #12]
 8000d00:	091b      	lsrs	r3, r3, #4
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	b21a      	sxth	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	841a      	strh	r2, [r3, #32]

		return true;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e000      	b.n	8000d10 <read_hum_calibration_data+0xb8>
	}

	return false;
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af04      	add	r7, sp, #16
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	70fb      	strb	r3, [r7, #3]
 8000d24:	4613      	mov	r3, r2
 8000d26:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	89f9      	ldrh	r1, [r7, #14]
 8000d3a:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d3e:	9302      	str	r3, [sp, #8]
 8000d40:	2301      	movs	r3, #1
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	1cbb      	adds	r3, r7, #2
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	f001 fe15 	bl	8002978 <HAL_I2C_Mem_Write>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d101      	bne.n	8000d58 <write_register8+0x40>
		return false;
 8000d54:	2300      	movs	r3, #0
 8000d56:	e000      	b.n	8000d5a <write_register8+0x42>
	else
		return true;
 8000d58:	2301      	movs	r3, #1
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b084      	sub	sp, #16
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000d70:	2b76      	cmp	r3, #118	; 0x76
 8000d72:	d005      	beq.n	8000d80 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000d78:	2b77      	cmp	r3, #119	; 0x77
 8000d7a:	d001      	beq.n	8000d80 <bmp280_init+0x1e>

		return false;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e099      	b.n	8000eb4 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000d86:	2301      	movs	r3, #1
 8000d88:	21d0      	movs	r1, #208	; 0xd0
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff feba 	bl	8000b04 <read_data>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <bmp280_init+0x38>
		return false;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e08c      	b.n	8000eb4 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000da0:	2b58      	cmp	r3, #88	; 0x58
 8000da2:	d006      	beq.n	8000db2 <bmp280_init+0x50>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000daa:	2b60      	cmp	r3, #96	; 0x60
 8000dac:	d001      	beq.n	8000db2 <bmp280_init+0x50>

		return false;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e080      	b.n	8000eb4 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8000db2:	22b6      	movs	r2, #182	; 0xb6
 8000db4:	21e0      	movs	r1, #224	; 0xe0
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffae 	bl	8000d18 <write_register8>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <bmp280_init+0x64>
		return false;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e076      	b.n	8000eb4 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8000dc6:	f107 020c 	add.w	r2, r7, #12
 8000dca:	2301      	movs	r3, #1
 8000dcc:	21f3      	movs	r1, #243	; 0xf3
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff fe98 	bl	8000b04 <read_data>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1f5      	bne.n	8000dc6 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8000dda:	7b3b      	ldrb	r3, [r7, #12]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1f0      	bne.n	8000dc6 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff feb5 	bl	8000b54 <read_calibration_data>
 8000dea:	4603      	mov	r3, r0
 8000dec:	f083 0301 	eor.w	r3, r3, #1
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d100      	bne.n	8000df8 <bmp280_init+0x96>
 8000df6:	e001      	b.n	8000dfc <bmp280_init+0x9a>
		return false;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	e05b      	b.n	8000eb4 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000e02:	2b60      	cmp	r3, #96	; 0x60
 8000e04:	d10a      	bne.n	8000e1c <bmp280_init+0xba>
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ff26 	bl	8000c58 <read_hum_calibration_data>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	f083 0301 	eor.w	r3, r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <bmp280_init+0xba>
		return false;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e04b      	b.n	8000eb4 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	795b      	ldrb	r3, [r3, #5]
 8000e20:	015b      	lsls	r3, r3, #5
 8000e22:	b25a      	sxtb	r2, r3
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	785b      	ldrb	r3, [r3, #1]
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	461a      	mov	r2, r3
 8000e36:	21f5      	movs	r1, #245	; 0xf5
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ff6d 	bl	8000d18 <write_register8>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <bmp280_init+0xe6>
		return false;
 8000e44:	2300      	movs	r3, #0
 8000e46:	e035      	b.n	8000eb4 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d102      	bne.n	8000e56 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	78db      	ldrb	r3, [r3, #3]
 8000e5a:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8000e5c:	b25a      	sxtb	r2, r3
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	789b      	ldrb	r3, [r3, #2]
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	b25b      	sxtb	r3, r3
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b25a      	sxtb	r2, r3
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b25b      	sxtb	r3, r3
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000e74:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000e7c:	2b60      	cmp	r3, #96	; 0x60
 8000e7e:	d10d      	bne.n	8000e9c <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	791b      	ldrb	r3, [r3, #4]
 8000e84:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8000e86:	7b7b      	ldrb	r3, [r7, #13]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	21f2      	movs	r1, #242	; 0xf2
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff ff43 	bl	8000d18 <write_register8>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <bmp280_init+0x13a>
			return false;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	e00b      	b.n	8000eb4 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000e9c:	7bbb      	ldrb	r3, [r7, #14]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	21f4      	movs	r1, #244	; 0xf4
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ff38 	bl	8000d18 <write_register8>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <bmp280_init+0x150>
		return false;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e000      	b.n	8000eb4 <bmp280_init+0x152>
	}

	return true;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	b087      	sub	sp, #28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	10da      	asrs	r2, r3, #3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000eda:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000ede:	12db      	asrs	r3, r3, #11
 8000ee0:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	111b      	asrs	r3, r3, #4
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	8812      	ldrh	r2, [r2, #0]
 8000eea:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	1112      	asrs	r2, r2, #4
 8000ef0:	68f9      	ldr	r1, [r7, #12]
 8000ef2:	8809      	ldrh	r1, [r1, #0]
 8000ef4:	1a52      	subs	r2, r2, r1
 8000ef6:	fb02 f303 	mul.w	r3, r2, r3
 8000efa:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000f02:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000f06:	139b      	asrs	r3, r3, #14
 8000f08:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	441a      	add	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	3380      	adds	r3, #128	; 0x80
 8000f20:	121b      	asrs	r3, r3, #8
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	371c      	adds	r7, #28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000f2e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f32:	b0cc      	sub	sp, #304	; 0x130
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8000f3a:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8000f3e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f46:	17da      	asrs	r2, r3, #31
 8000f48:	461c      	mov	r4, r3
 8000f4a:	4615      	mov	r5, r2
 8000f4c:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8000f50:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 8000f54:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000f58:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000f5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f60:	fb03 f102 	mul.w	r1, r3, r2
 8000f64:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000f68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f6c:	fb02 f303 	mul.w	r3, r2, r3
 8000f70:	18ca      	adds	r2, r1, r3
 8000f72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f76:	fba3 8903 	umull	r8, r9, r3, r3
 8000f7a:	eb02 0309 	add.w	r3, r2, r9
 8000f7e:	4699      	mov	r9, r3
 8000f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f84:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	17da      	asrs	r2, r3, #31
 8000f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000f90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000f94:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8000f98:	4603      	mov	r3, r0
 8000f9a:	fb03 f209 	mul.w	r2, r3, r9
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	fb08 f303 	mul.w	r3, r8, r3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	fba8 1202 	umull	r1, r2, r8, r2
 8000fac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8000fb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000fba:	4413      	add	r3, r2
 8000fbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000fc0:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8000fc4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8000fc8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8000fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000fd0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	17da      	asrs	r2, r3, #31
 8000fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000fdc:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000fe0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000fe4:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8000fe8:	462a      	mov	r2, r5
 8000fea:	fb02 f203 	mul.w	r2, r2, r3
 8000fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000ff2:	4621      	mov	r1, r4
 8000ff4:	fb01 f303 	mul.w	r3, r1, r3
 8000ff8:	441a      	add	r2, r3
 8000ffa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000ffe:	4621      	mov	r1, r4
 8001000:	fba3 1301 	umull	r1, r3, r3, r1
 8001004:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001008:	460b      	mov	r3, r1
 800100a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800100e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001012:	18d3      	adds	r3, r2, r3
 8001014:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001018:	f04f 0000 	mov.w	r0, #0
 800101c:	f04f 0100 	mov.w	r1, #0
 8001020:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001024:	462b      	mov	r3, r5
 8001026:	0459      	lsls	r1, r3, #17
 8001028:	4623      	mov	r3, r4
 800102a:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800102e:	4623      	mov	r3, r4
 8001030:	0458      	lsls	r0, r3, #17
 8001032:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001036:	1814      	adds	r4, r2, r0
 8001038:	643c      	str	r4, [r7, #64]	; 0x40
 800103a:	414b      	adcs	r3, r1
 800103c:	647b      	str	r3, [r7, #68]	; 0x44
 800103e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001042:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800104a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800104e:	b21b      	sxth	r3, r3
 8001050:	17da      	asrs	r2, r3, #31
 8001052:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001056:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	f04f 0100 	mov.w	r1, #0
 8001062:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001066:	00d9      	lsls	r1, r3, #3
 8001068:	2000      	movs	r0, #0
 800106a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800106e:	1814      	adds	r4, r2, r0
 8001070:	63bc      	str	r4, [r7, #56]	; 0x38
 8001072:	414b      	adcs	r3, r1
 8001074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001076:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800107a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800107e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001082:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001086:	fb03 f102 	mul.w	r1, r3, r2
 800108a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800108e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001092:	fb02 f303 	mul.w	r3, r2, r3
 8001096:	18ca      	adds	r2, r1, r3
 8001098:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800109c:	fba3 1303 	umull	r1, r3, r3, r3
 80010a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80010a4:	460b      	mov	r3, r1
 80010a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80010aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80010ae:	18d3      	adds	r3, r2, r3
 80010b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80010b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80010b8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	17da      	asrs	r2, r3, #31
 80010c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80010c4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80010c8:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80010cc:	462b      	mov	r3, r5
 80010ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80010d2:	4642      	mov	r2, r8
 80010d4:	fb02 f203 	mul.w	r2, r2, r3
 80010d8:	464b      	mov	r3, r9
 80010da:	4621      	mov	r1, r4
 80010dc:	fb01 f303 	mul.w	r3, r1, r3
 80010e0:	4413      	add	r3, r2
 80010e2:	4622      	mov	r2, r4
 80010e4:	4641      	mov	r1, r8
 80010e6:	fba2 1201 	umull	r1, r2, r2, r1
 80010ea:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80010ee:	460a      	mov	r2, r1
 80010f0:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80010f4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80010f8:	4413      	add	r3, r2
 80010fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80010fe:	f04f 0000 	mov.w	r0, #0
 8001102:	f04f 0100 	mov.w	r1, #0
 8001106:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800110a:	4623      	mov	r3, r4
 800110c:	0a18      	lsrs	r0, r3, #8
 800110e:	462b      	mov	r3, r5
 8001110:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001114:	462b      	mov	r3, r5
 8001116:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800111c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001120:	b21b      	sxth	r3, r3
 8001122:	17da      	asrs	r2, r3, #31
 8001124:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001128:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800112c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001130:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001134:	464a      	mov	r2, r9
 8001136:	fb02 f203 	mul.w	r2, r2, r3
 800113a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800113e:	4644      	mov	r4, r8
 8001140:	fb04 f303 	mul.w	r3, r4, r3
 8001144:	441a      	add	r2, r3
 8001146:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800114a:	4644      	mov	r4, r8
 800114c:	fba3 4304 	umull	r4, r3, r3, r4
 8001150:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001154:	4623      	mov	r3, r4
 8001156:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800115a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800115e:	18d3      	adds	r3, r2, r3
 8001160:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	f04f 0300 	mov.w	r3, #0
 800116c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001170:	464c      	mov	r4, r9
 8001172:	0323      	lsls	r3, r4, #12
 8001174:	4644      	mov	r4, r8
 8001176:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800117a:	4644      	mov	r4, r8
 800117c:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800117e:	1884      	adds	r4, r0, r2
 8001180:	633c      	str	r4, [r7, #48]	; 0x30
 8001182:	eb41 0303 	adc.w	r3, r1, r3
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
 8001188:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800118c:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001190:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001194:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001198:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800119c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80011a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011a4:	88db      	ldrh	r3, [r3, #6]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80011ae:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80011b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80011b6:	462b      	mov	r3, r5
 80011b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80011bc:	4642      	mov	r2, r8
 80011be:	fb02 f203 	mul.w	r2, r2, r3
 80011c2:	464b      	mov	r3, r9
 80011c4:	4621      	mov	r1, r4
 80011c6:	fb01 f303 	mul.w	r3, r1, r3
 80011ca:	4413      	add	r3, r2
 80011cc:	4622      	mov	r2, r4
 80011ce:	4641      	mov	r1, r8
 80011d0:	fba2 1201 	umull	r1, r2, r2, r1
 80011d4:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80011d8:	460a      	mov	r2, r1
 80011da:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80011de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80011e2:	4413      	add	r3, r2
 80011e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80011f4:	4629      	mov	r1, r5
 80011f6:	104a      	asrs	r2, r1, #1
 80011f8:	4629      	mov	r1, r5
 80011fa:	17cb      	asrs	r3, r1, #31
 80011fc:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001200:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001204:	4313      	orrs	r3, r2
 8001206:	d101      	bne.n	800120c <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001208:	2300      	movs	r3, #0
 800120a:	e148      	b.n	800149e <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 800120c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001210:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001214:	17da      	asrs	r2, r3, #31
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
 8001218:	62fa      	str	r2, [r7, #44]	; 0x2c
 800121a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800121e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001222:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001226:	105b      	asrs	r3, r3, #1
 8001228:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800122c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001230:	07db      	lsls	r3, r3, #31
 8001232:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001236:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800123a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800123e:	4621      	mov	r1, r4
 8001240:	1a89      	subs	r1, r1, r2
 8001242:	67b9      	str	r1, [r7, #120]	; 0x78
 8001244:	4629      	mov	r1, r5
 8001246:	eb61 0303 	sbc.w	r3, r1, r3
 800124a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800124c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001250:	4622      	mov	r2, r4
 8001252:	462b      	mov	r3, r5
 8001254:	1891      	adds	r1, r2, r2
 8001256:	6239      	str	r1, [r7, #32]
 8001258:	415b      	adcs	r3, r3
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
 800125c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001260:	4621      	mov	r1, r4
 8001262:	1851      	adds	r1, r2, r1
 8001264:	61b9      	str	r1, [r7, #24]
 8001266:	4629      	mov	r1, r5
 8001268:	414b      	adcs	r3, r1
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001278:	4649      	mov	r1, r9
 800127a:	018b      	lsls	r3, r1, #6
 800127c:	4641      	mov	r1, r8
 800127e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001282:	4641      	mov	r1, r8
 8001284:	018a      	lsls	r2, r1, #6
 8001286:	4641      	mov	r1, r8
 8001288:	1889      	adds	r1, r1, r2
 800128a:	6139      	str	r1, [r7, #16]
 800128c:	4649      	mov	r1, r9
 800128e:	eb43 0101 	adc.w	r1, r3, r1
 8001292:	6179      	str	r1, [r7, #20]
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80012a0:	4649      	mov	r1, r9
 80012a2:	008b      	lsls	r3, r1, #2
 80012a4:	4641      	mov	r1, r8
 80012a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80012aa:	4641      	mov	r1, r8
 80012ac:	008a      	lsls	r2, r1, #2
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	4603      	mov	r3, r0
 80012b4:	4622      	mov	r2, r4
 80012b6:	189b      	adds	r3, r3, r2
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	460b      	mov	r3, r1
 80012bc:	462a      	mov	r2, r5
 80012be:	eb42 0303 	adc.w	r3, r2, r3
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	f04f 0300 	mov.w	r3, #0
 80012cc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80012d0:	4649      	mov	r1, r9
 80012d2:	008b      	lsls	r3, r1, #2
 80012d4:	4641      	mov	r1, r8
 80012d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80012da:	4641      	mov	r1, r8
 80012dc:	008a      	lsls	r2, r1, #2
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	4603      	mov	r3, r0
 80012e4:	4622      	mov	r2, r4
 80012e6:	189b      	adds	r3, r3, r2
 80012e8:	673b      	str	r3, [r7, #112]	; 0x70
 80012ea:	462b      	mov	r3, r5
 80012ec:	460a      	mov	r2, r1
 80012ee:	eb42 0303 	adc.w	r3, r2, r3
 80012f2:	677b      	str	r3, [r7, #116]	; 0x74
 80012f4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80012f8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80012fc:	f7fe ff68 	bl	80001d0 <__aeabi_ldivmod>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800130c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001310:	b21b      	sxth	r3, r3
 8001312:	17da      	asrs	r2, r3, #31
 8001314:	66bb      	str	r3, [r7, #104]	; 0x68
 8001316:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001318:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800131c:	f04f 0000 	mov.w	r0, #0
 8001320:	f04f 0100 	mov.w	r1, #0
 8001324:	0b50      	lsrs	r0, r2, #13
 8001326:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800132a:	1359      	asrs	r1, r3, #13
 800132c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001330:	462b      	mov	r3, r5
 8001332:	fb00 f203 	mul.w	r2, r0, r3
 8001336:	4623      	mov	r3, r4
 8001338:	fb03 f301 	mul.w	r3, r3, r1
 800133c:	4413      	add	r3, r2
 800133e:	4622      	mov	r2, r4
 8001340:	fba2 1200 	umull	r1, r2, r2, r0
 8001344:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001348:	460a      	mov	r2, r1
 800134a:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800134e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001352:	4413      	add	r3, r2
 8001354:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001358:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800135c:	f04f 0000 	mov.w	r0, #0
 8001360:	f04f 0100 	mov.w	r1, #0
 8001364:	0b50      	lsrs	r0, r2, #13
 8001366:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800136a:	1359      	asrs	r1, r3, #13
 800136c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001370:	462b      	mov	r3, r5
 8001372:	fb00 f203 	mul.w	r2, r0, r3
 8001376:	4623      	mov	r3, r4
 8001378:	fb03 f301 	mul.w	r3, r3, r1
 800137c:	4413      	add	r3, r2
 800137e:	4622      	mov	r2, r4
 8001380:	fba2 1200 	umull	r1, r2, r2, r0
 8001384:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001388:	460a      	mov	r2, r1
 800138a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800138e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001392:	4413      	add	r3, r2
 8001394:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	f04f 0300 	mov.w	r3, #0
 80013a0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80013a4:	4621      	mov	r1, r4
 80013a6:	0e4a      	lsrs	r2, r1, #25
 80013a8:	4629      	mov	r1, r5
 80013aa:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80013ae:	4629      	mov	r1, r5
 80013b0:	164b      	asrs	r3, r1, #25
 80013b2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80013b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013ba:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80013be:	b21b      	sxth	r3, r3
 80013c0:	17da      	asrs	r2, r3, #31
 80013c2:	663b      	str	r3, [r7, #96]	; 0x60
 80013c4:	667a      	str	r2, [r7, #100]	; 0x64
 80013c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80013ca:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80013ce:	462a      	mov	r2, r5
 80013d0:	fb02 f203 	mul.w	r2, r2, r3
 80013d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80013d8:	4621      	mov	r1, r4
 80013da:	fb01 f303 	mul.w	r3, r1, r3
 80013de:	4413      	add	r3, r2
 80013e0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013e4:	4621      	mov	r1, r4
 80013e6:	fba2 1201 	umull	r1, r2, r2, r1
 80013ea:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80013ee:	460a      	mov	r2, r1
 80013f0:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80013f4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80013f8:	4413      	add	r3, r2
 80013fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800140a:	4621      	mov	r1, r4
 800140c:	0cca      	lsrs	r2, r1, #19
 800140e:	4629      	mov	r1, r5
 8001410:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001414:	4629      	mov	r1, r5
 8001416:	14cb      	asrs	r3, r1, #19
 8001418:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800141c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001420:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001424:	1884      	adds	r4, r0, r2
 8001426:	65bc      	str	r4, [r7, #88]	; 0x58
 8001428:	eb41 0303 	adc.w	r3, r1, r3
 800142c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800142e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001432:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001436:	4621      	mov	r1, r4
 8001438:	1889      	adds	r1, r1, r2
 800143a:	6539      	str	r1, [r7, #80]	; 0x50
 800143c:	4629      	mov	r1, r5
 800143e:	eb43 0101 	adc.w	r1, r3, r1
 8001442:	6579      	str	r1, [r7, #84]	; 0x54
 8001444:	f04f 0000 	mov.w	r0, #0
 8001448:	f04f 0100 	mov.w	r1, #0
 800144c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001450:	4623      	mov	r3, r4
 8001452:	0a18      	lsrs	r0, r3, #8
 8001454:	462b      	mov	r3, r5
 8001456:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800145a:	462b      	mov	r3, r5
 800145c:	1219      	asrs	r1, r3, #8
 800145e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001462:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001466:	b21b      	sxth	r3, r3
 8001468:	17da      	asrs	r2, r3, #31
 800146a:	64bb      	str	r3, [r7, #72]	; 0x48
 800146c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800147a:	464c      	mov	r4, r9
 800147c:	0123      	lsls	r3, r4, #4
 800147e:	4644      	mov	r4, r8
 8001480:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001484:	4644      	mov	r4, r8
 8001486:	0122      	lsls	r2, r4, #4
 8001488:	1884      	adds	r4, r0, r2
 800148a:	603c      	str	r4, [r7, #0]
 800148c:	eb41 0303 	adc.w	r3, r1, r3
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001496:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 800149a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 800149e:	4618      	mov	r0, r3
 80014a0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80014a4:	46bd      	mov	sp, r7
 80014a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080014aa <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80014aa:	b480      	push	{r7}
 80014ac:	b087      	sub	sp, #28
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80014bc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	039a      	lsls	r2, r3, #14
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80014c8:	051b      	lsls	r3, r3, #20
 80014ca:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80014d2:	4619      	mov	r1, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fb01 f303 	mul.w	r3, r1, r3
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80014e0:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80014e8:	4611      	mov	r1, r2
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	fb01 f202 	mul.w	r2, r1, r2
 80014f0:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80014f2:	68f9      	ldr	r1, [r7, #12]
 80014f4:	7f09      	ldrb	r1, [r1, #28]
 80014f6:	4608      	mov	r0, r1
 80014f8:	6979      	ldr	r1, [r7, #20]
 80014fa:	fb00 f101 	mul.w	r1, r0, r1
 80014fe:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001500:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001504:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001508:	1292      	asrs	r2, r2, #10
 800150a:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 800150e:	68f9      	ldr	r1, [r7, #12]
 8001510:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001514:	fb01 f202 	mul.w	r2, r1, r2
 8001518:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800151c:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	13db      	asrs	r3, r3, #15
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	13d2      	asrs	r2, r2, #15
 800152c:	fb02 f303 	mul.w	r3, r2, r3
 8001530:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	7e12      	ldrb	r2, [r2, #24]
 8001536:	fb02 f303 	mul.w	r3, r2, r3
 800153a:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001548:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001550:	bfa8      	it	ge
 8001552:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001556:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	131b      	asrs	r3, r3, #12
}
 800155c:	4618      	mov	r0, r3
 800155e:	371c      	adds	r7, #28
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b08c      	sub	sp, #48	; 0x30
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800157c:	2b60      	cmp	r3, #96	; 0x60
 800157e:	d007      	beq.n	8001590 <bmp280_read_fixed+0x28>
		if (humidity)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d002      	beq.n	800158c <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 800158c:	2300      	movs	r3, #0
 800158e:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <bmp280_read_fixed+0x32>
 8001596:	2308      	movs	r3, #8
 8001598:	e000      	b.n	800159c <bmp280_read_fixed+0x34>
 800159a:	2306      	movs	r3, #6
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f107 0218 	add.w	r2, r7, #24
 80015a6:	21f7      	movs	r1, #247	; 0xf7
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f7ff faab 	bl	8000b04 <read_data>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <bmp280_read_fixed+0x50>
		return false;
 80015b4:	2300      	movs	r3, #0
 80015b6:	e038      	b.n	800162a <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80015b8:	7e3b      	ldrb	r3, [r7, #24]
 80015ba:	031a      	lsls	r2, r3, #12
 80015bc:	7e7b      	ldrb	r3, [r7, #25]
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	4313      	orrs	r3, r2
 80015c2:	7eba      	ldrb	r2, [r7, #26]
 80015c4:	0912      	lsrs	r2, r2, #4
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	4313      	orrs	r3, r2
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80015cc:	7efb      	ldrb	r3, [r7, #27]
 80015ce:	031a      	lsls	r2, r3, #12
 80015d0:	7f3b      	ldrb	r3, [r7, #28]
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	4313      	orrs	r3, r2
 80015d6:	7f7a      	ldrb	r2, [r7, #29]
 80015d8:	0912      	lsrs	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	4313      	orrs	r3, r2
 80015de:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	461a      	mov	r2, r3
 80015e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f7ff fc67 	bl	8000ebc <compensate_temperature>
 80015ee:	4602      	mov	r2, r0
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	461a      	mov	r2, r3
 80015f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f7ff fc97 	bl	8000f2e <compensate_pressure>
 8001600:	4602      	mov	r2, r0
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00d      	beq.n	8001628 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 800160c:	7fbb      	ldrb	r3, [r7, #30]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	7ffa      	ldrb	r2, [r7, #31]
 8001612:	4313      	orrs	r3, r2
 8001614:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	461a      	mov	r2, r3
 800161a:	6a39      	ldr	r1, [r7, #32]
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7ff ff44 	bl	80014aa <compensate_humidity>
 8001622:	4602      	mov	r2, r0
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001628:	2301      	movs	r3, #1
}
 800162a:	4618      	mov	r0, r3
 800162c:	3730      	adds	r7, #48	; 0x30
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
 8001640:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <bmp280_read_float+0x1a>
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	e000      	b.n	8001650 <bmp280_read_float+0x1c>
 800164e:	2300      	movs	r3, #0
 8001650:	f107 0218 	add.w	r2, r7, #24
 8001654:	f107 011c 	add.w	r1, r7, #28
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f7ff ff85 	bl	8001568 <bmp280_read_fixed>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d028      	beq.n	80016b6 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	ee07 3a90 	vmov	s15, r3
 800166a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800166e:	eddf 6a14 	vldr	s13, [pc, #80]	; 80016c0 <bmp280_read_float+0x8c>
 8001672:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	ee07 3a90 	vmov	s15, r3
 8001682:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001686:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80016c4 <bmp280_read_float+0x90>
 800168a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00b      	beq.n	80016b2 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016a4:	eddf 6a08 	vldr	s13, [pc, #32]	; 80016c8 <bmp280_read_float+0x94>
 80016a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <bmp280_read_float+0x84>
	}

	return false;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3720      	adds	r7, #32
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	42c80000 	.word	0x42c80000
 80016c4:	43800000 	.word	0x43800000
 80016c8:	44800000 	.word	0x44800000

080016cc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15 (JTDI)   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e2:	4b3a      	ldr	r3, [pc, #232]	; (80017cc <MX_GPIO_Init+0x100>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	4a39      	ldr	r2, [pc, #228]	; (80017cc <MX_GPIO_Init+0x100>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ee:	4b37      	ldr	r3, [pc, #220]	; (80017cc <MX_GPIO_Init+0x100>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b34      	ldr	r3, [pc, #208]	; (80017cc <MX_GPIO_Init+0x100>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	4a33      	ldr	r2, [pc, #204]	; (80017cc <MX_GPIO_Init+0x100>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001706:	4b31      	ldr	r3, [pc, #196]	; (80017cc <MX_GPIO_Init+0x100>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <MX_GPIO_Init+0x100>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	4a2d      	ldr	r2, [pc, #180]	; (80017cc <MX_GPIO_Init+0x100>)
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171e:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <MX_GPIO_Init+0x100>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 800172a:	2201      	movs	r2, #1
 800172c:	2110      	movs	r1, #16
 800172e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001732:	f001 f879 	bl	8002828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	2108      	movs	r1, #8
 800173a:	4825      	ldr	r0, [pc, #148]	; (80017d0 <MX_GPIO_Init+0x104>)
 800173c:	f001 f874 	bl	8002828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LoRa_Reset_GPIO_Port, LoRa_Reset_Pin, GPIO_PIN_SET);
 8001740:	2201      	movs	r2, #1
 8001742:	2120      	movs	r1, #32
 8001744:	4822      	ldr	r0, [pc, #136]	; (80017d0 <MX_GPIO_Init+0x104>)
 8001746:	f001 f86f 	bl	8002828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LoRa_Interrupt_Pin;
 800174a:	2308      	movs	r3, #8
 800174c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800174e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LoRa_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	4619      	mov	r1, r3
 800175e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001762:	f000 fef7 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LoRa_NSS_Pin;
 8001766:	2310      	movs	r3, #16
 8001768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LoRa_NSS_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	4619      	mov	r1, r3
 800177c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001780:	f000 fee8 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001784:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001788:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001796:	2303      	movs	r3, #3
 8001798:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	4619      	mov	r1, r3
 80017a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a4:	f000 fed6 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LoRa_Reset_Pin;
 80017a8:	2328      	movs	r3, #40	; 0x28
 80017aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	4619      	mov	r1, r3
 80017be:	4804      	ldr	r0, [pc, #16]	; (80017d0 <MX_GPIO_Init+0x104>)
 80017c0:	f000 fec8 	bl	8002554 <HAL_GPIO_Init>

}
 80017c4:	bf00      	nop
 80017c6:	3720      	adds	r7, #32
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000
 80017d0:	48000400 	.word	0x48000400

080017d4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <MX_I2C1_Init+0x74>)
 80017da:	4a1c      	ldr	r2, [pc, #112]	; (800184c <MX_I2C1_Init+0x78>)
 80017dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00400F35;
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <MX_I2C1_Init+0x74>)
 80017e0:	4a1b      	ldr	r2, [pc, #108]	; (8001850 <MX_I2C1_Init+0x7c>)
 80017e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <MX_I2C1_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <MX_I2C1_Init+0x74>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f0:	4b15      	ldr	r3, [pc, #84]	; (8001848 <MX_I2C1_Init+0x74>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <MX_I2C1_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <MX_I2C1_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_I2C1_Init+0x74>)
 8001804:	2200      	movs	r2, #0
 8001806:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <MX_I2C1_Init+0x74>)
 800180a:	2200      	movs	r2, #0
 800180c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800180e:	480e      	ldr	r0, [pc, #56]	; (8001848 <MX_I2C1_Init+0x74>)
 8001810:	f001 f822 	bl	8002858 <HAL_I2C_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800181a:	f000 f9c1 	bl	8001ba0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800181e:	2100      	movs	r1, #0
 8001820:	4809      	ldr	r0, [pc, #36]	; (8001848 <MX_I2C1_Init+0x74>)
 8001822:	f001 fe85 	bl	8003530 <HAL_I2CEx_ConfigAnalogFilter>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800182c:	f000 f9b8 	bl	8001ba0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001830:	2100      	movs	r1, #0
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <MX_I2C1_Init+0x74>)
 8001834:	f001 fec7 	bl	80035c6 <HAL_I2CEx_ConfigDigitalFilter>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800183e:	f000 f9af 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	2000007c 	.word	0x2000007c
 800184c:	40005400 	.word	0x40005400
 8001850:	00400f35 	.word	0x00400f35

08001854 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <MX_I2C3_Init+0x74>)
 800185a:	4a1c      	ldr	r2, [pc, #112]	; (80018cc <MX_I2C3_Init+0x78>)
 800185c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <MX_I2C3_Init+0x74>)
 8001860:	4a1b      	ldr	r2, [pc, #108]	; (80018d0 <MX_I2C3_Init+0x7c>)
 8001862:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <MX_I2C3_Init+0x74>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <MX_I2C3_Init+0x74>)
 800186c:	2201      	movs	r2, #1
 800186e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <MX_I2C3_Init+0x74>)
 8001872:	2200      	movs	r2, #0
 8001874:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <MX_I2C3_Init+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <MX_I2C3_Init+0x74>)
 800187e:	2200      	movs	r2, #0
 8001880:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_I2C3_Init+0x74>)
 8001884:	2200      	movs	r2, #0
 8001886:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <MX_I2C3_Init+0x74>)
 800188a:	2200      	movs	r2, #0
 800188c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800188e:	480e      	ldr	r0, [pc, #56]	; (80018c8 <MX_I2C3_Init+0x74>)
 8001890:	f000 ffe2 	bl	8002858 <HAL_I2C_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800189a:	f000 f981 	bl	8001ba0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800189e:	2100      	movs	r1, #0
 80018a0:	4809      	ldr	r0, [pc, #36]	; (80018c8 <MX_I2C3_Init+0x74>)
 80018a2:	f001 fe45 	bl	8003530 <HAL_I2CEx_ConfigAnalogFilter>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80018ac:	f000 f978 	bl	8001ba0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80018b0:	2100      	movs	r1, #0
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_I2C3_Init+0x74>)
 80018b4:	f001 fe87 	bl	80035c6 <HAL_I2CEx_ConfigDigitalFilter>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80018be:	f000 f96f 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200000d0 	.word	0x200000d0
 80018cc:	40005c00 	.word	0x40005c00
 80018d0:	00707cbb 	.word	0x00707cbb

080018d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b0a2      	sub	sp, #136	; 0x88
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018ec:	f107 0320 	add.w	r3, r7, #32
 80018f0:	2254      	movs	r2, #84	; 0x54
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f004 ff27 	bl	8006748 <memset>
  if(i2cHandle->Instance==I2C1)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a4e      	ldr	r2, [pc, #312]	; (8001a38 <HAL_I2C_MspInit+0x164>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d138      	bne.n	8001976 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001904:	2340      	movs	r3, #64	; 0x40
 8001906:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001908:	2300      	movs	r3, #0
 800190a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190c:	f107 0320 	add.w	r3, r7, #32
 8001910:	4618      	mov	r0, r3
 8001912:	f002 fd09 	bl	8004328 <HAL_RCCEx_PeriphCLKConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800191c:	f000 f940 	bl	8001ba0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001920:	4b46      	ldr	r3, [pc, #280]	; (8001a3c <HAL_I2C_MspInit+0x168>)
 8001922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001924:	4a45      	ldr	r2, [pc, #276]	; (8001a3c <HAL_I2C_MspInit+0x168>)
 8001926:	f043 0302 	orr.w	r3, r3, #2
 800192a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192c:	4b43      	ldr	r3, [pc, #268]	; (8001a3c <HAL_I2C_MspInit+0x168>)
 800192e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	61fb      	str	r3, [r7, #28]
 8001936:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001938:	23c0      	movs	r3, #192	; 0xc0
 800193a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800193c:	2312      	movs	r3, #18
 800193e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800194a:	2304      	movs	r3, #4
 800194c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001954:	4619      	mov	r1, r3
 8001956:	483a      	ldr	r0, [pc, #232]	; (8001a40 <HAL_I2C_MspInit+0x16c>)
 8001958:	f000 fdfc 	bl	8002554 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800195c:	4b37      	ldr	r3, [pc, #220]	; (8001a3c <HAL_I2C_MspInit+0x168>)
 800195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001960:	4a36      	ldr	r2, [pc, #216]	; (8001a3c <HAL_I2C_MspInit+0x168>)
 8001962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001966:	6593      	str	r3, [r2, #88]	; 0x58
 8001968:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <HAL_I2C_MspInit+0x168>)
 800196a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001970:	61bb      	str	r3, [r7, #24]
 8001972:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001974:	e05c      	b.n	8001a30 <HAL_I2C_MspInit+0x15c>
  else if(i2cHandle->Instance==I2C3)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a32      	ldr	r2, [pc, #200]	; (8001a44 <HAL_I2C_MspInit+0x170>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d157      	bne.n	8001a30 <HAL_I2C_MspInit+0x15c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001984:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001986:	2300      	movs	r3, #0
 8001988:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800198a:	f107 0320 	add.w	r3, r7, #32
 800198e:	4618      	mov	r0, r3
 8001990:	f002 fcca 	bl	8004328 <HAL_RCCEx_PeriphCLKConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_I2C_MspInit+0xca>
      Error_Handler();
 800199a:	f000 f901 	bl	8001ba0 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <HAL_I2C_MspInit+0x168>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	4a26      	ldr	r2, [pc, #152]	; (8001a3c <HAL_I2C_MspInit+0x168>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019aa:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <HAL_I2C_MspInit+0x168>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <HAL_I2C_MspInit+0x168>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	4a20      	ldr	r2, [pc, #128]	; (8001a3c <HAL_I2C_MspInit+0x168>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c2:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <HAL_I2C_MspInit+0x168>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d2:	2312      	movs	r3, #18
 80019d4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019e0:	2304      	movs	r3, #4
 80019e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019ea:	4619      	mov	r1, r3
 80019ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f0:	f000 fdb0 	bl	8002554 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019f4:	2310      	movs	r3, #16
 80019f6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f8:	2312      	movs	r3, #18
 80019fa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a00:	2303      	movs	r3, #3
 8001a02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a06:	2304      	movs	r3, #4
 8001a08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a10:	4619      	mov	r1, r3
 8001a12:	480b      	ldr	r0, [pc, #44]	; (8001a40 <HAL_I2C_MspInit+0x16c>)
 8001a14:	f000 fd9e 	bl	8002554 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_I2C_MspInit+0x168>)
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1c:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <HAL_I2C_MspInit+0x168>)
 8001a1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a22:	6593      	str	r3, [r2, #88]	; 0x58
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <HAL_I2C_MspInit+0x168>)
 8001a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	bf00      	nop
 8001a32:	3788      	adds	r7, #136	; 0x88
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40005400 	.word	0x40005400
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	48000400 	.word	0x48000400
 8001a44:	40005c00 	.word	0x40005c00

08001a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a4e:	f000 fc02 	bl	8002256 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a52:	f000 f853 	bl	8001afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a56:	f7ff fe39 	bl	80016cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a5a:	f7ff febb 	bl	80017d4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001a5e:	f000 faa7 	bl	8001fb0 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001a62:	f000 f93b 	bl	8001cdc <MX_SPI1_Init>
  MX_I2C3_Init();
 8001a66:	f7ff fef5 	bl	8001854 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  Servo_Init();
 8001a6a:	f000 f8b1 	bl	8001bd0 <Servo_Init>

  Check_Peripherals();
 8001a6e:	f000 fa05 	bl	8001e7c <Check_Peripherals>

  uint8_t res = lora_init(&LoRa, &hspi1, LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, LoRa_Reset_GPIO_Port, LoRa_Reset_Pin, LORA_BASE_FREQUENCY_EU);
 8001a72:	a320      	add	r3, pc, #128	; (adr r3, 8001af4 <main+0xac>)
 8001a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a7c:	2320      	movs	r3, #32
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <main+0x88>)
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2310      	movs	r3, #16
 8001a86:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a8a:	4912      	ldr	r1, [pc, #72]	; (8001ad4 <main+0x8c>)
 8001a8c:	4812      	ldr	r0, [pc, #72]	; (8001ad8 <main+0x90>)
 8001a8e:	f7fe ff88 	bl	80009a2 <lora_init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
  bmp280_init_default_params(&bmp280.params);
 8001a96:	4811      	ldr	r0, [pc, #68]	; (8001adc <main+0x94>)
 8001a98:	f7fe ffe9 	bl	8000a6e <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001a9c:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <main+0x98>)
 8001a9e:	2276      	movs	r2, #118	; 0x76
 8001aa0:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c3;
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <main+0x98>)
 8001aa4:	4a0f      	ldr	r2, [pc, #60]	; (8001ae4 <main+0x9c>)
 8001aa6:	629a      	str	r2, [r3, #40]	; 0x28
  bool bme280p = bmp280.id == BME280_CHIP_ID;
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <main+0x98>)
 8001aaa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001aae:	2b60      	cmp	r3, #96	; 0x60
 8001ab0:	bf0c      	ite	eq
 8001ab2:	2301      	moveq	r3, #1
 8001ab4:	2300      	movne	r3, #0
 8001ab6:	71bb      	strb	r3, [r7, #6]
  bmp280_init(&bmp280, &bmp280.params);
 8001ab8:	4908      	ldr	r1, [pc, #32]	; (8001adc <main+0x94>)
 8001aba:	4809      	ldr	r0, [pc, #36]	; (8001ae0 <main+0x98>)
 8001abc:	f7ff f951 	bl	8000d62 <bmp280_init>

  //Check_Servos_Manually();
  bmp280_read_float(&bmp280, &bmp280_temperature, &pressure, &humidity);
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <main+0xa0>)
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <main+0xa4>)
 8001ac4:	490a      	ldr	r1, [pc, #40]	; (8001af0 <main+0xa8>)
 8001ac6:	4806      	ldr	r0, [pc, #24]	; (8001ae0 <main+0x98>)
 8001ac8:	f7ff fdb4 	bl	8001634 <bmp280_read_float>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <main+0x84>
 8001ace:	bf00      	nop
 8001ad0:	48000400 	.word	0x48000400
 8001ad4:	20000140 	.word	0x20000140
 8001ad8:	20000028 	.word	0x20000028
 8001adc:	20000074 	.word	0x20000074
 8001ae0:	20000048 	.word	0x20000048
 8001ae4:	200000d0 	.word	0x200000d0
 8001ae8:	2000012c 	.word	0x2000012c
 8001aec:	20000124 	.word	0x20000124
 8001af0:	20000128 	.word	0x20000128
 8001af4:	33bca100 	.word	0x33bca100
 8001af8:	00000000 	.word	0x00000000

08001afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b096      	sub	sp, #88	; 0x58
 8001b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	2244      	movs	r2, #68	; 0x44
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f004 fe1c 	bl	8006748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b10:	463b      	mov	r3, r7
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b22:	f001 fdab 	bl	800367c <HAL_PWREx_ControlVoltageScaling>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b2c:	f000 f838 	bl	8001ba0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b30:	2302      	movs	r3, #2
 8001b32:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b38:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b3a:	2310      	movs	r3, #16
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b42:	2302      	movs	r3, #2
 8001b44:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001b46:	2302      	movs	r3, #2
 8001b48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001b4a:	2308      	movs	r3, #8
 8001b4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b4e:	2307      	movs	r3, #7
 8001b50:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b52:	2302      	movs	r3, #2
 8001b54:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b56:	2302      	movs	r3, #2
 8001b58:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f001 fde2 	bl	8003728 <HAL_RCC_OscConfig>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001b6a:	f000 f819 	bl	8001ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b6e:	230f      	movs	r3, #15
 8001b70:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b72:	2303      	movs	r3, #3
 8001b74:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b82:	463b      	mov	r3, r7
 8001b84:	2101      	movs	r1, #1
 8001b86:	4618      	mov	r0, r3
 8001b88:	f002 f9e2 	bl	8003f50 <HAL_RCC_ClockConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b92:	f000 f805 	bl	8001ba0 <Error_Handler>
  }
}
 8001b96:	bf00      	nop
 8001b98:	3758      	adds	r7, #88	; 0x58
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba4:	b672      	cpsid	i
}
 8001ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2110      	movs	r1, #16
 8001bac:	4807      	ldr	r0, [pc, #28]	; (8001bcc <Error_Handler+0x2c>)
 8001bae:	f000 fe3b 	bl	8002828 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8001bb2:	20c8      	movs	r0, #200	; 0xc8
 8001bb4:	f000 fbc4 	bl	8002340 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2110      	movs	r1, #16
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <Error_Handler+0x2c>)
 8001bbe:	f000 fe33 	bl	8002828 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8001bc2:	20c8      	movs	r0, #200	; 0xc8
 8001bc4:	f000 fbbc 	bl	8002340 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001bc8:	e7ee      	b.n	8001ba8 <Error_Handler+0x8>
 8001bca:	bf00      	nop
 8001bcc:	48000400 	.word	0x48000400

08001bd0 <Servo_Init>:
 * Starting the timer of each channel.
 * Storing Capture Compare Registers in the servo module.
 * Set the servos to their default (0deg) position.
 * All the funtions below require to call this before using them.
 */
void Servo_Init(){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	480f      	ldr	r0, [pc, #60]	; (8001c14 <Servo_Init+0x44>)
 8001bd8:	f003 fe56 	bl	8005888 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001bdc:	2104      	movs	r1, #4
 8001bde:	480d      	ldr	r0, [pc, #52]	; (8001c14 <Servo_Init+0x44>)
 8001be0:	f003 fe52 	bl	8005888 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001be4:	2108      	movs	r1, #8
 8001be6:	480b      	ldr	r0, [pc, #44]	; (8001c14 <Servo_Init+0x44>)
 8001be8:	f003 fe4e 	bl	8005888 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001bec:	210c      	movs	r1, #12
 8001bee:	4809      	ldr	r0, [pc, #36]	; (8001c14 <Servo_Init+0x44>)
 8001bf0:	f003 fe4a 	bl	8005888 <HAL_TIM_PWM_Start>

	servoDutyCycles.Servo1DutyCycle = &TIM1->CCR1;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <Servo_Init+0x48>)
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <Servo_Init+0x4c>)
 8001bf8:	601a      	str	r2, [r3, #0]
	servoDutyCycles.Servo2DutyCycle = &TIM1->CCR2;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <Servo_Init+0x48>)
 8001bfc:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <Servo_Init+0x50>)
 8001bfe:	605a      	str	r2, [r3, #4]
	servoDutyCycles.Servo3DutyCycle = &TIM1->CCR3;
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <Servo_Init+0x48>)
 8001c02:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <Servo_Init+0x54>)
 8001c04:	609a      	str	r2, [r3, #8]
	servoDutyCycles.Servo4DutyCycle = &TIM1->CCR4;
 8001c06:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <Servo_Init+0x48>)
 8001c08:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <Servo_Init+0x58>)
 8001c0a:	60da      	str	r2, [r3, #12]

	Set_Servos_Into_Default_Position();
 8001c0c:	f000 f80e 	bl	8001c2c <Set_Servos_Into_Default_Position>
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	200001a4 	.word	0x200001a4
 8001c18:	20000130 	.word	0x20000130
 8001c1c:	40012c34 	.word	0x40012c34
 8001c20:	40012c38 	.word	0x40012c38
 8001c24:	40012c3c 	.word	0x40012c3c
 8001c28:	40012c40 	.word	0x40012c40

08001c2c <Set_Servos_Into_Default_Position>:
	Set_Servos_Into_Default_Position();

}


void Set_Servos_Into_Default_Position(){
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
	TIM1->CCR1 = INLINE_DUTY_CYCLE;
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <Set_Servos_Into_Default_Position+0x28>)
 8001c32:	2296      	movs	r2, #150	; 0x96
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = INLINE_DUTY_CYCLE;
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <Set_Servos_Into_Default_Position+0x28>)
 8001c38:	2296      	movs	r2, #150	; 0x96
 8001c3a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = INLINE_DUTY_CYCLE;
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <Set_Servos_Into_Default_Position+0x28>)
 8001c3e:	2296      	movs	r2, #150	; 0x96
 8001c40:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = INLINE_DUTY_CYCLE;
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <Set_Servos_Into_Default_Position+0x28>)
 8001c44:	2296      	movs	r2, #150	; 0x96
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40012c00 	.word	0x40012c00

08001c58 <__Test_Servos>:


/*
 * For testing purposes!
 */
void __Test_Servos(){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
	TIM1->CCR1 = INLINE_DUTY_CYCLE;
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <__Test_Servos+0x80>)
 8001c5e:	2296      	movs	r2, #150	; 0x96
 8001c60:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = INLINE_DUTY_CYCLE;
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <__Test_Servos+0x80>)
 8001c64:	2296      	movs	r2, #150	; 0x96
 8001c66:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = INLINE_DUTY_CYCLE;
 8001c68:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <__Test_Servos+0x80>)
 8001c6a:	2296      	movs	r2, #150	; 0x96
 8001c6c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = INLINE_DUTY_CYCLE;
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <__Test_Servos+0x80>)
 8001c70:	2296      	movs	r2, #150	; 0x96
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_Delay(2000);
 8001c74:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c78:	f000 fb62 	bl	8002340 <HAL_Delay>


	TIM1->CCR1 = LOWEST_ENABLED_PITCH_DUTY_CYCLE;
 8001c7c:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <__Test_Servos+0x80>)
 8001c7e:	227d      	movs	r2, #125	; 0x7d
 8001c80:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = LOWEST_ENABLED_PITCH_DUTY_CYCLE;
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <__Test_Servos+0x80>)
 8001c84:	227d      	movs	r2, #125	; 0x7d
 8001c86:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = LOWEST_ENABLED_PITCH_DUTY_CYCLE;
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <__Test_Servos+0x80>)
 8001c8a:	227d      	movs	r2, #125	; 0x7d
 8001c8c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = LOWEST_ENABLED_PITCH_DUTY_CYCLE;
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <__Test_Servos+0x80>)
 8001c90:	227d      	movs	r2, #125	; 0x7d
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_Delay(2000);
 8001c94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c98:	f000 fb52 	bl	8002340 <HAL_Delay>


	TIM1->CCR1 = HIGHEST_ENABLED_PICH_DUTY_CYCLE;
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <__Test_Servos+0x80>)
 8001c9e:	22af      	movs	r2, #175	; 0xaf
 8001ca0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = HIGHEST_ENABLED_PICH_DUTY_CYCLE;
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <__Test_Servos+0x80>)
 8001ca4:	22af      	movs	r2, #175	; 0xaf
 8001ca6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = HIGHEST_ENABLED_PICH_DUTY_CYCLE;
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <__Test_Servos+0x80>)
 8001caa:	22af      	movs	r2, #175	; 0xaf
 8001cac:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = HIGHEST_ENABLED_PICH_DUTY_CYCLE;
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <__Test_Servos+0x80>)
 8001cb0:	22af      	movs	r2, #175	; 0xaf
 8001cb2:	641a      	str	r2, [r3, #64]	; 0x40


	HAL_Delay(2000);
 8001cb4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cb8:	f000 fb42 	bl	8002340 <HAL_Delay>

	TIM1->CCR1 = INLINE_DUTY_CYCLE;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <__Test_Servos+0x80>)
 8001cbe:	2296      	movs	r2, #150	; 0x96
 8001cc0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = INLINE_DUTY_CYCLE;
 8001cc2:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <__Test_Servos+0x80>)
 8001cc4:	2296      	movs	r2, #150	; 0x96
 8001cc6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = INLINE_DUTY_CYCLE;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <__Test_Servos+0x80>)
 8001cca:	2296      	movs	r2, #150	; 0x96
 8001ccc:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = INLINE_DUTY_CYCLE;
 8001cce:	4b02      	ldr	r3, [pc, #8]	; (8001cd8 <__Test_Servos+0x80>)
 8001cd0:	2296      	movs	r2, #150	; 0x96
 8001cd2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40012c00 	.word	0x40012c00

08001cdc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <MX_SPI1_Init+0x74>)
 8001ce2:	4a1c      	ldr	r2, [pc, #112]	; (8001d54 <MX_SPI1_Init+0x78>)
 8001ce4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <MX_SPI1_Init+0x74>)
 8001ce8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cee:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <MX_SPI1_Init+0x74>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cf4:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <MX_SPI1_Init+0x74>)
 8001cf6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001cfa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cfc:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <MX_SPI1_Init+0x74>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <MX_SPI1_Init+0x74>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_SPI1_Init+0x74>)
 8001d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <MX_SPI1_Init+0x74>)
 8001d12:	2218      	movs	r2, #24
 8001d14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <MX_SPI1_Init+0x74>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <MX_SPI1_Init+0x74>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <MX_SPI1_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <MX_SPI1_Init+0x74>)
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <MX_SPI1_Init+0x74>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_SPI1_Init+0x74>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_SPI1_Init+0x74>)
 8001d3c:	f002 fddc 	bl	80048f8 <HAL_SPI_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d46:	f7ff ff2b 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000140 	.word	0x20000140
 8001d54:	40013000 	.word	0x40013000

08001d58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <HAL_SPI_MspInit+0x80>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d129      	bne.n	8001dce <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d7a:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <HAL_SPI_MspInit+0x84>)
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7e:	4a17      	ldr	r2, [pc, #92]	; (8001ddc <HAL_SPI_MspInit+0x84>)
 8001d80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d84:	6613      	str	r3, [r2, #96]	; 0x60
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <HAL_SPI_MspInit+0x84>)
 8001d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_SPI_MspInit+0x84>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	4a11      	ldr	r2, [pc, #68]	; (8001ddc <HAL_SPI_MspInit+0x84>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <HAL_SPI_MspInit+0x84>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_12;
 8001daa:	f241 0342 	movw	r3, #4162	; 0x1042
 8001dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dbc:	2305      	movs	r3, #5
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dca:	f000 fbc3 	bl	8002554 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001dce:	bf00      	nop
 8001dd0:	3728      	adds	r7, #40	; 0x28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40013000 	.word	0x40013000
 8001ddc:	40021000 	.word	0x40021000

08001de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_MspInit+0x44>)
 8001de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dea:	4a0e      	ldr	r2, [pc, #56]	; (8001e24 <HAL_MspInit+0x44>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6613      	str	r3, [r2, #96]	; 0x60
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <HAL_MspInit+0x44>)
 8001df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_MspInit+0x44>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <HAL_MspInit+0x44>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e08:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_MspInit+0x44>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000

08001e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e2c:	e7fe      	b.n	8001e2c <NMI_Handler+0x4>

08001e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e32:	e7fe      	b.n	8001e32 <HardFault_Handler+0x4>

08001e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <MemManage_Handler+0x4>

08001e3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <BusFault_Handler+0x4>

08001e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <UsageFault_Handler+0x4>

08001e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e74:	f000 fa44 	bl	8002300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <Check_Peripherals>:
 * 		- LoRa
 * 		- Altimeter
 * 		- Servos
 * 	(all of the periphery are essential pretty much)
 */
void Check_Peripherals(){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
	if (!Is_BMP280_Available()){ // not putting all check into one if
 8001e80:	f000 f824 	bl	8001ecc <Is_BMP280_Available>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f083 0301 	eor.w	r3, r3, #1
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <Check_Peripherals+0x18>
		Error_Handler();		 // bc this way it is easier to debug
 8001e90:	f7ff fe86 	bl	8001ba0 <Error_Handler>
	}

	if (!Is_IMU_Available()){
 8001e94:	f000 f832 	bl	8001efc <Is_IMU_Available>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f083 0301 	eor.w	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <Check_Peripherals+0x2c>
		Error_Handler();
 8001ea4:	f7ff fe7c 	bl	8001ba0 <Error_Handler>
	}

	if (!Is_LoRa_Available()){
 8001ea8:	f000 f840 	bl	8001f2c <Is_LoRa_Available>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f083 0301 	eor.w	r3, r3, #1
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <Check_Peripherals+0x40>
		Error_Handler();
 8001eb8:	f7ff fe72 	bl	8001ba0 <Error_Handler>
	}

	// Manual testing (look at the rocket canards)
	Are_Servos_Available();
 8001ebc:	f7ff fecc 	bl	8001c58 <__Test_Servos>
	HAL_Delay(2000);
 8001ec0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ec4:	f000 fa3c 	bl	8002340 <HAL_Delay>
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <Is_BMP280_Available>:

/**
 * Checking if altimeter is available.
 */
bool Is_BMP280_Available(){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c3, BMP280_I2C_ADDRESS_0 << 1, 10, 50);
 8001ed2:	2332      	movs	r3, #50	; 0x32
 8001ed4:	220a      	movs	r2, #10
 8001ed6:	21ec      	movs	r1, #236	; 0xec
 8001ed8:	4807      	ldr	r0, [pc, #28]	; (8001ef8 <Is_BMP280_Available+0x2c>)
 8001eda:	f000 ff7b 	bl	8002dd4 <HAL_I2C_IsDeviceReady>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
	if (status == HAL_OK){
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <Is_BMP280_Available+0x20>
		return 1;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <Is_BMP280_Available+0x22>
	}

	return 0;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200000d0 	.word	0x200000d0

08001efc <Is_IMU_Available>:


bool Is_IMU_Available(){
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, MPU9250_ADDRESS, 10, 50);
 8001f02:	2332      	movs	r3, #50	; 0x32
 8001f04:	220a      	movs	r2, #10
 8001f06:	21d0      	movs	r1, #208	; 0xd0
 8001f08:	4807      	ldr	r0, [pc, #28]	; (8001f28 <Is_IMU_Available+0x2c>)
 8001f0a:	f000 ff63 	bl	8002dd4 <HAL_I2C_IsDeviceReady>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
	if (status == HAL_OK){
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <Is_IMU_Available+0x20>
		return 1;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <Is_IMU_Available+0x22>
	}

	return 0;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2000007c 	.word	0x2000007c

08001f2c <Is_LoRa_Available>:


bool Is_LoRa_Available(){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
	uint32_t res;
	uint8_t address = 0x0D;
 8001f32:	230d      	movs	r3, #13
 8001f34:	71fb      	strb	r3, [r7, #7]
	for (int i=0;i<50;i++){
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	e017      	b.n	8001f6c <Is_LoRa_Available+0x40>
		HAL_GPIO_WritePin(GPIOA, LoRa_NSS_Pin, GPIO_PIN_RESET);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2110      	movs	r1, #16
 8001f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f44:	f000 fc70 	bl	8002828 <HAL_GPIO_WritePin>
		// Transmit reg address, then receive it value
		res = HAL_SPI_Transmit(&hspi1, &address, 1, 500);
 8001f48:	1df9      	adds	r1, r7, #7
 8001f4a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f4e:	2201      	movs	r2, #1
 8001f50:	480d      	ldr	r0, [pc, #52]	; (8001f88 <Is_LoRa_Available+0x5c>)
 8001f52:	f002 fd74 	bl	8004a3e <HAL_SPI_Transmit>
 8001f56:	4603      	mov	r3, r0
 8001f58:	60fb      	str	r3, [r7, #12]
		// End SPI transaction
		HAL_GPIO_WritePin(GPIOA, LoRa_NSS_Pin, GPIO_PIN_SET);
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	2110      	movs	r1, #16
 8001f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f62:	f000 fc61 	bl	8002828 <HAL_GPIO_WritePin>
	for (int i=0;i<50;i++){
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2b31      	cmp	r3, #49	; 0x31
 8001f70:	dde4      	ble.n	8001f3c <Is_LoRa_Available+0x10>
	}

	if (res == HAL_OK){
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <Is_LoRa_Available+0x50>
		return 1;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <Is_LoRa_Available+0x52>
	}

	return 0;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000140 	.word	0x20000140

08001f8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <SystemInit+0x20>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	4a05      	ldr	r2, [pc, #20]	; (8001fac <SystemInit+0x20>)
 8001f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b09a      	sub	sp, #104	; 0x68
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
 8001fe0:	615a      	str	r2, [r3, #20]
 8001fe2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	222c      	movs	r2, #44	; 0x2c
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f004 fbac 	bl	8006748 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ff0:	4b56      	ldr	r3, [pc, #344]	; (800214c <MX_TIM1_Init+0x19c>)
 8001ff2:	4a57      	ldr	r2, [pc, #348]	; (8002150 <MX_TIM1_Init+0x1a0>)
 8001ff4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320-1;
 8001ff6:	4b55      	ldr	r3, [pc, #340]	; (800214c <MX_TIM1_Init+0x19c>)
 8001ff8:	f240 123f 	movw	r2, #319	; 0x13f
 8001ffc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffe:	4b53      	ldr	r3, [pc, #332]	; (800214c <MX_TIM1_Init+0x19c>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8002004:	4b51      	ldr	r3, [pc, #324]	; (800214c <MX_TIM1_Init+0x19c>)
 8002006:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800200a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200c:	4b4f      	ldr	r3, [pc, #316]	; (800214c <MX_TIM1_Init+0x19c>)
 800200e:	2200      	movs	r2, #0
 8002010:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002012:	4b4e      	ldr	r3, [pc, #312]	; (800214c <MX_TIM1_Init+0x19c>)
 8002014:	2200      	movs	r2, #0
 8002016:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002018:	4b4c      	ldr	r3, [pc, #304]	; (800214c <MX_TIM1_Init+0x19c>)
 800201a:	2200      	movs	r2, #0
 800201c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800201e:	484b      	ldr	r0, [pc, #300]	; (800214c <MX_TIM1_Init+0x19c>)
 8002020:	f003 fb7a 	bl	8005718 <HAL_TIM_Base_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800202a:	f7ff fdb9 	bl	8001ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800202e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002032:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002034:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002038:	4619      	mov	r1, r3
 800203a:	4844      	ldr	r0, [pc, #272]	; (800214c <MX_TIM1_Init+0x19c>)
 800203c:	f003 fe16 	bl	8005c6c <HAL_TIM_ConfigClockSource>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8002046:	f7ff fdab 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800204a:	4840      	ldr	r0, [pc, #256]	; (800214c <MX_TIM1_Init+0x19c>)
 800204c:	f003 fbbb 	bl	80057c6 <HAL_TIM_PWM_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8002056:	f7ff fda3 	bl	8001ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002066:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800206a:	4619      	mov	r1, r3
 800206c:	4837      	ldr	r0, [pc, #220]	; (800214c <MX_TIM1_Init+0x19c>)
 800206e:	f004 fa69 	bl	8006544 <HAL_TIMEx_MasterConfigSynchronization>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8002078:	f7ff fd92 	bl	8001ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800207c:	2360      	movs	r3, #96	; 0x60
 800207e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002084:	2300      	movs	r3, #0
 8002086:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002088:	2300      	movs	r3, #0
 800208a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002090:	2300      	movs	r3, #0
 8002092:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002094:	2300      	movs	r3, #0
 8002096:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002098:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800209c:	2200      	movs	r2, #0
 800209e:	4619      	mov	r1, r3
 80020a0:	482a      	ldr	r0, [pc, #168]	; (800214c <MX_TIM1_Init+0x19c>)
 80020a2:	f003 fccf 	bl	8005a44 <HAL_TIM_PWM_ConfigChannel>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80020ac:	f7ff fd78 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020b4:	2204      	movs	r2, #4
 80020b6:	4619      	mov	r1, r3
 80020b8:	4824      	ldr	r0, [pc, #144]	; (800214c <MX_TIM1_Init+0x19c>)
 80020ba:	f003 fcc3 	bl	8005a44 <HAL_TIM_PWM_ConfigChannel>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80020c4:	f7ff fd6c 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020cc:	2208      	movs	r2, #8
 80020ce:	4619      	mov	r1, r3
 80020d0:	481e      	ldr	r0, [pc, #120]	; (800214c <MX_TIM1_Init+0x19c>)
 80020d2:	f003 fcb7 	bl	8005a44 <HAL_TIM_PWM_ConfigChannel>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80020dc:	f7ff fd60 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020e4:	220c      	movs	r2, #12
 80020e6:	4619      	mov	r1, r3
 80020e8:	4818      	ldr	r0, [pc, #96]	; (800214c <MX_TIM1_Init+0x19c>)
 80020ea:	f003 fcab 	bl	8005a44 <HAL_TIM_PWM_ConfigChannel>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80020f4:	f7ff fd54 	bl	8001ba0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800210c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002110:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800211a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	4619      	mov	r1, r3
 800212c:	4807      	ldr	r0, [pc, #28]	; (800214c <MX_TIM1_Init+0x19c>)
 800212e:	f004 fa6f 	bl	8006610 <HAL_TIMEx_ConfigBreakDeadTime>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8002138:	f7ff fd32 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800213c:	4803      	ldr	r0, [pc, #12]	; (800214c <MX_TIM1_Init+0x19c>)
 800213e:	f000 f829 	bl	8002194 <HAL_TIM_MspPostInit>

}
 8002142:	bf00      	nop
 8002144:	3768      	adds	r7, #104	; 0x68
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200001a4 	.word	0x200001a4
 8002150:	40012c00 	.word	0x40012c00

08002154 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0a      	ldr	r2, [pc, #40]	; (800218c <HAL_TIM_Base_MspInit+0x38>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d10b      	bne.n	800217e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <HAL_TIM_Base_MspInit+0x3c>)
 8002168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216a:	4a09      	ldr	r2, [pc, #36]	; (8002190 <HAL_TIM_Base_MspInit+0x3c>)
 800216c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002170:	6613      	str	r3, [r2, #96]	; 0x60
 8002172:	4b07      	ldr	r3, [pc, #28]	; (8002190 <HAL_TIM_Base_MspInit+0x3c>)
 8002174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40012c00 	.word	0x40012c00
 8002190:	40021000 	.word	0x40021000

08002194 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a12      	ldr	r2, [pc, #72]	; (80021fc <HAL_TIM_MspPostInit+0x68>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d11d      	bne.n	80021f2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_TIM_MspPostInit+0x6c>)
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	4a11      	ldr	r2, [pc, #68]	; (8002200 <HAL_TIM_MspPostInit+0x6c>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <HAL_TIM_MspPostInit+0x6c>)
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80021ce:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80021d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021e0:	2301      	movs	r3, #1
 80021e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e4:	f107 030c 	add.w	r3, r7, #12
 80021e8:	4619      	mov	r1, r3
 80021ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ee:	f000 f9b1 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021f2:	bf00      	nop
 80021f4:	3720      	adds	r7, #32
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40012c00 	.word	0x40012c00
 8002200:	40021000 	.word	0x40021000

08002204 <Reset_Handler>:
 8002204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800223c <LoopForever+0x2>
 8002208:	f7ff fec0 	bl	8001f8c <SystemInit>
 800220c:	480c      	ldr	r0, [pc, #48]	; (8002240 <LoopForever+0x6>)
 800220e:	490d      	ldr	r1, [pc, #52]	; (8002244 <LoopForever+0xa>)
 8002210:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <LoopForever+0xe>)
 8002212:	2300      	movs	r3, #0
 8002214:	e002      	b.n	800221c <LoopCopyDataInit>

08002216 <CopyDataInit>:
 8002216:	58d4      	ldr	r4, [r2, r3]
 8002218:	50c4      	str	r4, [r0, r3]
 800221a:	3304      	adds	r3, #4

0800221c <LoopCopyDataInit>:
 800221c:	18c4      	adds	r4, r0, r3
 800221e:	428c      	cmp	r4, r1
 8002220:	d3f9      	bcc.n	8002216 <CopyDataInit>
 8002222:	4a0a      	ldr	r2, [pc, #40]	; (800224c <LoopForever+0x12>)
 8002224:	4c0a      	ldr	r4, [pc, #40]	; (8002250 <LoopForever+0x16>)
 8002226:	2300      	movs	r3, #0
 8002228:	e001      	b.n	800222e <LoopFillZerobss>

0800222a <FillZerobss>:
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	3204      	adds	r2, #4

0800222e <LoopFillZerobss>:
 800222e:	42a2      	cmp	r2, r4
 8002230:	d3fb      	bcc.n	800222a <FillZerobss>
 8002232:	f004 fa65 	bl	8006700 <__libc_init_array>
 8002236:	f7ff fc07 	bl	8001a48 <main>

0800223a <LoopForever>:
 800223a:	e7fe      	b.n	800223a <LoopForever>
 800223c:	20010000 	.word	0x20010000
 8002240:	20000000 	.word	0x20000000
 8002244:	2000000c 	.word	0x2000000c
 8002248:	080067c0 	.word	0x080067c0
 800224c:	2000000c 	.word	0x2000000c
 8002250:	200001f4 	.word	0x200001f4

08002254 <ADC1_IRQHandler>:
 8002254:	e7fe      	b.n	8002254 <ADC1_IRQHandler>

08002256 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002260:	2003      	movs	r0, #3
 8002262:	f000 f943 	bl	80024ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002266:	2000      	movs	r0, #0
 8002268:	f000 f80e 	bl	8002288 <HAL_InitTick>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	71fb      	strb	r3, [r7, #7]
 8002276:	e001      	b.n	800227c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002278:	f7ff fdb2 	bl	8001de0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800227c:	79fb      	ldrb	r3, [r7, #7]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002294:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <HAL_InitTick+0x6c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d023      	beq.n	80022e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <HAL_InitTick+0x70>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <HAL_InitTick+0x6c>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4619      	mov	r1, r3
 80022a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f941 	bl	800253a <HAL_SYSTICK_Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10f      	bne.n	80022de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b0f      	cmp	r3, #15
 80022c2:	d809      	bhi.n	80022d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c4:	2200      	movs	r2, #0
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022cc:	f000 f919 	bl	8002502 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022d0:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <HAL_InitTick+0x74>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e007      	b.n	80022e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	e004      	b.n	80022e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
 80022e2:	e001      	b.n	80022e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000008 	.word	0x20000008
 80022f8:	20000000 	.word	0x20000000
 80022fc:	20000004 	.word	0x20000004

08002300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_IncTick+0x20>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_IncTick+0x24>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4413      	add	r3, r2
 8002310:	4a04      	ldr	r2, [pc, #16]	; (8002324 <HAL_IncTick+0x24>)
 8002312:	6013      	str	r3, [r2, #0]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000008 	.word	0x20000008
 8002324:	200001f0 	.word	0x200001f0

08002328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return uwTick;
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <HAL_GetTick+0x14>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	200001f0 	.word	0x200001f0

08002340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff ffee 	bl	8002328 <HAL_GetTick>
 800234c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002358:	d005      	beq.n	8002366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <HAL_Delay+0x44>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002366:	bf00      	nop
 8002368:	f7ff ffde 	bl	8002328 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	429a      	cmp	r2, r3
 8002376:	d8f7      	bhi.n	8002368 <HAL_Delay+0x28>
  {
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000008 	.word	0x20000008

08002388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ba:	4a04      	ldr	r2, [pc, #16]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	60d3      	str	r3, [r2, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <__NVIC_GetPriorityGrouping+0x18>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	f003 0307 	and.w	r3, r3, #7
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	db0a      	blt.n	8002416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	490c      	ldr	r1, [pc, #48]	; (8002438 <__NVIC_SetPriority+0x4c>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	0112      	lsls	r2, r2, #4
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	440b      	add	r3, r1
 8002410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002414:	e00a      	b.n	800242c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4908      	ldr	r1, [pc, #32]	; (800243c <__NVIC_SetPriority+0x50>)
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	3b04      	subs	r3, #4
 8002424:	0112      	lsls	r2, r2, #4
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	440b      	add	r3, r1
 800242a:	761a      	strb	r2, [r3, #24]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000e100 	.word	0xe000e100
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f1c3 0307 	rsb	r3, r3, #7
 800245a:	2b04      	cmp	r3, #4
 800245c:	bf28      	it	cs
 800245e:	2304      	movcs	r3, #4
 8002460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3304      	adds	r3, #4
 8002466:	2b06      	cmp	r3, #6
 8002468:	d902      	bls.n	8002470 <NVIC_EncodePriority+0x30>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3b03      	subs	r3, #3
 800246e:	e000      	b.n	8002472 <NVIC_EncodePriority+0x32>
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	401a      	ands	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002488:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	43d9      	mvns	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	4313      	orrs	r3, r2
         );
}
 800249a:	4618      	mov	r0, r3
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b8:	d301      	bcc.n	80024be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00f      	b.n	80024de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <SysTick_Config+0x40>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c6:	210f      	movs	r1, #15
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024cc:	f7ff ff8e 	bl	80023ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <SysTick_Config+0x40>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <SysTick_Config+0x40>)
 80024d8:	2207      	movs	r2, #7
 80024da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	e000e010 	.word	0xe000e010

080024ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff47 	bl	8002388 <__NVIC_SetPriorityGrouping>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002514:	f7ff ff5c 	bl	80023d0 <__NVIC_GetPriorityGrouping>
 8002518:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	6978      	ldr	r0, [r7, #20]
 8002520:	f7ff ff8e 	bl	8002440 <NVIC_EncodePriority>
 8002524:	4602      	mov	r2, r0
 8002526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff5d 	bl	80023ec <__NVIC_SetPriority>
}
 8002532:	bf00      	nop
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ffb0 	bl	80024a8 <SysTick_Config>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002562:	e148      	b.n	80027f6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	2101      	movs	r1, #1
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	4013      	ands	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 813a 	beq.w	80027f0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b01      	cmp	r3, #1
 8002586:	d005      	beq.n	8002594 <HAL_GPIO_Init+0x40>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d130      	bne.n	80025f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	2203      	movs	r2, #3
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ca:	2201      	movs	r2, #1
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	f003 0201 	and.w	r2, r3, #1
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d017      	beq.n	8002632 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	2203      	movs	r2, #3
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d123      	bne.n	8002686 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	08da      	lsrs	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3208      	adds	r2, #8
 8002646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	220f      	movs	r2, #15
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	08da      	lsrs	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3208      	adds	r2, #8
 8002680:	6939      	ldr	r1, [r7, #16]
 8002682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	2203      	movs	r2, #3
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0203 	and.w	r2, r3, #3
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 8094 	beq.w	80027f0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c8:	4b52      	ldr	r3, [pc, #328]	; (8002814 <HAL_GPIO_Init+0x2c0>)
 80026ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026cc:	4a51      	ldr	r2, [pc, #324]	; (8002814 <HAL_GPIO_Init+0x2c0>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6613      	str	r3, [r2, #96]	; 0x60
 80026d4:	4b4f      	ldr	r3, [pc, #316]	; (8002814 <HAL_GPIO_Init+0x2c0>)
 80026d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026e0:	4a4d      	ldr	r2, [pc, #308]	; (8002818 <HAL_GPIO_Init+0x2c4>)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	3302      	adds	r3, #2
 80026e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800270a:	d00d      	beq.n	8002728 <HAL_GPIO_Init+0x1d4>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a43      	ldr	r2, [pc, #268]	; (800281c <HAL_GPIO_Init+0x2c8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d007      	beq.n	8002724 <HAL_GPIO_Init+0x1d0>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a42      	ldr	r2, [pc, #264]	; (8002820 <HAL_GPIO_Init+0x2cc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d101      	bne.n	8002720 <HAL_GPIO_Init+0x1cc>
 800271c:	2302      	movs	r3, #2
 800271e:	e004      	b.n	800272a <HAL_GPIO_Init+0x1d6>
 8002720:	2307      	movs	r3, #7
 8002722:	e002      	b.n	800272a <HAL_GPIO_Init+0x1d6>
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <HAL_GPIO_Init+0x1d6>
 8002728:	2300      	movs	r3, #0
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	f002 0203 	and.w	r2, r2, #3
 8002730:	0092      	lsls	r2, r2, #2
 8002732:	4093      	lsls	r3, r2
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800273a:	4937      	ldr	r1, [pc, #220]	; (8002818 <HAL_GPIO_Init+0x2c4>)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	089b      	lsrs	r3, r3, #2
 8002740:	3302      	adds	r3, #2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002748:	4b36      	ldr	r3, [pc, #216]	; (8002824 <HAL_GPIO_Init+0x2d0>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	43db      	mvns	r3, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800276c:	4a2d      	ldr	r2, [pc, #180]	; (8002824 <HAL_GPIO_Init+0x2d0>)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002772:	4b2c      	ldr	r3, [pc, #176]	; (8002824 <HAL_GPIO_Init+0x2d0>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	43db      	mvns	r3, r3
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002796:	4a23      	ldr	r2, [pc, #140]	; (8002824 <HAL_GPIO_Init+0x2d0>)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800279c:	4b21      	ldr	r3, [pc, #132]	; (8002824 <HAL_GPIO_Init+0x2d0>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027c0:	4a18      	ldr	r2, [pc, #96]	; (8002824 <HAL_GPIO_Init+0x2d0>)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80027c6:	4b17      	ldr	r3, [pc, #92]	; (8002824 <HAL_GPIO_Init+0x2d0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027ea:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <HAL_GPIO_Init+0x2d0>)
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	3301      	adds	r3, #1
 80027f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	f47f aeaf 	bne.w	8002564 <HAL_GPIO_Init+0x10>
  }
}
 8002806:	bf00      	nop
 8002808:	bf00      	nop
 800280a:	371c      	adds	r7, #28
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	40021000 	.word	0x40021000
 8002818:	40010000 	.word	0x40010000
 800281c:	48000400 	.word	0x48000400
 8002820:	48000800 	.word	0x48000800
 8002824:	40010400 	.word	0x40010400

08002828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	807b      	strh	r3, [r7, #2]
 8002834:	4613      	mov	r3, r2
 8002836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002838:	787b      	ldrb	r3, [r7, #1]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800283e:	887a      	ldrh	r2, [r7, #2]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002844:	e002      	b.n	800284c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002846:	887a      	ldrh	r2, [r7, #2]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e081      	b.n	800296e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff f828 	bl	80018d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2224      	movs	r2, #36	; 0x24
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d107      	bne.n	80028d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	e006      	b.n	80028e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d104      	bne.n	80028f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002904:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002914:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69d9      	ldr	r1, [r3, #28]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a1a      	ldr	r2, [r3, #32]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af02      	add	r7, sp, #8
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	4608      	mov	r0, r1
 8002982:	4611      	mov	r1, r2
 8002984:	461a      	mov	r2, r3
 8002986:	4603      	mov	r3, r0
 8002988:	817b      	strh	r3, [r7, #10]
 800298a:	460b      	mov	r3, r1
 800298c:	813b      	strh	r3, [r7, #8]
 800298e:	4613      	mov	r3, r2
 8002990:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b20      	cmp	r3, #32
 800299c:	f040 80f9 	bne.w	8002b92 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <HAL_I2C_Mem_Write+0x34>
 80029a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d105      	bne.n	80029b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0ed      	b.n	8002b94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_I2C_Mem_Write+0x4e>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e0e6      	b.n	8002b94 <HAL_I2C_Mem_Write+0x21c>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029ce:	f7ff fcab 	bl	8002328 <HAL_GetTick>
 80029d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2319      	movs	r3, #25
 80029da:	2201      	movs	r2, #1
 80029dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 fbcb 	bl	800317c <I2C_WaitOnFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0d1      	b.n	8002b94 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2221      	movs	r2, #33	; 0x21
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2240      	movs	r2, #64	; 0x40
 80029fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a3a      	ldr	r2, [r7, #32]
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a18:	88f8      	ldrh	r0, [r7, #6]
 8002a1a:	893a      	ldrh	r2, [r7, #8]
 8002a1c:	8979      	ldrh	r1, [r7, #10]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	4603      	mov	r3, r0
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 fadb 	bl	8002fe4 <I2C_RequestMemoryWrite>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0a9      	b.n	8002b94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2bff      	cmp	r3, #255	; 0xff
 8002a48:	d90e      	bls.n	8002a68 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	22ff      	movs	r2, #255	; 0xff
 8002a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	8979      	ldrh	r1, [r7, #10]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 fd33 	bl	80034cc <I2C_TransferConfig>
 8002a66:	e00f      	b.n	8002a88 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	8979      	ldrh	r1, [r7, #10]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 fd22 	bl	80034cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 fbb5 	bl	80031fc <I2C_WaitOnTXISFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e07b      	b.n	8002b94 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	781a      	ldrb	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d034      	beq.n	8002b40 <HAL_I2C_Mem_Write+0x1c8>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d130      	bne.n	8002b40 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2180      	movs	r1, #128	; 0x80
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fb47 	bl	800317c <I2C_WaitOnFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e04d      	b.n	8002b94 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2bff      	cmp	r3, #255	; 0xff
 8002b00:	d90e      	bls.n	8002b20 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	22ff      	movs	r2, #255	; 0xff
 8002b06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	8979      	ldrh	r1, [r7, #10]
 8002b10:	2300      	movs	r3, #0
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 fcd7 	bl	80034cc <I2C_TransferConfig>
 8002b1e:	e00f      	b.n	8002b40 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	8979      	ldrh	r1, [r7, #10]
 8002b32:	2300      	movs	r3, #0
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 fcc6 	bl	80034cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d19e      	bne.n	8002a88 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 fb94 	bl	800327c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e01a      	b.n	8002b94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2220      	movs	r2, #32
 8002b64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <HAL_I2C_Mem_Write+0x224>)
 8002b72:	400b      	ands	r3, r1
 8002b74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e000      	b.n	8002b94 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
  }
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	fe00e800 	.word	0xfe00e800

08002ba0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	4608      	mov	r0, r1
 8002baa:	4611      	mov	r1, r2
 8002bac:	461a      	mov	r2, r3
 8002bae:	4603      	mov	r3, r0
 8002bb0:	817b      	strh	r3, [r7, #10]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	813b      	strh	r3, [r7, #8]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	f040 80fd 	bne.w	8002dc2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_I2C_Mem_Read+0x34>
 8002bce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d105      	bne.n	8002be0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bda:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0f1      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_I2C_Mem_Read+0x4e>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e0ea      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x224>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bf6:	f7ff fb97 	bl	8002328 <HAL_GetTick>
 8002bfa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	2319      	movs	r3, #25
 8002c02:	2201      	movs	r2, #1
 8002c04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 fab7 	bl	800317c <I2C_WaitOnFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0d5      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2222      	movs	r2, #34	; 0x22
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2240      	movs	r2, #64	; 0x40
 8002c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a3a      	ldr	r2, [r7, #32]
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c40:	88f8      	ldrh	r0, [r7, #6]
 8002c42:	893a      	ldrh	r2, [r7, #8]
 8002c44:	8979      	ldrh	r1, [r7, #10]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	9301      	str	r3, [sp, #4]
 8002c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	4603      	mov	r3, r0
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 fa1b 	bl	800308c <I2C_RequestMemoryRead>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0ad      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2bff      	cmp	r3, #255	; 0xff
 8002c70:	d90e      	bls.n	8002c90 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	22ff      	movs	r2, #255	; 0xff
 8002c76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	8979      	ldrh	r1, [r7, #10]
 8002c80:	4b52      	ldr	r3, [pc, #328]	; (8002dcc <HAL_I2C_Mem_Read+0x22c>)
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 fc1f 	bl	80034cc <I2C_TransferConfig>
 8002c8e:	e00f      	b.n	8002cb0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	8979      	ldrh	r1, [r7, #10]
 8002ca2:	4b4a      	ldr	r3, [pc, #296]	; (8002dcc <HAL_I2C_Mem_Read+0x22c>)
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 fc0e 	bl	80034cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2104      	movs	r1, #4
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 fa5e 	bl	800317c <I2C_WaitOnFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e07c      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d034      	beq.n	8002d70 <HAL_I2C_Mem_Read+0x1d0>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d130      	bne.n	8002d70 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	2200      	movs	r2, #0
 8002d16:	2180      	movs	r1, #128	; 0x80
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 fa2f 	bl	800317c <I2C_WaitOnFlagUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e04d      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2bff      	cmp	r3, #255	; 0xff
 8002d30:	d90e      	bls.n	8002d50 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	22ff      	movs	r2, #255	; 0xff
 8002d36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	8979      	ldrh	r1, [r7, #10]
 8002d40:	2300      	movs	r3, #0
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 fbbf 	bl	80034cc <I2C_TransferConfig>
 8002d4e:	e00f      	b.n	8002d70 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	8979      	ldrh	r1, [r7, #10]
 8002d62:	2300      	movs	r3, #0
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fbae 	bl	80034cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d19a      	bne.n	8002cb0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fa7c 	bl	800327c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e01a      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2220      	movs	r2, #32
 8002d94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6859      	ldr	r1, [r3, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <HAL_I2C_Mem_Read+0x230>)
 8002da2:	400b      	ands	r3, r1
 8002da4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e000      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002dc2:	2302      	movs	r3, #2
  }
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	80002400 	.word	0x80002400
 8002dd0:	fe00e800 	.word	0xfe00e800

08002dd4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	460b      	mov	r3, r1
 8002de2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b20      	cmp	r3, #32
 8002df2:	f040 80f1 	bne.w	8002fd8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e04:	d101      	bne.n	8002e0a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002e06:	2302      	movs	r3, #2
 8002e08:	e0e7      	b.n	8002fda <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_I2C_IsDeviceReady+0x44>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e0e0      	b.n	8002fda <HAL_I2C_IsDeviceReady+0x206>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2224      	movs	r2, #36	; 0x24
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d107      	bne.n	8002e46 <HAL_I2C_IsDeviceReady+0x72>
 8002e36:	897b      	ldrh	r3, [r7, #10]
 8002e38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e44:	e004      	b.n	8002e50 <HAL_I2C_IsDeviceReady+0x7c>
 8002e46:	897b      	ldrh	r3, [r7, #10]
 8002e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e4c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002e56:	f7ff fa67 	bl	8002328 <HAL_GetTick>
 8002e5a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	bf0c      	ite	eq
 8002e6a:	2301      	moveq	r3, #1
 8002e6c:	2300      	movne	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b10      	cmp	r3, #16
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002e88:	e034      	b.n	8002ef4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e90:	d01a      	beq.n	8002ec8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e92:	f7ff fa49 	bl	8002328 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d302      	bcc.n	8002ea8 <HAL_I2C_IsDeviceReady+0xd4>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10f      	bne.n	8002ec8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	f043 0220 	orr.w	r2, r3, #32
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e088      	b.n	8002fda <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	bf0c      	ite	eq
 8002ed6:	2301      	moveq	r3, #1
 8002ed8:	2300      	movne	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	2b10      	cmp	r3, #16
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002ef4:	7ffb      	ldrb	r3, [r7, #31]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_I2C_IsDeviceReady+0x12c>
 8002efa:	7fbb      	ldrb	r3, [r7, #30]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0c4      	beq.n	8002e8a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d01a      	beq.n	8002f44 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2200      	movs	r2, #0
 8002f16:	2120      	movs	r1, #32
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f92f 	bl	800317c <I2C_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e058      	b.n	8002fda <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	e04a      	b.n	8002fda <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2120      	movs	r1, #32
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f914 	bl	800317c <I2C_WaitOnFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e03d      	b.n	8002fda <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2210      	movs	r2, #16
 8002f64:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d118      	bne.n	8002fa8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f84:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2120      	movs	r1, #32
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f8f3 	bl	800317c <I2C_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e01c      	b.n	8002fda <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	3301      	adds	r3, #1
 8002fac:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	f63f af3b 	bhi.w	8002e2e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002fd8:	2302      	movs	r3, #2
  }
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3720      	adds	r7, #32
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	4608      	mov	r0, r1
 8002fee:	4611      	mov	r1, r2
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	817b      	strh	r3, [r7, #10]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	813b      	strh	r3, [r7, #8]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	b2da      	uxtb	r2, r3
 8003002:	8979      	ldrh	r1, [r7, #10]
 8003004:	4b20      	ldr	r3, [pc, #128]	; (8003088 <I2C_RequestMemoryWrite+0xa4>)
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 fa5d 	bl	80034cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	69b9      	ldr	r1, [r7, #24]
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f8f0 	bl	80031fc <I2C_WaitOnTXISFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e02c      	b.n	8003080 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003026:	88fb      	ldrh	r3, [r7, #6]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d105      	bne.n	8003038 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800302c:	893b      	ldrh	r3, [r7, #8]
 800302e:	b2da      	uxtb	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	629a      	str	r2, [r3, #40]	; 0x28
 8003036:	e015      	b.n	8003064 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003038:	893b      	ldrh	r3, [r7, #8]
 800303a:	0a1b      	lsrs	r3, r3, #8
 800303c:	b29b      	uxth	r3, r3
 800303e:	b2da      	uxtb	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003046:	69fa      	ldr	r2, [r7, #28]
 8003048:	69b9      	ldr	r1, [r7, #24]
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 f8d6 	bl	80031fc <I2C_WaitOnTXISFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e012      	b.n	8003080 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800305a:	893b      	ldrh	r3, [r7, #8]
 800305c:	b2da      	uxtb	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2200      	movs	r2, #0
 800306c:	2180      	movs	r1, #128	; 0x80
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f884 	bl	800317c <I2C_WaitOnFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	80002000 	.word	0x80002000

0800308c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af02      	add	r7, sp, #8
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	4608      	mov	r0, r1
 8003096:	4611      	mov	r1, r2
 8003098:	461a      	mov	r2, r3
 800309a:	4603      	mov	r3, r0
 800309c:	817b      	strh	r3, [r7, #10]
 800309e:	460b      	mov	r3, r1
 80030a0:	813b      	strh	r3, [r7, #8]
 80030a2:	4613      	mov	r3, r2
 80030a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	8979      	ldrh	r1, [r7, #10]
 80030ac:	4b20      	ldr	r3, [pc, #128]	; (8003130 <I2C_RequestMemoryRead+0xa4>)
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2300      	movs	r3, #0
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fa0a 	bl	80034cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b8:	69fa      	ldr	r2, [r7, #28]
 80030ba:	69b9      	ldr	r1, [r7, #24]
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f89d 	bl	80031fc <I2C_WaitOnTXISFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e02c      	b.n	8003126 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030cc:	88fb      	ldrh	r3, [r7, #6]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d105      	bne.n	80030de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030d2:	893b      	ldrh	r3, [r7, #8]
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
 80030dc:	e015      	b.n	800310a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030de:	893b      	ldrh	r3, [r7, #8]
 80030e0:	0a1b      	lsrs	r3, r3, #8
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	69b9      	ldr	r1, [r7, #24]
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f883 	bl	80031fc <I2C_WaitOnTXISFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e012      	b.n	8003126 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003100:	893b      	ldrh	r3, [r7, #8]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2200      	movs	r2, #0
 8003112:	2140      	movs	r1, #64	; 0x40
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f831 	bl	800317c <I2C_WaitOnFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	80002000 	.word	0x80002000

08003134 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b02      	cmp	r3, #2
 8003148:	d103      	bne.n	8003152 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2200      	movs	r2, #0
 8003150:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b01      	cmp	r3, #1
 800315e:	d007      	beq.n	8003170 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	619a      	str	r2, [r3, #24]
  }
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	4613      	mov	r3, r2
 800318a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800318c:	e022      	b.n	80031d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003194:	d01e      	beq.n	80031d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003196:	f7ff f8c7 	bl	8002328 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d302      	bcc.n	80031ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d113      	bne.n	80031d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b0:	f043 0220 	orr.w	r2, r3, #32
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e00f      	b.n	80031f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4013      	ands	r3, r2
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	bf0c      	ite	eq
 80031e4:	2301      	moveq	r3, #1
 80031e6:	2300      	movne	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d0cd      	beq.n	800318e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003208:	e02c      	b.n	8003264 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 f870 	bl	80032f4 <I2C_IsErrorOccurred>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e02a      	b.n	8003274 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003224:	d01e      	beq.n	8003264 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003226:	f7ff f87f 	bl	8002328 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	429a      	cmp	r2, r3
 8003234:	d302      	bcc.n	800323c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d113      	bne.n	8003264 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003240:	f043 0220 	orr.w	r2, r3, #32
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e007      	b.n	8003274 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b02      	cmp	r3, #2
 8003270:	d1cb      	bne.n	800320a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003288:	e028      	b.n	80032dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f830 	bl	80032f4 <I2C_IsErrorOccurred>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e026      	b.n	80032ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329e:	f7ff f843 	bl	8002328 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d302      	bcc.n	80032b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d113      	bne.n	80032dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b8:	f043 0220 	orr.w	r2, r3, #32
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e007      	b.n	80032ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d1cf      	bne.n	800328a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08a      	sub	sp, #40	; 0x28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	d075      	beq.n	800340c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2210      	movs	r2, #16
 8003326:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003328:	e056      	b.n	80033d8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003330:	d052      	beq.n	80033d8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003332:	f7fe fff9 	bl	8002328 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	429a      	cmp	r2, r3
 8003340:	d302      	bcc.n	8003348 <I2C_IsErrorOccurred+0x54>
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d147      	bne.n	80033d8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003352:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800335a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800336a:	d12e      	bne.n	80033ca <I2C_IsErrorOccurred+0xd6>
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003372:	d02a      	beq.n	80033ca <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	2b20      	cmp	r3, #32
 8003378:	d027      	beq.n	80033ca <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003388:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800338a:	f7fe ffcd 	bl	8002328 <HAL_GetTick>
 800338e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003390:	e01b      	b.n	80033ca <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003392:	f7fe ffc9 	bl	8002328 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b19      	cmp	r3, #25
 800339e:	d914      	bls.n	80033ca <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	d1dc      	bne.n	8003392 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d003      	beq.n	80033ee <I2C_IsErrorOccurred+0xfa>
 80033e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d09d      	beq.n	800332a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80033ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d103      	bne.n	80033fe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2220      	movs	r2, #32
 80033fc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	f043 0304 	orr.w	r3, r3, #4
 8003404:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800342e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00b      	beq.n	8003458 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	f043 0308 	orr.w	r3, r3, #8
 8003446:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003450:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	f043 0302 	orr.w	r3, r3, #2
 8003468:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003472:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800347a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800347e:	2b00      	cmp	r3, #0
 8003480:	d01c      	beq.n	80034bc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f7ff fe56 	bl	8003134 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6859      	ldr	r1, [r3, #4]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <I2C_IsErrorOccurred+0x1d4>)
 8003494:	400b      	ands	r3, r1
 8003496:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	431a      	orrs	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80034bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3728      	adds	r7, #40	; 0x28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	fe00e800 	.word	0xfe00e800

080034cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	607b      	str	r3, [r7, #4]
 80034d6:	460b      	mov	r3, r1
 80034d8:	817b      	strh	r3, [r7, #10]
 80034da:	4613      	mov	r3, r2
 80034dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034de:	897b      	ldrh	r3, [r7, #10]
 80034e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034e4:	7a7b      	ldrb	r3, [r7, #9]
 80034e6:	041b      	lsls	r3, r3, #16
 80034e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	0d5b      	lsrs	r3, r3, #21
 8003506:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800350a:	4b08      	ldr	r3, [pc, #32]	; (800352c <I2C_TransferConfig+0x60>)
 800350c:	430b      	orrs	r3, r1
 800350e:	43db      	mvns	r3, r3
 8003510:	ea02 0103 	and.w	r1, r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	03ff63ff 	.word	0x03ff63ff

08003530 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b20      	cmp	r3, #32
 8003544:	d138      	bne.n	80035b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003550:	2302      	movs	r3, #2
 8003552:	e032      	b.n	80035ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2224      	movs	r2, #36	; 0x24
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003582:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6819      	ldr	r1, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	e000      	b.n	80035ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035b8:	2302      	movs	r3, #2
  }
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b085      	sub	sp, #20
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d139      	bne.n	8003650 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e033      	b.n	8003652 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2224      	movs	r2, #36	; 0x24
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0201 	bic.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003618:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	021b      	lsls	r3, r3, #8
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	e000      	b.n	8003652 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003650:	2302      	movs	r3, #2
  }
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003664:	4b04      	ldr	r3, [pc, #16]	; (8003678 <HAL_PWREx_GetVoltageRange+0x18>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800366c:	4618      	mov	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40007000 	.word	0x40007000

0800367c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800368a:	d130      	bne.n	80036ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800368c:	4b23      	ldr	r3, [pc, #140]	; (800371c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003698:	d038      	beq.n	800370c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800369a:	4b20      	ldr	r3, [pc, #128]	; (800371c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036a2:	4a1e      	ldr	r2, [pc, #120]	; (800371c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036aa:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2232      	movs	r2, #50	; 0x32
 80036b0:	fb02 f303 	mul.w	r3, r2, r3
 80036b4:	4a1b      	ldr	r2, [pc, #108]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	0c9b      	lsrs	r3, r3, #18
 80036bc:	3301      	adds	r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036c0:	e002      	b.n	80036c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036c8:	4b14      	ldr	r3, [pc, #80]	; (800371c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d4:	d102      	bne.n	80036dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1f2      	bne.n	80036c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036dc:	4b0f      	ldr	r3, [pc, #60]	; (800371c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e8:	d110      	bne.n	800370c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e00f      	b.n	800370e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036ee:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fa:	d007      	beq.n	800370c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036fc:	4b07      	ldr	r3, [pc, #28]	; (800371c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003704:	4a05      	ldr	r2, [pc, #20]	; (800371c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800370a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40007000 	.word	0x40007000
 8003720:	20000000 	.word	0x20000000
 8003724:	431bde83 	.word	0x431bde83

08003728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d102      	bne.n	800373c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	f000 bc02 	b.w	8003f40 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800373c:	4b96      	ldr	r3, [pc, #600]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003746:	4b94      	ldr	r3, [pc, #592]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0310 	and.w	r3, r3, #16
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 80e4 	beq.w	8003926 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d007      	beq.n	8003774 <HAL_RCC_OscConfig+0x4c>
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	2b0c      	cmp	r3, #12
 8003768:	f040 808b 	bne.w	8003882 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2b01      	cmp	r3, #1
 8003770:	f040 8087 	bne.w	8003882 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003774:	4b88      	ldr	r3, [pc, #544]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_RCC_OscConfig+0x64>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e3d9      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1a      	ldr	r2, [r3, #32]
 8003790:	4b81      	ldr	r3, [pc, #516]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d004      	beq.n	80037a6 <HAL_RCC_OscConfig+0x7e>
 800379c:	4b7e      	ldr	r3, [pc, #504]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a4:	e005      	b.n	80037b2 <HAL_RCC_OscConfig+0x8a>
 80037a6:	4b7c      	ldr	r3, [pc, #496]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 80037a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ac:	091b      	lsrs	r3, r3, #4
 80037ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d223      	bcs.n	80037fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fd54 	bl	8004268 <RCC_SetFlashLatencyFromMSIRange>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e3ba      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ca:	4b73      	ldr	r3, [pc, #460]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a72      	ldr	r2, [pc, #456]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 80037d0:	f043 0308 	orr.w	r3, r3, #8
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	4b70      	ldr	r3, [pc, #448]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	496d      	ldr	r1, [pc, #436]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037e8:	4b6b      	ldr	r3, [pc, #428]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	4968      	ldr	r1, [pc, #416]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
 80037fc:	e025      	b.n	800384a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037fe:	4b66      	ldr	r3, [pc, #408]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a65      	ldr	r2, [pc, #404]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 8003804:	f043 0308 	orr.w	r3, r3, #8
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	4b63      	ldr	r3, [pc, #396]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	4960      	ldr	r1, [pc, #384]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 8003818:	4313      	orrs	r3, r2
 800381a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800381c:	4b5e      	ldr	r3, [pc, #376]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	495b      	ldr	r1, [pc, #364]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 800382c:	4313      	orrs	r3, r2
 800382e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fd14 	bl	8004268 <RCC_SetFlashLatencyFromMSIRange>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e37a      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800384a:	f000 fc81 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 800384e:	4602      	mov	r2, r0
 8003850:	4b51      	ldr	r3, [pc, #324]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	4950      	ldr	r1, [pc, #320]	; (800399c <HAL_RCC_OscConfig+0x274>)
 800385c:	5ccb      	ldrb	r3, [r1, r3]
 800385e:	f003 031f 	and.w	r3, r3, #31
 8003862:	fa22 f303 	lsr.w	r3, r2, r3
 8003866:	4a4e      	ldr	r2, [pc, #312]	; (80039a0 <HAL_RCC_OscConfig+0x278>)
 8003868:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800386a:	4b4e      	ldr	r3, [pc, #312]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f7fe fd0a 	bl	8002288 <HAL_InitTick>
 8003874:	4603      	mov	r3, r0
 8003876:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d052      	beq.n	8003924 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	e35e      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d032      	beq.n	80038f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800388a:	4b43      	ldr	r3, [pc, #268]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a42      	ldr	r2, [pc, #264]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003896:	f7fe fd47 	bl	8002328 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800389e:	f7fe fd43 	bl	8002328 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e347      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038b0:	4b39      	ldr	r3, [pc, #228]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038bc:	4b36      	ldr	r3, [pc, #216]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a35      	ldr	r2, [pc, #212]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 80038c2:	f043 0308 	orr.w	r3, r3, #8
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	4b33      	ldr	r3, [pc, #204]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	4930      	ldr	r1, [pc, #192]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038da:	4b2f      	ldr	r3, [pc, #188]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	021b      	lsls	r3, r3, #8
 80038e8:	492b      	ldr	r1, [pc, #172]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	604b      	str	r3, [r1, #4]
 80038ee:	e01a      	b.n	8003926 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038f0:	4b29      	ldr	r3, [pc, #164]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a28      	ldr	r2, [pc, #160]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038fc:	f7fe fd14 	bl	8002328 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003904:	f7fe fd10 	bl	8002328 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e314      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003916:	4b20      	ldr	r3, [pc, #128]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x1dc>
 8003922:	e000      	b.n	8003926 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003924:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d073      	beq.n	8003a1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d005      	beq.n	8003944 <HAL_RCC_OscConfig+0x21c>
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	2b0c      	cmp	r3, #12
 800393c:	d10e      	bne.n	800395c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b03      	cmp	r3, #3
 8003942:	d10b      	bne.n	800395c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003944:	4b14      	ldr	r3, [pc, #80]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d063      	beq.n	8003a18 <HAL_RCC_OscConfig+0x2f0>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d15f      	bne.n	8003a18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e2f1      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003964:	d106      	bne.n	8003974 <HAL_RCC_OscConfig+0x24c>
 8003966:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a0b      	ldr	r2, [pc, #44]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e025      	b.n	80039c0 <HAL_RCC_OscConfig+0x298>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800397c:	d114      	bne.n	80039a8 <HAL_RCC_OscConfig+0x280>
 800397e:	4b06      	ldr	r3, [pc, #24]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a05      	ldr	r2, [pc, #20]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 8003984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b03      	ldr	r3, [pc, #12]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a02      	ldr	r2, [pc, #8]	; (8003998 <HAL_RCC_OscConfig+0x270>)
 8003990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e013      	b.n	80039c0 <HAL_RCC_OscConfig+0x298>
 8003998:	40021000 	.word	0x40021000
 800399c:	08006770 	.word	0x08006770
 80039a0:	20000000 	.word	0x20000000
 80039a4:	20000004 	.word	0x20000004
 80039a8:	4ba0      	ldr	r3, [pc, #640]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a9f      	ldr	r2, [pc, #636]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 80039ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	4b9d      	ldr	r3, [pc, #628]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a9c      	ldr	r2, [pc, #624]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 80039ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d013      	beq.n	80039f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c8:	f7fe fcae 	bl	8002328 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d0:	f7fe fcaa 	bl	8002328 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b64      	cmp	r3, #100	; 0x64
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e2ae      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039e2:	4b92      	ldr	r3, [pc, #584]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f0      	beq.n	80039d0 <HAL_RCC_OscConfig+0x2a8>
 80039ee:	e014      	b.n	8003a1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fe fc9a 	bl	8002328 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f8:	f7fe fc96 	bl	8002328 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	; 0x64
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e29a      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a0a:	4b88      	ldr	r3, [pc, #544]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x2d0>
 8003a16:	e000      	b.n	8003a1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d060      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_OscConfig+0x310>
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	2b0c      	cmp	r3, #12
 8003a30:	d119      	bne.n	8003a66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d116      	bne.n	8003a66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a38:	4b7c      	ldr	r3, [pc, #496]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_OscConfig+0x328>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e277      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a50:	4b76      	ldr	r3, [pc, #472]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	061b      	lsls	r3, r3, #24
 8003a5e:	4973      	ldr	r1, [pc, #460]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a64:	e040      	b.n	8003ae8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d023      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a6e:	4b6f      	ldr	r3, [pc, #444]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a6e      	ldr	r2, [pc, #440]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7a:	f7fe fc55 	bl	8002328 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a82:	f7fe fc51 	bl	8002328 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e255      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a94:	4b65      	ldr	r3, [pc, #404]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa0:	4b62      	ldr	r3, [pc, #392]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	061b      	lsls	r3, r3, #24
 8003aae:	495f      	ldr	r1, [pc, #380]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]
 8003ab4:	e018      	b.n	8003ae8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ab6:	4b5d      	ldr	r3, [pc, #372]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a5c      	ldr	r2, [pc, #368]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac2:	f7fe fc31 	bl	8002328 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aca:	f7fe fc2d 	bl	8002328 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e231      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003adc:	4b53      	ldr	r3, [pc, #332]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1f0      	bne.n	8003aca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d03c      	beq.n	8003b6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d01c      	beq.n	8003b36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003afc:	4b4b      	ldr	r3, [pc, #300]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b02:	4a4a      	ldr	r2, [pc, #296]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0c:	f7fe fc0c 	bl	8002328 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b14:	f7fe fc08 	bl	8002328 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e20c      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b26:	4b41      	ldr	r3, [pc, #260]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0ef      	beq.n	8003b14 <HAL_RCC_OscConfig+0x3ec>
 8003b34:	e01b      	b.n	8003b6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b36:	4b3d      	ldr	r3, [pc, #244]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b3c:	4a3b      	ldr	r2, [pc, #236]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003b3e:	f023 0301 	bic.w	r3, r3, #1
 8003b42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b46:	f7fe fbef 	bl	8002328 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b4e:	f7fe fbeb 	bl	8002328 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e1ef      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b60:	4b32      	ldr	r3, [pc, #200]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1ef      	bne.n	8003b4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 80a6 	beq.w	8003cc8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b80:	4b2a      	ldr	r3, [pc, #168]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10d      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8c:	4b27      	ldr	r3, [pc, #156]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b90:	4a26      	ldr	r2, [pc, #152]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b96:	6593      	str	r3, [r2, #88]	; 0x58
 8003b98:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ba8:	4b21      	ldr	r3, [pc, #132]	; (8003c30 <HAL_RCC_OscConfig+0x508>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d118      	bne.n	8003be6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bb4:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <HAL_RCC_OscConfig+0x508>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1d      	ldr	r2, [pc, #116]	; (8003c30 <HAL_RCC_OscConfig+0x508>)
 8003bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc0:	f7fe fbb2 	bl	8002328 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc8:	f7fe fbae 	bl	8002328 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e1b2      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bda:	4b15      	ldr	r3, [pc, #84]	; (8003c30 <HAL_RCC_OscConfig+0x508>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d108      	bne.n	8003c00 <HAL_RCC_OscConfig+0x4d8>
 8003bee:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf4:	4a0d      	ldr	r2, [pc, #52]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bfe:	e029      	b.n	8003c54 <HAL_RCC_OscConfig+0x52c>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b05      	cmp	r3, #5
 8003c06:	d115      	bne.n	8003c34 <HAL_RCC_OscConfig+0x50c>
 8003c08:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	4a07      	ldr	r2, [pc, #28]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003c10:	f043 0304 	orr.w	r3, r3, #4
 8003c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1e:	4a03      	ldr	r2, [pc, #12]	; (8003c2c <HAL_RCC_OscConfig+0x504>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c28:	e014      	b.n	8003c54 <HAL_RCC_OscConfig+0x52c>
 8003c2a:	bf00      	nop
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40007000 	.word	0x40007000
 8003c34:	4b9a      	ldr	r3, [pc, #616]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3a:	4a99      	ldr	r2, [pc, #612]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003c3c:	f023 0301 	bic.w	r3, r3, #1
 8003c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c44:	4b96      	ldr	r3, [pc, #600]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	4a95      	ldr	r2, [pc, #596]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003c4c:	f023 0304 	bic.w	r3, r3, #4
 8003c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d016      	beq.n	8003c8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5c:	f7fe fb64 	bl	8002328 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c62:	e00a      	b.n	8003c7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c64:	f7fe fb60 	bl	8002328 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e162      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c7a:	4b89      	ldr	r3, [pc, #548]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0ed      	beq.n	8003c64 <HAL_RCC_OscConfig+0x53c>
 8003c88:	e015      	b.n	8003cb6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8a:	f7fe fb4d 	bl	8002328 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c90:	e00a      	b.n	8003ca8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c92:	f7fe fb49 	bl	8002328 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e14b      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ca8:	4b7d      	ldr	r3, [pc, #500]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1ed      	bne.n	8003c92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cb6:	7ffb      	ldrb	r3, [r7, #31]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d105      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cbc:	4b78      	ldr	r3, [pc, #480]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc0:	4a77      	ldr	r2, [pc, #476]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d03c      	beq.n	8003d4e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01c      	beq.n	8003d16 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cdc:	4b70      	ldr	r3, [pc, #448]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003cde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ce2:	4a6f      	ldr	r2, [pc, #444]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cec:	f7fe fb1c 	bl	8002328 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cf4:	f7fe fb18 	bl	8002328 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e11c      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d06:	4b66      	ldr	r3, [pc, #408]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003d08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0ef      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x5cc>
 8003d14:	e01b      	b.n	8003d4e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d16:	4b62      	ldr	r3, [pc, #392]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003d18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d1c:	4a60      	ldr	r2, [pc, #384]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003d1e:	f023 0301 	bic.w	r3, r3, #1
 8003d22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d26:	f7fe faff 	bl	8002328 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d2e:	f7fe fafb 	bl	8002328 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e0ff      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d40:	4b57      	ldr	r3, [pc, #348]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003d42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1ef      	bne.n	8003d2e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 80f3 	beq.w	8003f3e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	f040 80c9 	bne.w	8003ef4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d62:	4b4f      	ldr	r3, [pc, #316]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f003 0203 	and.w	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d12c      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	3b01      	subs	r3, #1
 8003d82:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d123      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d92:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d11b      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d113      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db2:	085b      	lsrs	r3, r3, #1
 8003db4:	3b01      	subs	r3, #1
 8003db6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d109      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	085b      	lsrs	r3, r3, #1
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d06b      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2b0c      	cmp	r3, #12
 8003dd4:	d062      	beq.n	8003e9c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003dd6:	4b32      	ldr	r3, [pc, #200]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e0ac      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003de6:	4b2e      	ldr	r3, [pc, #184]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a2d      	ldr	r2, [pc, #180]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003dec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003df0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003df2:	f7fe fa99 	bl	8002328 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfa:	f7fe fa95 	bl	8002328 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e099      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e0c:	4b24      	ldr	r3, [pc, #144]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1f0      	bne.n	8003dfa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e18:	4b21      	ldr	r3, [pc, #132]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	4b21      	ldr	r3, [pc, #132]	; (8003ea4 <HAL_RCC_OscConfig+0x77c>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e28:	3a01      	subs	r2, #1
 8003e2a:	0112      	lsls	r2, r2, #4
 8003e2c:	4311      	orrs	r1, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e32:	0212      	lsls	r2, r2, #8
 8003e34:	4311      	orrs	r1, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e3a:	0852      	lsrs	r2, r2, #1
 8003e3c:	3a01      	subs	r2, #1
 8003e3e:	0552      	lsls	r2, r2, #21
 8003e40:	4311      	orrs	r1, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e46:	0852      	lsrs	r2, r2, #1
 8003e48:	3a01      	subs	r2, #1
 8003e4a:	0652      	lsls	r2, r2, #25
 8003e4c:	4311      	orrs	r1, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e52:	06d2      	lsls	r2, r2, #27
 8003e54:	430a      	orrs	r2, r1
 8003e56:	4912      	ldr	r1, [pc, #72]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e5c:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a0f      	ldr	r2, [pc, #60]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e68:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	4a0c      	ldr	r2, [pc, #48]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e74:	f7fe fa58 	bl	8002328 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7c:	f7fe fa54 	bl	8002328 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e058      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e8e:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <HAL_RCC_OscConfig+0x778>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e9a:	e050      	b.n	8003f3e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e04f      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea8:	4b27      	ldr	r3, [pc, #156]	; (8003f48 <HAL_RCC_OscConfig+0x820>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d144      	bne.n	8003f3e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003eb4:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <HAL_RCC_OscConfig+0x820>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a23      	ldr	r2, [pc, #140]	; (8003f48 <HAL_RCC_OscConfig+0x820>)
 8003eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ebe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ec0:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <HAL_RCC_OscConfig+0x820>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4a20      	ldr	r2, [pc, #128]	; (8003f48 <HAL_RCC_OscConfig+0x820>)
 8003ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ecc:	f7fe fa2c 	bl	8002328 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed4:	f7fe fa28 	bl	8002328 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e02c      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee6:	4b18      	ldr	r3, [pc, #96]	; (8003f48 <HAL_RCC_OscConfig+0x820>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x7ac>
 8003ef2:	e024      	b.n	8003f3e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b0c      	cmp	r3, #12
 8003ef8:	d01f      	beq.n	8003f3a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efa:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <HAL_RCC_OscConfig+0x820>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a12      	ldr	r2, [pc, #72]	; (8003f48 <HAL_RCC_OscConfig+0x820>)
 8003f00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f06:	f7fe fa0f 	bl	8002328 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0e:	f7fe fa0b 	bl	8002328 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e00f      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f20:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <HAL_RCC_OscConfig+0x820>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1f0      	bne.n	8003f0e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_RCC_OscConfig+0x820>)
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	4905      	ldr	r1, [pc, #20]	; (8003f48 <HAL_RCC_OscConfig+0x820>)
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <HAL_RCC_OscConfig+0x824>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	60cb      	str	r3, [r1, #12]
 8003f38:	e001      	b.n	8003f3e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3720      	adds	r7, #32
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	feeefffc 	.word	0xfeeefffc

08003f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0e7      	b.n	8004134 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f64:	4b75      	ldr	r3, [pc, #468]	; (800413c <HAL_RCC_ClockConfig+0x1ec>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d910      	bls.n	8003f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f72:	4b72      	ldr	r3, [pc, #456]	; (800413c <HAL_RCC_ClockConfig+0x1ec>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 0207 	bic.w	r2, r3, #7
 8003f7a:	4970      	ldr	r1, [pc, #448]	; (800413c <HAL_RCC_ClockConfig+0x1ec>)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f82:	4b6e      	ldr	r3, [pc, #440]	; (800413c <HAL_RCC_ClockConfig+0x1ec>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0cf      	b.n	8004134 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d010      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	4b66      	ldr	r3, [pc, #408]	; (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d908      	bls.n	8003fc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb0:	4b63      	ldr	r3, [pc, #396]	; (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	4960      	ldr	r1, [pc, #384]	; (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d04c      	beq.n	8004068 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d107      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fd6:	4b5a      	ldr	r3, [pc, #360]	; (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d121      	bne.n	8004026 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e0a6      	b.n	8004134 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d107      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fee:	4b54      	ldr	r3, [pc, #336]	; (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d115      	bne.n	8004026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e09a      	b.n	8004134 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d107      	bne.n	8004016 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004006:	4b4e      	ldr	r3, [pc, #312]	; (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d109      	bne.n	8004026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e08e      	b.n	8004134 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004016:	4b4a      	ldr	r3, [pc, #296]	; (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e086      	b.n	8004134 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004026:	4b46      	ldr	r3, [pc, #280]	; (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f023 0203 	bic.w	r2, r3, #3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4943      	ldr	r1, [pc, #268]	; (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8004034:	4313      	orrs	r3, r2
 8004036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004038:	f7fe f976 	bl	8002328 <HAL_GetTick>
 800403c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403e:	e00a      	b.n	8004056 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004040:	f7fe f972 	bl	8002328 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	; 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e06e      	b.n	8004134 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004056:	4b3a      	ldr	r3, [pc, #232]	; (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 020c 	and.w	r2, r3, #12
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	429a      	cmp	r2, r3
 8004066:	d1eb      	bne.n	8004040 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d010      	beq.n	8004096 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	4b31      	ldr	r3, [pc, #196]	; (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004080:	429a      	cmp	r2, r3
 8004082:	d208      	bcs.n	8004096 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004084:	4b2e      	ldr	r3, [pc, #184]	; (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	492b      	ldr	r1, [pc, #172]	; (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004096:	4b29      	ldr	r3, [pc, #164]	; (800413c <HAL_RCC_ClockConfig+0x1ec>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d210      	bcs.n	80040c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a4:	4b25      	ldr	r3, [pc, #148]	; (800413c <HAL_RCC_ClockConfig+0x1ec>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f023 0207 	bic.w	r2, r3, #7
 80040ac:	4923      	ldr	r1, [pc, #140]	; (800413c <HAL_RCC_ClockConfig+0x1ec>)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b4:	4b21      	ldr	r3, [pc, #132]	; (800413c <HAL_RCC_ClockConfig+0x1ec>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d001      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e036      	b.n	8004134 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d2:	4b1b      	ldr	r3, [pc, #108]	; (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	4918      	ldr	r1, [pc, #96]	; (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d009      	beq.n	8004104 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040f0:	4b13      	ldr	r3, [pc, #76]	; (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	4910      	ldr	r1, [pc, #64]	; (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8004100:	4313      	orrs	r3, r2
 8004102:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004104:	f000 f824 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8004108:	4602      	mov	r2, r0
 800410a:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	091b      	lsrs	r3, r3, #4
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	490b      	ldr	r1, [pc, #44]	; (8004144 <HAL_RCC_ClockConfig+0x1f4>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
 8004120:	4a09      	ldr	r2, [pc, #36]	; (8004148 <HAL_RCC_ClockConfig+0x1f8>)
 8004122:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004124:	4b09      	ldr	r3, [pc, #36]	; (800414c <HAL_RCC_ClockConfig+0x1fc>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f7fe f8ad 	bl	8002288 <HAL_InitTick>
 800412e:	4603      	mov	r3, r0
 8004130:	72fb      	strb	r3, [r7, #11]

  return status;
 8004132:	7afb      	ldrb	r3, [r7, #11]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40022000 	.word	0x40022000
 8004140:	40021000 	.word	0x40021000
 8004144:	08006770 	.word	0x08006770
 8004148:	20000000 	.word	0x20000000
 800414c:	20000004 	.word	0x20000004

08004150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004150:	b480      	push	{r7}
 8004152:	b089      	sub	sp, #36	; 0x24
 8004154:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
 800415a:	2300      	movs	r3, #0
 800415c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800415e:	4b3e      	ldr	r3, [pc, #248]	; (8004258 <HAL_RCC_GetSysClockFreq+0x108>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004168:	4b3b      	ldr	r3, [pc, #236]	; (8004258 <HAL_RCC_GetSysClockFreq+0x108>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0x34>
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	2b0c      	cmp	r3, #12
 800417c:	d121      	bne.n	80041c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d11e      	bne.n	80041c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004184:	4b34      	ldr	r3, [pc, #208]	; (8004258 <HAL_RCC_GetSysClockFreq+0x108>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d107      	bne.n	80041a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004190:	4b31      	ldr	r3, [pc, #196]	; (8004258 <HAL_RCC_GetSysClockFreq+0x108>)
 8004192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004196:	0a1b      	lsrs	r3, r3, #8
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	e005      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041a0:	4b2d      	ldr	r3, [pc, #180]	; (8004258 <HAL_RCC_GetSysClockFreq+0x108>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041ac:	4a2b      	ldr	r2, [pc, #172]	; (800425c <HAL_RCC_GetSysClockFreq+0x10c>)
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10d      	bne.n	80041d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041c0:	e00a      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d102      	bne.n	80041ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041c8:	4b25      	ldr	r3, [pc, #148]	; (8004260 <HAL_RCC_GetSysClockFreq+0x110>)
 80041ca:	61bb      	str	r3, [r7, #24]
 80041cc:	e004      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d101      	bne.n	80041d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041d4:	4b23      	ldr	r3, [pc, #140]	; (8004264 <HAL_RCC_GetSysClockFreq+0x114>)
 80041d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b0c      	cmp	r3, #12
 80041dc:	d134      	bne.n	8004248 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041de:	4b1e      	ldr	r3, [pc, #120]	; (8004258 <HAL_RCC_GetSysClockFreq+0x108>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d003      	beq.n	80041f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b03      	cmp	r3, #3
 80041f2:	d003      	beq.n	80041fc <HAL_RCC_GetSysClockFreq+0xac>
 80041f4:	e005      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041f6:	4b1a      	ldr	r3, [pc, #104]	; (8004260 <HAL_RCC_GetSysClockFreq+0x110>)
 80041f8:	617b      	str	r3, [r7, #20]
      break;
 80041fa:	e005      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041fc:	4b19      	ldr	r3, [pc, #100]	; (8004264 <HAL_RCC_GetSysClockFreq+0x114>)
 80041fe:	617b      	str	r3, [r7, #20]
      break;
 8004200:	e002      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	617b      	str	r3, [r7, #20]
      break;
 8004206:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004208:	4b13      	ldr	r3, [pc, #76]	; (8004258 <HAL_RCC_GetSysClockFreq+0x108>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	091b      	lsrs	r3, r3, #4
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	3301      	adds	r3, #1
 8004214:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004216:	4b10      	ldr	r3, [pc, #64]	; (8004258 <HAL_RCC_GetSysClockFreq+0x108>)
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	0a1b      	lsrs	r3, r3, #8
 800421c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	fb03 f202 	mul.w	r2, r3, r2
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	fbb2 f3f3 	udiv	r3, r2, r3
 800422c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800422e:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <HAL_RCC_GetSysClockFreq+0x108>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	0e5b      	lsrs	r3, r3, #25
 8004234:	f003 0303 	and.w	r3, r3, #3
 8004238:	3301      	adds	r3, #1
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	fbb2 f3f3 	udiv	r3, r2, r3
 8004246:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004248:	69bb      	ldr	r3, [r7, #24]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3724      	adds	r7, #36	; 0x24
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40021000 	.word	0x40021000
 800425c:	08006780 	.word	0x08006780
 8004260:	00f42400 	.word	0x00f42400
 8004264:	016e3600 	.word	0x016e3600

08004268 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004270:	2300      	movs	r3, #0
 8004272:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004274:	4b2a      	ldr	r3, [pc, #168]	; (8004320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004280:	f7ff f9ee 	bl	8003660 <HAL_PWREx_GetVoltageRange>
 8004284:	6178      	str	r0, [r7, #20]
 8004286:	e014      	b.n	80042b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004288:	4b25      	ldr	r3, [pc, #148]	; (8004320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800428a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428c:	4a24      	ldr	r2, [pc, #144]	; (8004320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800428e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004292:	6593      	str	r3, [r2, #88]	; 0x58
 8004294:	4b22      	ldr	r3, [pc, #136]	; (8004320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042a0:	f7ff f9de 	bl	8003660 <HAL_PWREx_GetVoltageRange>
 80042a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042a6:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042aa:	4a1d      	ldr	r2, [pc, #116]	; (8004320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042b8:	d10b      	bne.n	80042d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b80      	cmp	r3, #128	; 0x80
 80042be:	d919      	bls.n	80042f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2ba0      	cmp	r3, #160	; 0xa0
 80042c4:	d902      	bls.n	80042cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042c6:	2302      	movs	r3, #2
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	e013      	b.n	80042f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042cc:	2301      	movs	r3, #1
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	e010      	b.n	80042f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b80      	cmp	r3, #128	; 0x80
 80042d6:	d902      	bls.n	80042de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042d8:	2303      	movs	r3, #3
 80042da:	613b      	str	r3, [r7, #16]
 80042dc:	e00a      	b.n	80042f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b80      	cmp	r3, #128	; 0x80
 80042e2:	d102      	bne.n	80042ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042e4:	2302      	movs	r3, #2
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	e004      	b.n	80042f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b70      	cmp	r3, #112	; 0x70
 80042ee:	d101      	bne.n	80042f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042f0:	2301      	movs	r3, #1
 80042f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042f4:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f023 0207 	bic.w	r2, r3, #7
 80042fc:	4909      	ldr	r1, [pc, #36]	; (8004324 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004304:	4b07      	ldr	r3, [pc, #28]	; (8004324 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	429a      	cmp	r2, r3
 8004310:	d001      	beq.n	8004316 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40021000 	.word	0x40021000
 8004324:	40022000 	.word	0x40022000

08004328 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004330:	2300      	movs	r3, #0
 8004332:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004334:	2300      	movs	r3, #0
 8004336:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004340:	2b00      	cmp	r3, #0
 8004342:	d031      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004348:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800434c:	d01a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800434e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004352:	d814      	bhi.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004354:	2b00      	cmp	r3, #0
 8004356:	d009      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004358:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800435c:	d10f      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800435e:	4b5d      	ldr	r3, [pc, #372]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	4a5c      	ldr	r2, [pc, #368]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004368:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800436a:	e00c      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
 8004370:	2100      	movs	r1, #0
 8004372:	4618      	mov	r0, r3
 8004374:	f000 f9ce 	bl	8004714 <RCCEx_PLLSAI1_Config>
 8004378:	4603      	mov	r3, r0
 800437a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800437c:	e003      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	74fb      	strb	r3, [r7, #19]
      break;
 8004382:	e000      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004386:	7cfb      	ldrb	r3, [r7, #19]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10b      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800438c:	4b51      	ldr	r3, [pc, #324]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800438e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004392:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439a:	494e      	ldr	r1, [pc, #312]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043a2:	e001      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a4:	7cfb      	ldrb	r3, [r7, #19]
 80043a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 809e 	beq.w	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b6:	2300      	movs	r3, #0
 80043b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043ba:	4b46      	ldr	r3, [pc, #280]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80043ca:	2300      	movs	r3, #0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00d      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d0:	4b40      	ldr	r3, [pc, #256]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d4:	4a3f      	ldr	r2, [pc, #252]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043da:	6593      	str	r3, [r2, #88]	; 0x58
 80043dc:	4b3d      	ldr	r3, [pc, #244]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043e8:	2301      	movs	r3, #1
 80043ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043ec:	4b3a      	ldr	r3, [pc, #232]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a39      	ldr	r2, [pc, #228]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043f8:	f7fd ff96 	bl	8002328 <HAL_GetTick>
 80043fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043fe:	e009      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004400:	f7fd ff92 	bl	8002328 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d902      	bls.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	74fb      	strb	r3, [r7, #19]
        break;
 8004412:	e005      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004414:	4b30      	ldr	r3, [pc, #192]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0ef      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004420:	7cfb      	ldrb	r3, [r7, #19]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d15a      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004426:	4b2b      	ldr	r3, [pc, #172]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004430:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01e      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	429a      	cmp	r2, r3
 8004440:	d019      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004442:	4b24      	ldr	r3, [pc, #144]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800444e:	4b21      	ldr	r3, [pc, #132]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004454:	4a1f      	ldr	r2, [pc, #124]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800445a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800445e:	4b1d      	ldr	r3, [pc, #116]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004464:	4a1b      	ldr	r2, [pc, #108]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800446a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800446e:	4a19      	ldr	r2, [pc, #100]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d016      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fd ff52 	bl	8002328 <HAL_GetTick>
 8004484:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004486:	e00b      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004488:	f7fd ff4e 	bl	8002328 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f241 3288 	movw	r2, #5000	; 0x1388
 8004496:	4293      	cmp	r3, r2
 8004498:	d902      	bls.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	74fb      	strb	r3, [r7, #19]
            break;
 800449e:	e006      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044a0:	4b0c      	ldr	r3, [pc, #48]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0ec      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80044ae:	7cfb      	ldrb	r3, [r7, #19]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10b      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044b4:	4b07      	ldr	r3, [pc, #28]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c2:	4904      	ldr	r1, [pc, #16]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044ca:	e009      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044cc:	7cfb      	ldrb	r3, [r7, #19]
 80044ce:	74bb      	strb	r3, [r7, #18]
 80044d0:	e006      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80044d2:	bf00      	nop
 80044d4:	40021000 	.word	0x40021000
 80044d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044e0:	7c7b      	ldrb	r3, [r7, #17]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d105      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e6:	4b8a      	ldr	r3, [pc, #552]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ea:	4a89      	ldr	r2, [pc, #548]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044fe:	4b84      	ldr	r3, [pc, #528]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004504:	f023 0203 	bic.w	r2, r3, #3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	4980      	ldr	r1, [pc, #512]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004520:	4b7b      	ldr	r3, [pc, #492]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004526:	f023 020c 	bic.w	r2, r3, #12
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	4978      	ldr	r1, [pc, #480]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00a      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004542:	4b73      	ldr	r3, [pc, #460]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004548:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004550:	496f      	ldr	r1, [pc, #444]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004564:	4b6a      	ldr	r3, [pc, #424]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004572:	4967      	ldr	r1, [pc, #412]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004586:	4b62      	ldr	r3, [pc, #392]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	495e      	ldr	r1, [pc, #376]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045a8:	4b59      	ldr	r3, [pc, #356]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	4956      	ldr	r1, [pc, #344]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045ca:	4b51      	ldr	r3, [pc, #324]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d8:	494d      	ldr	r1, [pc, #308]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d028      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045ec:	4b48      	ldr	r3, [pc, #288]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	4945      	ldr	r1, [pc, #276]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800460a:	d106      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800460c:	4b40      	ldr	r3, [pc, #256]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4a3f      	ldr	r2, [pc, #252]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004616:	60d3      	str	r3, [r2, #12]
 8004618:	e011      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004622:	d10c      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3304      	adds	r3, #4
 8004628:	2101      	movs	r1, #1
 800462a:	4618      	mov	r0, r3
 800462c:	f000 f872 	bl	8004714 <RCCEx_PLLSAI1_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004634:	7cfb      	ldrb	r3, [r7, #19]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800463a:	7cfb      	ldrb	r3, [r7, #19]
 800463c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d028      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800464a:	4b31      	ldr	r3, [pc, #196]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004658:	492d      	ldr	r1, [pc, #180]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004664:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004668:	d106      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800466a:	4b29      	ldr	r3, [pc, #164]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	4a28      	ldr	r2, [pc, #160]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004674:	60d3      	str	r3, [r2, #12]
 8004676:	e011      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004680:	d10c      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3304      	adds	r3, #4
 8004686:	2101      	movs	r1, #1
 8004688:	4618      	mov	r0, r3
 800468a:	f000 f843 	bl	8004714 <RCCEx_PLLSAI1_Config>
 800468e:	4603      	mov	r3, r0
 8004690:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004692:	7cfb      	ldrb	r3, [r7, #19]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01c      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046a8:	4b19      	ldr	r3, [pc, #100]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b6:	4916      	ldr	r1, [pc, #88]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046c6:	d10c      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3304      	adds	r3, #4
 80046cc:	2102      	movs	r1, #2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 f820 	bl	8004714 <RCCEx_PLLSAI1_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046d8:	7cfb      	ldrb	r3, [r7, #19]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80046de:	7cfb      	ldrb	r3, [r7, #19]
 80046e0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046ee:	4b08      	ldr	r3, [pc, #32]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fc:	4904      	ldr	r1, [pc, #16]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004704:	7cbb      	ldrb	r3, [r7, #18]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40021000 	.word	0x40021000

08004714 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004722:	4b74      	ldr	r3, [pc, #464]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d018      	beq.n	8004760 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800472e:	4b71      	ldr	r3, [pc, #452]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f003 0203 	and.w	r2, r3, #3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d10d      	bne.n	800475a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
       ||
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004746:	4b6b      	ldr	r3, [pc, #428]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	091b      	lsrs	r3, r3, #4
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
       ||
 8004756:	429a      	cmp	r2, r3
 8004758:	d047      	beq.n	80047ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
 800475e:	e044      	b.n	80047ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b03      	cmp	r3, #3
 8004766:	d018      	beq.n	800479a <RCCEx_PLLSAI1_Config+0x86>
 8004768:	2b03      	cmp	r3, #3
 800476a:	d825      	bhi.n	80047b8 <RCCEx_PLLSAI1_Config+0xa4>
 800476c:	2b01      	cmp	r3, #1
 800476e:	d002      	beq.n	8004776 <RCCEx_PLLSAI1_Config+0x62>
 8004770:	2b02      	cmp	r3, #2
 8004772:	d009      	beq.n	8004788 <RCCEx_PLLSAI1_Config+0x74>
 8004774:	e020      	b.n	80047b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004776:	4b5f      	ldr	r3, [pc, #380]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d11d      	bne.n	80047be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004786:	e01a      	b.n	80047be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004788:	4b5a      	ldr	r3, [pc, #360]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004790:	2b00      	cmp	r3, #0
 8004792:	d116      	bne.n	80047c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004798:	e013      	b.n	80047c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800479a:	4b56      	ldr	r3, [pc, #344]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10f      	bne.n	80047c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047a6:	4b53      	ldr	r3, [pc, #332]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047b6:	e006      	b.n	80047c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	73fb      	strb	r3, [r7, #15]
      break;
 80047bc:	e004      	b.n	80047c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047be:	bf00      	nop
 80047c0:	e002      	b.n	80047c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047c2:	bf00      	nop
 80047c4:	e000      	b.n	80047c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10d      	bne.n	80047ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047ce:	4b49      	ldr	r3, [pc, #292]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6819      	ldr	r1, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	3b01      	subs	r3, #1
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	430b      	orrs	r3, r1
 80047e4:	4943      	ldr	r1, [pc, #268]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d17c      	bne.n	80048ea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047f0:	4b40      	ldr	r3, [pc, #256]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a3f      	ldr	r2, [pc, #252]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047fc:	f7fd fd94 	bl	8002328 <HAL_GetTick>
 8004800:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004802:	e009      	b.n	8004818 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004804:	f7fd fd90 	bl	8002328 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d902      	bls.n	8004818 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	73fb      	strb	r3, [r7, #15]
        break;
 8004816:	e005      	b.n	8004824 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004818:	4b36      	ldr	r3, [pc, #216]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1ef      	bne.n	8004804 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d15f      	bne.n	80048ea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d110      	bne.n	8004852 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004830:	4b30      	ldr	r3, [pc, #192]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004838:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6892      	ldr	r2, [r2, #8]
 8004840:	0211      	lsls	r1, r2, #8
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	68d2      	ldr	r2, [r2, #12]
 8004846:	06d2      	lsls	r2, r2, #27
 8004848:	430a      	orrs	r2, r1
 800484a:	492a      	ldr	r1, [pc, #168]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800484c:	4313      	orrs	r3, r2
 800484e:	610b      	str	r3, [r1, #16]
 8004850:	e027      	b.n	80048a2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d112      	bne.n	800487e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004858:	4b26      	ldr	r3, [pc, #152]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004860:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6892      	ldr	r2, [r2, #8]
 8004868:	0211      	lsls	r1, r2, #8
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6912      	ldr	r2, [r2, #16]
 800486e:	0852      	lsrs	r2, r2, #1
 8004870:	3a01      	subs	r2, #1
 8004872:	0552      	lsls	r2, r2, #21
 8004874:	430a      	orrs	r2, r1
 8004876:	491f      	ldr	r1, [pc, #124]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004878:	4313      	orrs	r3, r2
 800487a:	610b      	str	r3, [r1, #16]
 800487c:	e011      	b.n	80048a2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800487e:	4b1d      	ldr	r3, [pc, #116]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004886:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6892      	ldr	r2, [r2, #8]
 800488e:	0211      	lsls	r1, r2, #8
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6952      	ldr	r2, [r2, #20]
 8004894:	0852      	lsrs	r2, r2, #1
 8004896:	3a01      	subs	r2, #1
 8004898:	0652      	lsls	r2, r2, #25
 800489a:	430a      	orrs	r2, r1
 800489c:	4915      	ldr	r1, [pc, #84]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048a2:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a13      	ldr	r2, [pc, #76]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ae:	f7fd fd3b 	bl	8002328 <HAL_GetTick>
 80048b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048b4:	e009      	b.n	80048ca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048b6:	f7fd fd37 	bl	8002328 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d902      	bls.n	80048ca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	73fb      	strb	r3, [r7, #15]
          break;
 80048c8:	e005      	b.n	80048d6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048ca:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0ef      	beq.n	80048b6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d106      	bne.n	80048ea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	4903      	ldr	r1, [pc, #12]	; (80048f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40021000 	.word	0x40021000

080048f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e095      	b.n	8004a36 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	2b00      	cmp	r3, #0
 8004910:	d108      	bne.n	8004924 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800491a:	d009      	beq.n	8004930 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	61da      	str	r2, [r3, #28]
 8004922:	e005      	b.n	8004930 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fd fa04 	bl	8001d58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004966:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004970:	d902      	bls.n	8004978 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	e002      	b.n	800497e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800497c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004986:	d007      	beq.n	8004998 <HAL_SPI_Init+0xa0>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004990:	d002      	beq.n	8004998 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049d0:	431a      	orrs	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049da:	ea42 0103 	orr.w	r1, r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	0c1b      	lsrs	r3, r3, #16
 80049f4:	f003 0204 	and.w	r2, r3, #4
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a14:	ea42 0103 	orr.w	r1, r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b088      	sub	sp, #32
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	603b      	str	r3, [r7, #0]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_SPI_Transmit+0x22>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e158      	b.n	8004d12 <HAL_SPI_Transmit+0x2d4>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a68:	f7fd fc5e 	bl	8002328 <HAL_GetTick>
 8004a6c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d002      	beq.n	8004a84 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a7e:	2302      	movs	r3, #2
 8004a80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a82:	e13d      	b.n	8004d00 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <HAL_SPI_Transmit+0x52>
 8004a8a:	88fb      	ldrh	r3, [r7, #6]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d102      	bne.n	8004a96 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a94:	e134      	b.n	8004d00 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2203      	movs	r2, #3
 8004a9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	88fa      	ldrh	r2, [r7, #6]
 8004aae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	88fa      	ldrh	r2, [r7, #6]
 8004ab4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae0:	d10f      	bne.n	8004b02 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0c:	2b40      	cmp	r3, #64	; 0x40
 8004b0e:	d007      	beq.n	8004b20 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b28:	d94b      	bls.n	8004bc2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <HAL_SPI_Transmit+0xfa>
 8004b32:	8afb      	ldrh	r3, [r7, #22]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d13e      	bne.n	8004bb6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	881a      	ldrh	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b48:	1c9a      	adds	r2, r3, #2
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b5c:	e02b      	b.n	8004bb6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d112      	bne.n	8004b92 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	881a      	ldrh	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	1c9a      	adds	r2, r3, #2
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b90:	e011      	b.n	8004bb6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b92:	f7fd fbc9 	bl	8002328 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d803      	bhi.n	8004baa <HAL_SPI_Transmit+0x16c>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ba8:	d102      	bne.n	8004bb0 <HAL_SPI_Transmit+0x172>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d102      	bne.n	8004bb6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bb4:	e0a4      	b.n	8004d00 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1ce      	bne.n	8004b5e <HAL_SPI_Transmit+0x120>
 8004bc0:	e07c      	b.n	8004cbc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <HAL_SPI_Transmit+0x192>
 8004bca:	8afb      	ldrh	r3, [r7, #22]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d170      	bne.n	8004cb2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d912      	bls.n	8004c00 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bde:	881a      	ldrh	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	1c9a      	adds	r2, r3, #2
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3b02      	subs	r3, #2
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bfe:	e058      	b.n	8004cb2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	330c      	adds	r3, #12
 8004c0a:	7812      	ldrb	r2, [r2, #0]
 8004c0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004c26:	e044      	b.n	8004cb2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d12b      	bne.n	8004c8e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d912      	bls.n	8004c66 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	881a      	ldrh	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	1c9a      	adds	r2, r3, #2
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b02      	subs	r3, #2
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c64:	e025      	b.n	8004cb2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	330c      	adds	r3, #12
 8004c70:	7812      	ldrb	r2, [r2, #0]
 8004c72:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c8c:	e011      	b.n	8004cb2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c8e:	f7fd fb4b 	bl	8002328 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d803      	bhi.n	8004ca6 <HAL_SPI_Transmit+0x268>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ca4:	d102      	bne.n	8004cac <HAL_SPI_Transmit+0x26e>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d102      	bne.n	8004cb2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cb0:	e026      	b.n	8004d00 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1b5      	bne.n	8004c28 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	6839      	ldr	r1, [r7, #0]
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fce3 	bl	800568c <SPI_EndRxTxTransaction>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10a      	bne.n	8004cf0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cda:	2300      	movs	r3, #0
 8004cdc:	613b      	str	r3, [r7, #16]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	77fb      	strb	r3, [r7, #31]
 8004cfc:	e000      	b.n	8004d00 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004cfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d10:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3720      	adds	r7, #32
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b088      	sub	sp, #32
 8004d1e:	af02      	add	r7, sp, #8
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	603b      	str	r3, [r7, #0]
 8004d26:	4613      	mov	r3, r2
 8004d28:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d36:	d112      	bne.n	8004d5e <HAL_SPI_Receive+0x44>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10e      	bne.n	8004d5e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2204      	movs	r2, #4
 8004d44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d48:	88fa      	ldrh	r2, [r7, #6]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	68b9      	ldr	r1, [r7, #8]
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 f910 	bl	8004f7a <HAL_SPI_TransmitReceive>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	e109      	b.n	8004f72 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <HAL_SPI_Receive+0x52>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e102      	b.n	8004f72 <HAL_SPI_Receive+0x258>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d74:	f7fd fad8 	bl	8002328 <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d002      	beq.n	8004d8c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004d86:	2302      	movs	r3, #2
 8004d88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d8a:	e0e9      	b.n	8004f60 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <HAL_SPI_Receive+0x7e>
 8004d92:	88fb      	ldrh	r3, [r7, #6]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d9c:	e0e0      	b.n	8004f60 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2204      	movs	r2, #4
 8004da2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	88fa      	ldrh	r2, [r7, #6]
 8004db6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	88fa      	ldrh	r2, [r7, #6]
 8004dbe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004de8:	d908      	bls.n	8004dfc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004df8:	605a      	str	r2, [r3, #4]
 8004dfa:	e007      	b.n	8004e0c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e0a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e14:	d10f      	bne.n	8004e36 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e34:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e40:	2b40      	cmp	r3, #64	; 0x40
 8004e42:	d007      	beq.n	8004e54 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e52:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e5c:	d867      	bhi.n	8004f2e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e5e:	e030      	b.n	8004ec2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d117      	bne.n	8004e9e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f103 020c 	add.w	r2, r3, #12
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	7812      	ldrb	r2, [r2, #0]
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004e9c:	e011      	b.n	8004ec2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e9e:	f7fd fa43 	bl	8002328 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d803      	bhi.n	8004eb6 <HAL_SPI_Receive+0x19c>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eb4:	d102      	bne.n	8004ebc <HAL_SPI_Receive+0x1a2>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d102      	bne.n	8004ec2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ec0:	e04e      	b.n	8004f60 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1c8      	bne.n	8004e60 <HAL_SPI_Receive+0x146>
 8004ece:	e034      	b.n	8004f3a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d115      	bne.n	8004f0a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	b292      	uxth	r2, r2
 8004eea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	1c9a      	adds	r2, r3, #2
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004f08:	e011      	b.n	8004f2e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f0a:	f7fd fa0d 	bl	8002328 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d803      	bhi.n	8004f22 <HAL_SPI_Receive+0x208>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f20:	d102      	bne.n	8004f28 <HAL_SPI_Receive+0x20e>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d102      	bne.n	8004f2e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f2c:	e018      	b.n	8004f60 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1ca      	bne.n	8004ed0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	6839      	ldr	r1, [r7, #0]
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 fb4c 	bl	80055dc <SPI_EndRxTransaction>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	75fb      	strb	r3, [r7, #23]
 8004f5c:	e000      	b.n	8004f60 <HAL_SPI_Receive+0x246>
  }

error :
 8004f5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b08a      	sub	sp, #40	; 0x28
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	60f8      	str	r0, [r7, #12]
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	607a      	str	r2, [r7, #4]
 8004f86:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_SPI_TransmitReceive+0x26>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e1fb      	b.n	8005398 <HAL_SPI_TransmitReceive+0x41e>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fa8:	f7fd f9be 	bl	8002328 <HAL_GetTick>
 8004fac:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fb4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004fbc:	887b      	ldrh	r3, [r7, #2]
 8004fbe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004fc0:	887b      	ldrh	r3, [r7, #2]
 8004fc2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fc4:	7efb      	ldrb	r3, [r7, #27]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d00e      	beq.n	8004fe8 <HAL_SPI_TransmitReceive+0x6e>
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fd0:	d106      	bne.n	8004fe0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d102      	bne.n	8004fe0 <HAL_SPI_TransmitReceive+0x66>
 8004fda:	7efb      	ldrb	r3, [r7, #27]
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d003      	beq.n	8004fe8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004fe6:	e1cd      	b.n	8005384 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_SPI_TransmitReceive+0x80>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <HAL_SPI_TransmitReceive+0x80>
 8004ff4:	887b      	ldrh	r3, [r7, #2]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d103      	bne.n	8005002 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005000:	e1c0      	b.n	8005384 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b04      	cmp	r3, #4
 800500c:	d003      	beq.n	8005016 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2205      	movs	r2, #5
 8005012:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	887a      	ldrh	r2, [r7, #2]
 8005026:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	887a      	ldrh	r2, [r7, #2]
 800502e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	887a      	ldrh	r2, [r7, #2]
 800503c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	887a      	ldrh	r2, [r7, #2]
 8005042:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005058:	d802      	bhi.n	8005060 <HAL_SPI_TransmitReceive+0xe6>
 800505a:	8a3b      	ldrh	r3, [r7, #16]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d908      	bls.n	8005072 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800506e:	605a      	str	r2, [r3, #4]
 8005070:	e007      	b.n	8005082 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005080:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508c:	2b40      	cmp	r3, #64	; 0x40
 800508e:	d007      	beq.n	80050a0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800509e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050a8:	d97c      	bls.n	80051a4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <HAL_SPI_TransmitReceive+0x13e>
 80050b2:	8a7b      	ldrh	r3, [r7, #18]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d169      	bne.n	800518c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	881a      	ldrh	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	1c9a      	adds	r2, r3, #2
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050dc:	e056      	b.n	800518c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d11b      	bne.n	8005124 <HAL_SPI_TransmitReceive+0x1aa>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d016      	beq.n	8005124 <HAL_SPI_TransmitReceive+0x1aa>
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d113      	bne.n	8005124 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	881a      	ldrh	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	1c9a      	adds	r2, r3, #2
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b01      	cmp	r3, #1
 8005130:	d11c      	bne.n	800516c <HAL_SPI_TransmitReceive+0x1f2>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d016      	beq.n	800516c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005148:	b292      	uxth	r2, r2
 800514a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	1c9a      	adds	r2, r3, #2
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005168:	2301      	movs	r3, #1
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800516c:	f7fd f8dc 	bl	8002328 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005178:	429a      	cmp	r2, r3
 800517a:	d807      	bhi.n	800518c <HAL_SPI_TransmitReceive+0x212>
 800517c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005182:	d003      	beq.n	800518c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800518a:	e0fb      	b.n	8005384 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1a3      	bne.n	80050de <HAL_SPI_TransmitReceive+0x164>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d19d      	bne.n	80050de <HAL_SPI_TransmitReceive+0x164>
 80051a2:	e0df      	b.n	8005364 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <HAL_SPI_TransmitReceive+0x23a>
 80051ac:	8a7b      	ldrh	r3, [r7, #18]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	f040 80cb 	bne.w	800534a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d912      	bls.n	80051e4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	881a      	ldrh	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	1c9a      	adds	r2, r3, #2
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b02      	subs	r3, #2
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051e2:	e0b2      	b.n	800534a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	330c      	adds	r3, #12
 80051ee:	7812      	ldrb	r2, [r2, #0]
 80051f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005200:	b29b      	uxth	r3, r3
 8005202:	3b01      	subs	r3, #1
 8005204:	b29a      	uxth	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800520a:	e09e      	b.n	800534a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b02      	cmp	r3, #2
 8005218:	d134      	bne.n	8005284 <HAL_SPI_TransmitReceive+0x30a>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800521e:	b29b      	uxth	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d02f      	beq.n	8005284 <HAL_SPI_TransmitReceive+0x30a>
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	2b01      	cmp	r3, #1
 8005228:	d12c      	bne.n	8005284 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800522e:	b29b      	uxth	r3, r3
 8005230:	2b01      	cmp	r3, #1
 8005232:	d912      	bls.n	800525a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005238:	881a      	ldrh	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	1c9a      	adds	r2, r3, #2
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524e:	b29b      	uxth	r3, r3
 8005250:	3b02      	subs	r3, #2
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005258:	e012      	b.n	8005280 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	330c      	adds	r3, #12
 8005264:	7812      	ldrb	r2, [r2, #0]
 8005266:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b01      	cmp	r3, #1
 8005290:	d148      	bne.n	8005324 <HAL_SPI_TransmitReceive+0x3aa>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d042      	beq.n	8005324 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d923      	bls.n	80052f2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b4:	b292      	uxth	r2, r2
 80052b6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	1c9a      	adds	r2, r3, #2
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b02      	subs	r3, #2
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d81f      	bhi.n	8005320 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052ee:	605a      	str	r2, [r3, #4]
 80052f0:	e016      	b.n	8005320 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f103 020c 	add.w	r2, r3, #12
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	7812      	ldrb	r2, [r2, #0]
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005314:	b29b      	uxth	r3, r3
 8005316:	3b01      	subs	r3, #1
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005320:	2301      	movs	r3, #1
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005324:	f7fd f800 	bl	8002328 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005330:	429a      	cmp	r2, r3
 8005332:	d803      	bhi.n	800533c <HAL_SPI_TransmitReceive+0x3c2>
 8005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800533a:	d102      	bne.n	8005342 <HAL_SPI_TransmitReceive+0x3c8>
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	2b00      	cmp	r3, #0
 8005340:	d103      	bne.n	800534a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005348:	e01c      	b.n	8005384 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534e:	b29b      	uxth	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	f47f af5b 	bne.w	800520c <HAL_SPI_TransmitReceive+0x292>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800535c:	b29b      	uxth	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	f47f af54 	bne.w	800520c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f98f 	bl	800568c <SPI_EndRxTxTransaction>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d006      	beq.n	8005382 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2220      	movs	r2, #32
 800537e:	661a      	str	r2, [r3, #96]	; 0x60
 8005380:	e000      	b.n	8005384 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005382:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005394:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005398:	4618      	mov	r0, r3
 800539a:	3728      	adds	r7, #40	; 0x28
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	603b      	str	r3, [r7, #0]
 80053ac:	4613      	mov	r3, r2
 80053ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053b0:	f7fc ffba 	bl	8002328 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b8:	1a9b      	subs	r3, r3, r2
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	4413      	add	r3, r2
 80053be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053c0:	f7fc ffb2 	bl	8002328 <HAL_GetTick>
 80053c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053c6:	4b39      	ldr	r3, [pc, #228]	; (80054ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	015b      	lsls	r3, r3, #5
 80053cc:	0d1b      	lsrs	r3, r3, #20
 80053ce:	69fa      	ldr	r2, [r7, #28]
 80053d0:	fb02 f303 	mul.w	r3, r2, r3
 80053d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053d6:	e054      	b.n	8005482 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053de:	d050      	beq.n	8005482 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053e0:	f7fc ffa2 	bl	8002328 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d902      	bls.n	80053f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d13d      	bne.n	8005472 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005404:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800540e:	d111      	bne.n	8005434 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005418:	d004      	beq.n	8005424 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005422:	d107      	bne.n	8005434 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005432:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800543c:	d10f      	bne.n	800545e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800545c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e017      	b.n	80054a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	3b01      	subs	r3, #1
 8005480:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4013      	ands	r3, r2
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	429a      	cmp	r2, r3
 8005490:	bf0c      	ite	eq
 8005492:	2301      	moveq	r3, #1
 8005494:	2300      	movne	r3, #0
 8005496:	b2db      	uxtb	r3, r3
 8005498:	461a      	mov	r2, r3
 800549a:	79fb      	ldrb	r3, [r7, #7]
 800549c:	429a      	cmp	r2, r3
 800549e:	d19b      	bne.n	80053d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3720      	adds	r7, #32
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000000 	.word	0x20000000

080054b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08a      	sub	sp, #40	; 0x28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80054c2:	f7fc ff31 	bl	8002328 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	4413      	add	r3, r2
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80054d2:	f7fc ff29 	bl	8002328 <HAL_GetTick>
 80054d6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	330c      	adds	r3, #12
 80054de:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80054e0:	4b3d      	ldr	r3, [pc, #244]	; (80055d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	4613      	mov	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	00da      	lsls	r2, r3, #3
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	0d1b      	lsrs	r3, r3, #20
 80054f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
 80054f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80054f8:	e060      	b.n	80055bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005500:	d107      	bne.n	8005512 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d104      	bne.n	8005512 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	b2db      	uxtb	r3, r3
 800550e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005510:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005518:	d050      	beq.n	80055bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800551a:	f7fc ff05 	bl	8002328 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005526:	429a      	cmp	r2, r3
 8005528:	d902      	bls.n	8005530 <SPI_WaitFifoStateUntilTimeout+0x80>
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	2b00      	cmp	r3, #0
 800552e:	d13d      	bne.n	80055ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800553e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005548:	d111      	bne.n	800556e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005552:	d004      	beq.n	800555e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800555c:	d107      	bne.n	800556e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800556c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005576:	d10f      	bne.n	8005598 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005596:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e010      	b.n	80055ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	3b01      	subs	r3, #1
 80055ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	4013      	ands	r3, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d196      	bne.n	80054fa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3728      	adds	r7, #40	; 0x28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000000 	.word	0x20000000

080055dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055f0:	d111      	bne.n	8005616 <SPI_EndRxTransaction+0x3a>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055fa:	d004      	beq.n	8005606 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005604:	d107      	bne.n	8005616 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005614:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2200      	movs	r2, #0
 800561e:	2180      	movs	r1, #128	; 0x80
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff febd 	bl	80053a0 <SPI_WaitFlagStateUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d007      	beq.n	800563c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005630:	f043 0220 	orr.w	r2, r3, #32
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e023      	b.n	8005684 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005644:	d11d      	bne.n	8005682 <SPI_EndRxTransaction+0xa6>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800564e:	d004      	beq.n	800565a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005658:	d113      	bne.n	8005682 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2200      	movs	r2, #0
 8005662:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f7ff ff22 	bl	80054b0 <SPI_WaitFifoStateUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d007      	beq.n	8005682 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005676:	f043 0220 	orr.w	r2, r3, #32
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e000      	b.n	8005684 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af02      	add	r7, sp, #8
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2200      	movs	r2, #0
 80056a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f7ff ff03 	bl	80054b0 <SPI_WaitFifoStateUntilTimeout>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d007      	beq.n	80056c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b4:	f043 0220 	orr.w	r2, r3, #32
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e027      	b.n	8005710 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2200      	movs	r2, #0
 80056c8:	2180      	movs	r1, #128	; 0x80
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f7ff fe68 	bl	80053a0 <SPI_WaitFlagStateUntilTimeout>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056da:	f043 0220 	orr.w	r2, r3, #32
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e014      	b.n	8005710 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f7ff fedc 	bl	80054b0 <SPI_WaitFifoStateUntilTimeout>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d007      	beq.n	800570e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005702:	f043 0220 	orr.w	r2, r3, #32
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e000      	b.n	8005710 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e049      	b.n	80057be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fc fd08 	bl	8002154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3304      	adds	r3, #4
 8005754:	4619      	mov	r1, r3
 8005756:	4610      	mov	r0, r2
 8005758:	f000 fb52 	bl	8005e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b082      	sub	sp, #8
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e049      	b.n	800586c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d106      	bne.n	80057f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f841 	bl	8005874 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2202      	movs	r2, #2
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3304      	adds	r3, #4
 8005802:	4619      	mov	r1, r3
 8005804:	4610      	mov	r0, r2
 8005806:	f000 fafb 	bl	8005e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d109      	bne.n	80058ac <HAL_TIM_PWM_Start+0x24>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	bf14      	ite	ne
 80058a4:	2301      	movne	r3, #1
 80058a6:	2300      	moveq	r3, #0
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	e03c      	b.n	8005926 <HAL_TIM_PWM_Start+0x9e>
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d109      	bne.n	80058c6 <HAL_TIM_PWM_Start+0x3e>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	bf14      	ite	ne
 80058be:	2301      	movne	r3, #1
 80058c0:	2300      	moveq	r3, #0
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	e02f      	b.n	8005926 <HAL_TIM_PWM_Start+0x9e>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d109      	bne.n	80058e0 <HAL_TIM_PWM_Start+0x58>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	bf14      	ite	ne
 80058d8:	2301      	movne	r3, #1
 80058da:	2300      	moveq	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	e022      	b.n	8005926 <HAL_TIM_PWM_Start+0x9e>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b0c      	cmp	r3, #12
 80058e4:	d109      	bne.n	80058fa <HAL_TIM_PWM_Start+0x72>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	bf14      	ite	ne
 80058f2:	2301      	movne	r3, #1
 80058f4:	2300      	moveq	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	e015      	b.n	8005926 <HAL_TIM_PWM_Start+0x9e>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b10      	cmp	r3, #16
 80058fe:	d109      	bne.n	8005914 <HAL_TIM_PWM_Start+0x8c>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b01      	cmp	r3, #1
 800590a:	bf14      	ite	ne
 800590c:	2301      	movne	r3, #1
 800590e:	2300      	moveq	r3, #0
 8005910:	b2db      	uxtb	r3, r3
 8005912:	e008      	b.n	8005926 <HAL_TIM_PWM_Start+0x9e>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b01      	cmp	r3, #1
 800591e:	bf14      	ite	ne
 8005920:	2301      	movne	r3, #1
 8005922:	2300      	moveq	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e07e      	b.n	8005a2c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d104      	bne.n	800593e <HAL_TIM_PWM_Start+0xb6>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800593c:	e023      	b.n	8005986 <HAL_TIM_PWM_Start+0xfe>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b04      	cmp	r3, #4
 8005942:	d104      	bne.n	800594e <HAL_TIM_PWM_Start+0xc6>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800594c:	e01b      	b.n	8005986 <HAL_TIM_PWM_Start+0xfe>
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b08      	cmp	r3, #8
 8005952:	d104      	bne.n	800595e <HAL_TIM_PWM_Start+0xd6>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800595c:	e013      	b.n	8005986 <HAL_TIM_PWM_Start+0xfe>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b0c      	cmp	r3, #12
 8005962:	d104      	bne.n	800596e <HAL_TIM_PWM_Start+0xe6>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800596c:	e00b      	b.n	8005986 <HAL_TIM_PWM_Start+0xfe>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b10      	cmp	r3, #16
 8005972:	d104      	bne.n	800597e <HAL_TIM_PWM_Start+0xf6>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800597c:	e003      	b.n	8005986 <HAL_TIM_PWM_Start+0xfe>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2202      	movs	r2, #2
 8005982:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2201      	movs	r2, #1
 800598c:	6839      	ldr	r1, [r7, #0]
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fdb2 	bl	80064f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a26      	ldr	r2, [pc, #152]	; (8005a34 <HAL_TIM_PWM_Start+0x1ac>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d009      	beq.n	80059b2 <HAL_TIM_PWM_Start+0x12a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a25      	ldr	r2, [pc, #148]	; (8005a38 <HAL_TIM_PWM_Start+0x1b0>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d004      	beq.n	80059b2 <HAL_TIM_PWM_Start+0x12a>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a23      	ldr	r2, [pc, #140]	; (8005a3c <HAL_TIM_PWM_Start+0x1b4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d101      	bne.n	80059b6 <HAL_TIM_PWM_Start+0x12e>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <HAL_TIM_PWM_Start+0x130>
 80059b6:	2300      	movs	r3, #0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d007      	beq.n	80059cc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a18      	ldr	r2, [pc, #96]	; (8005a34 <HAL_TIM_PWM_Start+0x1ac>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d009      	beq.n	80059ea <HAL_TIM_PWM_Start+0x162>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059de:	d004      	beq.n	80059ea <HAL_TIM_PWM_Start+0x162>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a14      	ldr	r2, [pc, #80]	; (8005a38 <HAL_TIM_PWM_Start+0x1b0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d115      	bne.n	8005a16 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	4b13      	ldr	r3, [pc, #76]	; (8005a40 <HAL_TIM_PWM_Start+0x1b8>)
 80059f2:	4013      	ands	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b06      	cmp	r3, #6
 80059fa:	d015      	beq.n	8005a28 <HAL_TIM_PWM_Start+0x1a0>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a02:	d011      	beq.n	8005a28 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0201 	orr.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a14:	e008      	b.n	8005a28 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 0201 	orr.w	r2, r2, #1
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	e000      	b.n	8005a2a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40012c00 	.word	0x40012c00
 8005a38:	40014000 	.word	0x40014000
 8005a3c:	40014400 	.word	0x40014400
 8005a40:	00010007 	.word	0x00010007

08005a44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d101      	bne.n	8005a62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a5e:	2302      	movs	r3, #2
 8005a60:	e0ff      	b.n	8005c62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b14      	cmp	r3, #20
 8005a6e:	f200 80f0 	bhi.w	8005c52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a72:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a78:	08005acd 	.word	0x08005acd
 8005a7c:	08005c53 	.word	0x08005c53
 8005a80:	08005c53 	.word	0x08005c53
 8005a84:	08005c53 	.word	0x08005c53
 8005a88:	08005b0d 	.word	0x08005b0d
 8005a8c:	08005c53 	.word	0x08005c53
 8005a90:	08005c53 	.word	0x08005c53
 8005a94:	08005c53 	.word	0x08005c53
 8005a98:	08005b4f 	.word	0x08005b4f
 8005a9c:	08005c53 	.word	0x08005c53
 8005aa0:	08005c53 	.word	0x08005c53
 8005aa4:	08005c53 	.word	0x08005c53
 8005aa8:	08005b8f 	.word	0x08005b8f
 8005aac:	08005c53 	.word	0x08005c53
 8005ab0:	08005c53 	.word	0x08005c53
 8005ab4:	08005c53 	.word	0x08005c53
 8005ab8:	08005bd1 	.word	0x08005bd1
 8005abc:	08005c53 	.word	0x08005c53
 8005ac0:	08005c53 	.word	0x08005c53
 8005ac4:	08005c53 	.word	0x08005c53
 8005ac8:	08005c11 	.word	0x08005c11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68b9      	ldr	r1, [r7, #8]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 f9f8 	bl	8005ec8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699a      	ldr	r2, [r3, #24]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0208 	orr.w	r2, r2, #8
 8005ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699a      	ldr	r2, [r3, #24]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0204 	bic.w	r2, r2, #4
 8005af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6999      	ldr	r1, [r3, #24]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	619a      	str	r2, [r3, #24]
      break;
 8005b0a:	e0a5      	b.n	8005c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68b9      	ldr	r1, [r7, #8]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 fa54 	bl	8005fc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699a      	ldr	r2, [r3, #24]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	699a      	ldr	r2, [r3, #24]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6999      	ldr	r1, [r3, #24]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	021a      	lsls	r2, r3, #8
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	619a      	str	r2, [r3, #24]
      break;
 8005b4c:	e084      	b.n	8005c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68b9      	ldr	r1, [r7, #8]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 faad 	bl	80060b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69da      	ldr	r2, [r3, #28]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f042 0208 	orr.w	r2, r2, #8
 8005b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69da      	ldr	r2, [r3, #28]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0204 	bic.w	r2, r2, #4
 8005b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69d9      	ldr	r1, [r3, #28]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	691a      	ldr	r2, [r3, #16]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	61da      	str	r2, [r3, #28]
      break;
 8005b8c:	e064      	b.n	8005c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68b9      	ldr	r1, [r7, #8]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 fb05 	bl	80061a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69da      	ldr	r2, [r3, #28]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69da      	ldr	r2, [r3, #28]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69d9      	ldr	r1, [r3, #28]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	021a      	lsls	r2, r3, #8
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	61da      	str	r2, [r3, #28]
      break;
 8005bce:	e043      	b.n	8005c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fb42 	bl	8006260 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0208 	orr.w	r2, r2, #8
 8005bea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0204 	bic.w	r2, r2, #4
 8005bfa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	691a      	ldr	r2, [r3, #16]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c0e:	e023      	b.n	8005c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68b9      	ldr	r1, [r7, #8]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fb7a 	bl	8006310 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	021a      	lsls	r2, r3, #8
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c50:	e002      	b.n	8005c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	75fb      	strb	r3, [r7, #23]
      break;
 8005c56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop

08005c6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <HAL_TIM_ConfigClockSource+0x1c>
 8005c84:	2302      	movs	r3, #2
 8005c86:	e0b6      	b.n	8005df6 <HAL_TIM_ConfigClockSource+0x18a>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ca6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cc4:	d03e      	beq.n	8005d44 <HAL_TIM_ConfigClockSource+0xd8>
 8005cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cca:	f200 8087 	bhi.w	8005ddc <HAL_TIM_ConfigClockSource+0x170>
 8005cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd2:	f000 8086 	beq.w	8005de2 <HAL_TIM_ConfigClockSource+0x176>
 8005cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cda:	d87f      	bhi.n	8005ddc <HAL_TIM_ConfigClockSource+0x170>
 8005cdc:	2b70      	cmp	r3, #112	; 0x70
 8005cde:	d01a      	beq.n	8005d16 <HAL_TIM_ConfigClockSource+0xaa>
 8005ce0:	2b70      	cmp	r3, #112	; 0x70
 8005ce2:	d87b      	bhi.n	8005ddc <HAL_TIM_ConfigClockSource+0x170>
 8005ce4:	2b60      	cmp	r3, #96	; 0x60
 8005ce6:	d050      	beq.n	8005d8a <HAL_TIM_ConfigClockSource+0x11e>
 8005ce8:	2b60      	cmp	r3, #96	; 0x60
 8005cea:	d877      	bhi.n	8005ddc <HAL_TIM_ConfigClockSource+0x170>
 8005cec:	2b50      	cmp	r3, #80	; 0x50
 8005cee:	d03c      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0xfe>
 8005cf0:	2b50      	cmp	r3, #80	; 0x50
 8005cf2:	d873      	bhi.n	8005ddc <HAL_TIM_ConfigClockSource+0x170>
 8005cf4:	2b40      	cmp	r3, #64	; 0x40
 8005cf6:	d058      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x13e>
 8005cf8:	2b40      	cmp	r3, #64	; 0x40
 8005cfa:	d86f      	bhi.n	8005ddc <HAL_TIM_ConfigClockSource+0x170>
 8005cfc:	2b30      	cmp	r3, #48	; 0x30
 8005cfe:	d064      	beq.n	8005dca <HAL_TIM_ConfigClockSource+0x15e>
 8005d00:	2b30      	cmp	r3, #48	; 0x30
 8005d02:	d86b      	bhi.n	8005ddc <HAL_TIM_ConfigClockSource+0x170>
 8005d04:	2b20      	cmp	r3, #32
 8005d06:	d060      	beq.n	8005dca <HAL_TIM_ConfigClockSource+0x15e>
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d867      	bhi.n	8005ddc <HAL_TIM_ConfigClockSource+0x170>
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d05c      	beq.n	8005dca <HAL_TIM_ConfigClockSource+0x15e>
 8005d10:	2b10      	cmp	r3, #16
 8005d12:	d05a      	beq.n	8005dca <HAL_TIM_ConfigClockSource+0x15e>
 8005d14:	e062      	b.n	8005ddc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	6899      	ldr	r1, [r3, #8]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f000 fbc7 	bl	80064b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	609a      	str	r2, [r3, #8]
      break;
 8005d42:	e04f      	b.n	8005de4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6818      	ldr	r0, [r3, #0]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	6899      	ldr	r1, [r3, #8]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f000 fbb0 	bl	80064b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d66:	609a      	str	r2, [r3, #8]
      break;
 8005d68:	e03c      	b.n	8005de4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6818      	ldr	r0, [r3, #0]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	6859      	ldr	r1, [r3, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	461a      	mov	r2, r3
 8005d78:	f000 fb24 	bl	80063c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2150      	movs	r1, #80	; 0x50
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 fb7d 	bl	8006482 <TIM_ITRx_SetConfig>
      break;
 8005d88:	e02c      	b.n	8005de4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6818      	ldr	r0, [r3, #0]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	6859      	ldr	r1, [r3, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	461a      	mov	r2, r3
 8005d98:	f000 fb43 	bl	8006422 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2160      	movs	r1, #96	; 0x60
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fb6d 	bl	8006482 <TIM_ITRx_SetConfig>
      break;
 8005da8:	e01c      	b.n	8005de4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6818      	ldr	r0, [r3, #0]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	6859      	ldr	r1, [r3, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	461a      	mov	r2, r3
 8005db8:	f000 fb04 	bl	80063c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2140      	movs	r1, #64	; 0x40
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 fb5d 	bl	8006482 <TIM_ITRx_SetConfig>
      break;
 8005dc8:	e00c      	b.n	8005de4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	f000 fb54 	bl	8006482 <TIM_ITRx_SetConfig>
      break;
 8005dda:	e003      	b.n	8005de4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	73fb      	strb	r3, [r7, #15]
      break;
 8005de0:	e000      	b.n	8005de4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005de2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a2a      	ldr	r2, [pc, #168]	; (8005ebc <TIM_Base_SetConfig+0xbc>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d003      	beq.n	8005e20 <TIM_Base_SetConfig+0x20>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1e:	d108      	bne.n	8005e32 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a21      	ldr	r2, [pc, #132]	; (8005ebc <TIM_Base_SetConfig+0xbc>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00b      	beq.n	8005e52 <TIM_Base_SetConfig+0x52>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e40:	d007      	beq.n	8005e52 <TIM_Base_SetConfig+0x52>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a1e      	ldr	r2, [pc, #120]	; (8005ec0 <TIM_Base_SetConfig+0xc0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d003      	beq.n	8005e52 <TIM_Base_SetConfig+0x52>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a1d      	ldr	r2, [pc, #116]	; (8005ec4 <TIM_Base_SetConfig+0xc4>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d108      	bne.n	8005e64 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a0c      	ldr	r2, [pc, #48]	; (8005ebc <TIM_Base_SetConfig+0xbc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d007      	beq.n	8005ea0 <TIM_Base_SetConfig+0xa0>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a0b      	ldr	r2, [pc, #44]	; (8005ec0 <TIM_Base_SetConfig+0xc0>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d003      	beq.n	8005ea0 <TIM_Base_SetConfig+0xa0>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a0a      	ldr	r2, [pc, #40]	; (8005ec4 <TIM_Base_SetConfig+0xc4>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d103      	bne.n	8005ea8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	615a      	str	r2, [r3, #20]
}
 8005eae:	bf00      	nop
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	40012c00 	.word	0x40012c00
 8005ec0:	40014000 	.word	0x40014000
 8005ec4:	40014400 	.word	0x40014400

08005ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	f023 0201 	bic.w	r2, r3, #1
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0303 	bic.w	r3, r3, #3
 8005f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f023 0302 	bic.w	r3, r3, #2
 8005f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a24      	ldr	r2, [pc, #144]	; (8005fb4 <TIM_OC1_SetConfig+0xec>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d007      	beq.n	8005f38 <TIM_OC1_SetConfig+0x70>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a23      	ldr	r2, [pc, #140]	; (8005fb8 <TIM_OC1_SetConfig+0xf0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_OC1_SetConfig+0x70>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a22      	ldr	r2, [pc, #136]	; (8005fbc <TIM_OC1_SetConfig+0xf4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d10c      	bne.n	8005f52 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f023 0308 	bic.w	r3, r3, #8
 8005f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f023 0304 	bic.w	r3, r3, #4
 8005f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a17      	ldr	r2, [pc, #92]	; (8005fb4 <TIM_OC1_SetConfig+0xec>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d007      	beq.n	8005f6a <TIM_OC1_SetConfig+0xa2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a16      	ldr	r2, [pc, #88]	; (8005fb8 <TIM_OC1_SetConfig+0xf0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d003      	beq.n	8005f6a <TIM_OC1_SetConfig+0xa2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a15      	ldr	r2, [pc, #84]	; (8005fbc <TIM_OC1_SetConfig+0xf4>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d111      	bne.n	8005f8e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	621a      	str	r2, [r3, #32]
}
 8005fa8:	bf00      	nop
 8005faa:	371c      	adds	r7, #28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	40012c00 	.word	0x40012c00
 8005fb8:	40014000 	.word	0x40014000
 8005fbc:	40014400 	.word	0x40014400

08005fc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f023 0210 	bic.w	r2, r3, #16
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	021b      	lsls	r3, r3, #8
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	4313      	orrs	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f023 0320 	bic.w	r3, r3, #32
 800600e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	4313      	orrs	r3, r2
 800601a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a22      	ldr	r2, [pc, #136]	; (80060a8 <TIM_OC2_SetConfig+0xe8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d10d      	bne.n	8006040 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800602a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	011b      	lsls	r3, r3, #4
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	4313      	orrs	r3, r2
 8006036:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800603e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a19      	ldr	r2, [pc, #100]	; (80060a8 <TIM_OC2_SetConfig+0xe8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d007      	beq.n	8006058 <TIM_OC2_SetConfig+0x98>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a18      	ldr	r2, [pc, #96]	; (80060ac <TIM_OC2_SetConfig+0xec>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d003      	beq.n	8006058 <TIM_OC2_SetConfig+0x98>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a17      	ldr	r2, [pc, #92]	; (80060b0 <TIM_OC2_SetConfig+0xf0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d113      	bne.n	8006080 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800605e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006066:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	4313      	orrs	r3, r2
 800607e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	621a      	str	r2, [r3, #32]
}
 800609a:	bf00      	nop
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	40012c00 	.word	0x40012c00
 80060ac:	40014000 	.word	0x40014000
 80060b0:	40014400 	.word	0x40014400

080060b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0303 	bic.w	r3, r3, #3
 80060ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	021b      	lsls	r3, r3, #8
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	4313      	orrs	r3, r2
 800610c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a21      	ldr	r2, [pc, #132]	; (8006198 <TIM_OC3_SetConfig+0xe4>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d10d      	bne.n	8006132 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800611c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	021b      	lsls	r3, r3, #8
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	4313      	orrs	r3, r2
 8006128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a18      	ldr	r2, [pc, #96]	; (8006198 <TIM_OC3_SetConfig+0xe4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d007      	beq.n	800614a <TIM_OC3_SetConfig+0x96>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a17      	ldr	r2, [pc, #92]	; (800619c <TIM_OC3_SetConfig+0xe8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d003      	beq.n	800614a <TIM_OC3_SetConfig+0x96>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a16      	ldr	r2, [pc, #88]	; (80061a0 <TIM_OC3_SetConfig+0xec>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d113      	bne.n	8006172 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	011b      	lsls	r3, r3, #4
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	4313      	orrs	r3, r2
 8006164:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	621a      	str	r2, [r3, #32]
}
 800618c:	bf00      	nop
 800618e:	371c      	adds	r7, #28
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	40012c00 	.word	0x40012c00
 800619c:	40014000 	.word	0x40014000
 80061a0:	40014400 	.word	0x40014400

080061a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	021b      	lsls	r3, r3, #8
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	031b      	lsls	r3, r3, #12
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a14      	ldr	r2, [pc, #80]	; (8006254 <TIM_OC4_SetConfig+0xb0>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d007      	beq.n	8006218 <TIM_OC4_SetConfig+0x74>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a13      	ldr	r2, [pc, #76]	; (8006258 <TIM_OC4_SetConfig+0xb4>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d003      	beq.n	8006218 <TIM_OC4_SetConfig+0x74>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a12      	ldr	r2, [pc, #72]	; (800625c <TIM_OC4_SetConfig+0xb8>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d109      	bne.n	800622c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800621e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	019b      	lsls	r3, r3, #6
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	4313      	orrs	r3, r2
 800622a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	621a      	str	r2, [r3, #32]
}
 8006246:	bf00      	nop
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	40012c00 	.word	0x40012c00
 8006258:	40014000 	.word	0x40014000
 800625c:	40014400 	.word	0x40014400

08006260 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800628e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80062a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	041b      	lsls	r3, r3, #16
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a13      	ldr	r2, [pc, #76]	; (8006304 <TIM_OC5_SetConfig+0xa4>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d007      	beq.n	80062ca <TIM_OC5_SetConfig+0x6a>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a12      	ldr	r2, [pc, #72]	; (8006308 <TIM_OC5_SetConfig+0xa8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d003      	beq.n	80062ca <TIM_OC5_SetConfig+0x6a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a11      	ldr	r2, [pc, #68]	; (800630c <TIM_OC5_SetConfig+0xac>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d109      	bne.n	80062de <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	021b      	lsls	r3, r3, #8
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	621a      	str	r2, [r3, #32]
}
 80062f8:	bf00      	nop
 80062fa:	371c      	adds	r7, #28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	40012c00 	.word	0x40012c00
 8006308:	40014000 	.word	0x40014000
 800630c:	40014400 	.word	0x40014400

08006310 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800633e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	021b      	lsls	r3, r3, #8
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	4313      	orrs	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	051b      	lsls	r3, r3, #20
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	4313      	orrs	r3, r2
 8006362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a14      	ldr	r2, [pc, #80]	; (80063b8 <TIM_OC6_SetConfig+0xa8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d007      	beq.n	800637c <TIM_OC6_SetConfig+0x6c>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a13      	ldr	r2, [pc, #76]	; (80063bc <TIM_OC6_SetConfig+0xac>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d003      	beq.n	800637c <TIM_OC6_SetConfig+0x6c>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a12      	ldr	r2, [pc, #72]	; (80063c0 <TIM_OC6_SetConfig+0xb0>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d109      	bne.n	8006390 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006382:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	029b      	lsls	r3, r3, #10
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	40012c00 	.word	0x40012c00
 80063bc:	40014000 	.word	0x40014000
 80063c0:	40014400 	.word	0x40014400

080063c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	f023 0201 	bic.w	r2, r3, #1
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	011b      	lsls	r3, r3, #4
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f023 030a 	bic.w	r3, r3, #10
 8006400:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	4313      	orrs	r3, r2
 8006408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	621a      	str	r2, [r3, #32]
}
 8006416:	bf00      	nop
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006422:	b480      	push	{r7}
 8006424:	b087      	sub	sp, #28
 8006426:	af00      	add	r7, sp, #0
 8006428:	60f8      	str	r0, [r7, #12]
 800642a:	60b9      	str	r1, [r7, #8]
 800642c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	f023 0210 	bic.w	r2, r3, #16
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800644c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	031b      	lsls	r3, r3, #12
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800645e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	4313      	orrs	r3, r2
 8006468:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	621a      	str	r2, [r3, #32]
}
 8006476:	bf00      	nop
 8006478:	371c      	adds	r7, #28
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006482:	b480      	push	{r7}
 8006484:	b085      	sub	sp, #20
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4313      	orrs	r3, r2
 80064a0:	f043 0307 	orr.w	r3, r3, #7
 80064a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	609a      	str	r2, [r3, #8]
}
 80064ac:	bf00      	nop
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	021a      	lsls	r2, r3, #8
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	431a      	orrs	r2, r3
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4313      	orrs	r3, r2
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	609a      	str	r2, [r3, #8]
}
 80064ec:	bf00      	nop
 80064ee:	371c      	adds	r7, #28
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f003 031f 	and.w	r3, r3, #31
 800650a:	2201      	movs	r2, #1
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a1a      	ldr	r2, [r3, #32]
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	43db      	mvns	r3, r3
 800651a:	401a      	ands	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6a1a      	ldr	r2, [r3, #32]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	fa01 f303 	lsl.w	r3, r1, r3
 8006530:	431a      	orrs	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	621a      	str	r2, [r3, #32]
}
 8006536:	bf00      	nop
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
	...

08006544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006558:	2302      	movs	r3, #2
 800655a:	e04f      	b.n	80065fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a21      	ldr	r2, [pc, #132]	; (8006608 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d108      	bne.n	8006598 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800658c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4313      	orrs	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a14      	ldr	r2, [pc, #80]	; (8006608 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d009      	beq.n	80065d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c4:	d004      	beq.n	80065d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a10      	ldr	r2, [pc, #64]	; (800660c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d10c      	bne.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	40012c00 	.word	0x40012c00
 800660c:	40014000 	.word	0x40014000

08006610 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800661a:	2300      	movs	r3, #0
 800661c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006628:	2302      	movs	r3, #2
 800662a:	e060      	b.n	80066ee <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	4313      	orrs	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	4313      	orrs	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4313      	orrs	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	041b      	lsls	r3, r3, #16
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a14      	ldr	r2, [pc, #80]	; (80066fc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d115      	bne.n	80066dc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ba:	051b      	lsls	r3, r3, #20
 80066bc:	4313      	orrs	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	4313      	orrs	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40012c00 	.word	0x40012c00

08006700 <__libc_init_array>:
 8006700:	b570      	push	{r4, r5, r6, lr}
 8006702:	4d0d      	ldr	r5, [pc, #52]	; (8006738 <__libc_init_array+0x38>)
 8006704:	4c0d      	ldr	r4, [pc, #52]	; (800673c <__libc_init_array+0x3c>)
 8006706:	1b64      	subs	r4, r4, r5
 8006708:	10a4      	asrs	r4, r4, #2
 800670a:	2600      	movs	r6, #0
 800670c:	42a6      	cmp	r6, r4
 800670e:	d109      	bne.n	8006724 <__libc_init_array+0x24>
 8006710:	4d0b      	ldr	r5, [pc, #44]	; (8006740 <__libc_init_array+0x40>)
 8006712:	4c0c      	ldr	r4, [pc, #48]	; (8006744 <__libc_init_array+0x44>)
 8006714:	f000 f820 	bl	8006758 <_init>
 8006718:	1b64      	subs	r4, r4, r5
 800671a:	10a4      	asrs	r4, r4, #2
 800671c:	2600      	movs	r6, #0
 800671e:	42a6      	cmp	r6, r4
 8006720:	d105      	bne.n	800672e <__libc_init_array+0x2e>
 8006722:	bd70      	pop	{r4, r5, r6, pc}
 8006724:	f855 3b04 	ldr.w	r3, [r5], #4
 8006728:	4798      	blx	r3
 800672a:	3601      	adds	r6, #1
 800672c:	e7ee      	b.n	800670c <__libc_init_array+0xc>
 800672e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006732:	4798      	blx	r3
 8006734:	3601      	adds	r6, #1
 8006736:	e7f2      	b.n	800671e <__libc_init_array+0x1e>
 8006738:	080067b8 	.word	0x080067b8
 800673c:	080067b8 	.word	0x080067b8
 8006740:	080067b8 	.word	0x080067b8
 8006744:	080067bc 	.word	0x080067bc

08006748 <memset>:
 8006748:	4402      	add	r2, r0
 800674a:	4603      	mov	r3, r0
 800674c:	4293      	cmp	r3, r2
 800674e:	d100      	bne.n	8006752 <memset+0xa>
 8006750:	4770      	bx	lr
 8006752:	f803 1b01 	strb.w	r1, [r3], #1
 8006756:	e7f9      	b.n	800674c <memset+0x4>

08006758 <_init>:
 8006758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675a:	bf00      	nop
 800675c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675e:	bc08      	pop	{r3}
 8006760:	469e      	mov	lr, r3
 8006762:	4770      	bx	lr

08006764 <_fini>:
 8006764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006766:	bf00      	nop
 8006768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676a:	bc08      	pop	{r3}
 800676c:	469e      	mov	lr, r3
 800676e:	4770      	bx	lr
