
RocketControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003428  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080035b4  080035b4  000135b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035f4  080035f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080035f4  080035f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035f4  080035f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035f4  080035f4  000135f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035f8  080035f8  000135f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000000c  08003608  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20000140  08003608  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e5b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002696  00000000  00000000  00030e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00033530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  00034680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ebf  00000000  00000000  00035688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ec7  00000000  00000000  00038547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caf20  00000000  00000000  0004d40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011832e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e4  00000000  00000000  00118380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800359c 	.word	0x0800359c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800359c 	.word	0x0800359c

080001cc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15 (JTDI)   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d2:	f107 030c 	add.w	r3, r7, #12
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e2:	4b26      	ldr	r3, [pc, #152]	; (800027c <MX_GPIO_Init+0xb0>)
 80001e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e6:	4a25      	ldr	r2, [pc, #148]	; (800027c <MX_GPIO_Init+0xb0>)
 80001e8:	f043 0304 	orr.w	r3, r3, #4
 80001ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001ee:	4b23      	ldr	r3, [pc, #140]	; (800027c <MX_GPIO_Init+0xb0>)
 80001f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f2:	f003 0304 	and.w	r3, r3, #4
 80001f6:	60bb      	str	r3, [r7, #8]
 80001f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001fa:	4b20      	ldr	r3, [pc, #128]	; (800027c <MX_GPIO_Init+0xb0>)
 80001fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001fe:	4a1f      	ldr	r2, [pc, #124]	; (800027c <MX_GPIO_Init+0xb0>)
 8000200:	f043 0301 	orr.w	r3, r3, #1
 8000204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000206:	4b1d      	ldr	r3, [pc, #116]	; (800027c <MX_GPIO_Init+0xb0>)
 8000208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800020a:	f003 0301 	and.w	r3, r3, #1
 800020e:	607b      	str	r3, [r7, #4]
 8000210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000212:	4b1a      	ldr	r3, [pc, #104]	; (800027c <MX_GPIO_Init+0xb0>)
 8000214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000216:	4a19      	ldr	r2, [pc, #100]	; (800027c <MX_GPIO_Init+0xb0>)
 8000218:	f043 0302 	orr.w	r3, r3, #2
 800021c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800021e:	4b17      	ldr	r3, [pc, #92]	; (800027c <MX_GPIO_Init+0xb0>)
 8000220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000222:	f003 0302 	and.w	r3, r3, #2
 8000226:	603b      	str	r3, [r7, #0]
 8000228:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800022a:	2200      	movs	r2, #0
 800022c:	2108      	movs	r1, #8
 800022e:	4814      	ldr	r0, [pc, #80]	; (8000280 <MX_GPIO_Init+0xb4>)
 8000230:	f000 fe66 	bl	8000f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000238:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800023a:	2302      	movs	r3, #2
 800023c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000242:	2303      	movs	r3, #3
 8000244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000246:	2303      	movs	r3, #3
 8000248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800024a:	f107 030c 	add.w	r3, r7, #12
 800024e:	4619      	mov	r1, r3
 8000250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000254:	f000 fcea 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000258:	2308      	movs	r3, #8
 800025a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800025c:	2301      	movs	r3, #1
 800025e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000260:	2300      	movs	r3, #0
 8000262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000264:	2300      	movs	r3, #0
 8000266:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000268:	f107 030c 	add.w	r3, r7, #12
 800026c:	4619      	mov	r1, r3
 800026e:	4804      	ldr	r0, [pc, #16]	; (8000280 <MX_GPIO_Init+0xb4>)
 8000270:	f000 fcdc 	bl	8000c2c <HAL_GPIO_Init>

}
 8000274:	bf00      	nop
 8000276:	3720      	adds	r7, #32
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40021000 	.word	0x40021000
 8000280:	48000400 	.word	0x48000400

08000284 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000288:	4b1b      	ldr	r3, [pc, #108]	; (80002f8 <MX_I2C1_Init+0x74>)
 800028a:	4a1c      	ldr	r2, [pc, #112]	; (80002fc <MX_I2C1_Init+0x78>)
 800028c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00400F35;
 800028e:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <MX_I2C1_Init+0x74>)
 8000290:	4a1b      	ldr	r2, [pc, #108]	; (8000300 <MX_I2C1_Init+0x7c>)
 8000292:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000294:	4b18      	ldr	r3, [pc, #96]	; (80002f8 <MX_I2C1_Init+0x74>)
 8000296:	2200      	movs	r2, #0
 8000298:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800029a:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <MX_I2C1_Init+0x74>)
 800029c:	2201      	movs	r2, #1
 800029e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002a0:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <MX_I2C1_Init+0x74>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <MX_I2C1_Init+0x74>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002ac:	4b12      	ldr	r3, [pc, #72]	; (80002f8 <MX_I2C1_Init+0x74>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002b2:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <MX_I2C1_Init+0x74>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002b8:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <MX_I2C1_Init+0x74>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002be:	480e      	ldr	r0, [pc, #56]	; (80002f8 <MX_I2C1_Init+0x74>)
 80002c0:	f000 fe36 	bl	8000f30 <HAL_I2C_Init>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80002ca:	f000 f8d5 	bl	8000478 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002ce:	2100      	movs	r1, #0
 80002d0:	4809      	ldr	r0, [pc, #36]	; (80002f8 <MX_I2C1_Init+0x74>)
 80002d2:	f000 febc 	bl	800104e <HAL_I2CEx_ConfigAnalogFilter>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80002dc:	f000 f8cc 	bl	8000478 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002e0:	2100      	movs	r1, #0
 80002e2:	4805      	ldr	r0, [pc, #20]	; (80002f8 <MX_I2C1_Init+0x74>)
 80002e4:	f000 fefe 	bl	80010e4 <HAL_I2CEx_ConfigDigitalFilter>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80002ee:	f000 f8c3 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000028 	.word	0x20000028
 80002fc:	40005400 	.word	0x40005400
 8000300:	00400f35 	.word	0x00400f35

08000304 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b09e      	sub	sp, #120	; 0x78
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800031c:	f107 0310 	add.w	r3, r7, #16
 8000320:	2254      	movs	r2, #84	; 0x54
 8000322:	2100      	movs	r1, #0
 8000324:	4618      	mov	r0, r3
 8000326:	f003 f931 	bl	800358c <memset>
  if(i2cHandle->Instance==I2C1)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a1e      	ldr	r2, [pc, #120]	; (80003a8 <HAL_I2C_MspInit+0xa4>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d135      	bne.n	80003a0 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000334:	2340      	movs	r3, #64	; 0x40
 8000336:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000338:	2300      	movs	r3, #0
 800033a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800033c:	f107 0310 	add.w	r3, r7, #16
 8000340:	4618      	mov	r0, r3
 8000342:	f001 fd7f 	bl	8001e44 <HAL_RCCEx_PeriphCLKConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800034c:	f000 f894 	bl	8000478 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <HAL_I2C_MspInit+0xa8>)
 8000352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000354:	4a15      	ldr	r2, [pc, #84]	; (80003ac <HAL_I2C_MspInit+0xa8>)
 8000356:	f043 0302 	orr.w	r3, r3, #2
 800035a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800035c:	4b13      	ldr	r3, [pc, #76]	; (80003ac <HAL_I2C_MspInit+0xa8>)
 800035e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000360:	f003 0302 	and.w	r3, r3, #2
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000368:	23c0      	movs	r3, #192	; 0xc0
 800036a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800036c:	2312      	movs	r3, #18
 800036e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000370:	2300      	movs	r3, #0
 8000372:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000374:	2303      	movs	r3, #3
 8000376:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000378:	2304      	movs	r3, #4
 800037a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000380:	4619      	mov	r1, r3
 8000382:	480b      	ldr	r0, [pc, #44]	; (80003b0 <HAL_I2C_MspInit+0xac>)
 8000384:	f000 fc52 	bl	8000c2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <HAL_I2C_MspInit+0xa8>)
 800038a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800038c:	4a07      	ldr	r2, [pc, #28]	; (80003ac <HAL_I2C_MspInit+0xa8>)
 800038e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000392:	6593      	str	r3, [r2, #88]	; 0x58
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <HAL_I2C_MspInit+0xa8>)
 8000396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800039c:	60bb      	str	r3, [r7, #8]
 800039e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003a0:	bf00      	nop
 80003a2:	3778      	adds	r7, #120	; 0x78
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	40005400 	.word	0x40005400
 80003ac:	40021000 	.word	0x40021000
 80003b0:	48000400 	.word	0x48000400

080003b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b8:	f000 fadd 	bl	8000976 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003bc:	f000 f80b 	bl	80003d6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c0:	f7ff ff04 	bl	80001cc <MX_GPIO_Init>
  MX_I2C1_Init();
 80003c4:	f7ff ff5e 	bl	8000284 <MX_I2C1_Init>
  MX_TIM1_Init();
 80003c8:	f000 f982 	bl	80006d0 <MX_TIM1_Init>
  MX_SPI1_Init();
 80003cc:	f000 f89e 	bl	800050c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  Servo_Init();
 80003d0:	f000 f858 	bl	8000484 <Servo_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003d4:	e7fe      	b.n	80003d4 <main+0x20>

080003d6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b096      	sub	sp, #88	; 0x58
 80003da:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003dc:	f107 0314 	add.w	r3, r7, #20
 80003e0:	2244      	movs	r2, #68	; 0x44
 80003e2:	2100      	movs	r1, #0
 80003e4:	4618      	mov	r0, r3
 80003e6:	f003 f8d1 	bl	800358c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ea:	463b      	mov	r3, r7
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003fc:	f000 fecc 	bl	8001198 <HAL_PWREx_ControlVoltageScaling>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000406:	f000 f837 	bl	8000478 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800040a:	2302      	movs	r3, #2
 800040c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000412:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000414:	2310      	movs	r3, #16
 8000416:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000418:	2302      	movs	r3, #2
 800041a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800041c:	2302      	movs	r3, #2
 800041e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000420:	2302      	movs	r3, #2
 8000422:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000424:	2308      	movs	r3, #8
 8000426:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000428:	2307      	movs	r3, #7
 800042a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800042c:	2302      	movs	r3, #2
 800042e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000430:	2302      	movs	r3, #2
 8000432:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000434:	f107 0314 	add.w	r3, r7, #20
 8000438:	4618      	mov	r0, r3
 800043a:	f000 ff03 	bl	8001244 <HAL_RCC_OscConfig>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000444:	f000 f818 	bl	8000478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000448:	230f      	movs	r3, #15
 800044a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044c:	2303      	movs	r3, #3
 800044e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000454:	2300      	movs	r3, #0
 8000456:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800045c:	463b      	mov	r3, r7
 800045e:	2101      	movs	r1, #1
 8000460:	4618      	mov	r0, r3
 8000462:	f001 fb03 	bl	8001a6c <HAL_RCC_ClockConfig>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800046c:	f000 f804 	bl	8000478 <Error_Handler>
  }
}
 8000470:	bf00      	nop
 8000472:	3758      	adds	r7, #88	; 0x58
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
}
 800047e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000480:	e7fe      	b.n	8000480 <Error_Handler+0x8>
	...

08000484 <Servo_Init>:
 * Starting the timer of each channel.
 * Storing Capture Compare Registers in the servo module.
 * Set the servos to their default (0deg) position.
 * All the funtions below require to call this before using them.
 */
void Servo_Init(){
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000488:	2100      	movs	r1, #0
 800048a:	480f      	ldr	r0, [pc, #60]	; (80004c8 <Servo_Init+0x44>)
 800048c:	f002 f91e 	bl	80026cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000490:	2104      	movs	r1, #4
 8000492:	480d      	ldr	r0, [pc, #52]	; (80004c8 <Servo_Init+0x44>)
 8000494:	f002 f91a 	bl	80026cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000498:	2108      	movs	r1, #8
 800049a:	480b      	ldr	r0, [pc, #44]	; (80004c8 <Servo_Init+0x44>)
 800049c:	f002 f916 	bl	80026cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80004a0:	210c      	movs	r1, #12
 80004a2:	4809      	ldr	r0, [pc, #36]	; (80004c8 <Servo_Init+0x44>)
 80004a4:	f002 f912 	bl	80026cc <HAL_TIM_PWM_Start>

	servoDutyCycles.Servo1DutyCycle = &TIM1->CCR1;
 80004a8:	4b08      	ldr	r3, [pc, #32]	; (80004cc <Servo_Init+0x48>)
 80004aa:	4a09      	ldr	r2, [pc, #36]	; (80004d0 <Servo_Init+0x4c>)
 80004ac:	601a      	str	r2, [r3, #0]
	servoDutyCycles.Servo2DutyCycle = &TIM1->CCR2;
 80004ae:	4b07      	ldr	r3, [pc, #28]	; (80004cc <Servo_Init+0x48>)
 80004b0:	4a08      	ldr	r2, [pc, #32]	; (80004d4 <Servo_Init+0x50>)
 80004b2:	605a      	str	r2, [r3, #4]
	servoDutyCycles.Servo3DutyCycle = &TIM1->CCR3;
 80004b4:	4b05      	ldr	r3, [pc, #20]	; (80004cc <Servo_Init+0x48>)
 80004b6:	4a08      	ldr	r2, [pc, #32]	; (80004d8 <Servo_Init+0x54>)
 80004b8:	609a      	str	r2, [r3, #8]
	servoDutyCycles.Servo4DutyCycle = &TIM1->CCR4;
 80004ba:	4b04      	ldr	r3, [pc, #16]	; (80004cc <Servo_Init+0x48>)
 80004bc:	4a07      	ldr	r2, [pc, #28]	; (80004dc <Servo_Init+0x58>)
 80004be:	60da      	str	r2, [r3, #12]

	Set_Servos_Into_Default_Position();
 80004c0:	f000 f80e 	bl	80004e0 <Set_Servos_Into_Default_Position>
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	200000f0 	.word	0x200000f0
 80004cc:	2000007c 	.word	0x2000007c
 80004d0:	40012c34 	.word	0x40012c34
 80004d4:	40012c38 	.word	0x40012c38
 80004d8:	40012c3c 	.word	0x40012c3c
 80004dc:	40012c40 	.word	0x40012c40

080004e0 <Set_Servos_Into_Default_Position>:
	Set_Servos_Into_Default_Position();

}


void Set_Servos_Into_Default_Position(){
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
	TIM1->CCR1 = INLINE_DUTY_CYCLE;
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <Set_Servos_Into_Default_Position+0x28>)
 80004e6:	2296      	movs	r2, #150	; 0x96
 80004e8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = INLINE_DUTY_CYCLE;
 80004ea:	4b07      	ldr	r3, [pc, #28]	; (8000508 <Set_Servos_Into_Default_Position+0x28>)
 80004ec:	2296      	movs	r2, #150	; 0x96
 80004ee:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = INLINE_DUTY_CYCLE;
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <Set_Servos_Into_Default_Position+0x28>)
 80004f2:	2296      	movs	r2, #150	; 0x96
 80004f4:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = INLINE_DUTY_CYCLE;
 80004f6:	4b04      	ldr	r3, [pc, #16]	; (8000508 <Set_Servos_Into_Default_Position+0x28>)
 80004f8:	2296      	movs	r2, #150	; 0x96
 80004fa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40012c00 	.word	0x40012c00

0800050c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000510:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_SPI1_Init+0x74>)
 8000512:	4a1c      	ldr	r2, [pc, #112]	; (8000584 <MX_SPI1_Init+0x78>)
 8000514:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000516:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <MX_SPI1_Init+0x74>)
 8000518:	f44f 7282 	mov.w	r2, #260	; 0x104
 800051c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_SPI1_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <MX_SPI1_Init+0x74>)
 8000526:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800052a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <MX_SPI1_Init+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <MX_SPI1_Init+0x74>)
 8000534:	2200      	movs	r2, #0
 8000536:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <MX_SPI1_Init+0x74>)
 800053a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800053e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <MX_SPI1_Init+0x74>)
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <MX_SPI1_Init+0x74>)
 8000548:	2200      	movs	r2, #0
 800054a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <MX_SPI1_Init+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <MX_SPI1_Init+0x74>)
 8000554:	2200      	movs	r2, #0
 8000556:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000558:	4b09      	ldr	r3, [pc, #36]	; (8000580 <MX_SPI1_Init+0x74>)
 800055a:	2207      	movs	r2, #7
 800055c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <MX_SPI1_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MX_SPI1_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800056a:	4805      	ldr	r0, [pc, #20]	; (8000580 <MX_SPI1_Init+0x74>)
 800056c:	f001 ff52 	bl	8002414 <HAL_SPI_Init>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000576:	f7ff ff7f 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	2000008c 	.word	0x2000008c
 8000584:	40013000 	.word	0x40013000

08000588 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a18      	ldr	r2, [pc, #96]	; (8000608 <HAL_SPI_MspInit+0x80>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d129      	bne.n	80005fe <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <HAL_SPI_MspInit+0x84>)
 80005ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ae:	4a17      	ldr	r2, [pc, #92]	; (800060c <HAL_SPI_MspInit+0x84>)
 80005b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005b4:	6613      	str	r3, [r2, #96]	; 0x60
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_SPI_MspInit+0x84>)
 80005b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_SPI_MspInit+0x84>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	4a11      	ldr	r2, [pc, #68]	; (800060c <HAL_SPI_MspInit+0x84>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <HAL_SPI_MspInit+0x84>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_12;
 80005da:	f241 0352 	movw	r3, #4178	; 0x1052
 80005de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e0:	2302      	movs	r3, #2
 80005e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e8:	2303      	movs	r3, #3
 80005ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005ec:	2305      	movs	r3, #5
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4619      	mov	r1, r3
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fa:	f000 fb17 	bl	8000c2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80005fe:	bf00      	nop
 8000600:	3728      	adds	r7, #40	; 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40013000 	.word	0x40013000
 800060c:	40021000 	.word	0x40021000

08000610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <HAL_MspInit+0x44>)
 8000618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <HAL_MspInit+0x44>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6613      	str	r3, [r2, #96]	; 0x60
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <HAL_MspInit+0x44>)
 8000624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_MspInit+0x44>)
 8000630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000632:	4a08      	ldr	r2, [pc, #32]	; (8000654 <HAL_MspInit+0x44>)
 8000634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000638:	6593      	str	r3, [r2, #88]	; 0x58
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_MspInit+0x44>)
 800063c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800063e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40021000 	.word	0x40021000

08000658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800065c:	e7fe      	b.n	800065c <NMI_Handler+0x4>

0800065e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <HardFault_Handler+0x4>

08000664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <MemManage_Handler+0x4>

0800066a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <BusFault_Handler+0x4>

08000670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <UsageFault_Handler+0x4>

08000676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a4:	f000 f9bc 	bl	8000a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <SystemInit+0x20>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b6:	4a05      	ldr	r2, [pc, #20]	; (80006cc <SystemInit+0x20>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09a      	sub	sp, #104	; 0x68
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
 8000700:	615a      	str	r2, [r3, #20]
 8000702:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	222c      	movs	r2, #44	; 0x2c
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f002 ff3e 	bl	800358c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000710:	4b56      	ldr	r3, [pc, #344]	; (800086c <MX_TIM1_Init+0x19c>)
 8000712:	4a57      	ldr	r2, [pc, #348]	; (8000870 <MX_TIM1_Init+0x1a0>)
 8000714:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320-1;
 8000716:	4b55      	ldr	r3, [pc, #340]	; (800086c <MX_TIM1_Init+0x19c>)
 8000718:	f240 123f 	movw	r2, #319	; 0x13f
 800071c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071e:	4b53      	ldr	r3, [pc, #332]	; (800086c <MX_TIM1_Init+0x19c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8000724:	4b51      	ldr	r3, [pc, #324]	; (800086c <MX_TIM1_Init+0x19c>)
 8000726:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800072a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072c:	4b4f      	ldr	r3, [pc, #316]	; (800086c <MX_TIM1_Init+0x19c>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000732:	4b4e      	ldr	r3, [pc, #312]	; (800086c <MX_TIM1_Init+0x19c>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000738:	4b4c      	ldr	r3, [pc, #304]	; (800086c <MX_TIM1_Init+0x19c>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800073e:	484b      	ldr	r0, [pc, #300]	; (800086c <MX_TIM1_Init+0x19c>)
 8000740:	f001 ff0b 	bl	800255a <HAL_TIM_Base_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800074a:	f7ff fe95 	bl	8000478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000754:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000758:	4619      	mov	r1, r3
 800075a:	4844      	ldr	r0, [pc, #272]	; (800086c <MX_TIM1_Init+0x19c>)
 800075c:	f002 f9a8 	bl	8002ab0 <HAL_TIM_ConfigClockSource>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000766:	f7ff fe87 	bl	8000478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800076a:	4840      	ldr	r0, [pc, #256]	; (800086c <MX_TIM1_Init+0x19c>)
 800076c:	f001 ff4c 	bl	8002608 <HAL_TIM_PWM_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000776:	f7ff fe7f 	bl	8000478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800077e:	2300      	movs	r3, #0
 8000780:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000786:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800078a:	4619      	mov	r1, r3
 800078c:	4837      	ldr	r0, [pc, #220]	; (800086c <MX_TIM1_Init+0x19c>)
 800078e:	f002 fdfb 	bl	8003388 <HAL_TIMEx_MasterConfigSynchronization>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000798:	f7ff fe6e 	bl	8000478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800079c:	2360      	movs	r3, #96	; 0x60
 800079e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	482a      	ldr	r0, [pc, #168]	; (800086c <MX_TIM1_Init+0x19c>)
 80007c2:	f002 f861 	bl	8002888 <HAL_TIM_PWM_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80007cc:	f7ff fe54 	bl	8000478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007d4:	2204      	movs	r2, #4
 80007d6:	4619      	mov	r1, r3
 80007d8:	4824      	ldr	r0, [pc, #144]	; (800086c <MX_TIM1_Init+0x19c>)
 80007da:	f002 f855 	bl	8002888 <HAL_TIM_PWM_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80007e4:	f7ff fe48 	bl	8000478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ec:	2208      	movs	r2, #8
 80007ee:	4619      	mov	r1, r3
 80007f0:	481e      	ldr	r0, [pc, #120]	; (800086c <MX_TIM1_Init+0x19c>)
 80007f2:	f002 f849 	bl	8002888 <HAL_TIM_PWM_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80007fc:	f7ff fe3c 	bl	8000478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000800:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000804:	220c      	movs	r2, #12
 8000806:	4619      	mov	r1, r3
 8000808:	4818      	ldr	r0, [pc, #96]	; (800086c <MX_TIM1_Init+0x19c>)
 800080a:	f002 f83d 	bl	8002888 <HAL_TIM_PWM_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000814:	f7ff fe30 	bl	8000478 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800082c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000830:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800083a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	4619      	mov	r1, r3
 800084c:	4807      	ldr	r0, [pc, #28]	; (800086c <MX_TIM1_Init+0x19c>)
 800084e:	f002 fe01 	bl	8003454 <HAL_TIMEx_ConfigBreakDeadTime>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8000858:	f7ff fe0e 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <MX_TIM1_Init+0x19c>)
 800085e:	f000 f829 	bl	80008b4 <HAL_TIM_MspPostInit>

}
 8000862:	bf00      	nop
 8000864:	3768      	adds	r7, #104	; 0x68
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000f0 	.word	0x200000f0
 8000870:	40012c00 	.word	0x40012c00

08000874 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <HAL_TIM_Base_MspInit+0x38>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d10b      	bne.n	800089e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <HAL_TIM_Base_MspInit+0x3c>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088a:	4a09      	ldr	r2, [pc, #36]	; (80008b0 <HAL_TIM_Base_MspInit+0x3c>)
 800088c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000890:	6613      	str	r3, [r2, #96]	; 0x60
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <HAL_TIM_Base_MspInit+0x3c>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40012c00 	.word	0x40012c00
 80008b0:	40021000 	.word	0x40021000

080008b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a12      	ldr	r2, [pc, #72]	; (800091c <HAL_TIM_MspPostInit+0x68>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d11d      	bne.n	8000912 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_TIM_MspPostInit+0x6c>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a11      	ldr	r2, [pc, #68]	; (8000920 <HAL_TIM_MspPostInit+0x6c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_TIM_MspPostInit+0x6c>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80008ee:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80008f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000900:	2301      	movs	r3, #1
 8000902:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	4619      	mov	r1, r3
 800090a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090e:	f000 f98d 	bl	8000c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000912:	bf00      	nop
 8000914:	3720      	adds	r7, #32
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40012c00 	.word	0x40012c00
 8000920:	40021000 	.word	0x40021000

08000924 <Reset_Handler>:
 8000924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800095c <LoopForever+0x2>
 8000928:	f7ff fec0 	bl	80006ac <SystemInit>
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <LoopForever+0x6>)
 800092e:	490d      	ldr	r1, [pc, #52]	; (8000964 <LoopForever+0xa>)
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <LoopForever+0xe>)
 8000932:	2300      	movs	r3, #0
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:
 8000936:	58d4      	ldr	r4, [r2, r3]
 8000938:	50c4      	str	r4, [r0, r3]
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:
 800093c:	18c4      	adds	r4, r0, r3
 800093e:	428c      	cmp	r4, r1
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <LoopForever+0x12>)
 8000944:	4c0a      	ldr	r4, [pc, #40]	; (8000970 <LoopForever+0x16>)
 8000946:	2300      	movs	r3, #0
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:
 800094e:	42a2      	cmp	r2, r4
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>
 8000952:	f002 fdf7 	bl	8003544 <__libc_init_array>
 8000956:	f7ff fd2d 	bl	80003b4 <main>

0800095a <LoopForever>:
 800095a:	e7fe      	b.n	800095a <LoopForever>
 800095c:	20010000 	.word	0x20010000
 8000960:	20000000 	.word	0x20000000
 8000964:	2000000c 	.word	0x2000000c
 8000968:	080035fc 	.word	0x080035fc
 800096c:	2000000c 	.word	0x2000000c
 8000970:	20000140 	.word	0x20000140

08000974 <ADC1_IRQHandler>:
 8000974:	e7fe      	b.n	8000974 <ADC1_IRQHandler>

08000976 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800097c:	2300      	movs	r3, #0
 800097e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000980:	2003      	movs	r0, #3
 8000982:	f000 f91f 	bl	8000bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000986:	2000      	movs	r0, #0
 8000988:	f000 f80e 	bl	80009a8 <HAL_InitTick>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d002      	beq.n	8000998 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	71fb      	strb	r3, [r7, #7]
 8000996:	e001      	b.n	800099c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000998:	f7ff fe3a 	bl	8000610 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800099c:	79fb      	ldrb	r3, [r7, #7]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009b0:	2300      	movs	r3, #0
 80009b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <HAL_InitTick+0x6c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d023      	beq.n	8000a04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <HAL_InitTick+0x70>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <HAL_InitTick+0x6c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f91d 	bl	8000c12 <HAL_SYSTICK_Config>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d10f      	bne.n	80009fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	d809      	bhi.n	80009f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e4:	2200      	movs	r2, #0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ec:	f000 f8f5 	bl	8000bda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f0:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_InitTick+0x74>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6013      	str	r3, [r2, #0]
 80009f6:	e007      	b.n	8000a08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	73fb      	strb	r3, [r7, #15]
 80009fc:	e004      	b.n	8000a08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	73fb      	strb	r3, [r7, #15]
 8000a02:	e001      	b.n	8000a08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000004 	.word	0x20000004

08000a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_IncTick+0x20>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_IncTick+0x24>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <HAL_IncTick+0x24>)
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000008 	.word	0x20000008
 8000a44:	2000013c 	.word	0x2000013c

08000a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <HAL_GetTick+0x14>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	2000013c 	.word	0x2000013c

08000a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a92:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	60d3      	str	r3, [r2, #12]
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	0a1b      	lsrs	r3, r3, #8
 8000ab2:	f003 0307 	and.w	r3, r3, #7
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db0a      	blt.n	8000aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	490c      	ldr	r1, [pc, #48]	; (8000b10 <__NVIC_SetPriority+0x4c>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aec:	e00a      	b.n	8000b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4908      	ldr	r1, [pc, #32]	; (8000b14 <__NVIC_SetPriority+0x50>)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	3b04      	subs	r3, #4
 8000afc:	0112      	lsls	r2, r2, #4
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	761a      	strb	r2, [r3, #24]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000e100 	.word	0xe000e100
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b089      	sub	sp, #36	; 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	f1c3 0307 	rsb	r3, r3, #7
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	bf28      	it	cs
 8000b36:	2304      	movcs	r3, #4
 8000b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	2b06      	cmp	r3, #6
 8000b40:	d902      	bls.n	8000b48 <NVIC_EncodePriority+0x30>
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3b03      	subs	r3, #3
 8000b46:	e000      	b.n	8000b4a <NVIC_EncodePriority+0x32>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43da      	mvns	r2, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43d9      	mvns	r1, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	4313      	orrs	r3, r2
         );
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3724      	adds	r7, #36	; 0x24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b90:	d301      	bcc.n	8000b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00f      	b.n	8000bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <SysTick_Config+0x40>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9e:	210f      	movs	r1, #15
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba4:	f7ff ff8e 	bl	8000ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <SysTick_Config+0x40>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <SysTick_Config+0x40>)
 8000bb0:	2207      	movs	r2, #7
 8000bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	e000e010 	.word	0xe000e010

08000bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ff47 	bl	8000a60 <__NVIC_SetPriorityGrouping>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b086      	sub	sp, #24
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4603      	mov	r3, r0
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bec:	f7ff ff5c 	bl	8000aa8 <__NVIC_GetPriorityGrouping>
 8000bf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	6978      	ldr	r0, [r7, #20]
 8000bf8:	f7ff ff8e 	bl	8000b18 <NVIC_EncodePriority>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff5d 	bl	8000ac4 <__NVIC_SetPriority>
}
 8000c0a:	bf00      	nop
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ffb0 	bl	8000b80 <SysTick_Config>
 8000c20:	4603      	mov	r3, r0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b087      	sub	sp, #28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3a:	e148      	b.n	8000ece <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	2101      	movs	r1, #1
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	fa01 f303 	lsl.w	r3, r1, r3
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f000 813a 	beq.w	8000ec8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d005      	beq.n	8000c6c <HAL_GPIO_Init+0x40>
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 0303 	and.w	r3, r3, #3
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d130      	bne.n	8000cce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	2203      	movs	r2, #3
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	091b      	lsrs	r3, r3, #4
 8000cb8:	f003 0201 	and.w	r2, r3, #1
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	d017      	beq.n	8000d0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d123      	bne.n	8000d5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	08da      	lsrs	r2, r3, #3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3208      	adds	r2, #8
 8000d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	220f      	movs	r2, #15
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	691a      	ldr	r2, [r3, #16]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	f003 0307 	and.w	r3, r3, #7
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	08da      	lsrs	r2, r3, #3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3208      	adds	r2, #8
 8000d58:	6939      	ldr	r1, [r7, #16]
 8000d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	2203      	movs	r2, #3
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0203 	and.w	r2, r3, #3
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 8094 	beq.w	8000ec8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da0:	4b52      	ldr	r3, [pc, #328]	; (8000eec <HAL_GPIO_Init+0x2c0>)
 8000da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da4:	4a51      	ldr	r2, [pc, #324]	; (8000eec <HAL_GPIO_Init+0x2c0>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6613      	str	r3, [r2, #96]	; 0x60
 8000dac:	4b4f      	ldr	r3, [pc, #316]	; (8000eec <HAL_GPIO_Init+0x2c0>)
 8000dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000db8:	4a4d      	ldr	r2, [pc, #308]	; (8000ef0 <HAL_GPIO_Init+0x2c4>)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	220f      	movs	r2, #15
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000de2:	d00d      	beq.n	8000e00 <HAL_GPIO_Init+0x1d4>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a43      	ldr	r2, [pc, #268]	; (8000ef4 <HAL_GPIO_Init+0x2c8>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d007      	beq.n	8000dfc <HAL_GPIO_Init+0x1d0>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a42      	ldr	r2, [pc, #264]	; (8000ef8 <HAL_GPIO_Init+0x2cc>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d101      	bne.n	8000df8 <HAL_GPIO_Init+0x1cc>
 8000df4:	2302      	movs	r3, #2
 8000df6:	e004      	b.n	8000e02 <HAL_GPIO_Init+0x1d6>
 8000df8:	2307      	movs	r3, #7
 8000dfa:	e002      	b.n	8000e02 <HAL_GPIO_Init+0x1d6>
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e000      	b.n	8000e02 <HAL_GPIO_Init+0x1d6>
 8000e00:	2300      	movs	r3, #0
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	f002 0203 	and.w	r2, r2, #3
 8000e08:	0092      	lsls	r2, r2, #2
 8000e0a:	4093      	lsls	r3, r2
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e12:	4937      	ldr	r1, [pc, #220]	; (8000ef0 <HAL_GPIO_Init+0x2c4>)
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	3302      	adds	r3, #2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e20:	4b36      	ldr	r3, [pc, #216]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e44:	4a2d      	ldr	r2, [pc, #180]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e4a:	4b2c      	ldr	r3, [pc, #176]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e6e:	4a23      	ldr	r2, [pc, #140]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e74:	4b21      	ldr	r3, [pc, #132]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e98:	4a18      	ldr	r2, [pc, #96]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f47f aeaf 	bne.w	8000c3c <HAL_GPIO_Init+0x10>
  }
}
 8000ede:	bf00      	nop
 8000ee0:	bf00      	nop
 8000ee2:	371c      	adds	r7, #28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40010000 	.word	0x40010000
 8000ef4:	48000400 	.word	0x48000400
 8000ef8:	48000800 	.word	0x48000800
 8000efc:	40010400 	.word	0x40010400

08000f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f10:	787b      	ldrb	r3, [r7, #1]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f16:	887a      	ldrh	r2, [r7, #2]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f1c:	e002      	b.n	8000f24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f1e:	887a      	ldrh	r2, [r7, #2]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e081      	b.n	8001046 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d106      	bne.n	8000f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff f9d4 	bl	8000304 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2224      	movs	r2, #36	; 0x24
 8000f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 0201 	bic.w	r2, r2, #1
 8000f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d107      	bne.n	8000faa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	e006      	b.n	8000fb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000fb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d104      	bne.n	8000fca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fdc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68da      	ldr	r2, [r3, #12]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	691a      	ldr	r2, [r3, #16]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	430a      	orrs	r2, r1
 8001006:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69d9      	ldr	r1, [r3, #28]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a1a      	ldr	r2, [r3, #32]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	430a      	orrs	r2, r1
 8001016:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0201 	orr.w	r2, r2, #1
 8001026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2220      	movs	r2, #32
 8001032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b20      	cmp	r3, #32
 8001062:	d138      	bne.n	80010d6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800106a:	2b01      	cmp	r3, #1
 800106c:	d101      	bne.n	8001072 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800106e:	2302      	movs	r3, #2
 8001070:	e032      	b.n	80010d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2224      	movs	r2, #36	; 0x24
 800107e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f022 0201 	bic.w	r2, r2, #1
 8001090:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010a0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6819      	ldr	r1, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	430a      	orrs	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f042 0201 	orr.w	r2, r2, #1
 80010c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2220      	movs	r2, #32
 80010c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e000      	b.n	80010d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80010d6:	2302      	movs	r3, #2
  }
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b20      	cmp	r3, #32
 80010f8:	d139      	bne.n	800116e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001100:	2b01      	cmp	r3, #1
 8001102:	d101      	bne.n	8001108 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001104:	2302      	movs	r3, #2
 8001106:	e033      	b.n	8001170 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2224      	movs	r2, #36	; 0x24
 8001114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0201 	bic.w	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001136:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	4313      	orrs	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f042 0201 	orr.w	r2, r2, #1
 8001158:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2220      	movs	r2, #32
 800115e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	e000      	b.n	8001170 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800116e:	2302      	movs	r3, #2
  }
}
 8001170:	4618      	mov	r0, r3
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <HAL_PWREx_GetVoltageRange+0x18>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40007000 	.word	0x40007000

08001198 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011a6:	d130      	bne.n	800120a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011a8:	4b23      	ldr	r3, [pc, #140]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011b4:	d038      	beq.n	8001228 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b6:	4b20      	ldr	r3, [pc, #128]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011be:	4a1e      	ldr	r2, [pc, #120]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2232      	movs	r2, #50	; 0x32
 80011cc:	fb02 f303 	mul.w	r3, r2, r3
 80011d0:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011d2:	fba2 2303 	umull	r2, r3, r2, r3
 80011d6:	0c9b      	lsrs	r3, r3, #18
 80011d8:	3301      	adds	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011dc:	e002      	b.n	80011e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f0:	d102      	bne.n	80011f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1f2      	bne.n	80011de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001204:	d110      	bne.n	8001228 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e00f      	b.n	800122a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001216:	d007      	beq.n	8001228 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001220:	4a05      	ldr	r2, [pc, #20]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001226:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40007000 	.word	0x40007000
 800123c:	20000000 	.word	0x20000000
 8001240:	431bde83 	.word	0x431bde83

08001244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d102      	bne.n	8001258 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	f000 bc02 	b.w	8001a5c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001258:	4b96      	ldr	r3, [pc, #600]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 030c 	and.w	r3, r3, #12
 8001260:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001262:	4b94      	ldr	r3, [pc, #592]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80e4 	beq.w	8001442 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d007      	beq.n	8001290 <HAL_RCC_OscConfig+0x4c>
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2b0c      	cmp	r3, #12
 8001284:	f040 808b 	bne.w	800139e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	2b01      	cmp	r3, #1
 800128c:	f040 8087 	bne.w	800139e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001290:	4b88      	ldr	r3, [pc, #544]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <HAL_RCC_OscConfig+0x64>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e3d9      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1a      	ldr	r2, [r3, #32]
 80012ac:	4b81      	ldr	r3, [pc, #516]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0308 	and.w	r3, r3, #8
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d004      	beq.n	80012c2 <HAL_RCC_OscConfig+0x7e>
 80012b8:	4b7e      	ldr	r3, [pc, #504]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012c0:	e005      	b.n	80012ce <HAL_RCC_OscConfig+0x8a>
 80012c2:	4b7c      	ldr	r3, [pc, #496]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80012c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d223      	bcs.n	800131a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 fd54 	bl	8001d84 <RCC_SetFlashLatencyFromMSIRange>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e3ba      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e6:	4b73      	ldr	r3, [pc, #460]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a72      	ldr	r2, [pc, #456]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	4b70      	ldr	r3, [pc, #448]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	496d      	ldr	r1, [pc, #436]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001300:	4313      	orrs	r3, r2
 8001302:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001304:	4b6b      	ldr	r3, [pc, #428]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	4968      	ldr	r1, [pc, #416]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001314:	4313      	orrs	r3, r2
 8001316:	604b      	str	r3, [r1, #4]
 8001318:	e025      	b.n	8001366 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131a:	4b66      	ldr	r3, [pc, #408]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a65      	ldr	r2, [pc, #404]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001320:	f043 0308 	orr.w	r3, r3, #8
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	4960      	ldr	r1, [pc, #384]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001334:	4313      	orrs	r3, r2
 8001336:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001338:	4b5e      	ldr	r3, [pc, #376]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	495b      	ldr	r1, [pc, #364]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d109      	bne.n	8001366 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	4618      	mov	r0, r3
 8001358:	f000 fd14 	bl	8001d84 <RCC_SetFlashLatencyFromMSIRange>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e37a      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001366:	f000 fc81 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 800136a:	4602      	mov	r2, r0
 800136c:	4b51      	ldr	r3, [pc, #324]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	4950      	ldr	r1, [pc, #320]	; (80014b8 <HAL_RCC_OscConfig+0x274>)
 8001378:	5ccb      	ldrb	r3, [r1, r3]
 800137a:	f003 031f 	and.w	r3, r3, #31
 800137e:	fa22 f303 	lsr.w	r3, r2, r3
 8001382:	4a4e      	ldr	r2, [pc, #312]	; (80014bc <HAL_RCC_OscConfig+0x278>)
 8001384:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001386:	4b4e      	ldr	r3, [pc, #312]	; (80014c0 <HAL_RCC_OscConfig+0x27c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fb0c 	bl	80009a8 <HAL_InitTick>
 8001390:	4603      	mov	r3, r0
 8001392:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d052      	beq.n	8001440 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	e35e      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d032      	beq.n	800140c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013a6:	4b43      	ldr	r3, [pc, #268]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a42      	ldr	r2, [pc, #264]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013b2:	f7ff fb49 	bl	8000a48 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ba:	f7ff fb45 	bl	8000a48 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e347      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013cc:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013d8:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a35      	ldr	r2, [pc, #212]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013de:	f043 0308 	orr.w	r3, r3, #8
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b33      	ldr	r3, [pc, #204]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	4930      	ldr	r1, [pc, #192]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013f6:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	492b      	ldr	r1, [pc, #172]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001406:	4313      	orrs	r3, r2
 8001408:	604b      	str	r3, [r1, #4]
 800140a:	e01a      	b.n	8001442 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800140c:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a28      	ldr	r2, [pc, #160]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001412:	f023 0301 	bic.w	r3, r3, #1
 8001416:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001418:	f7ff fb16 	bl	8000a48 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001420:	f7ff fb12 	bl	8000a48 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e314      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x1dc>
 800143e:	e000      	b.n	8001442 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001440:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d073      	beq.n	8001536 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	2b08      	cmp	r3, #8
 8001452:	d005      	beq.n	8001460 <HAL_RCC_OscConfig+0x21c>
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b0c      	cmp	r3, #12
 8001458:	d10e      	bne.n	8001478 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d10b      	bne.n	8001478 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d063      	beq.n	8001534 <HAL_RCC_OscConfig+0x2f0>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d15f      	bne.n	8001534 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e2f1      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d106      	bne.n	8001490 <HAL_RCC_OscConfig+0x24c>
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e025      	b.n	80014dc <HAL_RCC_OscConfig+0x298>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001498:	d114      	bne.n	80014c4 <HAL_RCC_OscConfig+0x280>
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a02      	ldr	r2, [pc, #8]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e013      	b.n	80014dc <HAL_RCC_OscConfig+0x298>
 80014b4:	40021000 	.word	0x40021000
 80014b8:	080035b4 	.word	0x080035b4
 80014bc:	20000000 	.word	0x20000000
 80014c0:	20000004 	.word	0x20000004
 80014c4:	4ba0      	ldr	r3, [pc, #640]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a9f      	ldr	r2, [pc, #636]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80014ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b9d      	ldr	r3, [pc, #628]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a9c      	ldr	r2, [pc, #624]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80014d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d013      	beq.n	800150c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e4:	f7ff fab0 	bl	8000a48 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff faac 	bl	8000a48 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	; 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e2ae      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fe:	4b92      	ldr	r3, [pc, #584]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x2a8>
 800150a:	e014      	b.n	8001536 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150c:	f7ff fa9c 	bl	8000a48 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001514:	f7ff fa98 	bl	8000a48 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	; 0x64
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e29a      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001526:	4b88      	ldr	r3, [pc, #544]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0x2d0>
 8001532:	e000      	b.n	8001536 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d060      	beq.n	8001604 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	2b04      	cmp	r3, #4
 8001546:	d005      	beq.n	8001554 <HAL_RCC_OscConfig+0x310>
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2b0c      	cmp	r3, #12
 800154c:	d119      	bne.n	8001582 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d116      	bne.n	8001582 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001554:	4b7c      	ldr	r3, [pc, #496]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_RCC_OscConfig+0x328>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e277      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b76      	ldr	r3, [pc, #472]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	061b      	lsls	r3, r3, #24
 800157a:	4973      	ldr	r1, [pc, #460]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001580:	e040      	b.n	8001604 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d023      	beq.n	80015d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158a:	4b6f      	ldr	r3, [pc, #444]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a6e      	ldr	r2, [pc, #440]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 8001590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff fa57 	bl	8000a48 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff fa53 	bl	8000a48 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e255      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b0:	4b65      	ldr	r3, [pc, #404]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	4b62      	ldr	r3, [pc, #392]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	061b      	lsls	r3, r3, #24
 80015ca:	495f      	ldr	r1, [pc, #380]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
 80015d0:	e018      	b.n	8001604 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d2:	4b5d      	ldr	r3, [pc, #372]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a5c      	ldr	r2, [pc, #368]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80015d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015de:	f7ff fa33 	bl	8000a48 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff fa2f 	bl	8000a48 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e231      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f0      	bne.n	80015e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	d03c      	beq.n	800168a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d01c      	beq.n	8001652 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001618:	4b4b      	ldr	r3, [pc, #300]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 800161a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800161e:	4a4a      	ldr	r2, [pc, #296]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001628:	f7ff fa0e 	bl	8000a48 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001630:	f7ff fa0a 	bl	8000a48 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e20c      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001642:	4b41      	ldr	r3, [pc, #260]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 8001644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0ef      	beq.n	8001630 <HAL_RCC_OscConfig+0x3ec>
 8001650:	e01b      	b.n	800168a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001652:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 8001654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001658:	4a3b      	ldr	r2, [pc, #236]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 800165a:	f023 0301 	bic.w	r3, r3, #1
 800165e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001662:	f7ff f9f1 	bl	8000a48 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166a:	f7ff f9ed 	bl	8000a48 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e1ef      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800167c:	4b32      	ldr	r3, [pc, #200]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 800167e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1ef      	bne.n	800166a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 80a6 	beq.w	80017e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800169c:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10d      	bne.n	80016c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a8:	4b27      	ldr	r3, [pc, #156]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80016aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ac:	4a26      	ldr	r2, [pc, #152]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80016ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b2:	6593      	str	r3, [r2, #88]	; 0x58
 80016b4:	4b24      	ldr	r3, [pc, #144]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80016b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c0:	2301      	movs	r3, #1
 80016c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <HAL_RCC_OscConfig+0x508>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d118      	bne.n	8001702 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <HAL_RCC_OscConfig+0x508>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a1d      	ldr	r2, [pc, #116]	; (800174c <HAL_RCC_OscConfig+0x508>)
 80016d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016dc:	f7ff f9b4 	bl	8000a48 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e4:	f7ff f9b0 	bl	8000a48 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e1b2      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_RCC_OscConfig+0x508>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d108      	bne.n	800171c <HAL_RCC_OscConfig+0x4d8>
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 800170c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001710:	4a0d      	ldr	r2, [pc, #52]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800171a:	e029      	b.n	8001770 <HAL_RCC_OscConfig+0x52c>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b05      	cmp	r3, #5
 8001722:	d115      	bne.n	8001750 <HAL_RCC_OscConfig+0x50c>
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 8001726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172a:	4a07      	ldr	r2, [pc, #28]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173a:	4a03      	ldr	r2, [pc, #12]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001744:	e014      	b.n	8001770 <HAL_RCC_OscConfig+0x52c>
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	40007000 	.word	0x40007000
 8001750:	4b9a      	ldr	r3, [pc, #616]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001756:	4a99      	ldr	r2, [pc, #612]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001760:	4b96      	ldr	r3, [pc, #600]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001766:	4a95      	ldr	r2, [pc, #596]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d016      	beq.n	80017a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001778:	f7ff f966 	bl	8000a48 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800177e:	e00a      	b.n	8001796 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001780:	f7ff f962 	bl	8000a48 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f241 3288 	movw	r2, #5000	; 0x1388
 800178e:	4293      	cmp	r3, r2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e162      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001796:	4b89      	ldr	r3, [pc, #548]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0ed      	beq.n	8001780 <HAL_RCC_OscConfig+0x53c>
 80017a4:	e015      	b.n	80017d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a6:	f7ff f94f 	bl	8000a48 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ac:	e00a      	b.n	80017c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ae:	f7ff f94b 	bl	8000a48 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017bc:	4293      	cmp	r3, r2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e14b      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c4:	4b7d      	ldr	r3, [pc, #500]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1ed      	bne.n	80017ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017d2:	7ffb      	ldrb	r3, [r7, #31]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d105      	bne.n	80017e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d8:	4b78      	ldr	r3, [pc, #480]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 80017da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017dc:	4a77      	ldr	r2, [pc, #476]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 80017de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0320 	and.w	r3, r3, #32
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d03c      	beq.n	800186a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d01c      	beq.n	8001832 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017f8:	4b70      	ldr	r3, [pc, #448]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 80017fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017fe:	4a6f      	ldr	r2, [pc, #444]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001808:	f7ff f91e 	bl	8000a48 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001810:	f7ff f91a 	bl	8000a48 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e11c      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001822:	4b66      	ldr	r3, [pc, #408]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001824:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0ef      	beq.n	8001810 <HAL_RCC_OscConfig+0x5cc>
 8001830:	e01b      	b.n	800186a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001832:	4b62      	ldr	r3, [pc, #392]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001834:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001838:	4a60      	ldr	r2, [pc, #384]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 800183a:	f023 0301 	bic.w	r3, r3, #1
 800183e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001842:	f7ff f901 	bl	8000a48 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800184a:	f7ff f8fd 	bl	8000a48 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e0ff      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800185c:	4b57      	ldr	r3, [pc, #348]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 800185e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1ef      	bne.n	800184a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80f3 	beq.w	8001a5a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	2b02      	cmp	r3, #2
 800187a:	f040 80c9 	bne.w	8001a10 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800187e:	4b4f      	ldr	r3, [pc, #316]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f003 0203 	and.w	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	429a      	cmp	r2, r3
 8001890:	d12c      	bne.n	80018ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	3b01      	subs	r3, #1
 800189e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d123      	bne.n	80018ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d11b      	bne.n	80018ec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018be:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d113      	bne.n	80018ec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ce:	085b      	lsrs	r3, r3, #1
 80018d0:	3b01      	subs	r3, #1
 80018d2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d109      	bne.n	80018ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	085b      	lsrs	r3, r3, #1
 80018e4:	3b01      	subs	r3, #1
 80018e6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d06b      	beq.n	80019c4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d062      	beq.n	80019b8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018f2:	4b32      	ldr	r3, [pc, #200]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e0ac      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001902:	4b2e      	ldr	r3, [pc, #184]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a2d      	ldr	r2, [pc, #180]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001908:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800190c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800190e:	f7ff f89b 	bl	8000a48 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001916:	f7ff f897 	bl	8000a48 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e099      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001928:	4b24      	ldr	r3, [pc, #144]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f0      	bne.n	8001916 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001934:	4b21      	ldr	r3, [pc, #132]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <HAL_RCC_OscConfig+0x77c>)
 800193a:	4013      	ands	r3, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001944:	3a01      	subs	r2, #1
 8001946:	0112      	lsls	r2, r2, #4
 8001948:	4311      	orrs	r1, r2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800194e:	0212      	lsls	r2, r2, #8
 8001950:	4311      	orrs	r1, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001956:	0852      	lsrs	r2, r2, #1
 8001958:	3a01      	subs	r2, #1
 800195a:	0552      	lsls	r2, r2, #21
 800195c:	4311      	orrs	r1, r2
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001962:	0852      	lsrs	r2, r2, #1
 8001964:	3a01      	subs	r2, #1
 8001966:	0652      	lsls	r2, r2, #25
 8001968:	4311      	orrs	r1, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800196e:	06d2      	lsls	r2, r2, #27
 8001970:	430a      	orrs	r2, r1
 8001972:	4912      	ldr	r1, [pc, #72]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001974:	4313      	orrs	r3, r2
 8001976:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001978:	4b10      	ldr	r3, [pc, #64]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0f      	ldr	r2, [pc, #60]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 800197e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001982:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001984:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4a0c      	ldr	r2, [pc, #48]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 800198a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001990:	f7ff f85a 	bl	8000a48 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001998:	f7ff f856 	bl	8000a48 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e058      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019b6:	e050      	b.n	8001a5a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e04f      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
 80019bc:	40021000 	.word	0x40021000
 80019c0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c4:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d144      	bne.n	8001a5a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019d0:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 80019d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019dc:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4a20      	ldr	r2, [pc, #128]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 80019e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019e8:	f7ff f82e 	bl	8000a48 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f0:	f7ff f82a 	bl	8000a48 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e02c      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x7ac>
 8001a0e:	e024      	b.n	8001a5a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2b0c      	cmp	r3, #12
 8001a14:	d01f      	beq.n	8001a56 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 8001a1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a22:	f7ff f811 	bl	8000a48 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2a:	f7ff f80d 	bl	8000a48 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e00f      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f0      	bne.n	8001a2a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	4905      	ldr	r1, [pc, #20]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_RCC_OscConfig+0x824>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	60cb      	str	r3, [r1, #12]
 8001a54:	e001      	b.n	8001a5a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3720      	adds	r7, #32
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021000 	.word	0x40021000
 8001a68:	feeefffc 	.word	0xfeeefffc

08001a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0e7      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a80:	4b75      	ldr	r3, [pc, #468]	; (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d910      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b72      	ldr	r3, [pc, #456]	; (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 0207 	bic.w	r2, r3, #7
 8001a96:	4970      	ldr	r1, [pc, #448]	; (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b6e      	ldr	r3, [pc, #440]	; (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0cf      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d010      	beq.n	8001ade <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	4b66      	ldr	r3, [pc, #408]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d908      	bls.n	8001ade <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001acc:	4b63      	ldr	r3, [pc, #396]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4960      	ldr	r1, [pc, #384]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d04c      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af2:	4b5a      	ldr	r3, [pc, #360]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d121      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e0a6      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0a:	4b54      	ldr	r3, [pc, #336]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d115      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e09a      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b22:	4b4e      	ldr	r3, [pc, #312]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e08e      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b32:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e086      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b42:	4b46      	ldr	r3, [pc, #280]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f023 0203 	bic.w	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4943      	ldr	r1, [pc, #268]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b54:	f7fe ff78 	bl	8000a48 <HAL_GetTick>
 8001b58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5c:	f7fe ff74 	bl	8000a48 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e06e      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	4b3a      	ldr	r3, [pc, #232]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 020c 	and.w	r2, r3, #12
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d1eb      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d010      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	4b31      	ldr	r3, [pc, #196]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d208      	bcs.n	8001bb2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba0:	4b2e      	ldr	r3, [pc, #184]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	492b      	ldr	r1, [pc, #172]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb2:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d210      	bcs.n	8001be2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc0:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 0207 	bic.w	r2, r3, #7
 8001bc8:	4923      	ldr	r1, [pc, #140]	; (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd0:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e036      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d008      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bee:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	4918      	ldr	r1, [pc, #96]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d009      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4910      	ldr	r1, [pc, #64]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c20:	f000 f824 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	490b      	ldr	r1, [pc, #44]	; (8001c60 <HAL_RCC_ClockConfig+0x1f4>)
 8001c32:	5ccb      	ldrb	r3, [r1, r3]
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3c:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001c3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x1fc>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe feaf 	bl	80009a8 <HAL_InitTick>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c4e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40022000 	.word	0x40022000
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	080035b4 	.word	0x080035b4
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000004 	.word	0x20000004

08001c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7a:	4b3e      	ldr	r3, [pc, #248]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c84:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	2b0c      	cmp	r3, #12
 8001c98:	d121      	bne.n	8001cde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d11e      	bne.n	8001cde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ca0:	4b34      	ldr	r3, [pc, #208]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d107      	bne.n	8001cbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cac:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	e005      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cc8:	4a2b      	ldr	r2, [pc, #172]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10d      	bne.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cdc:	e00a      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d102      	bne.n	8001cea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ce4:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ce6:	61bb      	str	r3, [r7, #24]
 8001ce8:	e004      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cf0:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cf2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	2b0c      	cmp	r3, #12
 8001cf8:	d134      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d003      	beq.n	8001d12 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d003      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0xac>
 8001d10:	e005      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d12:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d14:	617b      	str	r3, [r7, #20]
      break;
 8001d16:	e005      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d18:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d1a:	617b      	str	r3, [r7, #20]
      break;
 8001d1c:	e002      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	617b      	str	r3, [r7, #20]
      break;
 8001d22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	3301      	adds	r3, #1
 8001d30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	fb03 f202 	mul.w	r2, r3, r2
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	0e5b      	lsrs	r3, r3, #25
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	3301      	adds	r3, #1
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d64:	69bb      	ldr	r3, [r7, #24]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3724      	adds	r7, #36	; 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	080035c4 	.word	0x080035c4
 8001d7c:	00f42400 	.word	0x00f42400
 8001d80:	016e3600 	.word	0x016e3600

08001d84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d90:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d9c:	f7ff f9ee 	bl	800117c <HAL_PWREx_GetVoltageRange>
 8001da0:	6178      	str	r0, [r7, #20]
 8001da2:	e014      	b.n	8001dce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001da4:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da8:	4a24      	ldr	r2, [pc, #144]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dae:	6593      	str	r3, [r2, #88]	; 0x58
 8001db0:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001dbc:	f7ff f9de 	bl	800117c <HAL_PWREx_GetVoltageRange>
 8001dc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd4:	d10b      	bne.n	8001dee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b80      	cmp	r3, #128	; 0x80
 8001dda:	d919      	bls.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2ba0      	cmp	r3, #160	; 0xa0
 8001de0:	d902      	bls.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001de2:	2302      	movs	r3, #2
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	e013      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001de8:	2301      	movs	r3, #1
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	e010      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b80      	cmp	r3, #128	; 0x80
 8001df2:	d902      	bls.n	8001dfa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001df4:	2303      	movs	r3, #3
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	e00a      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b80      	cmp	r3, #128	; 0x80
 8001dfe:	d102      	bne.n	8001e06 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e00:	2302      	movs	r3, #2
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	e004      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b70      	cmp	r3, #112	; 0x70
 8001e0a:	d101      	bne.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 0207 	bic.w	r2, r3, #7
 8001e18:	4909      	ldr	r1, [pc, #36]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d001      	beq.n	8001e32 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40022000 	.word	0x40022000

08001e44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e50:	2300      	movs	r3, #0
 8001e52:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d031      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e64:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e68:	d01a      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001e6a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e6e:	d814      	bhi.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d009      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e78:	d10f      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001e7a:	4b5d      	ldr	r3, [pc, #372]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	4a5c      	ldr	r2, [pc, #368]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e86:	e00c      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 f9ce 	bl	8002230 <RCCEx_PLLSAI1_Config>
 8001e94:	4603      	mov	r3, r0
 8001e96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e98:	e003      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e9e:	e000      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ea2:	7cfb      	ldrb	r3, [r7, #19]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10b      	bne.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ea8:	4b51      	ldr	r3, [pc, #324]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb6:	494e      	ldr	r1, [pc, #312]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ebe:	e001      	b.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ec0:	7cfb      	ldrb	r3, [r7, #19]
 8001ec2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 809e 	beq.w	800200e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ed6:	4b46      	ldr	r3, [pc, #280]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00d      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eec:	4b40      	ldr	r3, [pc, #256]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef0:	4a3f      	ldr	r2, [pc, #252]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef8:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f04:	2301      	movs	r3, #1
 8001f06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f08:	4b3a      	ldr	r3, [pc, #232]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a39      	ldr	r2, [pc, #228]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f14:	f7fe fd98 	bl	8000a48 <HAL_GetTick>
 8001f18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f1a:	e009      	b.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1c:	f7fe fd94 	bl	8000a48 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d902      	bls.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	74fb      	strb	r3, [r7, #19]
        break;
 8001f2e:	e005      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f30:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ef      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001f3c:	7cfb      	ldrb	r3, [r7, #19]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d15a      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f42:	4b2b      	ldr	r3, [pc, #172]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d01e      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d019      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f5e:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f68:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f6a:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f70:	4a1f      	ldr	r2, [pc, #124]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f80:	4a1b      	ldr	r2, [pc, #108]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f8a:	4a19      	ldr	r2, [pc, #100]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d016      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7fe fd54 	bl	8000a48 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa2:	e00b      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7fe fd50 	bl	8000a48 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d902      	bls.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	74fb      	strb	r3, [r7, #19]
            break;
 8001fba:	e006      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0ec      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001fca:	7cfb      	ldrb	r3, [r7, #19]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10b      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fde:	4904      	ldr	r1, [pc, #16]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fe6:	e009      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fe8:	7cfb      	ldrb	r3, [r7, #19]
 8001fea:	74bb      	strb	r3, [r7, #18]
 8001fec:	e006      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ff8:	7cfb      	ldrb	r3, [r7, #19]
 8001ffa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ffc:	7c7b      	ldrb	r3, [r7, #17]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d105      	bne.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002002:	4b8a      	ldr	r3, [pc, #552]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002006:	4a89      	ldr	r2, [pc, #548]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800201a:	4b84      	ldr	r3, [pc, #528]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800201c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002020:	f023 0203 	bic.w	r2, r3, #3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4980      	ldr	r1, [pc, #512]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800203c:	4b7b      	ldr	r3, [pc, #492]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002042:	f023 020c 	bic.w	r2, r3, #12
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	4978      	ldr	r1, [pc, #480]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0320 	and.w	r3, r3, #32
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800205e:	4b73      	ldr	r3, [pc, #460]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002064:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	496f      	ldr	r1, [pc, #444]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00a      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002080:	4b6a      	ldr	r3, [pc, #424]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208e:	4967      	ldr	r1, [pc, #412]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00a      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020a2:	4b62      	ldr	r3, [pc, #392]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b0:	495e      	ldr	r1, [pc, #376]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00a      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020c4:	4b59      	ldr	r3, [pc, #356]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	4956      	ldr	r1, [pc, #344]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020e6:	4b51      	ldr	r3, [pc, #324]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	494d      	ldr	r1, [pc, #308]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d028      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002108:	4b48      	ldr	r3, [pc, #288]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	4945      	ldr	r1, [pc, #276]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002126:	d106      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002128:	4b40      	ldr	r3, [pc, #256]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4a3f      	ldr	r2, [pc, #252]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800212e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002132:	60d3      	str	r3, [r2, #12]
 8002134:	e011      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800213e:	d10c      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3304      	adds	r3, #4
 8002144:	2101      	movs	r1, #1
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f872 	bl	8002230 <RCCEx_PLLSAI1_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002156:	7cfb      	ldrb	r3, [r7, #19]
 8002158:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d028      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002166:	4b31      	ldr	r3, [pc, #196]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	492d      	ldr	r1, [pc, #180]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002184:	d106      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002186:	4b29      	ldr	r3, [pc, #164]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	4a28      	ldr	r2, [pc, #160]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800218c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002190:	60d3      	str	r3, [r2, #12]
 8002192:	e011      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800219c:	d10c      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3304      	adds	r3, #4
 80021a2:	2101      	movs	r1, #1
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 f843 	bl	8002230 <RCCEx_PLLSAI1_Config>
 80021aa:	4603      	mov	r3, r0
 80021ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021ae:	7cfb      	ldrb	r3, [r7, #19]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80021b4:	7cfb      	ldrb	r3, [r7, #19]
 80021b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01c      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021c4:	4b19      	ldr	r3, [pc, #100]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d2:	4916      	ldr	r1, [pc, #88]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021e2:	d10c      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3304      	adds	r3, #4
 80021e8:	2102      	movs	r1, #2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 f820 	bl	8002230 <RCCEx_PLLSAI1_Config>
 80021f0:	4603      	mov	r3, r0
 80021f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021f4:	7cfb      	ldrb	r3, [r7, #19]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80021fa:	7cfb      	ldrb	r3, [r7, #19]
 80021fc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800220c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002210:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002218:	4904      	ldr	r1, [pc, #16]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002220:	7cbb      	ldrb	r3, [r7, #18]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000

08002230 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800223e:	4b74      	ldr	r3, [pc, #464]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d018      	beq.n	800227c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800224a:	4b71      	ldr	r3, [pc, #452]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f003 0203 	and.w	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d10d      	bne.n	8002276 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
       ||
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002262:	4b6b      	ldr	r3, [pc, #428]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
       ||
 8002272:	429a      	cmp	r2, r3
 8002274:	d047      	beq.n	8002306 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	e044      	b.n	8002306 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b03      	cmp	r3, #3
 8002282:	d018      	beq.n	80022b6 <RCCEx_PLLSAI1_Config+0x86>
 8002284:	2b03      	cmp	r3, #3
 8002286:	d825      	bhi.n	80022d4 <RCCEx_PLLSAI1_Config+0xa4>
 8002288:	2b01      	cmp	r3, #1
 800228a:	d002      	beq.n	8002292 <RCCEx_PLLSAI1_Config+0x62>
 800228c:	2b02      	cmp	r3, #2
 800228e:	d009      	beq.n	80022a4 <RCCEx_PLLSAI1_Config+0x74>
 8002290:	e020      	b.n	80022d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002292:	4b5f      	ldr	r3, [pc, #380]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d11d      	bne.n	80022da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a2:	e01a      	b.n	80022da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022a4:	4b5a      	ldr	r3, [pc, #360]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d116      	bne.n	80022de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b4:	e013      	b.n	80022de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022b6:	4b56      	ldr	r3, [pc, #344]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10f      	bne.n	80022e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022c2:	4b53      	ldr	r3, [pc, #332]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022d2:	e006      	b.n	80022e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
      break;
 80022d8:	e004      	b.n	80022e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022da:	bf00      	nop
 80022dc:	e002      	b.n	80022e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022de:	bf00      	nop
 80022e0:	e000      	b.n	80022e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10d      	bne.n	8002306 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022ea:	4b49      	ldr	r3, [pc, #292]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6819      	ldr	r1, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	430b      	orrs	r3, r1
 8002300:	4943      	ldr	r1, [pc, #268]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002302:	4313      	orrs	r3, r2
 8002304:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d17c      	bne.n	8002406 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800230c:	4b40      	ldr	r3, [pc, #256]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a3f      	ldr	r2, [pc, #252]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002312:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002316:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002318:	f7fe fb96 	bl	8000a48 <HAL_GetTick>
 800231c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800231e:	e009      	b.n	8002334 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002320:	f7fe fb92 	bl	8000a48 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d902      	bls.n	8002334 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	73fb      	strb	r3, [r7, #15]
        break;
 8002332:	e005      	b.n	8002340 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002334:	4b36      	ldr	r3, [pc, #216]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ef      	bne.n	8002320 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d15f      	bne.n	8002406 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d110      	bne.n	800236e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800234c:	4b30      	ldr	r3, [pc, #192]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002354:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6892      	ldr	r2, [r2, #8]
 800235c:	0211      	lsls	r1, r2, #8
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68d2      	ldr	r2, [r2, #12]
 8002362:	06d2      	lsls	r2, r2, #27
 8002364:	430a      	orrs	r2, r1
 8002366:	492a      	ldr	r1, [pc, #168]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002368:	4313      	orrs	r3, r2
 800236a:	610b      	str	r3, [r1, #16]
 800236c:	e027      	b.n	80023be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d112      	bne.n	800239a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002374:	4b26      	ldr	r3, [pc, #152]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800237c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6892      	ldr	r2, [r2, #8]
 8002384:	0211      	lsls	r1, r2, #8
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6912      	ldr	r2, [r2, #16]
 800238a:	0852      	lsrs	r2, r2, #1
 800238c:	3a01      	subs	r2, #1
 800238e:	0552      	lsls	r2, r2, #21
 8002390:	430a      	orrs	r2, r1
 8002392:	491f      	ldr	r1, [pc, #124]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002394:	4313      	orrs	r3, r2
 8002396:	610b      	str	r3, [r1, #16]
 8002398:	e011      	b.n	80023be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800239a:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6892      	ldr	r2, [r2, #8]
 80023aa:	0211      	lsls	r1, r2, #8
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6952      	ldr	r2, [r2, #20]
 80023b0:	0852      	lsrs	r2, r2, #1
 80023b2:	3a01      	subs	r2, #1
 80023b4:	0652      	lsls	r2, r2, #25
 80023b6:	430a      	orrs	r2, r1
 80023b8:	4915      	ldr	r1, [pc, #84]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a13      	ldr	r2, [pc, #76]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ca:	f7fe fb3d 	bl	8000a48 <HAL_GetTick>
 80023ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023d0:	e009      	b.n	80023e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023d2:	f7fe fb39 	bl	8000a48 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d902      	bls.n	80023e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	73fb      	strb	r3, [r7, #15]
          break;
 80023e4:	e005      	b.n	80023f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023e6:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0ef      	beq.n	80023d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d106      	bne.n	8002406 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	4903      	ldr	r1, [pc, #12]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002402:	4313      	orrs	r3, r2
 8002404:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002406:	7bfb      	ldrb	r3, [r7, #15]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000

08002414 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e095      	b.n	8002552 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	2b00      	cmp	r3, #0
 800242c:	d108      	bne.n	8002440 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002436:	d009      	beq.n	800244c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	61da      	str	r2, [r3, #28]
 800243e:	e005      	b.n	800244c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe f88e 	bl	8000588 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002482:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800248c:	d902      	bls.n	8002494 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	e002      	b.n	800249a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002498:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80024a2:	d007      	beq.n	80024b4 <HAL_SPI_Init+0xa0>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024ac:	d002      	beq.n	80024b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f6:	ea42 0103 	orr.w	r1, r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	0c1b      	lsrs	r3, r3, #16
 8002510:	f003 0204 	and.w	r2, r3, #4
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002530:	ea42 0103 	orr.w	r1, r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e049      	b.n	8002600 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d106      	bne.n	8002586 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7fe f977 	bl	8000874 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2202      	movs	r2, #2
 800258a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3304      	adds	r3, #4
 8002596:	4619      	mov	r1, r3
 8002598:	4610      	mov	r0, r2
 800259a:	f000 fb53 	bl	8002c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e049      	b.n	80026ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f841 	bl	80026b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3304      	adds	r3, #4
 8002644:	4619      	mov	r1, r3
 8002646:	4610      	mov	r0, r2
 8002648:	f000 fafc 	bl	8002c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d109      	bne.n	80026f0 <HAL_TIM_PWM_Start+0x24>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	bf14      	ite	ne
 80026e8:	2301      	movne	r3, #1
 80026ea:	2300      	moveq	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	e03c      	b.n	800276a <HAL_TIM_PWM_Start+0x9e>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d109      	bne.n	800270a <HAL_TIM_PWM_Start+0x3e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	bf14      	ite	ne
 8002702:	2301      	movne	r3, #1
 8002704:	2300      	moveq	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	e02f      	b.n	800276a <HAL_TIM_PWM_Start+0x9e>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b08      	cmp	r3, #8
 800270e:	d109      	bne.n	8002724 <HAL_TIM_PWM_Start+0x58>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	bf14      	ite	ne
 800271c:	2301      	movne	r3, #1
 800271e:	2300      	moveq	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	e022      	b.n	800276a <HAL_TIM_PWM_Start+0x9e>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2b0c      	cmp	r3, #12
 8002728:	d109      	bne.n	800273e <HAL_TIM_PWM_Start+0x72>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b01      	cmp	r3, #1
 8002734:	bf14      	ite	ne
 8002736:	2301      	movne	r3, #1
 8002738:	2300      	moveq	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	e015      	b.n	800276a <HAL_TIM_PWM_Start+0x9e>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b10      	cmp	r3, #16
 8002742:	d109      	bne.n	8002758 <HAL_TIM_PWM_Start+0x8c>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b01      	cmp	r3, #1
 800274e:	bf14      	ite	ne
 8002750:	2301      	movne	r3, #1
 8002752:	2300      	moveq	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	e008      	b.n	800276a <HAL_TIM_PWM_Start+0x9e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b01      	cmp	r3, #1
 8002762:	bf14      	ite	ne
 8002764:	2301      	movne	r3, #1
 8002766:	2300      	moveq	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e07e      	b.n	8002870 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d104      	bne.n	8002782 <HAL_TIM_PWM_Start+0xb6>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002780:	e023      	b.n	80027ca <HAL_TIM_PWM_Start+0xfe>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b04      	cmp	r3, #4
 8002786:	d104      	bne.n	8002792 <HAL_TIM_PWM_Start+0xc6>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002790:	e01b      	b.n	80027ca <HAL_TIM_PWM_Start+0xfe>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b08      	cmp	r3, #8
 8002796:	d104      	bne.n	80027a2 <HAL_TIM_PWM_Start+0xd6>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027a0:	e013      	b.n	80027ca <HAL_TIM_PWM_Start+0xfe>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b0c      	cmp	r3, #12
 80027a6:	d104      	bne.n	80027b2 <HAL_TIM_PWM_Start+0xe6>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2202      	movs	r2, #2
 80027ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027b0:	e00b      	b.n	80027ca <HAL_TIM_PWM_Start+0xfe>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2b10      	cmp	r3, #16
 80027b6:	d104      	bne.n	80027c2 <HAL_TIM_PWM_Start+0xf6>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027c0:	e003      	b.n	80027ca <HAL_TIM_PWM_Start+0xfe>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2202      	movs	r2, #2
 80027c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2201      	movs	r2, #1
 80027d0:	6839      	ldr	r1, [r7, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 fdb2 	bl	800333c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a26      	ldr	r2, [pc, #152]	; (8002878 <HAL_TIM_PWM_Start+0x1ac>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d009      	beq.n	80027f6 <HAL_TIM_PWM_Start+0x12a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a25      	ldr	r2, [pc, #148]	; (800287c <HAL_TIM_PWM_Start+0x1b0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d004      	beq.n	80027f6 <HAL_TIM_PWM_Start+0x12a>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a23      	ldr	r2, [pc, #140]	; (8002880 <HAL_TIM_PWM_Start+0x1b4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d101      	bne.n	80027fa <HAL_TIM_PWM_Start+0x12e>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_TIM_PWM_Start+0x130>
 80027fa:	2300      	movs	r3, #0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d007      	beq.n	8002810 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800280e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a18      	ldr	r2, [pc, #96]	; (8002878 <HAL_TIM_PWM_Start+0x1ac>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d009      	beq.n	800282e <HAL_TIM_PWM_Start+0x162>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002822:	d004      	beq.n	800282e <HAL_TIM_PWM_Start+0x162>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a14      	ldr	r2, [pc, #80]	; (800287c <HAL_TIM_PWM_Start+0x1b0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d115      	bne.n	800285a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	4b13      	ldr	r3, [pc, #76]	; (8002884 <HAL_TIM_PWM_Start+0x1b8>)
 8002836:	4013      	ands	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2b06      	cmp	r3, #6
 800283e:	d015      	beq.n	800286c <HAL_TIM_PWM_Start+0x1a0>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002846:	d011      	beq.n	800286c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0201 	orr.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002858:	e008      	b.n	800286c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 0201 	orr.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	e000      	b.n	800286e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800286c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40012c00 	.word	0x40012c00
 800287c:	40014000 	.word	0x40014000
 8002880:	40014400 	.word	0x40014400
 8002884:	00010007 	.word	0x00010007

08002888 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e0ff      	b.n	8002aa6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b14      	cmp	r3, #20
 80028b2:	f200 80f0 	bhi.w	8002a96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80028b6:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80028b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028bc:	08002911 	.word	0x08002911
 80028c0:	08002a97 	.word	0x08002a97
 80028c4:	08002a97 	.word	0x08002a97
 80028c8:	08002a97 	.word	0x08002a97
 80028cc:	08002951 	.word	0x08002951
 80028d0:	08002a97 	.word	0x08002a97
 80028d4:	08002a97 	.word	0x08002a97
 80028d8:	08002a97 	.word	0x08002a97
 80028dc:	08002993 	.word	0x08002993
 80028e0:	08002a97 	.word	0x08002a97
 80028e4:	08002a97 	.word	0x08002a97
 80028e8:	08002a97 	.word	0x08002a97
 80028ec:	080029d3 	.word	0x080029d3
 80028f0:	08002a97 	.word	0x08002a97
 80028f4:	08002a97 	.word	0x08002a97
 80028f8:	08002a97 	.word	0x08002a97
 80028fc:	08002a15 	.word	0x08002a15
 8002900:	08002a97 	.word	0x08002a97
 8002904:	08002a97 	.word	0x08002a97
 8002908:	08002a97 	.word	0x08002a97
 800290c:	08002a55 	.word	0x08002a55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f9f8 	bl	8002d0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0208 	orr.w	r2, r2, #8
 800292a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699a      	ldr	r2, [r3, #24]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0204 	bic.w	r2, r2, #4
 800293a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6999      	ldr	r1, [r3, #24]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	619a      	str	r2, [r3, #24]
      break;
 800294e:	e0a5      	b.n	8002a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fa54 	bl	8002e04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800296a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699a      	ldr	r2, [r3, #24]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6999      	ldr	r1, [r3, #24]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	021a      	lsls	r2, r3, #8
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	619a      	str	r2, [r3, #24]
      break;
 8002990:	e084      	b.n	8002a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	4618      	mov	r0, r3
 800299a:	f000 faad 	bl	8002ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	69da      	ldr	r2, [r3, #28]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0208 	orr.w	r2, r2, #8
 80029ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	69da      	ldr	r2, [r3, #28]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0204 	bic.w	r2, r2, #4
 80029bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	69d9      	ldr	r1, [r3, #28]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	61da      	str	r2, [r3, #28]
      break;
 80029d0:	e064      	b.n	8002a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fb05 	bl	8002fe8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	69da      	ldr	r2, [r3, #28]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69da      	ldr	r2, [r3, #28]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69d9      	ldr	r1, [r3, #28]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	021a      	lsls	r2, r3, #8
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	61da      	str	r2, [r3, #28]
      break;
 8002a12:	e043      	b.n	8002a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fb42 	bl	80030a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0208 	orr.w	r2, r2, #8
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0204 	bic.w	r2, r2, #4
 8002a3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002a52:	e023      	b.n	8002a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fb7a 	bl	8003154 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	021a      	lsls	r2, r3, #8
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002a94:	e002      	b.n	8002a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	75fb      	strb	r3, [r7, #23]
      break;
 8002a9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop

08002ab0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_TIM_ConfigClockSource+0x1c>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e0b6      	b.n	8002c3a <HAL_TIM_ConfigClockSource+0x18a>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002af6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b08:	d03e      	beq.n	8002b88 <HAL_TIM_ConfigClockSource+0xd8>
 8002b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b0e:	f200 8087 	bhi.w	8002c20 <HAL_TIM_ConfigClockSource+0x170>
 8002b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b16:	f000 8086 	beq.w	8002c26 <HAL_TIM_ConfigClockSource+0x176>
 8002b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b1e:	d87f      	bhi.n	8002c20 <HAL_TIM_ConfigClockSource+0x170>
 8002b20:	2b70      	cmp	r3, #112	; 0x70
 8002b22:	d01a      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0xaa>
 8002b24:	2b70      	cmp	r3, #112	; 0x70
 8002b26:	d87b      	bhi.n	8002c20 <HAL_TIM_ConfigClockSource+0x170>
 8002b28:	2b60      	cmp	r3, #96	; 0x60
 8002b2a:	d050      	beq.n	8002bce <HAL_TIM_ConfigClockSource+0x11e>
 8002b2c:	2b60      	cmp	r3, #96	; 0x60
 8002b2e:	d877      	bhi.n	8002c20 <HAL_TIM_ConfigClockSource+0x170>
 8002b30:	2b50      	cmp	r3, #80	; 0x50
 8002b32:	d03c      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0xfe>
 8002b34:	2b50      	cmp	r3, #80	; 0x50
 8002b36:	d873      	bhi.n	8002c20 <HAL_TIM_ConfigClockSource+0x170>
 8002b38:	2b40      	cmp	r3, #64	; 0x40
 8002b3a:	d058      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x13e>
 8002b3c:	2b40      	cmp	r3, #64	; 0x40
 8002b3e:	d86f      	bhi.n	8002c20 <HAL_TIM_ConfigClockSource+0x170>
 8002b40:	2b30      	cmp	r3, #48	; 0x30
 8002b42:	d064      	beq.n	8002c0e <HAL_TIM_ConfigClockSource+0x15e>
 8002b44:	2b30      	cmp	r3, #48	; 0x30
 8002b46:	d86b      	bhi.n	8002c20 <HAL_TIM_ConfigClockSource+0x170>
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d060      	beq.n	8002c0e <HAL_TIM_ConfigClockSource+0x15e>
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d867      	bhi.n	8002c20 <HAL_TIM_ConfigClockSource+0x170>
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d05c      	beq.n	8002c0e <HAL_TIM_ConfigClockSource+0x15e>
 8002b54:	2b10      	cmp	r3, #16
 8002b56:	d05a      	beq.n	8002c0e <HAL_TIM_ConfigClockSource+0x15e>
 8002b58:	e062      	b.n	8002c20 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	6899      	ldr	r1, [r3, #8]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f000 fbc7 	bl	80032fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	609a      	str	r2, [r3, #8]
      break;
 8002b86:	e04f      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	6899      	ldr	r1, [r3, #8]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f000 fbb0 	bl	80032fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002baa:	609a      	str	r2, [r3, #8]
      break;
 8002bac:	e03c      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6859      	ldr	r1, [r3, #4]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f000 fb24 	bl	8003208 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2150      	movs	r1, #80	; 0x50
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fb7d 	bl	80032c6 <TIM_ITRx_SetConfig>
      break;
 8002bcc:	e02c      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6859      	ldr	r1, [r3, #4]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f000 fb43 	bl	8003266 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2160      	movs	r1, #96	; 0x60
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fb6d 	bl	80032c6 <TIM_ITRx_SetConfig>
      break;
 8002bec:	e01c      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	6859      	ldr	r1, [r3, #4]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f000 fb04 	bl	8003208 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2140      	movs	r1, #64	; 0x40
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fb5d 	bl	80032c6 <TIM_ITRx_SetConfig>
      break;
 8002c0c:	e00c      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4619      	mov	r1, r3
 8002c18:	4610      	mov	r0, r2
 8002c1a:	f000 fb54 	bl	80032c6 <TIM_ITRx_SetConfig>
      break;
 8002c1e:	e003      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
      break;
 8002c24:	e000      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002c26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a2a      	ldr	r2, [pc, #168]	; (8002d00 <TIM_Base_SetConfig+0xbc>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d003      	beq.n	8002c64 <TIM_Base_SetConfig+0x20>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c62:	d108      	bne.n	8002c76 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a21      	ldr	r2, [pc, #132]	; (8002d00 <TIM_Base_SetConfig+0xbc>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00b      	beq.n	8002c96 <TIM_Base_SetConfig+0x52>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c84:	d007      	beq.n	8002c96 <TIM_Base_SetConfig+0x52>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a1e      	ldr	r2, [pc, #120]	; (8002d04 <TIM_Base_SetConfig+0xc0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d003      	beq.n	8002c96 <TIM_Base_SetConfig+0x52>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a1d      	ldr	r2, [pc, #116]	; (8002d08 <TIM_Base_SetConfig+0xc4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d108      	bne.n	8002ca8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a0c      	ldr	r2, [pc, #48]	; (8002d00 <TIM_Base_SetConfig+0xbc>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d007      	beq.n	8002ce4 <TIM_Base_SetConfig+0xa0>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a0b      	ldr	r2, [pc, #44]	; (8002d04 <TIM_Base_SetConfig+0xc0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d003      	beq.n	8002ce4 <TIM_Base_SetConfig+0xa0>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <TIM_Base_SetConfig+0xc4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d103      	bne.n	8002cec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	615a      	str	r2, [r3, #20]
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40012c00 	.word	0x40012c00
 8002d04:	40014000 	.word	0x40014000
 8002d08:	40014400 	.word	0x40014400

08002d0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	f023 0201 	bic.w	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0303 	bic.w	r3, r3, #3
 8002d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f023 0302 	bic.w	r3, r3, #2
 8002d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a24      	ldr	r2, [pc, #144]	; (8002df8 <TIM_OC1_SetConfig+0xec>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d007      	beq.n	8002d7c <TIM_OC1_SetConfig+0x70>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a23      	ldr	r2, [pc, #140]	; (8002dfc <TIM_OC1_SetConfig+0xf0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d003      	beq.n	8002d7c <TIM_OC1_SetConfig+0x70>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a22      	ldr	r2, [pc, #136]	; (8002e00 <TIM_OC1_SetConfig+0xf4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d10c      	bne.n	8002d96 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f023 0308 	bic.w	r3, r3, #8
 8002d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f023 0304 	bic.w	r3, r3, #4
 8002d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a17      	ldr	r2, [pc, #92]	; (8002df8 <TIM_OC1_SetConfig+0xec>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d007      	beq.n	8002dae <TIM_OC1_SetConfig+0xa2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a16      	ldr	r2, [pc, #88]	; (8002dfc <TIM_OC1_SetConfig+0xf0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d003      	beq.n	8002dae <TIM_OC1_SetConfig+0xa2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a15      	ldr	r2, [pc, #84]	; (8002e00 <TIM_OC1_SetConfig+0xf4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d111      	bne.n	8002dd2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	621a      	str	r2, [r3, #32]
}
 8002dec:	bf00      	nop
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	40012c00 	.word	0x40012c00
 8002dfc:	40014000 	.word	0x40014000
 8002e00:	40014400 	.word	0x40014400

08002e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	f023 0210 	bic.w	r2, r3, #16
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	021b      	lsls	r3, r3, #8
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f023 0320 	bic.w	r3, r3, #32
 8002e52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a22      	ldr	r2, [pc, #136]	; (8002eec <TIM_OC2_SetConfig+0xe8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d10d      	bne.n	8002e84 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a19      	ldr	r2, [pc, #100]	; (8002eec <TIM_OC2_SetConfig+0xe8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d007      	beq.n	8002e9c <TIM_OC2_SetConfig+0x98>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a18      	ldr	r2, [pc, #96]	; (8002ef0 <TIM_OC2_SetConfig+0xec>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d003      	beq.n	8002e9c <TIM_OC2_SetConfig+0x98>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a17      	ldr	r2, [pc, #92]	; (8002ef4 <TIM_OC2_SetConfig+0xf0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d113      	bne.n	8002ec4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ea2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	621a      	str	r2, [r3, #32]
}
 8002ede:	bf00      	nop
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40014000 	.word	0x40014000
 8002ef4:	40014400 	.word	0x40014400

08002ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0303 	bic.w	r3, r3, #3
 8002f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	021b      	lsls	r3, r3, #8
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a21      	ldr	r2, [pc, #132]	; (8002fdc <TIM_OC3_SetConfig+0xe4>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d10d      	bne.n	8002f76 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a18      	ldr	r2, [pc, #96]	; (8002fdc <TIM_OC3_SetConfig+0xe4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d007      	beq.n	8002f8e <TIM_OC3_SetConfig+0x96>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a17      	ldr	r2, [pc, #92]	; (8002fe0 <TIM_OC3_SetConfig+0xe8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d003      	beq.n	8002f8e <TIM_OC3_SetConfig+0x96>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a16      	ldr	r2, [pc, #88]	; (8002fe4 <TIM_OC3_SetConfig+0xec>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d113      	bne.n	8002fb6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	621a      	str	r2, [r3, #32]
}
 8002fd0:	bf00      	nop
 8002fd2:	371c      	adds	r7, #28
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	40012c00 	.word	0x40012c00
 8002fe0:	40014000 	.word	0x40014000
 8002fe4:	40014400 	.word	0x40014400

08002fe8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800301a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	031b      	lsls	r3, r3, #12
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a14      	ldr	r2, [pc, #80]	; (8003098 <TIM_OC4_SetConfig+0xb0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d007      	beq.n	800305c <TIM_OC4_SetConfig+0x74>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a13      	ldr	r2, [pc, #76]	; (800309c <TIM_OC4_SetConfig+0xb4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d003      	beq.n	800305c <TIM_OC4_SetConfig+0x74>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a12      	ldr	r2, [pc, #72]	; (80030a0 <TIM_OC4_SetConfig+0xb8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d109      	bne.n	8003070 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003062:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	019b      	lsls	r3, r3, #6
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	621a      	str	r2, [r3, #32]
}
 800308a:	bf00      	nop
 800308c:	371c      	adds	r7, #28
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40012c00 	.word	0x40012c00
 800309c:	40014000 	.word	0x40014000
 80030a0:	40014400 	.word	0x40014400

080030a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80030e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a13      	ldr	r2, [pc, #76]	; (8003148 <TIM_OC5_SetConfig+0xa4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d007      	beq.n	800310e <TIM_OC5_SetConfig+0x6a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a12      	ldr	r2, [pc, #72]	; (800314c <TIM_OC5_SetConfig+0xa8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d003      	beq.n	800310e <TIM_OC5_SetConfig+0x6a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a11      	ldr	r2, [pc, #68]	; (8003150 <TIM_OC5_SetConfig+0xac>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d109      	bne.n	8003122 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003114:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	621a      	str	r2, [r3, #32]
}
 800313c:	bf00      	nop
 800313e:	371c      	adds	r7, #28
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	40012c00 	.word	0x40012c00
 800314c:	40014000 	.word	0x40014000
 8003150:	40014400 	.word	0x40014400

08003154 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	021b      	lsls	r3, r3, #8
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800319a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	051b      	lsls	r3, r3, #20
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a14      	ldr	r2, [pc, #80]	; (80031fc <TIM_OC6_SetConfig+0xa8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d007      	beq.n	80031c0 <TIM_OC6_SetConfig+0x6c>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a13      	ldr	r2, [pc, #76]	; (8003200 <TIM_OC6_SetConfig+0xac>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d003      	beq.n	80031c0 <TIM_OC6_SetConfig+0x6c>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a12      	ldr	r2, [pc, #72]	; (8003204 <TIM_OC6_SetConfig+0xb0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d109      	bne.n	80031d4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	029b      	lsls	r3, r3, #10
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	621a      	str	r2, [r3, #32]
}
 80031ee:	bf00      	nop
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40012c00 	.word	0x40012c00
 8003200:	40014000 	.word	0x40014000
 8003204:	40014400 	.word	0x40014400

08003208 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	f023 0201 	bic.w	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f023 030a 	bic.w	r3, r3, #10
 8003244:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4313      	orrs	r3, r2
 800324c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	621a      	str	r2, [r3, #32]
}
 800325a:	bf00      	nop
 800325c:	371c      	adds	r7, #28
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003266:	b480      	push	{r7}
 8003268:	b087      	sub	sp, #28
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	f023 0210 	bic.w	r2, r3, #16
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003290:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	031b      	lsls	r3, r3, #12
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	621a      	str	r2, [r3, #32]
}
 80032ba:	bf00      	nop
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b085      	sub	sp, #20
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f043 0307 	orr.w	r3, r3, #7
 80032e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	609a      	str	r2, [r3, #8]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003316:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	021a      	lsls	r2, r3, #8
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	431a      	orrs	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4313      	orrs	r3, r2
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	609a      	str	r2, [r3, #8]
}
 8003330:	bf00      	nop
 8003332:	371c      	adds	r7, #28
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f003 031f 	and.w	r3, r3, #31
 800334e:	2201      	movs	r2, #1
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a1a      	ldr	r2, [r3, #32]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	43db      	mvns	r3, r3
 800335e:	401a      	ands	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a1a      	ldr	r2, [r3, #32]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	431a      	orrs	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	621a      	str	r2, [r3, #32]
}
 800337a:	bf00      	nop
 800337c:	371c      	adds	r7, #28
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800339c:	2302      	movs	r3, #2
 800339e:	e04f      	b.n	8003440 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a21      	ldr	r2, [pc, #132]	; (800344c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d108      	bne.n	80033dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80033d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a14      	ldr	r2, [pc, #80]	; (800344c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d009      	beq.n	8003414 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003408:	d004      	beq.n	8003414 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a10      	ldr	r2, [pc, #64]	; (8003450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d10c      	bne.n	800342e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800341a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	4313      	orrs	r3, r2
 8003424:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	40012c00 	.word	0x40012c00
 8003450:	40014000 	.word	0x40014000

08003454 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800346c:	2302      	movs	r3, #2
 800346e:	e060      	b.n	8003532 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4313      	orrs	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	041b      	lsls	r3, r3, #16
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a14      	ldr	r2, [pc, #80]	; (8003540 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d115      	bne.n	8003520 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	051b      	lsls	r3, r3, #20
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40012c00 	.word	0x40012c00

08003544 <__libc_init_array>:
 8003544:	b570      	push	{r4, r5, r6, lr}
 8003546:	4d0d      	ldr	r5, [pc, #52]	; (800357c <__libc_init_array+0x38>)
 8003548:	4c0d      	ldr	r4, [pc, #52]	; (8003580 <__libc_init_array+0x3c>)
 800354a:	1b64      	subs	r4, r4, r5
 800354c:	10a4      	asrs	r4, r4, #2
 800354e:	2600      	movs	r6, #0
 8003550:	42a6      	cmp	r6, r4
 8003552:	d109      	bne.n	8003568 <__libc_init_array+0x24>
 8003554:	4d0b      	ldr	r5, [pc, #44]	; (8003584 <__libc_init_array+0x40>)
 8003556:	4c0c      	ldr	r4, [pc, #48]	; (8003588 <__libc_init_array+0x44>)
 8003558:	f000 f820 	bl	800359c <_init>
 800355c:	1b64      	subs	r4, r4, r5
 800355e:	10a4      	asrs	r4, r4, #2
 8003560:	2600      	movs	r6, #0
 8003562:	42a6      	cmp	r6, r4
 8003564:	d105      	bne.n	8003572 <__libc_init_array+0x2e>
 8003566:	bd70      	pop	{r4, r5, r6, pc}
 8003568:	f855 3b04 	ldr.w	r3, [r5], #4
 800356c:	4798      	blx	r3
 800356e:	3601      	adds	r6, #1
 8003570:	e7ee      	b.n	8003550 <__libc_init_array+0xc>
 8003572:	f855 3b04 	ldr.w	r3, [r5], #4
 8003576:	4798      	blx	r3
 8003578:	3601      	adds	r6, #1
 800357a:	e7f2      	b.n	8003562 <__libc_init_array+0x1e>
 800357c:	080035f4 	.word	0x080035f4
 8003580:	080035f4 	.word	0x080035f4
 8003584:	080035f4 	.word	0x080035f4
 8003588:	080035f8 	.word	0x080035f8

0800358c <memset>:
 800358c:	4402      	add	r2, r0
 800358e:	4603      	mov	r3, r0
 8003590:	4293      	cmp	r3, r2
 8003592:	d100      	bne.n	8003596 <memset+0xa>
 8003594:	4770      	bx	lr
 8003596:	f803 1b01 	strb.w	r1, [r3], #1
 800359a:	e7f9      	b.n	8003590 <memset+0x4>

0800359c <_init>:
 800359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359e:	bf00      	nop
 80035a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a2:	bc08      	pop	{r3}
 80035a4:	469e      	mov	lr, r3
 80035a6:	4770      	bx	lr

080035a8 <_fini>:
 80035a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035aa:	bf00      	nop
 80035ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ae:	bc08      	pop	{r3}
 80035b0:	469e      	mov	lr, r3
 80035b2:	4770      	bx	lr
