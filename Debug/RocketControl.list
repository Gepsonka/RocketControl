
RocketControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a4  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006734  08006734  00016734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006774  08006774  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006774  08006774  00016774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800677c  0800677c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800677c  0800677c  0001677c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006780  08006780  00016780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000000c  08006790  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  200001ec  08006790  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c7e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e8a  00000000  00000000  00034cba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  00037b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  00038ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000484f  00000000  00000000  0003a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018aa9  00000000  00000000  0003e91f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc3be  00000000  00000000  000573c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00123786  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005168  00000000  00000000  001237d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800671c 	.word	0x0800671c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	0800671c 	.word	0x0800671c

080001d0 <__aeabi_ldivmod>:
 80001d0:	b97b      	cbnz	r3, 80001f2 <__aeabi_ldivmod+0x22>
 80001d2:	b972      	cbnz	r2, 80001f2 <__aeabi_ldivmod+0x22>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bfbe      	ittt	lt
 80001d8:	2000      	movlt	r0, #0
 80001da:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001de:	e006      	blt.n	80001ee <__aeabi_ldivmod+0x1e>
 80001e0:	bf08      	it	eq
 80001e2:	2800      	cmpeq	r0, #0
 80001e4:	bf1c      	itt	ne
 80001e6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001ea:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ee:	f000 b9bf 	b.w	8000570 <__aeabi_idiv0>
 80001f2:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fa:	2900      	cmp	r1, #0
 80001fc:	db09      	blt.n	8000212 <__aeabi_ldivmod+0x42>
 80001fe:	2b00      	cmp	r3, #0
 8000200:	db1a      	blt.n	8000238 <__aeabi_ldivmod+0x68>
 8000202:	f000 f84d 	bl	80002a0 <__udivmoddi4>
 8000206:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020e:	b004      	add	sp, #16
 8000210:	4770      	bx	lr
 8000212:	4240      	negs	r0, r0
 8000214:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000218:	2b00      	cmp	r3, #0
 800021a:	db1b      	blt.n	8000254 <__aeabi_ldivmod+0x84>
 800021c:	f000 f840 	bl	80002a0 <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4240      	negs	r0, r0
 800022c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000230:	4252      	negs	r2, r2
 8000232:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000236:	4770      	bx	lr
 8000238:	4252      	negs	r2, r2
 800023a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800023e:	f000 f82f 	bl	80002a0 <__udivmoddi4>
 8000242:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000246:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024a:	b004      	add	sp, #16
 800024c:	4240      	negs	r0, r0
 800024e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000252:	4770      	bx	lr
 8000254:	4252      	negs	r2, r2
 8000256:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025a:	f000 f821 	bl	80002a0 <__udivmoddi4>
 800025e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000266:	b004      	add	sp, #16
 8000268:	4252      	negs	r2, r2
 800026a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026e:	4770      	bx	lr

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <read_register>:
//lora_sx1276 LoRa1278;
// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	460b      	mov	r3, r1
 800057e:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8000584:	78fb      	ldrb	r3, [r7, #3]
 8000586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800058a:	b2db      	uxtb	r3, r3
 800058c:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6858      	ldr	r0, [r3, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	8adb      	ldrh	r3, [r3, #22]
 8000596:	2200      	movs	r2, #0
 8000598:	4619      	mov	r1, r3
 800059a:	f002 f927 	bl	80027ec <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6818      	ldr	r0, [r3, #0]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	1cf9      	adds	r1, r7, #3
 80005a8:	2201      	movs	r2, #1
 80005aa:	f004 fa2a 	bl	8004a02 <HAL_SPI_Transmit>
 80005ae:	4603      	mov	r3, r0
 80005b0:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6818      	ldr	r0, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	f107 010f 	add.w	r1, r7, #15
 80005be:	2201      	movs	r2, #1
 80005c0:	f004 fb8d 	bl	8004cde <HAL_SPI_Receive>
 80005c4:	4603      	mov	r3, r0
 80005c6:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6858      	ldr	r0, [r3, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	8adb      	ldrh	r3, [r3, #22]
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	f002 f90a 	bl	80027ec <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
 80005ea:	460b      	mov	r3, r1
 80005ec:	70fb      	strb	r3, [r7, #3]
 80005ee:	4613      	mov	r3, r2
 80005f0:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 80005f2:	78fb      	ldrb	r3, [r7, #3]
 80005f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005f8:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 80005fa:	78bb      	ldrb	r3, [r7, #2]
 80005fc:	021b      	lsls	r3, r3, #8
 80005fe:	b21a      	sxth	r2, r3
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	b21b      	sxth	r3, r3
 8000604:	4313      	orrs	r3, r2
 8000606:	b21b      	sxth	r3, r3
 8000608:	b29b      	uxth	r3, r3
 800060a:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6858      	ldr	r0, [r3, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	8adb      	ldrh	r3, [r3, #22]
 8000614:	2200      	movs	r2, #0
 8000616:	4619      	mov	r1, r3
 8000618:	f002 f8e8 	bl	80027ec <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6818      	ldr	r0, [r3, #0]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f107 010a 	add.w	r1, r7, #10
 8000628:	2202      	movs	r2, #2
 800062a:	f004 f9ea 	bl	8004a02 <HAL_SPI_Transmit>
 800062e:	4603      	mov	r3, r0
 8000630:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6858      	ldr	r0, [r3, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	8adb      	ldrh	r3, [r3, #22]
 800063a:	2201      	movs	r2, #1
 800063c:	4619      	mov	r1, r3
 800063e:	f002 f8d5 	bl	80027ec <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	460b      	mov	r3, r1
 8000654:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8000656:	78fb      	ldrb	r3, [r7, #3]
 8000658:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800065c:	b2db      	uxtb	r3, r3
 800065e:	461a      	mov	r2, r3
 8000660:	2101      	movs	r1, #1
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f7ff ffbd 	bl	80005e2 <write_register>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 800067c:	78fb      	ldrb	r3, [r7, #3]
 800067e:	2b2c      	cmp	r3, #44	; 0x2c
 8000680:	d801      	bhi.n	8000686 <set_OCP+0x16>
    imax = 45;
 8000682:	232d      	movs	r3, #45	; 0x2d
 8000684:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8000686:	78fb      	ldrb	r3, [r7, #3]
 8000688:	2bf0      	cmp	r3, #240	; 0xf0
 800068a:	d901      	bls.n	8000690 <set_OCP+0x20>
    imax = 240;
 800068c:	23f0      	movs	r3, #240	; 0xf0
 800068e:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	2b81      	cmp	r3, #129	; 0x81
 8000694:	d809      	bhi.n	80006aa <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8000696:	78fb      	ldrb	r3, [r7, #3]
 8000698:	3b2d      	subs	r3, #45	; 0x2d
 800069a:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <set_OCP+0x68>)
 800069c:	fb82 1203 	smull	r1, r2, r2, r3
 80006a0:	1052      	asrs	r2, r2, #1
 80006a2:	17db      	asrs	r3, r3, #31
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	73fb      	strb	r3, [r7, #15]
 80006a8:	e008      	b.n	80006bc <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 80006aa:	78fb      	ldrb	r3, [r7, #3]
 80006ac:	331e      	adds	r3, #30
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <set_OCP+0x68>)
 80006b0:	fb82 1203 	smull	r1, r2, r2, r3
 80006b4:	1092      	asrs	r2, r2, #2
 80006b6:	17db      	asrs	r3, r3, #31
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	f043 0320 	orr.w	r3, r3, #32
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	210b      	movs	r1, #11
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff ff8a 	bl	80005e2 <write_register>
}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	66666667 	.word	0x66666667

080006dc <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 80006dc:	b5b0      	push	{r4, r5, r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 80006e4:	211d      	movs	r1, #29
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ff44 	bl	8000574 <read_register>
 80006ec:	4603      	mov	r3, r0
 80006ee:	091b      	lsrs	r3, r3, #4
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2200      	movs	r2, #0
 80006f6:	461c      	mov	r4, r3
 80006f8:	4615      	mov	r5, r2
 80006fa:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 80006fe:	211e      	movs	r1, #30
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff ff37 	bl	8000574 <read_register>
 8000706:	4603      	mov	r3, r0
 8000708:	091b      	lsrs	r3, r3, #4
 800070a:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 800070c:	2304      	movs	r3, #4
 800070e:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	2b0a      	cmp	r3, #10
 8000714:	d908      	bls.n	8000728 <set_low_data_rate_optimization+0x4c>
 8000716:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800071a:	1fd1      	subs	r1, r2, #7
 800071c:	430b      	orrs	r3, r1
 800071e:	d103      	bne.n	8000728 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8000720:	7ffb      	ldrb	r3, [r7, #31]
 8000722:	f043 0308 	orr.w	r3, r3, #8
 8000726:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8000728:	7ffb      	ldrb	r3, [r7, #31]
 800072a:	461a      	mov	r2, r3
 800072c:	2126      	movs	r1, #38	; 0x26
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff ff57 	bl	80005e2 <write_register>
}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bdb0      	pop	{r4, r5, r7, pc}

0800073c <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8000744:	2100      	movs	r1, #0
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ff7f 	bl	800064a <set_mode>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 800075c:	2101      	movs	r1, #1
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff ff73 	bl	800064a <set_mode>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8000774:	211d      	movs	r1, #29
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff fefc 	bl	8000574 <read_register>
 800077c:	4603      	mov	r3, r0
 800077e:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	f023 0301 	bic.w	r3, r3, #1
 8000786:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	461a      	mov	r2, r3
 800078c:	211d      	movs	r1, #29
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff ff27 	bl	80005e2 <write_register>
}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	691b      	ldr	r3, [r3, #16]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d10e      	bne.n	80007ce <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	2b0f      	cmp	r3, #15
 80007b4:	d901      	bls.n	80007ba <lora_set_tx_power+0x1e>
      level = 15;
 80007b6:	230f      	movs	r3, #15
 80007b8:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80007ba:	78fb      	ldrb	r3, [r7, #3]
 80007bc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	461a      	mov	r2, r3
 80007c4:	2109      	movs	r1, #9
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff ff0b 	bl	80005e2 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 80007cc:	e02e      	b.n	800082c <lora_set_tx_power+0x90>
    if (level > 20) {
 80007ce:	78fb      	ldrb	r3, [r7, #3]
 80007d0:	2b14      	cmp	r3, #20
 80007d2:	d901      	bls.n	80007d8 <lora_set_tx_power+0x3c>
      level = 20;
 80007d4:	2314      	movs	r3, #20
 80007d6:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 80007d8:	78fb      	ldrb	r3, [r7, #3]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d801      	bhi.n	80007e2 <lora_set_tx_power+0x46>
      level = 2;
 80007de:	2302      	movs	r3, #2
 80007e0:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 80007e2:	78fb      	ldrb	r3, [r7, #3]
 80007e4:	2b11      	cmp	r3, #17
 80007e6:	d90c      	bls.n	8000802 <lora_set_tx_power+0x66>
      level -= 3;
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	3b03      	subs	r3, #3
 80007ec:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 80007ee:	2287      	movs	r2, #135	; 0x87
 80007f0:	214d      	movs	r1, #77	; 0x4d
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fef5 	bl	80005e2 <write_register>
      set_OCP(lora, 140);
 80007f8:	218c      	movs	r1, #140	; 0x8c
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff38 	bl	8000670 <set_OCP>
 8000800:	e008      	b.n	8000814 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8000802:	2284      	movs	r2, #132	; 0x84
 8000804:	214d      	movs	r1, #77	; 0x4d
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff feeb 	bl	80005e2 <write_register>
      set_OCP(lora, 97);
 800080c:	2161      	movs	r1, #97	; 0x61
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ff2e 	bl	8000670 <set_OCP>
    level -= 2;
 8000814:	78fb      	ldrb	r3, [r7, #3]
 8000816:	3b02      	subs	r3, #2
 8000818:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000820:	b2db      	uxtb	r3, r3
 8000822:	461a      	mov	r2, r3
 8000824:	2109      	movs	r1, #9
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff fedb 	bl	80005e2 <write_register>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8000840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	f04f 0100 	mov.w	r1, #0
 800084c:	04d9      	lsls	r1, r3, #19
 800084e:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000852:	04d0      	lsls	r0, r2, #19
 8000854:	4a19      	ldr	r2, [pc, #100]	; (80008bc <lora_set_frequency+0x88>)
 8000856:	f04f 0300 	mov.w	r3, #0
 800085a:	f7ff fd09 	bl	8000270 <__aeabi_uldivmod>
 800085e:	4602      	mov	r2, r0
 8000860:	460b      	mov	r3, r1
 8000862:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8000866:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800086a:	f04f 0200 	mov.w	r2, #0
 800086e:	f04f 0300 	mov.w	r3, #0
 8000872:	0c02      	lsrs	r2, r0, #16
 8000874:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000878:	0c0b      	lsrs	r3, r1, #16
 800087a:	b2d3      	uxtb	r3, r2
 800087c:	461a      	mov	r2, r3
 800087e:	2106      	movs	r1, #6
 8000880:	68f8      	ldr	r0, [r7, #12]
 8000882:	f7ff feae 	bl	80005e2 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8000886:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800088a:	f04f 0200 	mov.w	r2, #0
 800088e:	f04f 0300 	mov.w	r3, #0
 8000892:	0a02      	lsrs	r2, r0, #8
 8000894:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000898:	0a0b      	lsrs	r3, r1, #8
 800089a:	b2d3      	uxtb	r3, r2
 800089c:	461a      	mov	r2, r3
 800089e:	2107      	movs	r1, #7
 80008a0:	68f8      	ldr	r0, [r7, #12]
 80008a2:	f7ff fe9e 	bl	80005e2 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80008a6:	7c3b      	ldrb	r3, [r7, #16]
 80008a8:	461a      	mov	r2, r3
 80008aa:	2108      	movs	r1, #8
 80008ac:	68f8      	ldr	r0, [r7, #12]
 80008ae:	f7ff fe98 	bl	80005e2 <write_register>
}
 80008b2:	bf00      	nop
 80008b4:	3718      	adds	r7, #24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	01e84800 	.word	0x01e84800

080008c0 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 80008cc:	78fb      	ldrb	r3, [r7, #3]
 80008ce:	2b05      	cmp	r3, #5
 80008d0:	d802      	bhi.n	80008d8 <lora_set_spreading_factor+0x18>
    sf = 6;
 80008d2:	2306      	movs	r3, #6
 80008d4:	70fb      	strb	r3, [r7, #3]
 80008d6:	e004      	b.n	80008e2 <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	2b0c      	cmp	r3, #12
 80008dc:	d901      	bls.n	80008e2 <lora_set_spreading_factor+0x22>
    sf = 12;
 80008de:	230c      	movs	r3, #12
 80008e0:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	2b06      	cmp	r3, #6
 80008e6:	d10a      	bne.n	80008fe <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 80008e8:	22c5      	movs	r2, #197	; 0xc5
 80008ea:	2131      	movs	r1, #49	; 0x31
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff fe78 	bl	80005e2 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 80008f2:	220c      	movs	r2, #12
 80008f4:	2137      	movs	r1, #55	; 0x37
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff fe73 	bl	80005e2 <write_register>
 80008fc:	e009      	b.n	8000912 <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 80008fe:	22c3      	movs	r2, #195	; 0xc3
 8000900:	2131      	movs	r1, #49	; 0x31
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff fe6d 	bl	80005e2 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8000908:	220a      	movs	r2, #10
 800090a:	2137      	movs	r1, #55	; 0x37
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff fe68 	bl	80005e2 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8000912:	211e      	movs	r1, #30
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff fe2d 	bl	8000574 <read_register>
 800091a:	4603      	mov	r3, r0
 800091c:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 800091e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000922:	f003 030f 	and.w	r3, r3, #15
 8000926:	b25a      	sxtb	r2, r3
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	011b      	lsls	r3, r3, #4
 800092c:	b25b      	sxtb	r3, r3
 800092e:	4313      	orrs	r3, r2
 8000930:	b25b      	sxtb	r3, r3
 8000932:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	461a      	mov	r2, r3
 8000938:	211e      	movs	r1, #30
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff fe51 	bl	80005e2 <write_register>

  set_low_data_rate_optimization(lora);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff fecb 	bl	80006dc <set_low_data_rate_optimization>
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	460b      	mov	r3, r1
 8000958:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 800095a:	887b      	ldrh	r3, [r7, #2]
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	b29b      	uxth	r3, r3
 8000960:	b2db      	uxtb	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	2120      	movs	r1, #32
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff fe3b 	bl	80005e2 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 800096c:	887b      	ldrh	r3, [r7, #2]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	f003 030f 	and.w	r3, r3, #15
 8000974:	b2db      	uxtb	r3, r3
 8000976:	461a      	mov	r2, r3
 8000978:	2121      	movs	r1, #33	; 0x21
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff fe31 	bl	80005e2 <write_register>
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8000990:	2142      	movs	r1, #66	; 0x42
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff fdee 	bl	8000574 <read_register>
 8000998:	4603      	mov	r3, r0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b086      	sub	sp, #24
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	60f8      	str	r0, [r7, #12]
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	887a      	ldrh	r2, [r7, #2]
 80009c0:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 80009c2:	6a3a      	ldr	r2, [r7, #32]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2201      	movs	r2, #1
 80009cc:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	2200      	movs	r2, #0
 80009d2:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2200      	movs	r2, #0
 80009d8:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009e0:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f7ff ffd0 	bl	8000988 <lora_version>
 80009e8:	4603      	mov	r3, r0
 80009ea:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 80009ec:	7dfb      	ldrb	r3, [r7, #23]
 80009ee:	2b12      	cmp	r3, #18
 80009f0:	d001      	beq.n	80009f6 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 80009f2:	2304      	movs	r3, #4
 80009f4:	e031      	b.n	8000a5a <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 80009f6:	68f8      	ldr	r0, [r7, #12]
 80009f8:	f7ff fea0 	bl	800073c <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f7ff fe9d 	bl	800073c <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000a02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000a06:	68f8      	ldr	r0, [r7, #12]
 8000a08:	f7ff ff14 	bl	8000834 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000a0c:	2107      	movs	r1, #7
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f7ff ff56 	bl	80008c0 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000a14:	210a      	movs	r1, #10
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f7ff ff99 	bl	800094e <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000a1c:	68f8      	ldr	r0, [r7, #12]
 8000a1e:	f7ff fea5 	bl	800076c <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8000a22:	210c      	movs	r1, #12
 8000a24:	68f8      	ldr	r0, [r7, #12]
 8000a26:	f7ff fda5 	bl	8000574 <read_register>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000a2e:	7dbb      	ldrb	r3, [r7, #22]
 8000a30:	f043 0303 	orr.w	r3, r3, #3
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	461a      	mov	r2, r3
 8000a38:	210c      	movs	r1, #12
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f7ff fdd1 	bl	80005e2 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000a40:	2204      	movs	r2, #4
 8000a42:	2126      	movs	r1, #38	; 0x26
 8000a44:	68f8      	ldr	r0, [r7, #12]
 8000a46:	f7ff fdcc 	bl	80005e2 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8000a4a:	2111      	movs	r1, #17
 8000a4c:	68f8      	ldr	r0, [r7, #12]
 8000a4e:	f7ff fea5 	bl	800079c <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f7ff fe7e 	bl	8000754 <lora_mode_standby>

  return LORA_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <bmp280_init_default_params>:
#define BMP280_RESET_VALUE     0xB6

BMP280_HandleTypedef bmp280;


void bmp280_init_default_params(bmp280_params_t *params) {
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2200      	movs	r2, #0
 8000a74:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2203      	movs	r2, #3
 8000a7a:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2203      	movs	r2, #3
 8000a80:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2203      	movs	r2, #3
 8000a86:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	715a      	strb	r2, [r3, #5]
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b08a      	sub	sp, #40	; 0x28
 8000a9e:	af04      	add	r7, sp, #16
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ab4:	7afb      	ldrb	r3, [r7, #11]
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	8af9      	ldrh	r1, [r7, #22]
 8000aba:	f241 3388 	movw	r3, #5000	; 0x1388
 8000abe:	9302      	str	r3, [sp, #8]
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2301      	movs	r3, #1
 8000acc:	f002 f84a 	bl	8002b64 <HAL_I2C_Mem_Read>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d10b      	bne.n	8000aee <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000ad6:	7d7b      	ldrb	r3, [r7, #21]
 8000ad8:	021b      	lsls	r3, r3, #8
 8000ada:	b21a      	sxth	r2, r3
 8000adc:	7d3b      	ldrb	r3, [r7, #20]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	b21b      	sxth	r3, r3
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	801a      	strh	r2, [r3, #0]
		return true;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e000      	b.n	8000af0 <read_register16+0x56>
	} else
		return false;
 8000aee:	2300      	movs	r3, #0

}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b08b      	sub	sp, #44	; 0x2c
 8000afc:	af04      	add	r7, sp, #16
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	461a      	mov	r2, r3
 8000b04:	460b      	mov	r3, r1
 8000b06:	72fb      	strb	r3, [r7, #11]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000b18:	7afb      	ldrb	r3, [r7, #11]
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	7abb      	ldrb	r3, [r7, #10]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	8af9      	ldrh	r1, [r7, #22]
 8000b22:	f241 3488 	movw	r4, #5000	; 0x1388
 8000b26:	9402      	str	r4, [sp, #8]
 8000b28:	9301      	str	r3, [sp, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2301      	movs	r3, #1
 8000b30:	f002 f818 	bl	8002b64 <HAL_I2C_Mem_Read>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <read_data+0x46>
		return 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e000      	b.n	8000b40 <read_data+0x48>
	else
		return 1;
 8000b3e:	2301      	movs	r3, #1

}
 8000b40:	4618      	mov	r0, r3
 8000b42:	371c      	adds	r7, #28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd90      	pop	{r4, r7, pc}

08000b48 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	461a      	mov	r2, r3
 8000b54:	2188      	movs	r1, #136	; 0x88
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ff9f 	bl	8000a9a <read_register16>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d06f      	beq.n	8000c42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3302      	adds	r3, #2
 8000b66:	461a      	mov	r2, r3
 8000b68:	218a      	movs	r1, #138	; 0x8a
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ff95 	bl	8000a9a <read_register16>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d065      	beq.n	8000c42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	218c      	movs	r1, #140	; 0x8c
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ff8b 	bl	8000a9a <read_register16>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d05b      	beq.n	8000c42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3306      	adds	r3, #6
 8000b8e:	461a      	mov	r2, r3
 8000b90:	218e      	movs	r1, #142	; 0x8e
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff ff81 	bl	8000a9a <read_register16>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d051      	beq.n	8000c42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3308      	adds	r3, #8
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	2190      	movs	r1, #144	; 0x90
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff ff77 	bl	8000a9a <read_register16>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d047      	beq.n	8000c42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	330a      	adds	r3, #10
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	2192      	movs	r1, #146	; 0x92
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ff6d 	bl	8000a9a <read_register16>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d03d      	beq.n	8000c42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	330c      	adds	r3, #12
 8000bca:	461a      	mov	r2, r3
 8000bcc:	2194      	movs	r1, #148	; 0x94
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ff63 	bl	8000a9a <read_register16>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d033      	beq.n	8000c42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	330e      	adds	r3, #14
 8000bde:	461a      	mov	r2, r3
 8000be0:	2196      	movs	r1, #150	; 0x96
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ff59 	bl	8000a9a <read_register16>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d029      	beq.n	8000c42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3310      	adds	r3, #16
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	2198      	movs	r1, #152	; 0x98
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ff4f 	bl	8000a9a <read_register16>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d01f      	beq.n	8000c42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3312      	adds	r3, #18
 8000c06:	461a      	mov	r2, r3
 8000c08:	219a      	movs	r1, #154	; 0x9a
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff ff45 	bl	8000a9a <read_register16>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d015      	beq.n	8000c42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3314      	adds	r3, #20
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	219c      	movs	r1, #156	; 0x9c
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff ff3b 	bl	8000a9a <read_register16>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d00b      	beq.n	8000c42 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8000c2e:	461a      	mov	r2, r3
 8000c30:	219e      	movs	r1, #158	; 0x9e
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ff31 	bl	8000a9a <read_register16>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <read_calibration_data+0xfa>

		return true;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e000      	b.n	8000c44 <read_calibration_data+0xfc>
	}

	return false;
 8000c42:	2300      	movs	r3, #0
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f103 0218 	add.w	r2, r3, #24
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	21a1      	movs	r1, #161	; 0xa1
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ff4a 	bl	8000af8 <read_data>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d14b      	bne.n	8000d02 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	331a      	adds	r3, #26
 8000c6e:	461a      	mov	r2, r3
 8000c70:	21e1      	movs	r1, #225	; 0xe1
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ff11 	bl	8000a9a <read_register16>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d041      	beq.n	8000d02 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f103 021c 	add.w	r2, r3, #28
 8000c84:	2301      	movs	r3, #1
 8000c86:	21e3      	movs	r1, #227	; 0xe3
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff35 	bl	8000af8 <read_data>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d136      	bne.n	8000d02 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8000c94:	f107 030e 	add.w	r3, r7, #14
 8000c98:	461a      	mov	r2, r3
 8000c9a:	21e4      	movs	r1, #228	; 0xe4
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff fefc 	bl	8000a9a <read_register16>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d02c      	beq.n	8000d02 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	461a      	mov	r2, r3
 8000cae:	21e5      	movs	r1, #229	; 0xe5
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff fef2 	bl	8000a9a <read_register16>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d022      	beq.n	8000d02 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	21e7      	movs	r1, #231	; 0xe7
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ff16 	bl	8000af8 <read_data>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d117      	bne.n	8000d02 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8000cd2:	89fb      	ldrh	r3, [r7, #14]
 8000cd4:	011b      	lsls	r3, r3, #4
 8000cd6:	b21b      	sxth	r3, r3
 8000cd8:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8000cdc:	b21a      	sxth	r2, r3
 8000cde:	89fb      	ldrh	r3, [r7, #14]
 8000ce0:	121b      	asrs	r3, r3, #8
 8000ce2:	b21b      	sxth	r3, r3
 8000ce4:	f003 030f 	and.w	r3, r3, #15
 8000ce8:	b21b      	sxth	r3, r3
 8000cea:	4313      	orrs	r3, r2
 8000cec:	b21a      	sxth	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8000cf2:	89bb      	ldrh	r3, [r7, #12]
 8000cf4:	091b      	lsrs	r3, r3, #4
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	b21a      	sxth	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	841a      	strh	r2, [r3, #32]

		return true;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e000      	b.n	8000d04 <read_hum_calibration_data+0xb8>
	}

	return false;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af04      	add	r7, sp, #16
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	70fb      	strb	r3, [r7, #3]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	89f9      	ldrh	r1, [r7, #14]
 8000d2e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d32:	9302      	str	r3, [sp, #8]
 8000d34:	2301      	movs	r3, #1
 8000d36:	9301      	str	r3, [sp, #4]
 8000d38:	1cbb      	adds	r3, r7, #2
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	f001 fdfd 	bl	800293c <HAL_I2C_Mem_Write>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d101      	bne.n	8000d4c <write_register8+0x40>
		return false;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e000      	b.n	8000d4e <write_register8+0x42>
	else
		return true;
 8000d4c:	2301      	movs	r3, #1
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b084      	sub	sp, #16
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000d64:	2b76      	cmp	r3, #118	; 0x76
 8000d66:	d005      	beq.n	8000d74 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000d6c:	2b77      	cmp	r3, #119	; 0x77
 8000d6e:	d001      	beq.n	8000d74 <bmp280_init+0x1e>

		return false;
 8000d70:	2300      	movs	r3, #0
 8000d72:	e099      	b.n	8000ea8 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	21d0      	movs	r1, #208	; 0xd0
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff feba 	bl	8000af8 <read_data>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <bmp280_init+0x38>
		return false;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e08c      	b.n	8000ea8 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000d94:	2b58      	cmp	r3, #88	; 0x58
 8000d96:	d006      	beq.n	8000da6 <bmp280_init+0x50>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000d9e:	2b60      	cmp	r3, #96	; 0x60
 8000da0:	d001      	beq.n	8000da6 <bmp280_init+0x50>

		return false;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e080      	b.n	8000ea8 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8000da6:	22b6      	movs	r2, #182	; 0xb6
 8000da8:	21e0      	movs	r1, #224	; 0xe0
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ffae 	bl	8000d0c <write_register8>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <bmp280_init+0x64>
		return false;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e076      	b.n	8000ea8 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8000dba:	f107 020c 	add.w	r2, r7, #12
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	21f3      	movs	r1, #243	; 0xf3
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff fe98 	bl	8000af8 <read_data>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1f5      	bne.n	8000dba <bmp280_init+0x64>
				&& (status & 1) == 0)
 8000dce:	7b3b      	ldrb	r3, [r7, #12]
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f0      	bne.n	8000dba <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff feb5 	bl	8000b48 <read_calibration_data>
 8000dde:	4603      	mov	r3, r0
 8000de0:	f083 0301 	eor.w	r3, r3, #1
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d100      	bne.n	8000dec <bmp280_init+0x96>
 8000dea:	e001      	b.n	8000df0 <bmp280_init+0x9a>
		return false;
 8000dec:	2300      	movs	r3, #0
 8000dee:	e05b      	b.n	8000ea8 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000df6:	2b60      	cmp	r3, #96	; 0x60
 8000df8:	d10a      	bne.n	8000e10 <bmp280_init+0xba>
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ff26 	bl	8000c4c <read_hum_calibration_data>
 8000e00:	4603      	mov	r3, r0
 8000e02:	f083 0301 	eor.w	r3, r3, #1
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <bmp280_init+0xba>
		return false;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	e04b      	b.n	8000ea8 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	795b      	ldrb	r3, [r3, #5]
 8000e14:	015b      	lsls	r3, r3, #5
 8000e16:	b25a      	sxtb	r2, r3
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	785b      	ldrb	r3, [r3, #1]
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	21f5      	movs	r1, #245	; 0xf5
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff6d 	bl	8000d0c <write_register8>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <bmp280_init+0xe6>
		return false;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	e035      	b.n	8000ea8 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d102      	bne.n	8000e4a <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	78db      	ldrb	r3, [r3, #3]
 8000e4e:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8000e50:	b25a      	sxtb	r2, r3
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	789b      	ldrb	r3, [r3, #2]
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	b25a      	sxtb	r2, r3
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000e68:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000e70:	2b60      	cmp	r3, #96	; 0x60
 8000e72:	d10d      	bne.n	8000e90 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	791b      	ldrb	r3, [r3, #4]
 8000e78:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8000e7a:	7b7b      	ldrb	r3, [r7, #13]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	21f2      	movs	r1, #242	; 0xf2
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff43 	bl	8000d0c <write_register8>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <bmp280_init+0x13a>
			return false;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e00b      	b.n	8000ea8 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000e90:	7bbb      	ldrb	r3, [r7, #14]
 8000e92:	461a      	mov	r2, r3
 8000e94:	21f4      	movs	r1, #244	; 0xf4
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ff38 	bl	8000d0c <write_register8>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <bmp280_init+0x150>
		return false;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e000      	b.n	8000ea8 <bmp280_init+0x152>
	}

	return true;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b087      	sub	sp, #28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	10da      	asrs	r2, r3, #3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000ece:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000ed2:	12db      	asrs	r3, r3, #11
 8000ed4:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	111b      	asrs	r3, r3, #4
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	8812      	ldrh	r2, [r2, #0]
 8000ede:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8000ee0:	68ba      	ldr	r2, [r7, #8]
 8000ee2:	1112      	asrs	r2, r2, #4
 8000ee4:	68f9      	ldr	r1, [r7, #12]
 8000ee6:	8809      	ldrh	r1, [r1, #0]
 8000ee8:	1a52      	subs	r2, r2, r1
 8000eea:	fb02 f303 	mul.w	r3, r2, r3
 8000eee:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000ef6:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000efa:	139b      	asrs	r3, r3, #14
 8000efc:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	441a      	add	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	3380      	adds	r3, #128	; 0x80
 8000f14:	121b      	asrs	r3, r3, #8
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	371c      	adds	r7, #28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000f22:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f26:	b0cc      	sub	sp, #304	; 0x130
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8000f2e:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8000f32:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f3a:	17da      	asrs	r2, r3, #31
 8000f3c:	461c      	mov	r4, r3
 8000f3e:	4615      	mov	r5, r2
 8000f40:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8000f44:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 8000f48:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000f4c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000f50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f54:	fb03 f102 	mul.w	r1, r3, r2
 8000f58:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000f5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f60:	fb02 f303 	mul.w	r3, r2, r3
 8000f64:	18ca      	adds	r2, r1, r3
 8000f66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f6a:	fba3 8903 	umull	r8, r9, r3, r3
 8000f6e:	eb02 0309 	add.w	r3, r2, r9
 8000f72:	4699      	mov	r9, r3
 8000f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f78:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	17da      	asrs	r2, r3, #31
 8000f80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000f84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000f88:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	fb03 f209 	mul.w	r2, r3, r9
 8000f92:	460b      	mov	r3, r1
 8000f94:	fb08 f303 	mul.w	r3, r8, r3
 8000f98:	4413      	add	r3, r2
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	fba8 1202 	umull	r1, r2, r8, r2
 8000fa0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000fa4:	460a      	mov	r2, r1
 8000fa6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8000faa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000fae:	4413      	add	r3, r2
 8000fb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000fb4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8000fb8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8000fbc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8000fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000fc4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	17da      	asrs	r2, r3, #31
 8000fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000fd0:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000fd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000fd8:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8000fdc:	462a      	mov	r2, r5
 8000fde:	fb02 f203 	mul.w	r2, r2, r3
 8000fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000fe6:	4621      	mov	r1, r4
 8000fe8:	fb01 f303 	mul.w	r3, r1, r3
 8000fec:	441a      	add	r2, r3
 8000fee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000ff2:	4621      	mov	r1, r4
 8000ff4:	fba3 1301 	umull	r1, r3, r3, r1
 8000ff8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001006:	18d3      	adds	r3, r2, r3
 8001008:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800100c:	f04f 0000 	mov.w	r0, #0
 8001010:	f04f 0100 	mov.w	r1, #0
 8001014:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001018:	462b      	mov	r3, r5
 800101a:	0459      	lsls	r1, r3, #17
 800101c:	4623      	mov	r3, r4
 800101e:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001022:	4623      	mov	r3, r4
 8001024:	0458      	lsls	r0, r3, #17
 8001026:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800102a:	1814      	adds	r4, r2, r0
 800102c:	643c      	str	r4, [r7, #64]	; 0x40
 800102e:	414b      	adcs	r3, r1
 8001030:	647b      	str	r3, [r7, #68]	; 0x44
 8001032:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001036:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800103a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800103e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001042:	b21b      	sxth	r3, r3
 8001044:	17da      	asrs	r2, r3, #31
 8001046:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800104a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	f04f 0100 	mov.w	r1, #0
 8001056:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800105a:	00d9      	lsls	r1, r3, #3
 800105c:	2000      	movs	r0, #0
 800105e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001062:	1814      	adds	r4, r2, r0
 8001064:	63bc      	str	r4, [r7, #56]	; 0x38
 8001066:	414b      	adcs	r3, r1
 8001068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800106a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800106e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001072:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001076:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800107a:	fb03 f102 	mul.w	r1, r3, r2
 800107e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001082:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001086:	fb02 f303 	mul.w	r3, r2, r3
 800108a:	18ca      	adds	r2, r1, r3
 800108c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001090:	fba3 1303 	umull	r1, r3, r3, r3
 8001094:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001098:	460b      	mov	r3, r1
 800109a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800109e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80010a2:	18d3      	adds	r3, r2, r3
 80010a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80010a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80010ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	17da      	asrs	r2, r3, #31
 80010b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80010b8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80010bc:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80010c0:	462b      	mov	r3, r5
 80010c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80010c6:	4642      	mov	r2, r8
 80010c8:	fb02 f203 	mul.w	r2, r2, r3
 80010cc:	464b      	mov	r3, r9
 80010ce:	4621      	mov	r1, r4
 80010d0:	fb01 f303 	mul.w	r3, r1, r3
 80010d4:	4413      	add	r3, r2
 80010d6:	4622      	mov	r2, r4
 80010d8:	4641      	mov	r1, r8
 80010da:	fba2 1201 	umull	r1, r2, r2, r1
 80010de:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80010e2:	460a      	mov	r2, r1
 80010e4:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80010e8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80010ec:	4413      	add	r3, r2
 80010ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	f04f 0100 	mov.w	r1, #0
 80010fa:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80010fe:	4623      	mov	r3, r4
 8001100:	0a18      	lsrs	r0, r3, #8
 8001102:	462b      	mov	r3, r5
 8001104:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001108:	462b      	mov	r3, r5
 800110a:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800110c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001110:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001114:	b21b      	sxth	r3, r3
 8001116:	17da      	asrs	r2, r3, #31
 8001118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800111c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001120:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001124:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001128:	464a      	mov	r2, r9
 800112a:	fb02 f203 	mul.w	r2, r2, r3
 800112e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001132:	4644      	mov	r4, r8
 8001134:	fb04 f303 	mul.w	r3, r4, r3
 8001138:	441a      	add	r2, r3
 800113a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800113e:	4644      	mov	r4, r8
 8001140:	fba3 4304 	umull	r4, r3, r3, r4
 8001144:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001148:	4623      	mov	r3, r4
 800114a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800114e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001152:	18d3      	adds	r3, r2, r3
 8001154:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001164:	464c      	mov	r4, r9
 8001166:	0323      	lsls	r3, r4, #12
 8001168:	4644      	mov	r4, r8
 800116a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800116e:	4644      	mov	r4, r8
 8001170:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001172:	1884      	adds	r4, r0, r2
 8001174:	633c      	str	r4, [r7, #48]	; 0x30
 8001176:	eb41 0303 	adc.w	r3, r1, r3
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
 800117c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001180:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001184:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001188:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800118c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001190:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001198:	88db      	ldrh	r3, [r3, #6]
 800119a:	b29b      	uxth	r3, r3
 800119c:	2200      	movs	r2, #0
 800119e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80011a2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80011a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80011aa:	462b      	mov	r3, r5
 80011ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80011b0:	4642      	mov	r2, r8
 80011b2:	fb02 f203 	mul.w	r2, r2, r3
 80011b6:	464b      	mov	r3, r9
 80011b8:	4621      	mov	r1, r4
 80011ba:	fb01 f303 	mul.w	r3, r1, r3
 80011be:	4413      	add	r3, r2
 80011c0:	4622      	mov	r2, r4
 80011c2:	4641      	mov	r1, r8
 80011c4:	fba2 1201 	umull	r1, r2, r2, r1
 80011c8:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80011cc:	460a      	mov	r2, r1
 80011ce:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80011d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80011d6:	4413      	add	r3, r2
 80011d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	f04f 0300 	mov.w	r3, #0
 80011e4:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80011e8:	4629      	mov	r1, r5
 80011ea:	104a      	asrs	r2, r1, #1
 80011ec:	4629      	mov	r1, r5
 80011ee:	17cb      	asrs	r3, r1, #31
 80011f0:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 80011f4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80011f8:	4313      	orrs	r3, r2
 80011fa:	d101      	bne.n	8001200 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 80011fc:	2300      	movs	r3, #0
 80011fe:	e148      	b.n	8001492 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001200:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001204:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001208:	17da      	asrs	r2, r3, #31
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
 800120c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800120e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001212:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001216:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800121a:	105b      	asrs	r3, r3, #1
 800121c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001220:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001224:	07db      	lsls	r3, r3, #31
 8001226:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800122a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800122e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001232:	4621      	mov	r1, r4
 8001234:	1a89      	subs	r1, r1, r2
 8001236:	67b9      	str	r1, [r7, #120]	; 0x78
 8001238:	4629      	mov	r1, r5
 800123a:	eb61 0303 	sbc.w	r3, r1, r3
 800123e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001240:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001244:	4622      	mov	r2, r4
 8001246:	462b      	mov	r3, r5
 8001248:	1891      	adds	r1, r2, r2
 800124a:	6239      	str	r1, [r7, #32]
 800124c:	415b      	adcs	r3, r3
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
 8001250:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001254:	4621      	mov	r1, r4
 8001256:	1851      	adds	r1, r2, r1
 8001258:	61b9      	str	r1, [r7, #24]
 800125a:	4629      	mov	r1, r5
 800125c:	414b      	adcs	r3, r1
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800126c:	4649      	mov	r1, r9
 800126e:	018b      	lsls	r3, r1, #6
 8001270:	4641      	mov	r1, r8
 8001272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001276:	4641      	mov	r1, r8
 8001278:	018a      	lsls	r2, r1, #6
 800127a:	4641      	mov	r1, r8
 800127c:	1889      	adds	r1, r1, r2
 800127e:	6139      	str	r1, [r7, #16]
 8001280:	4649      	mov	r1, r9
 8001282:	eb43 0101 	adc.w	r1, r3, r1
 8001286:	6179      	str	r1, [r7, #20]
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001294:	4649      	mov	r1, r9
 8001296:	008b      	lsls	r3, r1, #2
 8001298:	4641      	mov	r1, r8
 800129a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800129e:	4641      	mov	r1, r8
 80012a0:	008a      	lsls	r2, r1, #2
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	4603      	mov	r3, r0
 80012a8:	4622      	mov	r2, r4
 80012aa:	189b      	adds	r3, r3, r2
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	460b      	mov	r3, r1
 80012b0:	462a      	mov	r2, r5
 80012b2:	eb42 0303 	adc.w	r3, r2, r3
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80012c4:	4649      	mov	r1, r9
 80012c6:	008b      	lsls	r3, r1, #2
 80012c8:	4641      	mov	r1, r8
 80012ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80012ce:	4641      	mov	r1, r8
 80012d0:	008a      	lsls	r2, r1, #2
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	4603      	mov	r3, r0
 80012d8:	4622      	mov	r2, r4
 80012da:	189b      	adds	r3, r3, r2
 80012dc:	673b      	str	r3, [r7, #112]	; 0x70
 80012de:	462b      	mov	r3, r5
 80012e0:	460a      	mov	r2, r1
 80012e2:	eb42 0303 	adc.w	r3, r2, r3
 80012e6:	677b      	str	r3, [r7, #116]	; 0x74
 80012e8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80012ec:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80012f0:	f7fe ff6e 	bl	80001d0 <__aeabi_ldivmod>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80012fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001300:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001304:	b21b      	sxth	r3, r3
 8001306:	17da      	asrs	r2, r3, #31
 8001308:	66bb      	str	r3, [r7, #104]	; 0x68
 800130a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800130c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001310:	f04f 0000 	mov.w	r0, #0
 8001314:	f04f 0100 	mov.w	r1, #0
 8001318:	0b50      	lsrs	r0, r2, #13
 800131a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800131e:	1359      	asrs	r1, r3, #13
 8001320:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001324:	462b      	mov	r3, r5
 8001326:	fb00 f203 	mul.w	r2, r0, r3
 800132a:	4623      	mov	r3, r4
 800132c:	fb03 f301 	mul.w	r3, r3, r1
 8001330:	4413      	add	r3, r2
 8001332:	4622      	mov	r2, r4
 8001334:	fba2 1200 	umull	r1, r2, r2, r0
 8001338:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800133c:	460a      	mov	r2, r1
 800133e:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001342:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001346:	4413      	add	r3, r2
 8001348:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800134c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001350:	f04f 0000 	mov.w	r0, #0
 8001354:	f04f 0100 	mov.w	r1, #0
 8001358:	0b50      	lsrs	r0, r2, #13
 800135a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800135e:	1359      	asrs	r1, r3, #13
 8001360:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001364:	462b      	mov	r3, r5
 8001366:	fb00 f203 	mul.w	r2, r0, r3
 800136a:	4623      	mov	r3, r4
 800136c:	fb03 f301 	mul.w	r3, r3, r1
 8001370:	4413      	add	r3, r2
 8001372:	4622      	mov	r2, r4
 8001374:	fba2 1200 	umull	r1, r2, r2, r0
 8001378:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800137c:	460a      	mov	r2, r1
 800137e:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001382:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001386:	4413      	add	r3, r2
 8001388:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001398:	4621      	mov	r1, r4
 800139a:	0e4a      	lsrs	r2, r1, #25
 800139c:	4629      	mov	r1, r5
 800139e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80013a2:	4629      	mov	r1, r5
 80013a4:	164b      	asrs	r3, r1, #25
 80013a6:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80013aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013ae:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	17da      	asrs	r2, r3, #31
 80013b6:	663b      	str	r3, [r7, #96]	; 0x60
 80013b8:	667a      	str	r2, [r7, #100]	; 0x64
 80013ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80013be:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80013c2:	462a      	mov	r2, r5
 80013c4:	fb02 f203 	mul.w	r2, r2, r3
 80013c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80013cc:	4621      	mov	r1, r4
 80013ce:	fb01 f303 	mul.w	r3, r1, r3
 80013d2:	4413      	add	r3, r2
 80013d4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013d8:	4621      	mov	r1, r4
 80013da:	fba2 1201 	umull	r1, r2, r2, r1
 80013de:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80013e2:	460a      	mov	r2, r1
 80013e4:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80013e8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80013ec:	4413      	add	r3, r2
 80013ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80013fe:	4621      	mov	r1, r4
 8001400:	0cca      	lsrs	r2, r1, #19
 8001402:	4629      	mov	r1, r5
 8001404:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001408:	4629      	mov	r1, r5
 800140a:	14cb      	asrs	r3, r1, #19
 800140c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001410:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001414:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001418:	1884      	adds	r4, r0, r2
 800141a:	65bc      	str	r4, [r7, #88]	; 0x58
 800141c:	eb41 0303 	adc.w	r3, r1, r3
 8001420:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001422:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001426:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800142a:	4621      	mov	r1, r4
 800142c:	1889      	adds	r1, r1, r2
 800142e:	6539      	str	r1, [r7, #80]	; 0x50
 8001430:	4629      	mov	r1, r5
 8001432:	eb43 0101 	adc.w	r1, r3, r1
 8001436:	6579      	str	r1, [r7, #84]	; 0x54
 8001438:	f04f 0000 	mov.w	r0, #0
 800143c:	f04f 0100 	mov.w	r1, #0
 8001440:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001444:	4623      	mov	r3, r4
 8001446:	0a18      	lsrs	r0, r3, #8
 8001448:	462b      	mov	r3, r5
 800144a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800144e:	462b      	mov	r3, r5
 8001450:	1219      	asrs	r1, r3, #8
 8001452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001456:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800145a:	b21b      	sxth	r3, r3
 800145c:	17da      	asrs	r2, r3, #31
 800145e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001460:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800146e:	464c      	mov	r4, r9
 8001470:	0123      	lsls	r3, r4, #4
 8001472:	4644      	mov	r4, r8
 8001474:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001478:	4644      	mov	r4, r8
 800147a:	0122      	lsls	r2, r4, #4
 800147c:	1884      	adds	r4, r0, r2
 800147e:	603c      	str	r4, [r7, #0]
 8001480:	eb41 0303 	adc.w	r3, r1, r3
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	e9d7 3400 	ldrd	r3, r4, [r7]
 800148a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 800148e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8001492:	4618      	mov	r0, r3
 8001494:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001498:	46bd      	mov	sp, r7
 800149a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800149e <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 800149e:	b480      	push	{r7}
 80014a0:	b087      	sub	sp, #28
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80014b0:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	039a      	lsls	r2, r3, #14
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80014bc:	051b      	lsls	r3, r3, #20
 80014be:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80014c6:	4619      	mov	r1, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fb01 f303 	mul.w	r3, r1, r3
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80014d4:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80014dc:	4611      	mov	r1, r2
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	fb01 f202 	mul.w	r2, r1, r2
 80014e4:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80014e6:	68f9      	ldr	r1, [r7, #12]
 80014e8:	7f09      	ldrb	r1, [r1, #28]
 80014ea:	4608      	mov	r0, r1
 80014ec:	6979      	ldr	r1, [r7, #20]
 80014ee:	fb00 f101 	mul.w	r1, r0, r1
 80014f2:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80014f4:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80014f8:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80014fc:	1292      	asrs	r2, r2, #10
 80014fe:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001502:	68f9      	ldr	r1, [r7, #12]
 8001504:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001508:	fb01 f202 	mul.w	r2, r1, r2
 800150c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001510:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	13db      	asrs	r3, r3, #15
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	13d2      	asrs	r2, r2, #15
 8001520:	fb02 f303 	mul.w	r3, r2, r3
 8001524:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	7e12      	ldrb	r2, [r2, #24]
 800152a:	fb02 f303 	mul.w	r3, r2, r3
 800152e:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800153c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001544:	bfa8      	it	ge
 8001546:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 800154a:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	131b      	asrs	r3, r3, #12
}
 8001550:	4618      	mov	r0, r3
 8001552:	371c      	adds	r7, #28
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b08c      	sub	sp, #48	; 0x30
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001570:	2b60      	cmp	r3, #96	; 0x60
 8001572:	d007      	beq.n	8001584 <bmp280_read_fixed+0x28>
		if (humidity)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d002      	beq.n	8001580 <bmp280_read_fixed+0x24>
			*humidity = 0;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001580:	2300      	movs	r3, #0
 8001582:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <bmp280_read_fixed+0x32>
 800158a:	2308      	movs	r3, #8
 800158c:	e000      	b.n	8001590 <bmp280_read_fixed+0x34>
 800158e:	2306      	movs	r3, #6
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001594:	b2db      	uxtb	r3, r3
 8001596:	f107 0218 	add.w	r2, r7, #24
 800159a:	21f7      	movs	r1, #247	; 0xf7
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f7ff faab 	bl	8000af8 <read_data>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <bmp280_read_fixed+0x50>
		return false;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e038      	b.n	800161e <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80015ac:	7e3b      	ldrb	r3, [r7, #24]
 80015ae:	031a      	lsls	r2, r3, #12
 80015b0:	7e7b      	ldrb	r3, [r7, #25]
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	4313      	orrs	r3, r2
 80015b6:	7eba      	ldrb	r2, [r7, #26]
 80015b8:	0912      	lsrs	r2, r2, #4
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	4313      	orrs	r3, r2
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80015c0:	7efb      	ldrb	r3, [r7, #27]
 80015c2:	031a      	lsls	r2, r3, #12
 80015c4:	7f3b      	ldrb	r3, [r7, #28]
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	4313      	orrs	r3, r2
 80015ca:	7f7a      	ldrb	r2, [r7, #29]
 80015cc:	0912      	lsrs	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	4313      	orrs	r3, r2
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	461a      	mov	r2, r3
 80015da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f7ff fc67 	bl	8000eb0 <compensate_temperature>
 80015e2:	4602      	mov	r2, r0
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	461a      	mov	r2, r3
 80015ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	f7ff fc97 	bl	8000f22 <compensate_pressure>
 80015f4:	4602      	mov	r2, r0
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	601a      	str	r2, [r3, #0]

	if (humidity) {
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00d      	beq.n	800161c <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001600:	7fbb      	ldrb	r3, [r7, #30]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	7ffa      	ldrb	r2, [r7, #31]
 8001606:	4313      	orrs	r3, r2
 8001608:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	461a      	mov	r2, r3
 800160e:	6a39      	ldr	r1, [r7, #32]
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f7ff ff44 	bl	800149e <compensate_humidity>
 8001616:	4602      	mov	r2, r0
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	601a      	str	r2, [r3, #0]
	}

	return true;
 800161c:	2301      	movs	r3, #1
}
 800161e:	4618      	mov	r0, r3
 8001620:	3730      	adds	r7, #48	; 0x30
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <bmp280_read_float+0x1a>
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	e000      	b.n	8001644 <bmp280_read_float+0x1c>
 8001642:	2300      	movs	r3, #0
 8001644:	f107 0218 	add.w	r2, r7, #24
 8001648:	f107 011c 	add.w	r1, r7, #28
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f7ff ff85 	bl	800155c <bmp280_read_fixed>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d028      	beq.n	80016aa <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	ee07 3a90 	vmov	s15, r3
 800165e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001662:	eddf 6a14 	vldr	s13, [pc, #80]	; 80016b4 <bmp280_read_float+0x8c>
 8001666:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800167a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80016b8 <bmp280_read_float+0x90>
 800167e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00b      	beq.n	80016a6 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001698:	eddf 6a08 	vldr	s13, [pc, #32]	; 80016bc <bmp280_read_float+0x94>
 800169c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <bmp280_read_float+0x84>
	}

	return false;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	42c80000 	.word	0x42c80000
 80016b8:	43800000 	.word	0x43800000
 80016bc:	44800000 	.word	0x44800000

080016c0 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15 (JTDI)   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	4b31      	ldr	r3, [pc, #196]	; (800179c <MX_GPIO_Init+0xdc>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	4a30      	ldr	r2, [pc, #192]	; (800179c <MX_GPIO_Init+0xdc>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e2:	4b2e      	ldr	r3, [pc, #184]	; (800179c <MX_GPIO_Init+0xdc>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	4b2b      	ldr	r3, [pc, #172]	; (800179c <MX_GPIO_Init+0xdc>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	4a2a      	ldr	r2, [pc, #168]	; (800179c <MX_GPIO_Init+0xdc>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fa:	4b28      	ldr	r3, [pc, #160]	; (800179c <MX_GPIO_Init+0xdc>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	4b25      	ldr	r3, [pc, #148]	; (800179c <MX_GPIO_Init+0xdc>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4a24      	ldr	r2, [pc, #144]	; (800179c <MX_GPIO_Init+0xdc>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4b22      	ldr	r3, [pc, #136]	; (800179c <MX_GPIO_Init+0xdc>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 800171e:	2201      	movs	r2, #1
 8001720:	2110      	movs	r1, #16
 8001722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001726:	f001 f861 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2108      	movs	r1, #8
 800172e:	481c      	ldr	r0, [pc, #112]	; (80017a0 <MX_GPIO_Init+0xe0>)
 8001730:	f001 f85c 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LoRa_NSS_Pin;
 8001734:	2310      	movs	r3, #16
 8001736:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LoRa_NSS_GPIO_Port, &GPIO_InitStruct);
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	4619      	mov	r1, r3
 800174a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174e:	f000 fee3 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001764:	2303      	movs	r3, #3
 8001766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001772:	f000 fed1 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001776:	2308      	movs	r3, #8
 8001778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	2301      	movs	r3, #1
 800177c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	4619      	mov	r1, r3
 800178c:	4804      	ldr	r0, [pc, #16]	; (80017a0 <MX_GPIO_Init+0xe0>)
 800178e:	f000 fec3 	bl	8002518 <HAL_GPIO_Init>

}
 8001792:	bf00      	nop
 8001794:	3720      	adds	r7, #32
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000
 80017a0:	48000400 	.word	0x48000400

080017a4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <MX_I2C1_Init+0x74>)
 80017aa:	4a1c      	ldr	r2, [pc, #112]	; (800181c <MX_I2C1_Init+0x78>)
 80017ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00400F35;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <MX_I2C1_Init+0x74>)
 80017b0:	4a1b      	ldr	r2, [pc, #108]	; (8001820 <MX_I2C1_Init+0x7c>)
 80017b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <MX_I2C1_Init+0x74>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_I2C1_Init+0x74>)
 80017bc:	2201      	movs	r2, #1
 80017be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <MX_I2C1_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_I2C1_Init+0x74>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MX_I2C1_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_I2C1_Init+0x74>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_I2C1_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017de:	480e      	ldr	r0, [pc, #56]	; (8001818 <MX_I2C1_Init+0x74>)
 80017e0:	f001 f81c 	bl	800281c <HAL_I2C_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017ea:	f000 f9bb 	bl	8001b64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017ee:	2100      	movs	r1, #0
 80017f0:	4809      	ldr	r0, [pc, #36]	; (8001818 <MX_I2C1_Init+0x74>)
 80017f2:	f001 fe7f 	bl	80034f4 <HAL_I2CEx_ConfigAnalogFilter>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017fc:	f000 f9b2 	bl	8001b64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001800:	2100      	movs	r1, #0
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_I2C1_Init+0x74>)
 8001804:	f001 fec1 	bl	800358a <HAL_I2CEx_ConfigDigitalFilter>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800180e:	f000 f9a9 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000074 	.word	0x20000074
 800181c:	40005400 	.word	0x40005400
 8001820:	00400f35 	.word	0x00400f35

08001824 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <MX_I2C3_Init+0x74>)
 800182a:	4a1c      	ldr	r2, [pc, #112]	; (800189c <MX_I2C3_Init+0x78>)
 800182c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <MX_I2C3_Init+0x74>)
 8001830:	4a1b      	ldr	r2, [pc, #108]	; (80018a0 <MX_I2C3_Init+0x7c>)
 8001832:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001834:	4b18      	ldr	r3, [pc, #96]	; (8001898 <MX_I2C3_Init+0x74>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <MX_I2C3_Init+0x74>)
 800183c:	2201      	movs	r2, #1
 800183e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <MX_I2C3_Init+0x74>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <MX_I2C3_Init+0x74>)
 8001848:	2200      	movs	r2, #0
 800184a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <MX_I2C3_Init+0x74>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_I2C3_Init+0x74>)
 8001854:	2200      	movs	r2, #0
 8001856:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_I2C3_Init+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800185e:	480e      	ldr	r0, [pc, #56]	; (8001898 <MX_I2C3_Init+0x74>)
 8001860:	f000 ffdc 	bl	800281c <HAL_I2C_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800186a:	f000 f97b 	bl	8001b64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800186e:	2100      	movs	r1, #0
 8001870:	4809      	ldr	r0, [pc, #36]	; (8001898 <MX_I2C3_Init+0x74>)
 8001872:	f001 fe3f 	bl	80034f4 <HAL_I2CEx_ConfigAnalogFilter>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800187c:	f000 f972 	bl	8001b64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001880:	2100      	movs	r1, #0
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_I2C3_Init+0x74>)
 8001884:	f001 fe81 	bl	800358a <HAL_I2CEx_ConfigDigitalFilter>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800188e:	f000 f969 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200000c8 	.word	0x200000c8
 800189c:	40005c00 	.word	0x40005c00
 80018a0:	00707cbb 	.word	0x00707cbb

080018a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b0a2      	sub	sp, #136	; 0x88
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018bc:	f107 0320 	add.w	r3, r7, #32
 80018c0:	2254      	movs	r2, #84	; 0x54
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f004 ff21 	bl	800670c <memset>
  if(i2cHandle->Instance==I2C1)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a4e      	ldr	r2, [pc, #312]	; (8001a08 <HAL_I2C_MspInit+0x164>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d138      	bne.n	8001946 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018d4:	2340      	movs	r3, #64	; 0x40
 80018d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018d8:	2300      	movs	r3, #0
 80018da:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018dc:	f107 0320 	add.w	r3, r7, #32
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 fd03 	bl	80042ec <HAL_RCCEx_PeriphCLKConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80018ec:	f000 f93a 	bl	8001b64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f0:	4b46      	ldr	r3, [pc, #280]	; (8001a0c <HAL_I2C_MspInit+0x168>)
 80018f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f4:	4a45      	ldr	r2, [pc, #276]	; (8001a0c <HAL_I2C_MspInit+0x168>)
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fc:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <HAL_I2C_MspInit+0x168>)
 80018fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001908:	23c0      	movs	r3, #192	; 0xc0
 800190a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190c:	2312      	movs	r3, #18
 800190e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800191a:	2304      	movs	r3, #4
 800191c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001924:	4619      	mov	r1, r3
 8001926:	483a      	ldr	r0, [pc, #232]	; (8001a10 <HAL_I2C_MspInit+0x16c>)
 8001928:	f000 fdf6 	bl	8002518 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800192c:	4b37      	ldr	r3, [pc, #220]	; (8001a0c <HAL_I2C_MspInit+0x168>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	4a36      	ldr	r2, [pc, #216]	; (8001a0c <HAL_I2C_MspInit+0x168>)
 8001932:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001936:	6593      	str	r3, [r2, #88]	; 0x58
 8001938:	4b34      	ldr	r3, [pc, #208]	; (8001a0c <HAL_I2C_MspInit+0x168>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001944:	e05c      	b.n	8001a00 <HAL_I2C_MspInit+0x15c>
  else if(i2cHandle->Instance==I2C3)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a32      	ldr	r2, [pc, #200]	; (8001a14 <HAL_I2C_MspInit+0x170>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d157      	bne.n	8001a00 <HAL_I2C_MspInit+0x15c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001954:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001956:	2300      	movs	r3, #0
 8001958:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800195a:	f107 0320 	add.w	r3, r7, #32
 800195e:	4618      	mov	r0, r3
 8001960:	f002 fcc4 	bl	80042ec <HAL_RCCEx_PeriphCLKConfig>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_MspInit+0xca>
      Error_Handler();
 800196a:	f000 f8fb 	bl	8001b64 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_I2C_MspInit+0x168>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a26      	ldr	r2, [pc, #152]	; (8001a0c <HAL_I2C_MspInit+0x168>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <HAL_I2C_MspInit+0x168>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <HAL_I2C_MspInit+0x168>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	4a20      	ldr	r2, [pc, #128]	; (8001a0c <HAL_I2C_MspInit+0x168>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001992:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <HAL_I2C_MspInit+0x168>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a2:	2312      	movs	r3, #18
 80019a4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019b0:	2304      	movs	r3, #4
 80019b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019ba:	4619      	mov	r1, r3
 80019bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c0:	f000 fdaa 	bl	8002518 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019c4:	2310      	movs	r3, #16
 80019c6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019c8:	2312      	movs	r3, #18
 80019ca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019d6:	2304      	movs	r3, #4
 80019d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019e0:	4619      	mov	r1, r3
 80019e2:	480b      	ldr	r0, [pc, #44]	; (8001a10 <HAL_I2C_MspInit+0x16c>)
 80019e4:	f000 fd98 	bl	8002518 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <HAL_I2C_MspInit+0x168>)
 80019ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ec:	4a07      	ldr	r2, [pc, #28]	; (8001a0c <HAL_I2C_MspInit+0x168>)
 80019ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019f2:	6593      	str	r3, [r2, #88]	; 0x58
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_I2C_MspInit+0x168>)
 80019f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3788      	adds	r7, #136	; 0x88
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40005400 	.word	0x40005400
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	48000400 	.word	0x48000400
 8001a14:	40005c00 	.word	0x40005c00

08001a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a1e:	f000 fbfc 	bl	800221a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a22:	f000 f84d 	bl	8001ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a26:	f7ff fe4b 	bl	80016c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a2a:	f7ff febb 	bl	80017a4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001a2e:	f000 faa1 	bl	8001f74 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001a32:	f000 f935 	bl	8001ca0 <MX_SPI1_Init>
  MX_I2C3_Init();
 8001a36:	f7ff fef5 	bl	8001824 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  Servo_Init();
 8001a3a:	f000 f8ab 	bl	8001b94 <Servo_Init>

  Check_Peripherals();
 8001a3e:	f000 f9ff 	bl	8001e40 <Check_Peripherals>

  uint8_t res = lora_init(&LoRa, &hspi1, GPIOA, LoRa_NSS_Pin, LORA_BASE_FREQUENCY_EU);
 8001a42:	a31d      	add	r3, pc, #116	; (adr r3, 8001ab8 <main+0xa0>)
 8001a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a48:	e9cd 2300 	strd	r2, r3, [sp]
 8001a4c:	2310      	movs	r3, #16
 8001a4e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a52:	4911      	ldr	r1, [pc, #68]	; (8001a98 <main+0x80>)
 8001a54:	4811      	ldr	r0, [pc, #68]	; (8001a9c <main+0x84>)
 8001a56:	f7fe ffa4 	bl	80009a2 <lora_init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
  bmp280_init_default_params(&bmp280.params);
 8001a5e:	4810      	ldr	r0, [pc, #64]	; (8001aa0 <main+0x88>)
 8001a60:	f7fe ffff 	bl	8000a62 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <main+0x8c>)
 8001a66:	2276      	movs	r2, #118	; 0x76
 8001a68:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c3;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <main+0x8c>)
 8001a6c:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <main+0x90>)
 8001a6e:	629a      	str	r2, [r3, #40]	; 0x28
  bool bme280p = bmp280.id == BME280_CHIP_ID;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <main+0x8c>)
 8001a72:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a76:	2b60      	cmp	r3, #96	; 0x60
 8001a78:	bf0c      	ite	eq
 8001a7a:	2301      	moveq	r3, #1
 8001a7c:	2300      	movne	r3, #0
 8001a7e:	71bb      	strb	r3, [r7, #6]
  bmp280_init(&bmp280, &bmp280.params);
 8001a80:	4907      	ldr	r1, [pc, #28]	; (8001aa0 <main+0x88>)
 8001a82:	4808      	ldr	r0, [pc, #32]	; (8001aa4 <main+0x8c>)
 8001a84:	f7ff f967 	bl	8000d56 <bmp280_init>

  //Check_Servos_Manually();
  bmp280_read_float(&bmp280, &bmp280_temperature, &pressure, &humidity);
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <main+0x94>)
 8001a8a:	4a09      	ldr	r2, [pc, #36]	; (8001ab0 <main+0x98>)
 8001a8c:	4909      	ldr	r1, [pc, #36]	; (8001ab4 <main+0x9c>)
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <main+0x8c>)
 8001a90:	f7ff fdca 	bl	8001628 <bmp280_read_float>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <main+0x7c>
 8001a96:	bf00      	nop
 8001a98:	20000138 	.word	0x20000138
 8001a9c:	20000028 	.word	0x20000028
 8001aa0:	2000006c 	.word	0x2000006c
 8001aa4:	20000040 	.word	0x20000040
 8001aa8:	200000c8 	.word	0x200000c8
 8001aac:	20000124 	.word	0x20000124
 8001ab0:	2000011c 	.word	0x2000011c
 8001ab4:	20000120 	.word	0x20000120
 8001ab8:	33bca100 	.word	0x33bca100
 8001abc:	00000000 	.word	0x00000000

08001ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b096      	sub	sp, #88	; 0x58
 8001ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	2244      	movs	r2, #68	; 0x44
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f004 fe1c 	bl	800670c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ae2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ae6:	f001 fdab 	bl	8003640 <HAL_PWREx_ControlVoltageScaling>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001af0:	f000 f838 	bl	8001b64 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001af4:	2302      	movs	r3, #2
 8001af6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001afc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001afe:	2310      	movs	r3, #16
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b02:	2302      	movs	r3, #2
 8001b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b06:	2302      	movs	r3, #2
 8001b08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001b0e:	2308      	movs	r3, #8
 8001b10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b12:	2307      	movs	r3, #7
 8001b14:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b16:	2302      	movs	r3, #2
 8001b18:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4618      	mov	r0, r3
 8001b24:	f001 fde2 	bl	80036ec <HAL_RCC_OscConfig>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001b2e:	f000 f819 	bl	8001b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b32:	230f      	movs	r3, #15
 8001b34:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b36:	2303      	movs	r3, #3
 8001b38:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b46:	463b      	mov	r3, r7
 8001b48:	2101      	movs	r1, #1
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 f9e2 	bl	8003f14 <HAL_RCC_ClockConfig>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b56:	f000 f805 	bl	8001b64 <Error_Handler>
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	3758      	adds	r7, #88	; 0x58
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	2110      	movs	r1, #16
 8001b70:	4807      	ldr	r0, [pc, #28]	; (8001b90 <Error_Handler+0x2c>)
 8001b72:	f000 fe3b 	bl	80027ec <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8001b76:	20c8      	movs	r0, #200	; 0xc8
 8001b78:	f000 fbc4 	bl	8002304 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2110      	movs	r1, #16
 8001b80:	4803      	ldr	r0, [pc, #12]	; (8001b90 <Error_Handler+0x2c>)
 8001b82:	f000 fe33 	bl	80027ec <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8001b86:	20c8      	movs	r0, #200	; 0xc8
 8001b88:	f000 fbbc 	bl	8002304 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001b8c:	e7ee      	b.n	8001b6c <Error_Handler+0x8>
 8001b8e:	bf00      	nop
 8001b90:	48000400 	.word	0x48000400

08001b94 <Servo_Init>:
 * Starting the timer of each channel.
 * Storing Capture Compare Registers in the servo module.
 * Set the servos to their default (0deg) position.
 * All the funtions below require to call this before using them.
 */
void Servo_Init(){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b98:	2100      	movs	r1, #0
 8001b9a:	480f      	ldr	r0, [pc, #60]	; (8001bd8 <Servo_Init+0x44>)
 8001b9c:	f003 fe56 	bl	800584c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001ba0:	2104      	movs	r1, #4
 8001ba2:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <Servo_Init+0x44>)
 8001ba4:	f003 fe52 	bl	800584c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001ba8:	2108      	movs	r1, #8
 8001baa:	480b      	ldr	r0, [pc, #44]	; (8001bd8 <Servo_Init+0x44>)
 8001bac:	f003 fe4e 	bl	800584c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001bb0:	210c      	movs	r1, #12
 8001bb2:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <Servo_Init+0x44>)
 8001bb4:	f003 fe4a 	bl	800584c <HAL_TIM_PWM_Start>

	servoDutyCycles.Servo1DutyCycle = &TIM1->CCR1;
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <Servo_Init+0x48>)
 8001bba:	4a09      	ldr	r2, [pc, #36]	; (8001be0 <Servo_Init+0x4c>)
 8001bbc:	601a      	str	r2, [r3, #0]
	servoDutyCycles.Servo2DutyCycle = &TIM1->CCR2;
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <Servo_Init+0x48>)
 8001bc0:	4a08      	ldr	r2, [pc, #32]	; (8001be4 <Servo_Init+0x50>)
 8001bc2:	605a      	str	r2, [r3, #4]
	servoDutyCycles.Servo3DutyCycle = &TIM1->CCR3;
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <Servo_Init+0x48>)
 8001bc6:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <Servo_Init+0x54>)
 8001bc8:	609a      	str	r2, [r3, #8]
	servoDutyCycles.Servo4DutyCycle = &TIM1->CCR4;
 8001bca:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <Servo_Init+0x48>)
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <Servo_Init+0x58>)
 8001bce:	60da      	str	r2, [r3, #12]

	Set_Servos_Into_Default_Position();
 8001bd0:	f000 f80e 	bl	8001bf0 <Set_Servos_Into_Default_Position>
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	2000019c 	.word	0x2000019c
 8001bdc:	20000128 	.word	0x20000128
 8001be0:	40012c34 	.word	0x40012c34
 8001be4:	40012c38 	.word	0x40012c38
 8001be8:	40012c3c 	.word	0x40012c3c
 8001bec:	40012c40 	.word	0x40012c40

08001bf0 <Set_Servos_Into_Default_Position>:
	Set_Servos_Into_Default_Position();

}


void Set_Servos_Into_Default_Position(){
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
	TIM1->CCR1 = INLINE_DUTY_CYCLE;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <Set_Servos_Into_Default_Position+0x28>)
 8001bf6:	2296      	movs	r2, #150	; 0x96
 8001bf8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = INLINE_DUTY_CYCLE;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <Set_Servos_Into_Default_Position+0x28>)
 8001bfc:	2296      	movs	r2, #150	; 0x96
 8001bfe:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = INLINE_DUTY_CYCLE;
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <Set_Servos_Into_Default_Position+0x28>)
 8001c02:	2296      	movs	r2, #150	; 0x96
 8001c04:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = INLINE_DUTY_CYCLE;
 8001c06:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <Set_Servos_Into_Default_Position+0x28>)
 8001c08:	2296      	movs	r2, #150	; 0x96
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40012c00 	.word	0x40012c00

08001c1c <__Test_Servos>:


/*
 * For testing purposes!
 */
void __Test_Servos(){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	TIM1->CCR1 = INLINE_DUTY_CYCLE;
 8001c20:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <__Test_Servos+0x80>)
 8001c22:	2296      	movs	r2, #150	; 0x96
 8001c24:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = INLINE_DUTY_CYCLE;
 8001c26:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <__Test_Servos+0x80>)
 8001c28:	2296      	movs	r2, #150	; 0x96
 8001c2a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = INLINE_DUTY_CYCLE;
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <__Test_Servos+0x80>)
 8001c2e:	2296      	movs	r2, #150	; 0x96
 8001c30:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = INLINE_DUTY_CYCLE;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <__Test_Servos+0x80>)
 8001c34:	2296      	movs	r2, #150	; 0x96
 8001c36:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_Delay(2000);
 8001c38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c3c:	f000 fb62 	bl	8002304 <HAL_Delay>


	TIM1->CCR1 = LOWEST_ENABLED_PITCH_DUTY_CYCLE;
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <__Test_Servos+0x80>)
 8001c42:	227d      	movs	r2, #125	; 0x7d
 8001c44:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = LOWEST_ENABLED_PITCH_DUTY_CYCLE;
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <__Test_Servos+0x80>)
 8001c48:	227d      	movs	r2, #125	; 0x7d
 8001c4a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = LOWEST_ENABLED_PITCH_DUTY_CYCLE;
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <__Test_Servos+0x80>)
 8001c4e:	227d      	movs	r2, #125	; 0x7d
 8001c50:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = LOWEST_ENABLED_PITCH_DUTY_CYCLE;
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <__Test_Servos+0x80>)
 8001c54:	227d      	movs	r2, #125	; 0x7d
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_Delay(2000);
 8001c58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c5c:	f000 fb52 	bl	8002304 <HAL_Delay>


	TIM1->CCR1 = HIGHEST_ENABLED_PICH_DUTY_CYCLE;
 8001c60:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <__Test_Servos+0x80>)
 8001c62:	22af      	movs	r2, #175	; 0xaf
 8001c64:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = HIGHEST_ENABLED_PICH_DUTY_CYCLE;
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <__Test_Servos+0x80>)
 8001c68:	22af      	movs	r2, #175	; 0xaf
 8001c6a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = HIGHEST_ENABLED_PICH_DUTY_CYCLE;
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <__Test_Servos+0x80>)
 8001c6e:	22af      	movs	r2, #175	; 0xaf
 8001c70:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = HIGHEST_ENABLED_PICH_DUTY_CYCLE;
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <__Test_Servos+0x80>)
 8001c74:	22af      	movs	r2, #175	; 0xaf
 8001c76:	641a      	str	r2, [r3, #64]	; 0x40


	HAL_Delay(2000);
 8001c78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c7c:	f000 fb42 	bl	8002304 <HAL_Delay>

	TIM1->CCR1 = INLINE_DUTY_CYCLE;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <__Test_Servos+0x80>)
 8001c82:	2296      	movs	r2, #150	; 0x96
 8001c84:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = INLINE_DUTY_CYCLE;
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <__Test_Servos+0x80>)
 8001c88:	2296      	movs	r2, #150	; 0x96
 8001c8a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = INLINE_DUTY_CYCLE;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <__Test_Servos+0x80>)
 8001c8e:	2296      	movs	r2, #150	; 0x96
 8001c90:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = INLINE_DUTY_CYCLE;
 8001c92:	4b02      	ldr	r3, [pc, #8]	; (8001c9c <__Test_Servos+0x80>)
 8001c94:	2296      	movs	r2, #150	; 0x96
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40012c00 	.word	0x40012c00

08001ca0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001ca6:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <MX_SPI1_Init+0x78>)
 8001ca8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cb2:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cb8:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001cbe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cee:	2207      	movs	r2, #7
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <MX_SPI1_Init+0x74>)
 8001d00:	f002 fddc 	bl	80048bc <HAL_SPI_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d0a:	f7ff ff2b 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000138 	.word	0x20000138
 8001d18:	40013000 	.word	0x40013000

08001d1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <HAL_SPI_MspInit+0x80>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d129      	bne.n	8001d92 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d3e:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <HAL_SPI_MspInit+0x84>)
 8001d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d42:	4a17      	ldr	r2, [pc, #92]	; (8001da0 <HAL_SPI_MspInit+0x84>)
 8001d44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d48:	6613      	str	r3, [r2, #96]	; 0x60
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <HAL_SPI_MspInit+0x84>)
 8001d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_SPI_MspInit+0x84>)
 8001d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5a:	4a11      	ldr	r2, [pc, #68]	; (8001da0 <HAL_SPI_MspInit+0x84>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d62:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <HAL_SPI_MspInit+0x84>)
 8001d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_12;
 8001d6e:	f241 0342 	movw	r3, #4162	; 0x1042
 8001d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d80:	2305      	movs	r3, #5
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8e:	f000 fbc3 	bl	8002518 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d92:	bf00      	nop
 8001d94:	3728      	adds	r7, #40	; 0x28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40013000 	.word	0x40013000
 8001da0:	40021000 	.word	0x40021000

08001da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_MspInit+0x44>)
 8001dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dae:	4a0e      	ldr	r2, [pc, #56]	; (8001de8 <HAL_MspInit+0x44>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6613      	str	r3, [r2, #96]	; 0x60
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <HAL_MspInit+0x44>)
 8001db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_MspInit+0x44>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <HAL_MspInit+0x44>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_MspInit+0x44>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000

08001dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <NMI_Handler+0x4>

08001df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df6:	e7fe      	b.n	8001df6 <HardFault_Handler+0x4>

08001df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <MemManage_Handler+0x4>

08001dfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e02:	e7fe      	b.n	8001e02 <BusFault_Handler+0x4>

08001e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <UsageFault_Handler+0x4>

08001e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e38:	f000 fa44 	bl	80022c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <Check_Peripherals>:
 * 		- LoRa
 * 		- Altimeter
 * 		- Servos
 * 	(all of the periphery are essential pretty much)
 */
void Check_Peripherals(){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	if (!Is_BMP280_Available()){ // not putting all check into one if
 8001e44:	f000 f824 	bl	8001e90 <Is_BMP280_Available>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f083 0301 	eor.w	r3, r3, #1
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <Check_Peripherals+0x18>
		Error_Handler();		 // bc this way it is easier to debug
 8001e54:	f7ff fe86 	bl	8001b64 <Error_Handler>
	}

	if (!Is_IMU_Available()){
 8001e58:	f000 f832 	bl	8001ec0 <Is_IMU_Available>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f083 0301 	eor.w	r3, r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <Check_Peripherals+0x2c>
		Error_Handler();
 8001e68:	f7ff fe7c 	bl	8001b64 <Error_Handler>
	}

	if (!Is_LoRa_Available()){
 8001e6c:	f000 f840 	bl	8001ef0 <Is_LoRa_Available>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f083 0301 	eor.w	r3, r3, #1
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <Check_Peripherals+0x40>
		Error_Handler();
 8001e7c:	f7ff fe72 	bl	8001b64 <Error_Handler>
	}

	// Manual testing (look at the rocket fins)
	Are_Servos_Available();
 8001e80:	f7ff fecc 	bl	8001c1c <__Test_Servos>
	HAL_Delay(2000);
 8001e84:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e88:	f000 fa3c 	bl	8002304 <HAL_Delay>
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <Is_BMP280_Available>:

/**
 * Checking if altimeter is available.
 */
bool Is_BMP280_Available(){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c3, BMP280_I2C_ADDRESS_0 << 1, 50, 50);
 8001e96:	2332      	movs	r3, #50	; 0x32
 8001e98:	2232      	movs	r2, #50	; 0x32
 8001e9a:	21ec      	movs	r1, #236	; 0xec
 8001e9c:	4807      	ldr	r0, [pc, #28]	; (8001ebc <Is_BMP280_Available+0x2c>)
 8001e9e:	f000 ff7b 	bl	8002d98 <HAL_I2C_IsDeviceReady>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
	if (status == HAL_OK){
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <Is_BMP280_Available+0x20>
		return 1;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <Is_BMP280_Available+0x22>
	}

	return 0;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200000c8 	.word	0x200000c8

08001ec0 <Is_IMU_Available>:


bool Is_IMU_Available(){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, MPU9250_ADDRESS, 50, 50);
 8001ec6:	2332      	movs	r3, #50	; 0x32
 8001ec8:	2232      	movs	r2, #50	; 0x32
 8001eca:	21d0      	movs	r1, #208	; 0xd0
 8001ecc:	4807      	ldr	r0, [pc, #28]	; (8001eec <Is_IMU_Available+0x2c>)
 8001ece:	f000 ff63 	bl	8002d98 <HAL_I2C_IsDeviceReady>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
	if (status == HAL_OK){
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <Is_IMU_Available+0x20>
		return 1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <Is_IMU_Available+0x22>
	}

	return 0;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000074 	.word	0x20000074

08001ef0 <Is_LoRa_Available>:


bool Is_LoRa_Available(){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
	uint32_t res;
	uint8_t address = 0x0D;
 8001ef6:	230d      	movs	r3, #13
 8001ef8:	71fb      	strb	r3, [r7, #7]
	for (int i=0;i<50;i++){
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	e017      	b.n	8001f30 <Is_LoRa_Available+0x40>
		HAL_GPIO_WritePin(GPIOA, LoRa_NSS_Pin, GPIO_PIN_RESET);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2110      	movs	r1, #16
 8001f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f08:	f000 fc70 	bl	80027ec <HAL_GPIO_WritePin>
		// Transmit reg address, then receive it value
		res = HAL_SPI_Transmit(&hspi1, &address, 1, 500);
 8001f0c:	1df9      	adds	r1, r7, #7
 8001f0e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f12:	2201      	movs	r2, #1
 8001f14:	480d      	ldr	r0, [pc, #52]	; (8001f4c <Is_LoRa_Available+0x5c>)
 8001f16:	f002 fd74 	bl	8004a02 <HAL_SPI_Transmit>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	60fb      	str	r3, [r7, #12]
		// End SPI transaction
		HAL_GPIO_WritePin(GPIOA, LoRa_NSS_Pin, GPIO_PIN_SET);
 8001f1e:	2201      	movs	r2, #1
 8001f20:	2110      	movs	r1, #16
 8001f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f26:	f000 fc61 	bl	80027ec <HAL_GPIO_WritePin>
	for (int i=0;i<50;i++){
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2b31      	cmp	r3, #49	; 0x31
 8001f34:	dde4      	ble.n	8001f00 <Is_LoRa_Available+0x10>
	}

	if (res == HAL_OK){
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <Is_LoRa_Available+0x50>
		return 1;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <Is_LoRa_Available+0x52>
	}

	return 0;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000138 	.word	0x20000138

08001f50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <SystemInit+0x20>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5a:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <SystemInit+0x20>)
 8001f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b09a      	sub	sp, #104	; 0x68
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
 8001fa4:	615a      	str	r2, [r3, #20]
 8001fa6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	222c      	movs	r2, #44	; 0x2c
 8001fac:	2100      	movs	r1, #0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f004 fbac 	bl	800670c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fb4:	4b56      	ldr	r3, [pc, #344]	; (8002110 <MX_TIM1_Init+0x19c>)
 8001fb6:	4a57      	ldr	r2, [pc, #348]	; (8002114 <MX_TIM1_Init+0x1a0>)
 8001fb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320-1;
 8001fba:	4b55      	ldr	r3, [pc, #340]	; (8002110 <MX_TIM1_Init+0x19c>)
 8001fbc:	f240 123f 	movw	r2, #319	; 0x13f
 8001fc0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc2:	4b53      	ldr	r3, [pc, #332]	; (8002110 <MX_TIM1_Init+0x19c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8001fc8:	4b51      	ldr	r3, [pc, #324]	; (8002110 <MX_TIM1_Init+0x19c>)
 8001fca:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001fce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd0:	4b4f      	ldr	r3, [pc, #316]	; (8002110 <MX_TIM1_Init+0x19c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fd6:	4b4e      	ldr	r3, [pc, #312]	; (8002110 <MX_TIM1_Init+0x19c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fdc:	4b4c      	ldr	r3, [pc, #304]	; (8002110 <MX_TIM1_Init+0x19c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fe2:	484b      	ldr	r0, [pc, #300]	; (8002110 <MX_TIM1_Init+0x19c>)
 8001fe4:	f003 fb7a 	bl	80056dc <HAL_TIM_Base_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001fee:	f7ff fdb9 	bl	8001b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ff8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4844      	ldr	r0, [pc, #272]	; (8002110 <MX_TIM1_Init+0x19c>)
 8002000:	f003 fe16 	bl	8005c30 <HAL_TIM_ConfigClockSource>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800200a:	f7ff fdab 	bl	8001b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800200e:	4840      	ldr	r0, [pc, #256]	; (8002110 <MX_TIM1_Init+0x19c>)
 8002010:	f003 fbbb 	bl	800578a <HAL_TIM_PWM_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800201a:	f7ff fda3 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800202a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800202e:	4619      	mov	r1, r3
 8002030:	4837      	ldr	r0, [pc, #220]	; (8002110 <MX_TIM1_Init+0x19c>)
 8002032:	f004 fa69 	bl	8006508 <HAL_TIMEx_MasterConfigSynchronization>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 800203c:	f7ff fd92 	bl	8001b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002040:	2360      	movs	r3, #96	; 0x60
 8002042:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002048:	2300      	movs	r3, #0
 800204a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800204c:	2300      	movs	r3, #0
 800204e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002050:	2300      	movs	r3, #0
 8002052:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002054:	2300      	movs	r3, #0
 8002056:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002058:	2300      	movs	r3, #0
 800205a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800205c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002060:	2200      	movs	r2, #0
 8002062:	4619      	mov	r1, r3
 8002064:	482a      	ldr	r0, [pc, #168]	; (8002110 <MX_TIM1_Init+0x19c>)
 8002066:	f003 fccf 	bl	8005a08 <HAL_TIM_PWM_ConfigChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002070:	f7ff fd78 	bl	8001b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002074:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002078:	2204      	movs	r2, #4
 800207a:	4619      	mov	r1, r3
 800207c:	4824      	ldr	r0, [pc, #144]	; (8002110 <MX_TIM1_Init+0x19c>)
 800207e:	f003 fcc3 	bl	8005a08 <HAL_TIM_PWM_ConfigChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002088:	f7ff fd6c 	bl	8001b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800208c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002090:	2208      	movs	r2, #8
 8002092:	4619      	mov	r1, r3
 8002094:	481e      	ldr	r0, [pc, #120]	; (8002110 <MX_TIM1_Init+0x19c>)
 8002096:	f003 fcb7 	bl	8005a08 <HAL_TIM_PWM_ConfigChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80020a0:	f7ff fd60 	bl	8001b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020a8:	220c      	movs	r2, #12
 80020aa:	4619      	mov	r1, r3
 80020ac:	4818      	ldr	r0, [pc, #96]	; (8002110 <MX_TIM1_Init+0x19c>)
 80020ae:	f003 fcab 	bl	8005a08 <HAL_TIM_PWM_ConfigChannel>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80020b8:	f7ff fd54 	bl	8001b64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020ec:	1d3b      	adds	r3, r7, #4
 80020ee:	4619      	mov	r1, r3
 80020f0:	4807      	ldr	r0, [pc, #28]	; (8002110 <MX_TIM1_Init+0x19c>)
 80020f2:	f004 fa6f 	bl	80065d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 80020fc:	f7ff fd32 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002100:	4803      	ldr	r0, [pc, #12]	; (8002110 <MX_TIM1_Init+0x19c>)
 8002102:	f000 f829 	bl	8002158 <HAL_TIM_MspPostInit>

}
 8002106:	bf00      	nop
 8002108:	3768      	adds	r7, #104	; 0x68
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000019c 	.word	0x2000019c
 8002114:	40012c00 	.word	0x40012c00

08002118 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <HAL_TIM_Base_MspInit+0x38>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d10b      	bne.n	8002142 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_TIM_Base_MspInit+0x3c>)
 800212c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212e:	4a09      	ldr	r2, [pc, #36]	; (8002154 <HAL_TIM_Base_MspInit+0x3c>)
 8002130:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002134:	6613      	str	r3, [r2, #96]	; 0x60
 8002136:	4b07      	ldr	r3, [pc, #28]	; (8002154 <HAL_TIM_Base_MspInit+0x3c>)
 8002138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40012c00 	.word	0x40012c00
 8002154:	40021000 	.word	0x40021000

08002158 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <HAL_TIM_MspPostInit+0x68>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d11d      	bne.n	80021b6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_TIM_MspPostInit+0x6c>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	4a11      	ldr	r2, [pc, #68]	; (80021c4 <HAL_TIM_MspPostInit+0x6c>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <HAL_TIM_MspPostInit+0x6c>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002192:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002196:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021a4:	2301      	movs	r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	4619      	mov	r1, r3
 80021ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b2:	f000 f9b1 	bl	8002518 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021b6:	bf00      	nop
 80021b8:	3720      	adds	r7, #32
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40012c00 	.word	0x40012c00
 80021c4:	40021000 	.word	0x40021000

080021c8 <Reset_Handler>:
 80021c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002200 <LoopForever+0x2>
 80021cc:	f7ff fec0 	bl	8001f50 <SystemInit>
 80021d0:	480c      	ldr	r0, [pc, #48]	; (8002204 <LoopForever+0x6>)
 80021d2:	490d      	ldr	r1, [pc, #52]	; (8002208 <LoopForever+0xa>)
 80021d4:	4a0d      	ldr	r2, [pc, #52]	; (800220c <LoopForever+0xe>)
 80021d6:	2300      	movs	r3, #0
 80021d8:	e002      	b.n	80021e0 <LoopCopyDataInit>

080021da <CopyDataInit>:
 80021da:	58d4      	ldr	r4, [r2, r3]
 80021dc:	50c4      	str	r4, [r0, r3]
 80021de:	3304      	adds	r3, #4

080021e0 <LoopCopyDataInit>:
 80021e0:	18c4      	adds	r4, r0, r3
 80021e2:	428c      	cmp	r4, r1
 80021e4:	d3f9      	bcc.n	80021da <CopyDataInit>
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <LoopForever+0x12>)
 80021e8:	4c0a      	ldr	r4, [pc, #40]	; (8002214 <LoopForever+0x16>)
 80021ea:	2300      	movs	r3, #0
 80021ec:	e001      	b.n	80021f2 <LoopFillZerobss>

080021ee <FillZerobss>:
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	3204      	adds	r2, #4

080021f2 <LoopFillZerobss>:
 80021f2:	42a2      	cmp	r2, r4
 80021f4:	d3fb      	bcc.n	80021ee <FillZerobss>
 80021f6:	f004 fa65 	bl	80066c4 <__libc_init_array>
 80021fa:	f7ff fc0d 	bl	8001a18 <main>

080021fe <LoopForever>:
 80021fe:	e7fe      	b.n	80021fe <LoopForever>
 8002200:	20010000 	.word	0x20010000
 8002204:	20000000 	.word	0x20000000
 8002208:	2000000c 	.word	0x2000000c
 800220c:	08006784 	.word	0x08006784
 8002210:	2000000c 	.word	0x2000000c
 8002214:	200001ec 	.word	0x200001ec

08002218 <ADC1_IRQHandler>:
 8002218:	e7fe      	b.n	8002218 <ADC1_IRQHandler>

0800221a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002224:	2003      	movs	r0, #3
 8002226:	f000 f943 	bl	80024b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800222a:	2000      	movs	r0, #0
 800222c:	f000 f80e 	bl	800224c <HAL_InitTick>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	71fb      	strb	r3, [r7, #7]
 800223a:	e001      	b.n	8002240 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800223c:	f7ff fdb2 	bl	8001da4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002240:	79fb      	ldrb	r3, [r7, #7]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002258:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_InitTick+0x6c>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d023      	beq.n	80022a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002260:	4b16      	ldr	r3, [pc, #88]	; (80022bc <HAL_InitTick+0x70>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <HAL_InitTick+0x6c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4619      	mov	r1, r3
 800226a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800226e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002272:	fbb2 f3f3 	udiv	r3, r2, r3
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f941 	bl	80024fe <HAL_SYSTICK_Config>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10f      	bne.n	80022a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b0f      	cmp	r3, #15
 8002286:	d809      	bhi.n	800229c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002288:	2200      	movs	r2, #0
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002290:	f000 f919 	bl	80024c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002294:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <HAL_InitTick+0x74>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e007      	b.n	80022ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	e004      	b.n	80022ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
 80022a6:	e001      	b.n	80022ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000008 	.word	0x20000008
 80022bc:	20000000 	.word	0x20000000
 80022c0:	20000004 	.word	0x20000004

080022c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_IncTick+0x20>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_IncTick+0x24>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <HAL_IncTick+0x24>)
 80022d6:	6013      	str	r3, [r2, #0]
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000008 	.word	0x20000008
 80022e8:	200001e8 	.word	0x200001e8

080022ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return uwTick;
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <HAL_GetTick+0x14>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	200001e8 	.word	0x200001e8

08002304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800230c:	f7ff ffee 	bl	80022ec <HAL_GetTick>
 8002310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800231c:	d005      	beq.n	800232a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_Delay+0x44>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4413      	add	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800232a:	bf00      	nop
 800232c:	f7ff ffde 	bl	80022ec <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	429a      	cmp	r2, r3
 800233a:	d8f7      	bhi.n	800232c <HAL_Delay+0x28>
  {
  }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000008 	.word	0x20000008

0800234c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002368:	4013      	ands	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237e:	4a04      	ldr	r2, [pc, #16]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	60d3      	str	r3, [r2, #12]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <__NVIC_GetPriorityGrouping+0x18>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	f003 0307 	and.w	r3, r3, #7
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	db0a      	blt.n	80023da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	490c      	ldr	r1, [pc, #48]	; (80023fc <__NVIC_SetPriority+0x4c>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	0112      	lsls	r2, r2, #4
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	440b      	add	r3, r1
 80023d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d8:	e00a      	b.n	80023f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4908      	ldr	r1, [pc, #32]	; (8002400 <__NVIC_SetPriority+0x50>)
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	3b04      	subs	r3, #4
 80023e8:	0112      	lsls	r2, r2, #4
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	440b      	add	r3, r1
 80023ee:	761a      	strb	r2, [r3, #24]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000e100 	.word	0xe000e100
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f1c3 0307 	rsb	r3, r3, #7
 800241e:	2b04      	cmp	r3, #4
 8002420:	bf28      	it	cs
 8002422:	2304      	movcs	r3, #4
 8002424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3304      	adds	r3, #4
 800242a:	2b06      	cmp	r3, #6
 800242c:	d902      	bls.n	8002434 <NVIC_EncodePriority+0x30>
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3b03      	subs	r3, #3
 8002432:	e000      	b.n	8002436 <NVIC_EncodePriority+0x32>
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	401a      	ands	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800244c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	43d9      	mvns	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	4313      	orrs	r3, r2
         );
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3b01      	subs	r3, #1
 8002478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800247c:	d301      	bcc.n	8002482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800247e:	2301      	movs	r3, #1
 8002480:	e00f      	b.n	80024a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <SysTick_Config+0x40>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3b01      	subs	r3, #1
 8002488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248a:	210f      	movs	r1, #15
 800248c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002490:	f7ff ff8e 	bl	80023b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <SysTick_Config+0x40>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249a:	4b04      	ldr	r3, [pc, #16]	; (80024ac <SysTick_Config+0x40>)
 800249c:	2207      	movs	r2, #7
 800249e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	e000e010 	.word	0xe000e010

080024b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ff47 	bl	800234c <__NVIC_SetPriorityGrouping>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024d8:	f7ff ff5c 	bl	8002394 <__NVIC_GetPriorityGrouping>
 80024dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f7ff ff8e 	bl	8002404 <NVIC_EncodePriority>
 80024e8:	4602      	mov	r2, r0
 80024ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff5d 	bl	80023b0 <__NVIC_SetPriority>
}
 80024f6:	bf00      	nop
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ffb0 	bl	800246c <SysTick_Config>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002526:	e148      	b.n	80027ba <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2101      	movs	r1, #1
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	fa01 f303 	lsl.w	r3, r1, r3
 8002534:	4013      	ands	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 813a 	beq.w	80027b4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d005      	beq.n	8002558 <HAL_GPIO_Init+0x40>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d130      	bne.n	80025ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800258e:	2201      	movs	r2, #1
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	091b      	lsrs	r3, r3, #4
 80025a4:	f003 0201 	and.w	r2, r3, #1
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d017      	beq.n	80025f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	2203      	movs	r2, #3
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d123      	bne.n	800264a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	08da      	lsrs	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3208      	adds	r2, #8
 800260a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800260e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	220f      	movs	r2, #15
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4013      	ands	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	691a      	ldr	r2, [r3, #16]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	08da      	lsrs	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3208      	adds	r2, #8
 8002644:	6939      	ldr	r1, [r7, #16]
 8002646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	2203      	movs	r2, #3
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0203 	and.w	r2, r3, #3
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 8094 	beq.w	80027b4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268c:	4b52      	ldr	r3, [pc, #328]	; (80027d8 <HAL_GPIO_Init+0x2c0>)
 800268e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002690:	4a51      	ldr	r2, [pc, #324]	; (80027d8 <HAL_GPIO_Init+0x2c0>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6613      	str	r3, [r2, #96]	; 0x60
 8002698:	4b4f      	ldr	r3, [pc, #316]	; (80027d8 <HAL_GPIO_Init+0x2c0>)
 800269a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026a4:	4a4d      	ldr	r2, [pc, #308]	; (80027dc <HAL_GPIO_Init+0x2c4>)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	3302      	adds	r3, #2
 80026ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	220f      	movs	r2, #15
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026ce:	d00d      	beq.n	80026ec <HAL_GPIO_Init+0x1d4>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a43      	ldr	r2, [pc, #268]	; (80027e0 <HAL_GPIO_Init+0x2c8>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d007      	beq.n	80026e8 <HAL_GPIO_Init+0x1d0>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a42      	ldr	r2, [pc, #264]	; (80027e4 <HAL_GPIO_Init+0x2cc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d101      	bne.n	80026e4 <HAL_GPIO_Init+0x1cc>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e004      	b.n	80026ee <HAL_GPIO_Init+0x1d6>
 80026e4:	2307      	movs	r3, #7
 80026e6:	e002      	b.n	80026ee <HAL_GPIO_Init+0x1d6>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <HAL_GPIO_Init+0x1d6>
 80026ec:	2300      	movs	r3, #0
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	f002 0203 	and.w	r2, r2, #3
 80026f4:	0092      	lsls	r2, r2, #2
 80026f6:	4093      	lsls	r3, r2
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026fe:	4937      	ldr	r1, [pc, #220]	; (80027dc <HAL_GPIO_Init+0x2c4>)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	3302      	adds	r3, #2
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800270c:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <HAL_GPIO_Init+0x2d0>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	43db      	mvns	r3, r3
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4013      	ands	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002730:	4a2d      	ldr	r2, [pc, #180]	; (80027e8 <HAL_GPIO_Init+0x2d0>)
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002736:	4b2c      	ldr	r3, [pc, #176]	; (80027e8 <HAL_GPIO_Init+0x2d0>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	43db      	mvns	r3, r3
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4013      	ands	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800275a:	4a23      	ldr	r2, [pc, #140]	; (80027e8 <HAL_GPIO_Init+0x2d0>)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002760:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <HAL_GPIO_Init+0x2d0>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	43db      	mvns	r3, r3
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002784:	4a18      	ldr	r2, [pc, #96]	; (80027e8 <HAL_GPIO_Init+0x2d0>)
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800278a:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <HAL_GPIO_Init+0x2d0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	43db      	mvns	r3, r3
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027ae:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <HAL_GPIO_Init+0x2d0>)
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3301      	adds	r3, #1
 80027b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f47f aeaf 	bne.w	8002528 <HAL_GPIO_Init+0x10>
  }
}
 80027ca:	bf00      	nop
 80027cc:	bf00      	nop
 80027ce:	371c      	adds	r7, #28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40010000 	.word	0x40010000
 80027e0:	48000400 	.word	0x48000400
 80027e4:	48000800 	.word	0x48000800
 80027e8:	40010400 	.word	0x40010400

080027ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	807b      	strh	r3, [r7, #2]
 80027f8:	4613      	mov	r3, r2
 80027fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027fc:	787b      	ldrb	r3, [r7, #1]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002802:	887a      	ldrh	r2, [r7, #2]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002808:	e002      	b.n	8002810 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800280a:	887a      	ldrh	r2, [r7, #2]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e081      	b.n	8002932 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff f82e 	bl	80018a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2224      	movs	r2, #36	; 0x24
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800286c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800287c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d107      	bne.n	8002896 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	e006      	b.n	80028a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d104      	bne.n	80028b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69d9      	ldr	r1, [r3, #28]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1a      	ldr	r2, [r3, #32]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2220      	movs	r2, #32
 800291e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	4608      	mov	r0, r1
 8002946:	4611      	mov	r1, r2
 8002948:	461a      	mov	r2, r3
 800294a:	4603      	mov	r3, r0
 800294c:	817b      	strh	r3, [r7, #10]
 800294e:	460b      	mov	r3, r1
 8002950:	813b      	strh	r3, [r7, #8]
 8002952:	4613      	mov	r3, r2
 8002954:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b20      	cmp	r3, #32
 8002960:	f040 80f9 	bne.w	8002b56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <HAL_I2C_Mem_Write+0x34>
 800296a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800296c:	2b00      	cmp	r3, #0
 800296e:	d105      	bne.n	800297c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002976:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0ed      	b.n	8002b58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <HAL_I2C_Mem_Write+0x4e>
 8002986:	2302      	movs	r3, #2
 8002988:	e0e6      	b.n	8002b58 <HAL_I2C_Mem_Write+0x21c>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002992:	f7ff fcab 	bl	80022ec <HAL_GetTick>
 8002996:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	2319      	movs	r3, #25
 800299e:	2201      	movs	r2, #1
 80029a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 fbcb 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0d1      	b.n	8002b58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2221      	movs	r2, #33	; 0x21
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2240      	movs	r2, #64	; 0x40
 80029c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a3a      	ldr	r2, [r7, #32]
 80029ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029dc:	88f8      	ldrh	r0, [r7, #6]
 80029de:	893a      	ldrh	r2, [r7, #8]
 80029e0:	8979      	ldrh	r1, [r7, #10]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	4603      	mov	r3, r0
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 fadb 	bl	8002fa8 <I2C_RequestMemoryWrite>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0a9      	b.n	8002b58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2bff      	cmp	r3, #255	; 0xff
 8002a0c:	d90e      	bls.n	8002a2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	22ff      	movs	r2, #255	; 0xff
 8002a12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	8979      	ldrh	r1, [r7, #10]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 fd33 	bl	8003490 <I2C_TransferConfig>
 8002a2a:	e00f      	b.n	8002a4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	8979      	ldrh	r1, [r7, #10]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 fd22 	bl	8003490 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fbb5 	bl	80031c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e07b      	b.n	8002b58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	781a      	ldrb	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d034      	beq.n	8002b04 <HAL_I2C_Mem_Write+0x1c8>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d130      	bne.n	8002b04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2180      	movs	r1, #128	; 0x80
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 fb47 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e04d      	b.n	8002b58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2bff      	cmp	r3, #255	; 0xff
 8002ac4:	d90e      	bls.n	8002ae4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	22ff      	movs	r2, #255	; 0xff
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	8979      	ldrh	r1, [r7, #10]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 fcd7 	bl	8003490 <I2C_TransferConfig>
 8002ae2:	e00f      	b.n	8002b04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	8979      	ldrh	r1, [r7, #10]
 8002af6:	2300      	movs	r3, #0
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 fcc6 	bl	8003490 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d19e      	bne.n	8002a4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 fb94 	bl	8003240 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e01a      	b.n	8002b58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2220      	movs	r2, #32
 8002b28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_I2C_Mem_Write+0x224>)
 8002b36:	400b      	ands	r3, r1
 8002b38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e000      	b.n	8002b58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002b56:	2302      	movs	r3, #2
  }
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	fe00e800 	.word	0xfe00e800

08002b64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	4608      	mov	r0, r1
 8002b6e:	4611      	mov	r1, r2
 8002b70:	461a      	mov	r2, r3
 8002b72:	4603      	mov	r3, r0
 8002b74:	817b      	strh	r3, [r7, #10]
 8002b76:	460b      	mov	r3, r1
 8002b78:	813b      	strh	r3, [r7, #8]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	f040 80fd 	bne.w	8002d86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <HAL_I2C_Mem_Read+0x34>
 8002b92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d105      	bne.n	8002ba4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0f1      	b.n	8002d88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_I2C_Mem_Read+0x4e>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e0ea      	b.n	8002d88 <HAL_I2C_Mem_Read+0x224>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bba:	f7ff fb97 	bl	80022ec <HAL_GetTick>
 8002bbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	2319      	movs	r3, #25
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 fab7 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0d5      	b.n	8002d88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2222      	movs	r2, #34	; 0x22
 8002be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2240      	movs	r2, #64	; 0x40
 8002be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a3a      	ldr	r2, [r7, #32]
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c04:	88f8      	ldrh	r0, [r7, #6]
 8002c06:	893a      	ldrh	r2, [r7, #8]
 8002c08:	8979      	ldrh	r1, [r7, #10]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	9301      	str	r3, [sp, #4]
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	4603      	mov	r3, r0
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 fa1b 	bl	8003050 <I2C_RequestMemoryRead>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0ad      	b.n	8002d88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2bff      	cmp	r3, #255	; 0xff
 8002c34:	d90e      	bls.n	8002c54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	22ff      	movs	r2, #255	; 0xff
 8002c3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	8979      	ldrh	r1, [r7, #10]
 8002c44:	4b52      	ldr	r3, [pc, #328]	; (8002d90 <HAL_I2C_Mem_Read+0x22c>)
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fc1f 	bl	8003490 <I2C_TransferConfig>
 8002c52:	e00f      	b.n	8002c74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	8979      	ldrh	r1, [r7, #10]
 8002c66:	4b4a      	ldr	r3, [pc, #296]	; (8002d90 <HAL_I2C_Mem_Read+0x22c>)
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 fc0e 	bl	8003490 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2104      	movs	r1, #4
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 fa5e 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e07c      	b.n	8002d88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d034      	beq.n	8002d34 <HAL_I2C_Mem_Read+0x1d0>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d130      	bne.n	8002d34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2180      	movs	r1, #128	; 0x80
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fa2f 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e04d      	b.n	8002d88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2bff      	cmp	r3, #255	; 0xff
 8002cf4:	d90e      	bls.n	8002d14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	22ff      	movs	r2, #255	; 0xff
 8002cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	8979      	ldrh	r1, [r7, #10]
 8002d04:	2300      	movs	r3, #0
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fbbf 	bl	8003490 <I2C_TransferConfig>
 8002d12:	e00f      	b.n	8002d34 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	8979      	ldrh	r1, [r7, #10]
 8002d26:	2300      	movs	r3, #0
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 fbae 	bl	8003490 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d19a      	bne.n	8002c74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 fa7c 	bl	8003240 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e01a      	b.n	8002d88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2220      	movs	r2, #32
 8002d58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6859      	ldr	r1, [r3, #4]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_I2C_Mem_Read+0x230>)
 8002d66:	400b      	ands	r3, r1
 8002d68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e000      	b.n	8002d88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d86:	2302      	movs	r3, #2
  }
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	80002400 	.word	0x80002400
 8002d94:	fe00e800 	.word	0xfe00e800

08002d98 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	; 0x28
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	607a      	str	r2, [r7, #4]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	460b      	mov	r3, r1
 8002da6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	f040 80f1 	bne.w	8002f9c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc8:	d101      	bne.n	8002dce <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e0e7      	b.n	8002f9e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_I2C_IsDeviceReady+0x44>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e0e0      	b.n	8002f9e <HAL_I2C_IsDeviceReady+0x206>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2224      	movs	r2, #36	; 0x24
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d107      	bne.n	8002e0a <HAL_I2C_IsDeviceReady+0x72>
 8002dfa:	897b      	ldrh	r3, [r7, #10]
 8002dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e08:	e004      	b.n	8002e14 <HAL_I2C_IsDeviceReady+0x7c>
 8002e0a:	897b      	ldrh	r3, [r7, #10]
 8002e0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e10:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002e1a:	f7ff fa67 	bl	80022ec <HAL_GetTick>
 8002e1e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	bf0c      	ite	eq
 8002e2e:	2301      	moveq	r3, #1
 8002e30:	2300      	movne	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	2b10      	cmp	r3, #16
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002e4c:	e034      	b.n	8002eb8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e54:	d01a      	beq.n	8002e8c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e56:	f7ff fa49 	bl	80022ec <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d302      	bcc.n	8002e6c <HAL_I2C_IsDeviceReady+0xd4>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10f      	bne.n	8002e8c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e78:	f043 0220 	orr.w	r2, r3, #32
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e088      	b.n	8002f9e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b20      	cmp	r3, #32
 8002e98:	bf0c      	ite	eq
 8002e9a:	2301      	moveq	r3, #1
 8002e9c:	2300      	movne	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002eb8:	7ffb      	ldrb	r3, [r7, #31]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d102      	bne.n	8002ec4 <HAL_I2C_IsDeviceReady+0x12c>
 8002ebe:	7fbb      	ldrb	r3, [r7, #30]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0c4      	beq.n	8002e4e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	2b10      	cmp	r3, #16
 8002ed0:	d01a      	beq.n	8002f08 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2120      	movs	r1, #32
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f92f 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e058      	b.n	8002f9e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e04a      	b.n	8002f9e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2120      	movs	r1, #32
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f914 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e03d      	b.n	8002f9e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2210      	movs	r2, #16
 8002f28:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d118      	bne.n	8002f6c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f48:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2200      	movs	r2, #0
 8002f52:	2120      	movs	r1, #32
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f8f3 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e01c      	b.n	8002f9e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	f63f af3b 	bhi.w	8002df2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f88:	f043 0220 	orr.w	r2, r3, #32
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
  }
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	4608      	mov	r0, r1
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	817b      	strh	r3, [r7, #10]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	813b      	strh	r3, [r7, #8]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	8979      	ldrh	r1, [r7, #10]
 8002fc8:	4b20      	ldr	r3, [pc, #128]	; (800304c <I2C_RequestMemoryWrite+0xa4>)
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fa5d 	bl	8003490 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd6:	69fa      	ldr	r2, [r7, #28]
 8002fd8:	69b9      	ldr	r1, [r7, #24]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f8f0 	bl	80031c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e02c      	b.n	8003044 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d105      	bne.n	8002ffc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ff0:	893b      	ldrh	r3, [r7, #8]
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	629a      	str	r2, [r3, #40]	; 0x28
 8002ffa:	e015      	b.n	8003028 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ffc:	893b      	ldrh	r3, [r7, #8]
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	b29b      	uxth	r3, r3
 8003002:	b2da      	uxtb	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	69b9      	ldr	r1, [r7, #24]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f8d6 	bl	80031c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e012      	b.n	8003044 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800301e:	893b      	ldrh	r3, [r7, #8]
 8003020:	b2da      	uxtb	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	2200      	movs	r2, #0
 8003030:	2180      	movs	r1, #128	; 0x80
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 f884 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	80002000 	.word	0x80002000

08003050 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af02      	add	r7, sp, #8
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	4608      	mov	r0, r1
 800305a:	4611      	mov	r1, r2
 800305c:	461a      	mov	r2, r3
 800305e:	4603      	mov	r3, r0
 8003060:	817b      	strh	r3, [r7, #10]
 8003062:	460b      	mov	r3, r1
 8003064:	813b      	strh	r3, [r7, #8]
 8003066:	4613      	mov	r3, r2
 8003068:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800306a:	88fb      	ldrh	r3, [r7, #6]
 800306c:	b2da      	uxtb	r2, r3
 800306e:	8979      	ldrh	r1, [r7, #10]
 8003070:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <I2C_RequestMemoryRead+0xa4>)
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	2300      	movs	r3, #0
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 fa0a 	bl	8003490 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	69b9      	ldr	r1, [r7, #24]
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f89d 	bl	80031c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e02c      	b.n	80030ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d105      	bne.n	80030a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003096:	893b      	ldrh	r3, [r7, #8]
 8003098:	b2da      	uxtb	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
 80030a0:	e015      	b.n	80030ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030a2:	893b      	ldrh	r3, [r7, #8]
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b0:	69fa      	ldr	r2, [r7, #28]
 80030b2:	69b9      	ldr	r1, [r7, #24]
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f883 	bl	80031c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e012      	b.n	80030ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030c4:	893b      	ldrh	r3, [r7, #8]
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2200      	movs	r2, #0
 80030d6:	2140      	movs	r1, #64	; 0x40
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f831 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	80002000 	.word	0x80002000

080030f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b02      	cmp	r3, #2
 800310c:	d103      	bne.n	8003116 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2200      	movs	r2, #0
 8003114:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b01      	cmp	r3, #1
 8003122:	d007      	beq.n	8003134 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699a      	ldr	r2, [r3, #24]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	619a      	str	r2, [r3, #24]
  }
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003150:	e022      	b.n	8003198 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003158:	d01e      	beq.n	8003198 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315a:	f7ff f8c7 	bl	80022ec <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d302      	bcc.n	8003170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d113      	bne.n	8003198 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003174:	f043 0220 	orr.w	r2, r3, #32
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e00f      	b.n	80031b8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4013      	ands	r3, r2
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d0cd      	beq.n	8003152 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031cc:	e02c      	b.n	8003228 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f870 	bl	80032b8 <I2C_IsErrorOccurred>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e02a      	b.n	8003238 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031e8:	d01e      	beq.n	8003228 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ea:	f7ff f87f 	bl	80022ec <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d302      	bcc.n	8003200 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d113      	bne.n	8003228 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003204:	f043 0220 	orr.w	r2, r3, #32
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e007      	b.n	8003238 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b02      	cmp	r3, #2
 8003234:	d1cb      	bne.n	80031ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800324c:	e028      	b.n	80032a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68b9      	ldr	r1, [r7, #8]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f830 	bl	80032b8 <I2C_IsErrorOccurred>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e026      	b.n	80032b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003262:	f7ff f843 	bl	80022ec <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	429a      	cmp	r2, r3
 8003270:	d302      	bcc.n	8003278 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d113      	bne.n	80032a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327c:	f043 0220 	orr.w	r2, r3, #32
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e007      	b.n	80032b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	d1cf      	bne.n	800324e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08a      	sub	sp, #40	; 0x28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d075      	beq.n	80033d0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2210      	movs	r2, #16
 80032ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032ec:	e056      	b.n	800339c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032f4:	d052      	beq.n	800339c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032f6:	f7fe fff9 	bl	80022ec <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <I2C_IsErrorOccurred+0x54>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d147      	bne.n	800339c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003316:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800331e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800332a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800332e:	d12e      	bne.n	800338e <I2C_IsErrorOccurred+0xd6>
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003336:	d02a      	beq.n	800338e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003338:	7cfb      	ldrb	r3, [r7, #19]
 800333a:	2b20      	cmp	r3, #32
 800333c:	d027      	beq.n	800338e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800334c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800334e:	f7fe ffcd 	bl	80022ec <HAL_GetTick>
 8003352:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003354:	e01b      	b.n	800338e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003356:	f7fe ffc9 	bl	80022ec <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b19      	cmp	r3, #25
 8003362:	d914      	bls.n	800338e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	2b20      	cmp	r3, #32
 800339a:	d1dc      	bne.n	8003356 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	d003      	beq.n	80033b2 <I2C_IsErrorOccurred+0xfa>
 80033aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d09d      	beq.n	80032ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80033b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d103      	bne.n	80033c2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2220      	movs	r2, #32
 80033c0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	f043 0304 	orr.w	r3, r3, #4
 80033c8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00b      	beq.n	80033fa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00b      	beq.n	800341c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	f043 0308 	orr.w	r3, r3, #8
 800340a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003414:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00b      	beq.n	800343e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	f043 0302 	orr.w	r3, r3, #2
 800342c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003436:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800343e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003442:	2b00      	cmp	r3, #0
 8003444:	d01c      	beq.n	8003480 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f7ff fe56 	bl	80030f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6859      	ldr	r1, [r3, #4]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4b0d      	ldr	r3, [pc, #52]	; (800348c <I2C_IsErrorOccurred+0x1d4>)
 8003458:	400b      	ands	r3, r1
 800345a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	431a      	orrs	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003484:	4618      	mov	r0, r3
 8003486:	3728      	adds	r7, #40	; 0x28
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	fe00e800 	.word	0xfe00e800

08003490 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	460b      	mov	r3, r1
 800349c:	817b      	strh	r3, [r7, #10]
 800349e:	4613      	mov	r3, r2
 80034a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034a2:	897b      	ldrh	r3, [r7, #10]
 80034a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034a8:	7a7b      	ldrb	r3, [r7, #9]
 80034aa:	041b      	lsls	r3, r3, #16
 80034ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	0d5b      	lsrs	r3, r3, #21
 80034ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80034ce:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <I2C_TransferConfig+0x60>)
 80034d0:	430b      	orrs	r3, r1
 80034d2:	43db      	mvns	r3, r3
 80034d4:	ea02 0103 	and.w	r1, r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80034e2:	bf00      	nop
 80034e4:	371c      	adds	r7, #28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	03ff63ff 	.word	0x03ff63ff

080034f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b20      	cmp	r3, #32
 8003508:	d138      	bne.n	800357c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003514:	2302      	movs	r3, #2
 8003516:	e032      	b.n	800357e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2224      	movs	r2, #36	; 0x24
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0201 	bic.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003546:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6819      	ldr	r1, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	e000      	b.n	800357e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800357c:	2302      	movs	r3, #2
  }
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800358a:	b480      	push	{r7}
 800358c:	b085      	sub	sp, #20
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b20      	cmp	r3, #32
 800359e:	d139      	bne.n	8003614 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e033      	b.n	8003616 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2224      	movs	r2, #36	; 0x24
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	021b      	lsls	r3, r3, #8
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	e000      	b.n	8003616 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003614:	2302      	movs	r3, #2
  }
}
 8003616:	4618      	mov	r0, r3
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
	...

08003624 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003628:	4b04      	ldr	r3, [pc, #16]	; (800363c <HAL_PWREx_GetVoltageRange+0x18>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40007000 	.word	0x40007000

08003640 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800364e:	d130      	bne.n	80036b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003650:	4b23      	ldr	r3, [pc, #140]	; (80036e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365c:	d038      	beq.n	80036d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800365e:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003666:	4a1e      	ldr	r2, [pc, #120]	; (80036e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003668:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800366c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2232      	movs	r2, #50	; 0x32
 8003674:	fb02 f303 	mul.w	r3, r2, r3
 8003678:	4a1b      	ldr	r2, [pc, #108]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	0c9b      	lsrs	r3, r3, #18
 8003680:	3301      	adds	r3, #1
 8003682:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003684:	e002      	b.n	800368c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3b01      	subs	r3, #1
 800368a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800368c:	4b14      	ldr	r3, [pc, #80]	; (80036e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003698:	d102      	bne.n	80036a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1f2      	bne.n	8003686 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036a0:	4b0f      	ldr	r3, [pc, #60]	; (80036e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ac:	d110      	bne.n	80036d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e00f      	b.n	80036d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036b2:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036be:	d007      	beq.n	80036d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036c0:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036c8:	4a05      	ldr	r2, [pc, #20]	; (80036e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40007000 	.word	0x40007000
 80036e4:	20000000 	.word	0x20000000
 80036e8:	431bde83 	.word	0x431bde83

080036ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d102      	bne.n	8003700 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	f000 bc02 	b.w	8003f04 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003700:	4b96      	ldr	r3, [pc, #600]	; (800395c <HAL_RCC_OscConfig+0x270>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 030c 	and.w	r3, r3, #12
 8003708:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800370a:	4b94      	ldr	r3, [pc, #592]	; (800395c <HAL_RCC_OscConfig+0x270>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80e4 	beq.w	80038ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d007      	beq.n	8003738 <HAL_RCC_OscConfig+0x4c>
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	2b0c      	cmp	r3, #12
 800372c:	f040 808b 	bne.w	8003846 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2b01      	cmp	r3, #1
 8003734:	f040 8087 	bne.w	8003846 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003738:	4b88      	ldr	r3, [pc, #544]	; (800395c <HAL_RCC_OscConfig+0x270>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_RCC_OscConfig+0x64>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e3d9      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1a      	ldr	r2, [r3, #32]
 8003754:	4b81      	ldr	r3, [pc, #516]	; (800395c <HAL_RCC_OscConfig+0x270>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d004      	beq.n	800376a <HAL_RCC_OscConfig+0x7e>
 8003760:	4b7e      	ldr	r3, [pc, #504]	; (800395c <HAL_RCC_OscConfig+0x270>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003768:	e005      	b.n	8003776 <HAL_RCC_OscConfig+0x8a>
 800376a:	4b7c      	ldr	r3, [pc, #496]	; (800395c <HAL_RCC_OscConfig+0x270>)
 800376c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003776:	4293      	cmp	r3, r2
 8003778:	d223      	bcs.n	80037c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fd54 	bl	800422c <RCC_SetFlashLatencyFromMSIRange>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e3ba      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800378e:	4b73      	ldr	r3, [pc, #460]	; (800395c <HAL_RCC_OscConfig+0x270>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a72      	ldr	r2, [pc, #456]	; (800395c <HAL_RCC_OscConfig+0x270>)
 8003794:	f043 0308 	orr.w	r3, r3, #8
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	4b70      	ldr	r3, [pc, #448]	; (800395c <HAL_RCC_OscConfig+0x270>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	496d      	ldr	r1, [pc, #436]	; (800395c <HAL_RCC_OscConfig+0x270>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037ac:	4b6b      	ldr	r3, [pc, #428]	; (800395c <HAL_RCC_OscConfig+0x270>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	021b      	lsls	r3, r3, #8
 80037ba:	4968      	ldr	r1, [pc, #416]	; (800395c <HAL_RCC_OscConfig+0x270>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	604b      	str	r3, [r1, #4]
 80037c0:	e025      	b.n	800380e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037c2:	4b66      	ldr	r3, [pc, #408]	; (800395c <HAL_RCC_OscConfig+0x270>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a65      	ldr	r2, [pc, #404]	; (800395c <HAL_RCC_OscConfig+0x270>)
 80037c8:	f043 0308 	orr.w	r3, r3, #8
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	4b63      	ldr	r3, [pc, #396]	; (800395c <HAL_RCC_OscConfig+0x270>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	4960      	ldr	r1, [pc, #384]	; (800395c <HAL_RCC_OscConfig+0x270>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037e0:	4b5e      	ldr	r3, [pc, #376]	; (800395c <HAL_RCC_OscConfig+0x270>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	495b      	ldr	r1, [pc, #364]	; (800395c <HAL_RCC_OscConfig+0x270>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fd14 	bl	800422c <RCC_SetFlashLatencyFromMSIRange>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e37a      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800380e:	f000 fc81 	bl	8004114 <HAL_RCC_GetSysClockFreq>
 8003812:	4602      	mov	r2, r0
 8003814:	4b51      	ldr	r3, [pc, #324]	; (800395c <HAL_RCC_OscConfig+0x270>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	4950      	ldr	r1, [pc, #320]	; (8003960 <HAL_RCC_OscConfig+0x274>)
 8003820:	5ccb      	ldrb	r3, [r1, r3]
 8003822:	f003 031f 	and.w	r3, r3, #31
 8003826:	fa22 f303 	lsr.w	r3, r2, r3
 800382a:	4a4e      	ldr	r2, [pc, #312]	; (8003964 <HAL_RCC_OscConfig+0x278>)
 800382c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800382e:	4b4e      	ldr	r3, [pc, #312]	; (8003968 <HAL_RCC_OscConfig+0x27c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe fd0a 	bl	800224c <HAL_InitTick>
 8003838:	4603      	mov	r3, r0
 800383a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800383c:	7bfb      	ldrb	r3, [r7, #15]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d052      	beq.n	80038e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	e35e      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d032      	beq.n	80038b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800384e:	4b43      	ldr	r3, [pc, #268]	; (800395c <HAL_RCC_OscConfig+0x270>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a42      	ldr	r2, [pc, #264]	; (800395c <HAL_RCC_OscConfig+0x270>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800385a:	f7fe fd47 	bl	80022ec <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003862:	f7fe fd43 	bl	80022ec <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e347      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003874:	4b39      	ldr	r3, [pc, #228]	; (800395c <HAL_RCC_OscConfig+0x270>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f0      	beq.n	8003862 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003880:	4b36      	ldr	r3, [pc, #216]	; (800395c <HAL_RCC_OscConfig+0x270>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a35      	ldr	r2, [pc, #212]	; (800395c <HAL_RCC_OscConfig+0x270>)
 8003886:	f043 0308 	orr.w	r3, r3, #8
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	4b33      	ldr	r3, [pc, #204]	; (800395c <HAL_RCC_OscConfig+0x270>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	4930      	ldr	r1, [pc, #192]	; (800395c <HAL_RCC_OscConfig+0x270>)
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800389e:	4b2f      	ldr	r3, [pc, #188]	; (800395c <HAL_RCC_OscConfig+0x270>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	021b      	lsls	r3, r3, #8
 80038ac:	492b      	ldr	r1, [pc, #172]	; (800395c <HAL_RCC_OscConfig+0x270>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	604b      	str	r3, [r1, #4]
 80038b2:	e01a      	b.n	80038ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038b4:	4b29      	ldr	r3, [pc, #164]	; (800395c <HAL_RCC_OscConfig+0x270>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a28      	ldr	r2, [pc, #160]	; (800395c <HAL_RCC_OscConfig+0x270>)
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038c0:	f7fe fd14 	bl	80022ec <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038c8:	f7fe fd10 	bl	80022ec <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e314      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038da:	4b20      	ldr	r3, [pc, #128]	; (800395c <HAL_RCC_OscConfig+0x270>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f0      	bne.n	80038c8 <HAL_RCC_OscConfig+0x1dc>
 80038e6:	e000      	b.n	80038ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d073      	beq.n	80039de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d005      	beq.n	8003908 <HAL_RCC_OscConfig+0x21c>
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	2b0c      	cmp	r3, #12
 8003900:	d10e      	bne.n	8003920 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b03      	cmp	r3, #3
 8003906:	d10b      	bne.n	8003920 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003908:	4b14      	ldr	r3, [pc, #80]	; (800395c <HAL_RCC_OscConfig+0x270>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d063      	beq.n	80039dc <HAL_RCC_OscConfig+0x2f0>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d15f      	bne.n	80039dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e2f1      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003928:	d106      	bne.n	8003938 <HAL_RCC_OscConfig+0x24c>
 800392a:	4b0c      	ldr	r3, [pc, #48]	; (800395c <HAL_RCC_OscConfig+0x270>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a0b      	ldr	r2, [pc, #44]	; (800395c <HAL_RCC_OscConfig+0x270>)
 8003930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e025      	b.n	8003984 <HAL_RCC_OscConfig+0x298>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003940:	d114      	bne.n	800396c <HAL_RCC_OscConfig+0x280>
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <HAL_RCC_OscConfig+0x270>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a05      	ldr	r2, [pc, #20]	; (800395c <HAL_RCC_OscConfig+0x270>)
 8003948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	4b03      	ldr	r3, [pc, #12]	; (800395c <HAL_RCC_OscConfig+0x270>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a02      	ldr	r2, [pc, #8]	; (800395c <HAL_RCC_OscConfig+0x270>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e013      	b.n	8003984 <HAL_RCC_OscConfig+0x298>
 800395c:	40021000 	.word	0x40021000
 8003960:	08006734 	.word	0x08006734
 8003964:	20000000 	.word	0x20000000
 8003968:	20000004 	.word	0x20000004
 800396c:	4ba0      	ldr	r3, [pc, #640]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a9f      	ldr	r2, [pc, #636]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	4b9d      	ldr	r3, [pc, #628]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a9c      	ldr	r2, [pc, #624]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 800397e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d013      	beq.n	80039b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398c:	f7fe fcae 	bl	80022ec <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003994:	f7fe fcaa 	bl	80022ec <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b64      	cmp	r3, #100	; 0x64
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e2ae      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039a6:	4b92      	ldr	r3, [pc, #584]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0x2a8>
 80039b2:	e014      	b.n	80039de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fe fc9a 	bl	80022ec <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039bc:	f7fe fc96 	bl	80022ec <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b64      	cmp	r3, #100	; 0x64
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e29a      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ce:	4b88      	ldr	r3, [pc, #544]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x2d0>
 80039da:	e000      	b.n	80039de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d060      	beq.n	8003aac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_OscConfig+0x310>
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	2b0c      	cmp	r3, #12
 80039f4:	d119      	bne.n	8003a2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d116      	bne.n	8003a2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039fc:	4b7c      	ldr	r3, [pc, #496]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_RCC_OscConfig+0x328>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e277      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a14:	4b76      	ldr	r3, [pc, #472]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	061b      	lsls	r3, r3, #24
 8003a22:	4973      	ldr	r1, [pc, #460]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a28:	e040      	b.n	8003aac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d023      	beq.n	8003a7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a32:	4b6f      	ldr	r3, [pc, #444]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a6e      	ldr	r2, [pc, #440]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3e:	f7fe fc55 	bl	80022ec <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a46:	f7fe fc51 	bl	80022ec <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e255      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a58:	4b65      	ldr	r3, [pc, #404]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a64:	4b62      	ldr	r3, [pc, #392]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	061b      	lsls	r3, r3, #24
 8003a72:	495f      	ldr	r1, [pc, #380]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	604b      	str	r3, [r1, #4]
 8003a78:	e018      	b.n	8003aac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7a:	4b5d      	ldr	r3, [pc, #372]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a5c      	ldr	r2, [pc, #368]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a86:	f7fe fc31 	bl	80022ec <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8e:	f7fe fc2d 	bl	80022ec <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e231      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aa0:	4b53      	ldr	r3, [pc, #332]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f0      	bne.n	8003a8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d03c      	beq.n	8003b32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01c      	beq.n	8003afa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ac0:	4b4b      	ldr	r3, [pc, #300]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac6:	4a4a      	ldr	r2, [pc, #296]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad0:	f7fe fc0c 	bl	80022ec <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad8:	f7fe fc08 	bl	80022ec <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e20c      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003aea:	4b41      	ldr	r3, [pc, #260]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0ef      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x3ec>
 8003af8:	e01b      	b.n	8003b32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003afa:	4b3d      	ldr	r3, [pc, #244]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b00:	4a3b      	ldr	r2, [pc, #236]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003b02:	f023 0301 	bic.w	r3, r3, #1
 8003b06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0a:	f7fe fbef 	bl	80022ec <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b12:	f7fe fbeb 	bl	80022ec <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e1ef      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b24:	4b32      	ldr	r3, [pc, #200]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1ef      	bne.n	8003b12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 80a6 	beq.w	8003c8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b40:	2300      	movs	r3, #0
 8003b42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b44:	4b2a      	ldr	r3, [pc, #168]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10d      	bne.n	8003b6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b50:	4b27      	ldr	r3, [pc, #156]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b54:	4a26      	ldr	r2, [pc, #152]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b5c:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b6c:	4b21      	ldr	r3, [pc, #132]	; (8003bf4 <HAL_RCC_OscConfig+0x508>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d118      	bne.n	8003baa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b78:	4b1e      	ldr	r3, [pc, #120]	; (8003bf4 <HAL_RCC_OscConfig+0x508>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a1d      	ldr	r2, [pc, #116]	; (8003bf4 <HAL_RCC_OscConfig+0x508>)
 8003b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b84:	f7fe fbb2 	bl	80022ec <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8c:	f7fe fbae 	bl	80022ec <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e1b2      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b9e:	4b15      	ldr	r3, [pc, #84]	; (8003bf4 <HAL_RCC_OscConfig+0x508>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d108      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x4d8>
 8003bb2:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb8:	4a0d      	ldr	r2, [pc, #52]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bc2:	e029      	b.n	8003c18 <HAL_RCC_OscConfig+0x52c>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b05      	cmp	r3, #5
 8003bca:	d115      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x50c>
 8003bcc:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd2:	4a07      	ldr	r2, [pc, #28]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003bd4:	f043 0304 	orr.w	r3, r3, #4
 8003bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bdc:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be2:	4a03      	ldr	r2, [pc, #12]	; (8003bf0 <HAL_RCC_OscConfig+0x504>)
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bec:	e014      	b.n	8003c18 <HAL_RCC_OscConfig+0x52c>
 8003bee:	bf00      	nop
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	40007000 	.word	0x40007000
 8003bf8:	4b9a      	ldr	r3, [pc, #616]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfe:	4a99      	ldr	r2, [pc, #612]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003c00:	f023 0301 	bic.w	r3, r3, #1
 8003c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c08:	4b96      	ldr	r3, [pc, #600]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	4a95      	ldr	r2, [pc, #596]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003c10:	f023 0304 	bic.w	r3, r3, #4
 8003c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d016      	beq.n	8003c4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7fe fb64 	bl	80022ec <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c28:	f7fe fb60 	bl	80022ec <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e162      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c3e:	4b89      	ldr	r3, [pc, #548]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0ed      	beq.n	8003c28 <HAL_RCC_OscConfig+0x53c>
 8003c4c:	e015      	b.n	8003c7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4e:	f7fe fb4d 	bl	80022ec <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c54:	e00a      	b.n	8003c6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c56:	f7fe fb49 	bl	80022ec <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e14b      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c6c:	4b7d      	ldr	r3, [pc, #500]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1ed      	bne.n	8003c56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c7a:	7ffb      	ldrb	r3, [r7, #31]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d105      	bne.n	8003c8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c80:	4b78      	ldr	r3, [pc, #480]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c84:	4a77      	ldr	r2, [pc, #476]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0320 	and.w	r3, r3, #32
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d03c      	beq.n	8003d12 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d01c      	beq.n	8003cda <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ca0:	4b70      	ldr	r3, [pc, #448]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003ca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ca6:	4a6f      	ldr	r2, [pc, #444]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb0:	f7fe fb1c 	bl	80022ec <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cb8:	f7fe fb18 	bl	80022ec <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e11c      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cca:	4b66      	ldr	r3, [pc, #408]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003ccc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0ef      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x5cc>
 8003cd8:	e01b      	b.n	8003d12 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cda:	4b62      	ldr	r3, [pc, #392]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003cdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ce0:	4a60      	ldr	r2, [pc, #384]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cea:	f7fe faff 	bl	80022ec <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cf2:	f7fe fafb 	bl	80022ec <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e0ff      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d04:	4b57      	ldr	r3, [pc, #348]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1ef      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80f3 	beq.w	8003f02 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	f040 80c9 	bne.w	8003eb8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d26:	4b4f      	ldr	r3, [pc, #316]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f003 0203 	and.w	r2, r3, #3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d12c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	3b01      	subs	r3, #1
 8003d46:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d123      	bne.n	8003d94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d56:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d11b      	bne.n	8003d94 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d66:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d113      	bne.n	8003d94 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	085b      	lsrs	r3, r3, #1
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d109      	bne.n	8003d94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	085b      	lsrs	r3, r3, #1
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d06b      	beq.n	8003e6c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	2b0c      	cmp	r3, #12
 8003d98:	d062      	beq.n	8003e60 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d9a:	4b32      	ldr	r3, [pc, #200]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e0ac      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003daa:	4b2e      	ldr	r3, [pc, #184]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a2d      	ldr	r2, [pc, #180]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003db0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003db6:	f7fe fa99 	bl	80022ec <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dbe:	f7fe fa95 	bl	80022ec <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e099      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd0:	4b24      	ldr	r3, [pc, #144]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f0      	bne.n	8003dbe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ddc:	4b21      	ldr	r3, [pc, #132]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	4b21      	ldr	r3, [pc, #132]	; (8003e68 <HAL_RCC_OscConfig+0x77c>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003dec:	3a01      	subs	r2, #1
 8003dee:	0112      	lsls	r2, r2, #4
 8003df0:	4311      	orrs	r1, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003df6:	0212      	lsls	r2, r2, #8
 8003df8:	4311      	orrs	r1, r2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003dfe:	0852      	lsrs	r2, r2, #1
 8003e00:	3a01      	subs	r2, #1
 8003e02:	0552      	lsls	r2, r2, #21
 8003e04:	4311      	orrs	r1, r2
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e0a:	0852      	lsrs	r2, r2, #1
 8003e0c:	3a01      	subs	r2, #1
 8003e0e:	0652      	lsls	r2, r2, #25
 8003e10:	4311      	orrs	r1, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e16:	06d2      	lsls	r2, r2, #27
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	4912      	ldr	r1, [pc, #72]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e20:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a0f      	ldr	r2, [pc, #60]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e2c:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4a0c      	ldr	r2, [pc, #48]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e38:	f7fe fa58 	bl	80022ec <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e40:	f7fe fa54 	bl	80022ec <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e058      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e52:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <HAL_RCC_OscConfig+0x778>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e5e:	e050      	b.n	8003f02 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e04f      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
 8003e64:	40021000 	.word	0x40021000
 8003e68:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e6c:	4b27      	ldr	r3, [pc, #156]	; (8003f0c <HAL_RCC_OscConfig+0x820>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d144      	bne.n	8003f02 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e78:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <HAL_RCC_OscConfig+0x820>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a23      	ldr	r2, [pc, #140]	; (8003f0c <HAL_RCC_OscConfig+0x820>)
 8003e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e84:	4b21      	ldr	r3, [pc, #132]	; (8003f0c <HAL_RCC_OscConfig+0x820>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	4a20      	ldr	r2, [pc, #128]	; (8003f0c <HAL_RCC_OscConfig+0x820>)
 8003e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e90:	f7fe fa2c 	bl	80022ec <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e98:	f7fe fa28 	bl	80022ec <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e02c      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eaa:	4b18      	ldr	r3, [pc, #96]	; (8003f0c <HAL_RCC_OscConfig+0x820>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x7ac>
 8003eb6:	e024      	b.n	8003f02 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b0c      	cmp	r3, #12
 8003ebc:	d01f      	beq.n	8003efe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ebe:	4b13      	ldr	r3, [pc, #76]	; (8003f0c <HAL_RCC_OscConfig+0x820>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a12      	ldr	r2, [pc, #72]	; (8003f0c <HAL_RCC_OscConfig+0x820>)
 8003ec4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ec8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eca:	f7fe fa0f 	bl	80022ec <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed2:	f7fe fa0b 	bl	80022ec <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e00f      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee4:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <HAL_RCC_OscConfig+0x820>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f0      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003ef0:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <HAL_RCC_OscConfig+0x820>)
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	4905      	ldr	r1, [pc, #20]	; (8003f0c <HAL_RCC_OscConfig+0x820>)
 8003ef6:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <HAL_RCC_OscConfig+0x824>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	60cb      	str	r3, [r1, #12]
 8003efc:	e001      	b.n	8003f02 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3720      	adds	r7, #32
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	feeefffc 	.word	0xfeeefffc

08003f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0e7      	b.n	80040f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f28:	4b75      	ldr	r3, [pc, #468]	; (8004100 <HAL_RCC_ClockConfig+0x1ec>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d910      	bls.n	8003f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f36:	4b72      	ldr	r3, [pc, #456]	; (8004100 <HAL_RCC_ClockConfig+0x1ec>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 0207 	bic.w	r2, r3, #7
 8003f3e:	4970      	ldr	r1, [pc, #448]	; (8004100 <HAL_RCC_ClockConfig+0x1ec>)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f46:	4b6e      	ldr	r3, [pc, #440]	; (8004100 <HAL_RCC_ClockConfig+0x1ec>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0cf      	b.n	80040f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d010      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	4b66      	ldr	r3, [pc, #408]	; (8004104 <HAL_RCC_ClockConfig+0x1f0>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d908      	bls.n	8003f86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f74:	4b63      	ldr	r3, [pc, #396]	; (8004104 <HAL_RCC_ClockConfig+0x1f0>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	4960      	ldr	r1, [pc, #384]	; (8004104 <HAL_RCC_ClockConfig+0x1f0>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d04c      	beq.n	800402c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f9a:	4b5a      	ldr	r3, [pc, #360]	; (8004104 <HAL_RCC_ClockConfig+0x1f0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d121      	bne.n	8003fea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e0a6      	b.n	80040f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d107      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fb2:	4b54      	ldr	r3, [pc, #336]	; (8004104 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d115      	bne.n	8003fea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e09a      	b.n	80040f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d107      	bne.n	8003fda <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fca:	4b4e      	ldr	r3, [pc, #312]	; (8004104 <HAL_RCC_ClockConfig+0x1f0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e08e      	b.n	80040f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fda:	4b4a      	ldr	r3, [pc, #296]	; (8004104 <HAL_RCC_ClockConfig+0x1f0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e086      	b.n	80040f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fea:	4b46      	ldr	r3, [pc, #280]	; (8004104 <HAL_RCC_ClockConfig+0x1f0>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f023 0203 	bic.w	r2, r3, #3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	4943      	ldr	r1, [pc, #268]	; (8004104 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ffc:	f7fe f976 	bl	80022ec <HAL_GetTick>
 8004000:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004002:	e00a      	b.n	800401a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004004:	f7fe f972 	bl	80022ec <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e06e      	b.n	80040f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401a:	4b3a      	ldr	r3, [pc, #232]	; (8004104 <HAL_RCC_ClockConfig+0x1f0>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 020c 	and.w	r2, r3, #12
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	429a      	cmp	r2, r3
 800402a:	d1eb      	bne.n	8004004 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d010      	beq.n	800405a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	4b31      	ldr	r3, [pc, #196]	; (8004104 <HAL_RCC_ClockConfig+0x1f0>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004044:	429a      	cmp	r2, r3
 8004046:	d208      	bcs.n	800405a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004048:	4b2e      	ldr	r3, [pc, #184]	; (8004104 <HAL_RCC_ClockConfig+0x1f0>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	492b      	ldr	r1, [pc, #172]	; (8004104 <HAL_RCC_ClockConfig+0x1f0>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800405a:	4b29      	ldr	r3, [pc, #164]	; (8004100 <HAL_RCC_ClockConfig+0x1ec>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d210      	bcs.n	800408a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004068:	4b25      	ldr	r3, [pc, #148]	; (8004100 <HAL_RCC_ClockConfig+0x1ec>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f023 0207 	bic.w	r2, r3, #7
 8004070:	4923      	ldr	r1, [pc, #140]	; (8004100 <HAL_RCC_ClockConfig+0x1ec>)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	4313      	orrs	r3, r2
 8004076:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004078:	4b21      	ldr	r3, [pc, #132]	; (8004100 <HAL_RCC_ClockConfig+0x1ec>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d001      	beq.n	800408a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e036      	b.n	80040f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	d008      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004096:	4b1b      	ldr	r3, [pc, #108]	; (8004104 <HAL_RCC_ClockConfig+0x1f0>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	4918      	ldr	r1, [pc, #96]	; (8004104 <HAL_RCC_ClockConfig+0x1f0>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0308 	and.w	r3, r3, #8
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d009      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040b4:	4b13      	ldr	r3, [pc, #76]	; (8004104 <HAL_RCC_ClockConfig+0x1f0>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	4910      	ldr	r1, [pc, #64]	; (8004104 <HAL_RCC_ClockConfig+0x1f0>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040c8:	f000 f824 	bl	8004114 <HAL_RCC_GetSysClockFreq>
 80040cc:	4602      	mov	r2, r0
 80040ce:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <HAL_RCC_ClockConfig+0x1f0>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	490b      	ldr	r1, [pc, #44]	; (8004108 <HAL_RCC_ClockConfig+0x1f4>)
 80040da:	5ccb      	ldrb	r3, [r1, r3]
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	fa22 f303 	lsr.w	r3, r2, r3
 80040e4:	4a09      	ldr	r2, [pc, #36]	; (800410c <HAL_RCC_ClockConfig+0x1f8>)
 80040e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040e8:	4b09      	ldr	r3, [pc, #36]	; (8004110 <HAL_RCC_ClockConfig+0x1fc>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7fe f8ad 	bl	800224c <HAL_InitTick>
 80040f2:	4603      	mov	r3, r0
 80040f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80040f6:	7afb      	ldrb	r3, [r7, #11]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40022000 	.word	0x40022000
 8004104:	40021000 	.word	0x40021000
 8004108:	08006734 	.word	0x08006734
 800410c:	20000000 	.word	0x20000000
 8004110:	20000004 	.word	0x20000004

08004114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004114:	b480      	push	{r7}
 8004116:	b089      	sub	sp, #36	; 0x24
 8004118:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	61fb      	str	r3, [r7, #28]
 800411e:	2300      	movs	r3, #0
 8004120:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004122:	4b3e      	ldr	r3, [pc, #248]	; (800421c <HAL_RCC_GetSysClockFreq+0x108>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 030c 	and.w	r3, r3, #12
 800412a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800412c:	4b3b      	ldr	r3, [pc, #236]	; (800421c <HAL_RCC_GetSysClockFreq+0x108>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_RCC_GetSysClockFreq+0x34>
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	2b0c      	cmp	r3, #12
 8004140:	d121      	bne.n	8004186 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d11e      	bne.n	8004186 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004148:	4b34      	ldr	r3, [pc, #208]	; (800421c <HAL_RCC_GetSysClockFreq+0x108>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d107      	bne.n	8004164 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004154:	4b31      	ldr	r3, [pc, #196]	; (800421c <HAL_RCC_GetSysClockFreq+0x108>)
 8004156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800415a:	0a1b      	lsrs	r3, r3, #8
 800415c:	f003 030f 	and.w	r3, r3, #15
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	e005      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004164:	4b2d      	ldr	r3, [pc, #180]	; (800421c <HAL_RCC_GetSysClockFreq+0x108>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	091b      	lsrs	r3, r3, #4
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004170:	4a2b      	ldr	r2, [pc, #172]	; (8004220 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004178:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10d      	bne.n	800419c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004184:	e00a      	b.n	800419c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	2b04      	cmp	r3, #4
 800418a:	d102      	bne.n	8004192 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800418c:	4b25      	ldr	r3, [pc, #148]	; (8004224 <HAL_RCC_GetSysClockFreq+0x110>)
 800418e:	61bb      	str	r3, [r7, #24]
 8004190:	e004      	b.n	800419c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2b08      	cmp	r3, #8
 8004196:	d101      	bne.n	800419c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004198:	4b23      	ldr	r3, [pc, #140]	; (8004228 <HAL_RCC_GetSysClockFreq+0x114>)
 800419a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2b0c      	cmp	r3, #12
 80041a0:	d134      	bne.n	800420c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041a2:	4b1e      	ldr	r3, [pc, #120]	; (800421c <HAL_RCC_GetSysClockFreq+0x108>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d003      	beq.n	80041ba <HAL_RCC_GetSysClockFreq+0xa6>
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d003      	beq.n	80041c0 <HAL_RCC_GetSysClockFreq+0xac>
 80041b8:	e005      	b.n	80041c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041ba:	4b1a      	ldr	r3, [pc, #104]	; (8004224 <HAL_RCC_GetSysClockFreq+0x110>)
 80041bc:	617b      	str	r3, [r7, #20]
      break;
 80041be:	e005      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041c0:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_RCC_GetSysClockFreq+0x114>)
 80041c2:	617b      	str	r3, [r7, #20]
      break;
 80041c4:	e002      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	617b      	str	r3, [r7, #20]
      break;
 80041ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041cc:	4b13      	ldr	r3, [pc, #76]	; (800421c <HAL_RCC_GetSysClockFreq+0x108>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	091b      	lsrs	r3, r3, #4
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	3301      	adds	r3, #1
 80041d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041da:	4b10      	ldr	r3, [pc, #64]	; (800421c <HAL_RCC_GetSysClockFreq+0x108>)
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	0a1b      	lsrs	r3, r3, #8
 80041e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	fb03 f202 	mul.w	r2, r3, r2
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <HAL_RCC_GetSysClockFreq+0x108>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	0e5b      	lsrs	r3, r3, #25
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	3301      	adds	r3, #1
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	fbb2 f3f3 	udiv	r3, r2, r3
 800420a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800420c:	69bb      	ldr	r3, [r7, #24]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3724      	adds	r7, #36	; 0x24
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40021000 	.word	0x40021000
 8004220:	08006744 	.word	0x08006744
 8004224:	00f42400 	.word	0x00f42400
 8004228:	016e3600 	.word	0x016e3600

0800422c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004234:	2300      	movs	r3, #0
 8004236:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004238:	4b2a      	ldr	r3, [pc, #168]	; (80042e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004244:	f7ff f9ee 	bl	8003624 <HAL_PWREx_GetVoltageRange>
 8004248:	6178      	str	r0, [r7, #20]
 800424a:	e014      	b.n	8004276 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800424c:	4b25      	ldr	r3, [pc, #148]	; (80042e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800424e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004250:	4a24      	ldr	r2, [pc, #144]	; (80042e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004256:	6593      	str	r3, [r2, #88]	; 0x58
 8004258:	4b22      	ldr	r3, [pc, #136]	; (80042e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800425a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004264:	f7ff f9de 	bl	8003624 <HAL_PWREx_GetVoltageRange>
 8004268:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800426a:	4b1e      	ldr	r3, [pc, #120]	; (80042e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800426c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426e:	4a1d      	ldr	r2, [pc, #116]	; (80042e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004274:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800427c:	d10b      	bne.n	8004296 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b80      	cmp	r3, #128	; 0x80
 8004282:	d919      	bls.n	80042b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2ba0      	cmp	r3, #160	; 0xa0
 8004288:	d902      	bls.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800428a:	2302      	movs	r3, #2
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	e013      	b.n	80042b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004290:	2301      	movs	r3, #1
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	e010      	b.n	80042b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b80      	cmp	r3, #128	; 0x80
 800429a:	d902      	bls.n	80042a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800429c:	2303      	movs	r3, #3
 800429e:	613b      	str	r3, [r7, #16]
 80042a0:	e00a      	b.n	80042b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b80      	cmp	r3, #128	; 0x80
 80042a6:	d102      	bne.n	80042ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042a8:	2302      	movs	r3, #2
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	e004      	b.n	80042b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b70      	cmp	r3, #112	; 0x70
 80042b2:	d101      	bne.n	80042b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042b4:	2301      	movs	r3, #1
 80042b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042b8:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f023 0207 	bic.w	r2, r3, #7
 80042c0:	4909      	ldr	r1, [pc, #36]	; (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042c8:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d001      	beq.n	80042da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40021000 	.word	0x40021000
 80042e8:	40022000 	.word	0x40022000

080042ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042f4:	2300      	movs	r3, #0
 80042f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042f8:	2300      	movs	r3, #0
 80042fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004304:	2b00      	cmp	r3, #0
 8004306:	d031      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004310:	d01a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004312:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004316:	d814      	bhi.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004318:	2b00      	cmp	r3, #0
 800431a:	d009      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800431c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004320:	d10f      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004322:	4b5d      	ldr	r3, [pc, #372]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	4a5c      	ldr	r2, [pc, #368]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800432e:	e00c      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3304      	adds	r3, #4
 8004334:	2100      	movs	r1, #0
 8004336:	4618      	mov	r0, r3
 8004338:	f000 f9ce 	bl	80046d8 <RCCEx_PLLSAI1_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004340:	e003      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	74fb      	strb	r3, [r7, #19]
      break;
 8004346:	e000      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800434a:	7cfb      	ldrb	r3, [r7, #19]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10b      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004350:	4b51      	ldr	r3, [pc, #324]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435e:	494e      	ldr	r1, [pc, #312]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004366:	e001      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004368:	7cfb      	ldrb	r3, [r7, #19]
 800436a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 809e 	beq.w	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800437a:	2300      	movs	r3, #0
 800437c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800437e:	4b46      	ldr	r3, [pc, #280]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800438e:	2300      	movs	r3, #0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00d      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004394:	4b40      	ldr	r3, [pc, #256]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004398:	4a3f      	ldr	r2, [pc, #252]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800439a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800439e:	6593      	str	r3, [r2, #88]	; 0x58
 80043a0:	4b3d      	ldr	r3, [pc, #244]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ac:	2301      	movs	r3, #1
 80043ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043b0:	4b3a      	ldr	r3, [pc, #232]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a39      	ldr	r2, [pc, #228]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043bc:	f7fd ff96 	bl	80022ec <HAL_GetTick>
 80043c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043c2:	e009      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c4:	f7fd ff92 	bl	80022ec <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d902      	bls.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	74fb      	strb	r3, [r7, #19]
        break;
 80043d6:	e005      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043d8:	4b30      	ldr	r3, [pc, #192]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0ef      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80043e4:	7cfb      	ldrb	r3, [r7, #19]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d15a      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043ea:	4b2b      	ldr	r3, [pc, #172]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d01e      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	429a      	cmp	r2, r3
 8004404:	d019      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004406:	4b24      	ldr	r3, [pc, #144]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004410:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004412:	4b21      	ldr	r3, [pc, #132]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004418:	4a1f      	ldr	r2, [pc, #124]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800441a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004422:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004428:	4a1b      	ldr	r2, [pc, #108]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800442a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800442e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004432:	4a19      	ldr	r2, [pc, #100]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d016      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fd ff52 	bl	80022ec <HAL_GetTick>
 8004448:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800444a:	e00b      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444c:	f7fd ff4e 	bl	80022ec <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f241 3288 	movw	r2, #5000	; 0x1388
 800445a:	4293      	cmp	r3, r2
 800445c:	d902      	bls.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	74fb      	strb	r3, [r7, #19]
            break;
 8004462:	e006      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004464:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0ec      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004472:	7cfb      	ldrb	r3, [r7, #19]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10b      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004478:	4b07      	ldr	r3, [pc, #28]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004486:	4904      	ldr	r1, [pc, #16]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800448e:	e009      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004490:	7cfb      	ldrb	r3, [r7, #19]
 8004492:	74bb      	strb	r3, [r7, #18]
 8004494:	e006      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000
 800449c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a0:	7cfb      	ldrb	r3, [r7, #19]
 80044a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044a4:	7c7b      	ldrb	r3, [r7, #17]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d105      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044aa:	4b8a      	ldr	r3, [pc, #552]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ae:	4a89      	ldr	r2, [pc, #548]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044c2:	4b84      	ldr	r3, [pc, #528]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c8:	f023 0203 	bic.w	r2, r3, #3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	4980      	ldr	r1, [pc, #512]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044e4:	4b7b      	ldr	r3, [pc, #492]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	f023 020c 	bic.w	r2, r3, #12
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	4978      	ldr	r1, [pc, #480]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004506:	4b73      	ldr	r3, [pc, #460]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004514:	496f      	ldr	r1, [pc, #444]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004528:	4b6a      	ldr	r3, [pc, #424]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004536:	4967      	ldr	r1, [pc, #412]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004538:	4313      	orrs	r3, r2
 800453a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800454a:	4b62      	ldr	r3, [pc, #392]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004550:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	495e      	ldr	r1, [pc, #376]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800456c:	4b59      	ldr	r3, [pc, #356]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004572:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	4956      	ldr	r1, [pc, #344]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800458e:	4b51      	ldr	r3, [pc, #324]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004594:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459c:	494d      	ldr	r1, [pc, #308]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d028      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045b0:	4b48      	ldr	r3, [pc, #288]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	4945      	ldr	r1, [pc, #276]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045ce:	d106      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045d0:	4b40      	ldr	r3, [pc, #256]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	4a3f      	ldr	r2, [pc, #252]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045da:	60d3      	str	r3, [r2, #12]
 80045dc:	e011      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045e6:	d10c      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	2101      	movs	r1, #1
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 f872 	bl	80046d8 <RCCEx_PLLSAI1_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045f8:	7cfb      	ldrb	r3, [r7, #19]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80045fe:	7cfb      	ldrb	r3, [r7, #19]
 8004600:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d028      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800460e:	4b31      	ldr	r3, [pc, #196]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004614:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461c:	492d      	ldr	r1, [pc, #180]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800462c:	d106      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800462e:	4b29      	ldr	r3, [pc, #164]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	4a28      	ldr	r2, [pc, #160]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004638:	60d3      	str	r3, [r2, #12]
 800463a:	e011      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004640:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004644:	d10c      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3304      	adds	r3, #4
 800464a:	2101      	movs	r1, #1
 800464c:	4618      	mov	r0, r3
 800464e:	f000 f843 	bl	80046d8 <RCCEx_PLLSAI1_Config>
 8004652:	4603      	mov	r3, r0
 8004654:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004656:	7cfb      	ldrb	r3, [r7, #19]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800465c:	7cfb      	ldrb	r3, [r7, #19]
 800465e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01c      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800466c:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004672:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467a:	4916      	ldr	r1, [pc, #88]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800468a:	d10c      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3304      	adds	r3, #4
 8004690:	2102      	movs	r1, #2
 8004692:	4618      	mov	r0, r3
 8004694:	f000 f820 	bl	80046d8 <RCCEx_PLLSAI1_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800469c:	7cfb      	ldrb	r3, [r7, #19]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80046a2:	7cfb      	ldrb	r3, [r7, #19]
 80046a4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046b2:	4b08      	ldr	r3, [pc, #32]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c0:	4904      	ldr	r1, [pc, #16]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40021000 	.word	0x40021000

080046d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046e6:	4b74      	ldr	r3, [pc, #464]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d018      	beq.n	8004724 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046f2:	4b71      	ldr	r3, [pc, #452]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f003 0203 	and.w	r2, r3, #3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d10d      	bne.n	800471e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
       ||
 8004706:	2b00      	cmp	r3, #0
 8004708:	d009      	beq.n	800471e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800470a:	4b6b      	ldr	r3, [pc, #428]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	091b      	lsrs	r3, r3, #4
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
       ||
 800471a:	429a      	cmp	r2, r3
 800471c:	d047      	beq.n	80047ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	73fb      	strb	r3, [r7, #15]
 8004722:	e044      	b.n	80047ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d018      	beq.n	800475e <RCCEx_PLLSAI1_Config+0x86>
 800472c:	2b03      	cmp	r3, #3
 800472e:	d825      	bhi.n	800477c <RCCEx_PLLSAI1_Config+0xa4>
 8004730:	2b01      	cmp	r3, #1
 8004732:	d002      	beq.n	800473a <RCCEx_PLLSAI1_Config+0x62>
 8004734:	2b02      	cmp	r3, #2
 8004736:	d009      	beq.n	800474c <RCCEx_PLLSAI1_Config+0x74>
 8004738:	e020      	b.n	800477c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800473a:	4b5f      	ldr	r3, [pc, #380]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d11d      	bne.n	8004782 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800474a:	e01a      	b.n	8004782 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800474c:	4b5a      	ldr	r3, [pc, #360]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004754:	2b00      	cmp	r3, #0
 8004756:	d116      	bne.n	8004786 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800475c:	e013      	b.n	8004786 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800475e:	4b56      	ldr	r3, [pc, #344]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10f      	bne.n	800478a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800476a:	4b53      	ldr	r3, [pc, #332]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d109      	bne.n	800478a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800477a:	e006      	b.n	800478a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
      break;
 8004780:	e004      	b.n	800478c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004782:	bf00      	nop
 8004784:	e002      	b.n	800478c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004786:	bf00      	nop
 8004788:	e000      	b.n	800478c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800478a:	bf00      	nop
    }

    if(status == HAL_OK)
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10d      	bne.n	80047ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004792:	4b49      	ldr	r3, [pc, #292]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6819      	ldr	r1, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	430b      	orrs	r3, r1
 80047a8:	4943      	ldr	r1, [pc, #268]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d17c      	bne.n	80048ae <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047b4:	4b40      	ldr	r3, [pc, #256]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a3f      	ldr	r2, [pc, #252]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c0:	f7fd fd94 	bl	80022ec <HAL_GetTick>
 80047c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047c6:	e009      	b.n	80047dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047c8:	f7fd fd90 	bl	80022ec <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d902      	bls.n	80047dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	73fb      	strb	r3, [r7, #15]
        break;
 80047da:	e005      	b.n	80047e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047dc:	4b36      	ldr	r3, [pc, #216]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1ef      	bne.n	80047c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d15f      	bne.n	80048ae <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d110      	bne.n	8004816 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047f4:	4b30      	ldr	r3, [pc, #192]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80047fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6892      	ldr	r2, [r2, #8]
 8004804:	0211      	lsls	r1, r2, #8
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	68d2      	ldr	r2, [r2, #12]
 800480a:	06d2      	lsls	r2, r2, #27
 800480c:	430a      	orrs	r2, r1
 800480e:	492a      	ldr	r1, [pc, #168]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004810:	4313      	orrs	r3, r2
 8004812:	610b      	str	r3, [r1, #16]
 8004814:	e027      	b.n	8004866 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d112      	bne.n	8004842 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800481c:	4b26      	ldr	r3, [pc, #152]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004824:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6892      	ldr	r2, [r2, #8]
 800482c:	0211      	lsls	r1, r2, #8
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6912      	ldr	r2, [r2, #16]
 8004832:	0852      	lsrs	r2, r2, #1
 8004834:	3a01      	subs	r2, #1
 8004836:	0552      	lsls	r2, r2, #21
 8004838:	430a      	orrs	r2, r1
 800483a:	491f      	ldr	r1, [pc, #124]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800483c:	4313      	orrs	r3, r2
 800483e:	610b      	str	r3, [r1, #16]
 8004840:	e011      	b.n	8004866 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004842:	4b1d      	ldr	r3, [pc, #116]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800484a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6892      	ldr	r2, [r2, #8]
 8004852:	0211      	lsls	r1, r2, #8
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6952      	ldr	r2, [r2, #20]
 8004858:	0852      	lsrs	r2, r2, #1
 800485a:	3a01      	subs	r2, #1
 800485c:	0652      	lsls	r2, r2, #25
 800485e:	430a      	orrs	r2, r1
 8004860:	4915      	ldr	r1, [pc, #84]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004862:	4313      	orrs	r3, r2
 8004864:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004866:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a13      	ldr	r2, [pc, #76]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800486c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004870:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004872:	f7fd fd3b 	bl	80022ec <HAL_GetTick>
 8004876:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004878:	e009      	b.n	800488e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800487a:	f7fd fd37 	bl	80022ec <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d902      	bls.n	800488e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	73fb      	strb	r3, [r7, #15]
          break;
 800488c:	e005      	b.n	800489a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800488e:	4b0a      	ldr	r3, [pc, #40]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0ef      	beq.n	800487a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d106      	bne.n	80048ae <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	4903      	ldr	r1, [pc, #12]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40021000 	.word	0x40021000

080048bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e095      	b.n	80049fa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d108      	bne.n	80048e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048de:	d009      	beq.n	80048f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	61da      	str	r2, [r3, #28]
 80048e6:	e005      	b.n	80048f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fd fa04 	bl	8001d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800492a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004934:	d902      	bls.n	800493c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	e002      	b.n	8004942 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800493c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004940:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800494a:	d007      	beq.n	800495c <HAL_SPI_Init+0xa0>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004954:	d002      	beq.n	800495c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499e:	ea42 0103 	orr.w	r1, r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	0c1b      	lsrs	r3, r3, #16
 80049b8:	f003 0204 	and.w	r2, r3, #4
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049d8:	ea42 0103 	orr.w	r1, r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b088      	sub	sp, #32
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	603b      	str	r3, [r7, #0]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_SPI_Transmit+0x22>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e158      	b.n	8004cd6 <HAL_SPI_Transmit+0x2d4>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a2c:	f7fd fc5e 	bl	80022ec <HAL_GetTick>
 8004a30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d002      	beq.n	8004a48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a42:	2302      	movs	r3, #2
 8004a44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a46:	e13d      	b.n	8004cc4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HAL_SPI_Transmit+0x52>
 8004a4e:	88fb      	ldrh	r3, [r7, #6]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d102      	bne.n	8004a5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a58:	e134      	b.n	8004cc4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2203      	movs	r2, #3
 8004a5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	88fa      	ldrh	r2, [r7, #6]
 8004a72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	88fa      	ldrh	r2, [r7, #6]
 8004a78:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aa4:	d10f      	bne.n	8004ac6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ab4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ac4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad0:	2b40      	cmp	r3, #64	; 0x40
 8004ad2:	d007      	beq.n	8004ae4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ae2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004aec:	d94b      	bls.n	8004b86 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <HAL_SPI_Transmit+0xfa>
 8004af6:	8afb      	ldrh	r3, [r7, #22]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d13e      	bne.n	8004b7a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	881a      	ldrh	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	1c9a      	adds	r2, r3, #2
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b20:	e02b      	b.n	8004b7a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d112      	bne.n	8004b56 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	881a      	ldrh	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	1c9a      	adds	r2, r3, #2
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b54:	e011      	b.n	8004b7a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b56:	f7fd fbc9 	bl	80022ec <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d803      	bhi.n	8004b6e <HAL_SPI_Transmit+0x16c>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b6c:	d102      	bne.n	8004b74 <HAL_SPI_Transmit+0x172>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d102      	bne.n	8004b7a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b78:	e0a4      	b.n	8004cc4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1ce      	bne.n	8004b22 <HAL_SPI_Transmit+0x120>
 8004b84:	e07c      	b.n	8004c80 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <HAL_SPI_Transmit+0x192>
 8004b8e:	8afb      	ldrh	r3, [r7, #22]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d170      	bne.n	8004c76 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d912      	bls.n	8004bc4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba2:	881a      	ldrh	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	1c9a      	adds	r2, r3, #2
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b02      	subs	r3, #2
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bc2:	e058      	b.n	8004c76 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	330c      	adds	r3, #12
 8004bce:	7812      	ldrb	r2, [r2, #0]
 8004bd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004bea:	e044      	b.n	8004c76 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d12b      	bne.n	8004c52 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d912      	bls.n	8004c2a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	881a      	ldrh	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	1c9a      	adds	r2, r3, #2
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b02      	subs	r3, #2
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c28:	e025      	b.n	8004c76 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	330c      	adds	r3, #12
 8004c34:	7812      	ldrb	r2, [r2, #0]
 8004c36:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c50:	e011      	b.n	8004c76 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c52:	f7fd fb4b 	bl	80022ec <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d803      	bhi.n	8004c6a <HAL_SPI_Transmit+0x268>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c68:	d102      	bne.n	8004c70 <HAL_SPI_Transmit+0x26e>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d102      	bne.n	8004c76 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c74:	e026      	b.n	8004cc4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1b5      	bne.n	8004bec <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	6839      	ldr	r1, [r7, #0]
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 fce3 	bl	8005650 <SPI_EndRxTxTransaction>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2220      	movs	r2, #32
 8004c94:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	77fb      	strb	r3, [r7, #31]
 8004cc0:	e000      	b.n	8004cc4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004cc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004cd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3720      	adds	r7, #32
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b088      	sub	sp, #32
 8004ce2:	af02      	add	r7, sp, #8
 8004ce4:	60f8      	str	r0, [r7, #12]
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	603b      	str	r3, [r7, #0]
 8004cea:	4613      	mov	r3, r2
 8004cec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cfa:	d112      	bne.n	8004d22 <HAL_SPI_Receive+0x44>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10e      	bne.n	8004d22 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2204      	movs	r2, #4
 8004d08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d0c:	88fa      	ldrh	r2, [r7, #6]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	4613      	mov	r3, r2
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	68b9      	ldr	r1, [r7, #8]
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 f910 	bl	8004f3e <HAL_SPI_TransmitReceive>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	e109      	b.n	8004f36 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_SPI_Receive+0x52>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e102      	b.n	8004f36 <HAL_SPI_Receive+0x258>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d38:	f7fd fad8 	bl	80022ec <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d002      	beq.n	8004d50 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d4e:	e0e9      	b.n	8004f24 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <HAL_SPI_Receive+0x7e>
 8004d56:	88fb      	ldrh	r3, [r7, #6]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d102      	bne.n	8004d62 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d60:	e0e0      	b.n	8004f24 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2204      	movs	r2, #4
 8004d66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	88fa      	ldrh	r2, [r7, #6]
 8004d7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	88fa      	ldrh	r2, [r7, #6]
 8004d82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dac:	d908      	bls.n	8004dc0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dbc:	605a      	str	r2, [r3, #4]
 8004dbe:	e007      	b.n	8004dd0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dce:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd8:	d10f      	bne.n	8004dfa <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004df8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e04:	2b40      	cmp	r3, #64	; 0x40
 8004e06:	d007      	beq.n	8004e18 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e16:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e20:	d867      	bhi.n	8004ef2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e22:	e030      	b.n	8004e86 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d117      	bne.n	8004e62 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f103 020c 	add.w	r2, r3, #12
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	7812      	ldrb	r2, [r2, #0]
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004e60:	e011      	b.n	8004e86 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e62:	f7fd fa43 	bl	80022ec <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d803      	bhi.n	8004e7a <HAL_SPI_Receive+0x19c>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e78:	d102      	bne.n	8004e80 <HAL_SPI_Receive+0x1a2>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d102      	bne.n	8004e86 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e84:	e04e      	b.n	8004f24 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1c8      	bne.n	8004e24 <HAL_SPI_Receive+0x146>
 8004e92:	e034      	b.n	8004efe <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d115      	bne.n	8004ece <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	b292      	uxth	r2, r2
 8004eae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	1c9a      	adds	r2, r3, #2
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004ecc:	e011      	b.n	8004ef2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ece:	f7fd fa0d 	bl	80022ec <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d803      	bhi.n	8004ee6 <HAL_SPI_Receive+0x208>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ee4:	d102      	bne.n	8004eec <HAL_SPI_Receive+0x20e>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d102      	bne.n	8004ef2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ef0:	e018      	b.n	8004f24 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1ca      	bne.n	8004e94 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	6839      	ldr	r1, [r7, #0]
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 fb4c 	bl	80055a0 <SPI_EndRxTransaction>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	75fb      	strb	r3, [r7, #23]
 8004f20:	e000      	b.n	8004f24 <HAL_SPI_Receive+0x246>
  }

error :
 8004f22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b08a      	sub	sp, #40	; 0x28
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	607a      	str	r2, [r7, #4]
 8004f4a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <HAL_SPI_TransmitReceive+0x26>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e1fb      	b.n	800535c <HAL_SPI_TransmitReceive+0x41e>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f6c:	f7fd f9be 	bl	80022ec <HAL_GetTick>
 8004f70:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f78:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004f80:	887b      	ldrh	r3, [r7, #2]
 8004f82:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004f84:	887b      	ldrh	r3, [r7, #2]
 8004f86:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f88:	7efb      	ldrb	r3, [r7, #27]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d00e      	beq.n	8004fac <HAL_SPI_TransmitReceive+0x6e>
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f94:	d106      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d102      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x66>
 8004f9e:	7efb      	ldrb	r3, [r7, #27]
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d003      	beq.n	8004fac <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004faa:	e1cd      	b.n	8005348 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d005      	beq.n	8004fbe <HAL_SPI_TransmitReceive+0x80>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <HAL_SPI_TransmitReceive+0x80>
 8004fb8:	887b      	ldrh	r3, [r7, #2]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d103      	bne.n	8004fc6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004fc4:	e1c0      	b.n	8005348 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d003      	beq.n	8004fda <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2205      	movs	r2, #5
 8004fd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	887a      	ldrh	r2, [r7, #2]
 8004fea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	887a      	ldrh	r2, [r7, #2]
 8004ff2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	887a      	ldrh	r2, [r7, #2]
 8005000:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	887a      	ldrh	r2, [r7, #2]
 8005006:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800501c:	d802      	bhi.n	8005024 <HAL_SPI_TransmitReceive+0xe6>
 800501e:	8a3b      	ldrh	r3, [r7, #16]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d908      	bls.n	8005036 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005032:	605a      	str	r2, [r3, #4]
 8005034:	e007      	b.n	8005046 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005044:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	d007      	beq.n	8005064 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005062:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800506c:	d97c      	bls.n	8005168 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <HAL_SPI_TransmitReceive+0x13e>
 8005076:	8a7b      	ldrh	r3, [r7, #18]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d169      	bne.n	8005150 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005080:	881a      	ldrh	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508c:	1c9a      	adds	r2, r3, #2
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005096:	b29b      	uxth	r3, r3
 8005098:	3b01      	subs	r3, #1
 800509a:	b29a      	uxth	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050a0:	e056      	b.n	8005150 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d11b      	bne.n	80050e8 <HAL_SPI_TransmitReceive+0x1aa>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d016      	beq.n	80050e8 <HAL_SPI_TransmitReceive+0x1aa>
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d113      	bne.n	80050e8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c4:	881a      	ldrh	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	1c9a      	adds	r2, r3, #2
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d11c      	bne.n	8005130 <HAL_SPI_TransmitReceive+0x1f2>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d016      	beq.n	8005130 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	b292      	uxth	r2, r2
 800510e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	1c9a      	adds	r2, r3, #2
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b01      	subs	r3, #1
 8005124:	b29a      	uxth	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800512c:	2301      	movs	r3, #1
 800512e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005130:	f7fd f8dc 	bl	80022ec <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800513c:	429a      	cmp	r2, r3
 800513e:	d807      	bhi.n	8005150 <HAL_SPI_TransmitReceive+0x212>
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005146:	d003      	beq.n	8005150 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800514e:	e0fb      	b.n	8005348 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005154:	b29b      	uxth	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1a3      	bne.n	80050a2 <HAL_SPI_TransmitReceive+0x164>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d19d      	bne.n	80050a2 <HAL_SPI_TransmitReceive+0x164>
 8005166:	e0df      	b.n	8005328 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <HAL_SPI_TransmitReceive+0x23a>
 8005170:	8a7b      	ldrh	r3, [r7, #18]
 8005172:	2b01      	cmp	r3, #1
 8005174:	f040 80cb 	bne.w	800530e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b01      	cmp	r3, #1
 8005180:	d912      	bls.n	80051a8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	881a      	ldrh	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	1c9a      	adds	r2, r3, #2
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b02      	subs	r3, #2
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051a6:	e0b2      	b.n	800530e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	330c      	adds	r3, #12
 80051b2:	7812      	ldrb	r2, [r2, #0]
 80051b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ce:	e09e      	b.n	800530e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d134      	bne.n	8005248 <HAL_SPI_TransmitReceive+0x30a>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d02f      	beq.n	8005248 <HAL_SPI_TransmitReceive+0x30a>
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d12c      	bne.n	8005248 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d912      	bls.n	800521e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	881a      	ldrh	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	1c9a      	adds	r2, r3, #2
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b02      	subs	r3, #2
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800521c:	e012      	b.n	8005244 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	330c      	adds	r3, #12
 8005228:	7812      	ldrb	r2, [r2, #0]
 800522a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b01      	cmp	r3, #1
 8005254:	d148      	bne.n	80052e8 <HAL_SPI_TransmitReceive+0x3aa>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d042      	beq.n	80052e8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005268:	b29b      	uxth	r3, r3
 800526a:	2b01      	cmp	r3, #1
 800526c:	d923      	bls.n	80052b6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	b292      	uxth	r2, r2
 800527a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005280:	1c9a      	adds	r2, r3, #2
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800528c:	b29b      	uxth	r3, r3
 800528e:	3b02      	subs	r3, #2
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d81f      	bhi.n	80052e4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052b2:	605a      	str	r2, [r3, #4]
 80052b4:	e016      	b.n	80052e4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f103 020c 	add.w	r2, r3, #12
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	7812      	ldrb	r2, [r2, #0]
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052e4:	2301      	movs	r3, #1
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052e8:	f7fd f800 	bl	80022ec <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d803      	bhi.n	8005300 <HAL_SPI_TransmitReceive+0x3c2>
 80052f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052fe:	d102      	bne.n	8005306 <HAL_SPI_TransmitReceive+0x3c8>
 8005300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005302:	2b00      	cmp	r3, #0
 8005304:	d103      	bne.n	800530e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800530c:	e01c      	b.n	8005348 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005312:	b29b      	uxth	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	f47f af5b 	bne.w	80051d0 <HAL_SPI_TransmitReceive+0x292>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	f47f af54 	bne.w	80051d0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 f98f 	bl	8005650 <SPI_EndRxTxTransaction>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d006      	beq.n	8005346 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2220      	movs	r2, #32
 8005342:	661a      	str	r2, [r3, #96]	; 0x60
 8005344:	e000      	b.n	8005348 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005346:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005358:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800535c:	4618      	mov	r0, r3
 800535e:	3728      	adds	r7, #40	; 0x28
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	4613      	mov	r3, r2
 8005372:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005374:	f7fc ffba 	bl	80022ec <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	1a9b      	subs	r3, r3, r2
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	4413      	add	r3, r2
 8005382:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005384:	f7fc ffb2 	bl	80022ec <HAL_GetTick>
 8005388:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800538a:	4b39      	ldr	r3, [pc, #228]	; (8005470 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	015b      	lsls	r3, r3, #5
 8005390:	0d1b      	lsrs	r3, r3, #20
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	fb02 f303 	mul.w	r3, r2, r3
 8005398:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800539a:	e054      	b.n	8005446 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053a2:	d050      	beq.n	8005446 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053a4:	f7fc ffa2 	bl	80022ec <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d902      	bls.n	80053ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d13d      	bne.n	8005436 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053d2:	d111      	bne.n	80053f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053dc:	d004      	beq.n	80053e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e6:	d107      	bne.n	80053f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005400:	d10f      	bne.n	8005422 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005420:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e017      	b.n	8005466 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	3b01      	subs	r3, #1
 8005444:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4013      	ands	r3, r2
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	429a      	cmp	r2, r3
 8005454:	bf0c      	ite	eq
 8005456:	2301      	moveq	r3, #1
 8005458:	2300      	movne	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	429a      	cmp	r2, r3
 8005462:	d19b      	bne.n	800539c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20000000 	.word	0x20000000

08005474 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08a      	sub	sp, #40	; 0x28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005482:	2300      	movs	r3, #0
 8005484:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005486:	f7fc ff31 	bl	80022ec <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	1a9b      	subs	r3, r3, r2
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	4413      	add	r3, r2
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005496:	f7fc ff29 	bl	80022ec <HAL_GetTick>
 800549a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	330c      	adds	r3, #12
 80054a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80054a4:	4b3d      	ldr	r3, [pc, #244]	; (800559c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	4613      	mov	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	00da      	lsls	r2, r3, #3
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	0d1b      	lsrs	r3, r3, #20
 80054b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b6:	fb02 f303 	mul.w	r3, r2, r3
 80054ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80054bc:	e060      	b.n	8005580 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80054c4:	d107      	bne.n	80054d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d104      	bne.n	80054d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80054d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054dc:	d050      	beq.n	8005580 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054de:	f7fc ff05 	bl	80022ec <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d902      	bls.n	80054f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d13d      	bne.n	8005570 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005502:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800550c:	d111      	bne.n	8005532 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005516:	d004      	beq.n	8005522 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005520:	d107      	bne.n	8005532 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005530:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800553a:	d10f      	bne.n	800555c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800555a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e010      	b.n	8005592 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	3b01      	subs	r3, #1
 800557e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	4013      	ands	r3, r2
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	429a      	cmp	r2, r3
 800558e:	d196      	bne.n	80054be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3728      	adds	r7, #40	; 0x28
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20000000 	.word	0x20000000

080055a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055b4:	d111      	bne.n	80055da <SPI_EndRxTransaction+0x3a>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055be:	d004      	beq.n	80055ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055c8:	d107      	bne.n	80055da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055d8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2200      	movs	r2, #0
 80055e2:	2180      	movs	r1, #128	; 0x80
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff febd 	bl	8005364 <SPI_WaitFlagStateUntilTimeout>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d007      	beq.n	8005600 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f4:	f043 0220 	orr.w	r2, r3, #32
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e023      	b.n	8005648 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005608:	d11d      	bne.n	8005646 <SPI_EndRxTransaction+0xa6>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005612:	d004      	beq.n	800561e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800561c:	d113      	bne.n	8005646 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2200      	movs	r2, #0
 8005626:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f7ff ff22 	bl	8005474 <SPI_WaitFifoStateUntilTimeout>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800563a:	f043 0220 	orr.w	r2, r3, #32
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e000      	b.n	8005648 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af02      	add	r7, sp, #8
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2200      	movs	r2, #0
 8005664:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f7ff ff03 	bl	8005474 <SPI_WaitFifoStateUntilTimeout>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d007      	beq.n	8005684 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005678:	f043 0220 	orr.w	r2, r3, #32
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e027      	b.n	80056d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2200      	movs	r2, #0
 800568c:	2180      	movs	r1, #128	; 0x80
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f7ff fe68 	bl	8005364 <SPI_WaitFlagStateUntilTimeout>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d007      	beq.n	80056aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569e:	f043 0220 	orr.w	r2, r3, #32
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e014      	b.n	80056d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f7ff fedc 	bl	8005474 <SPI_WaitFifoStateUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d007      	beq.n	80056d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c6:	f043 0220 	orr.w	r2, r3, #32
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e000      	b.n	80056d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e049      	b.n	8005782 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d106      	bne.n	8005708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7fc fd08 	bl	8002118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3304      	adds	r3, #4
 8005718:	4619      	mov	r1, r3
 800571a:	4610      	mov	r0, r2
 800571c:	f000 fb52 	bl	8005dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b082      	sub	sp, #8
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e049      	b.n	8005830 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d106      	bne.n	80057b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f841 	bl	8005838 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2202      	movs	r2, #2
 80057ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3304      	adds	r3, #4
 80057c6:	4619      	mov	r1, r3
 80057c8:	4610      	mov	r0, r2
 80057ca:	f000 fafb 	bl	8005dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d109      	bne.n	8005870 <HAL_TIM_PWM_Start+0x24>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b01      	cmp	r3, #1
 8005866:	bf14      	ite	ne
 8005868:	2301      	movne	r3, #1
 800586a:	2300      	moveq	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	e03c      	b.n	80058ea <HAL_TIM_PWM_Start+0x9e>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2b04      	cmp	r3, #4
 8005874:	d109      	bne.n	800588a <HAL_TIM_PWM_Start+0x3e>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b01      	cmp	r3, #1
 8005880:	bf14      	ite	ne
 8005882:	2301      	movne	r3, #1
 8005884:	2300      	moveq	r3, #0
 8005886:	b2db      	uxtb	r3, r3
 8005888:	e02f      	b.n	80058ea <HAL_TIM_PWM_Start+0x9e>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b08      	cmp	r3, #8
 800588e:	d109      	bne.n	80058a4 <HAL_TIM_PWM_Start+0x58>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b01      	cmp	r3, #1
 800589a:	bf14      	ite	ne
 800589c:	2301      	movne	r3, #1
 800589e:	2300      	moveq	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	e022      	b.n	80058ea <HAL_TIM_PWM_Start+0x9e>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b0c      	cmp	r3, #12
 80058a8:	d109      	bne.n	80058be <HAL_TIM_PWM_Start+0x72>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	bf14      	ite	ne
 80058b6:	2301      	movne	r3, #1
 80058b8:	2300      	moveq	r3, #0
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	e015      	b.n	80058ea <HAL_TIM_PWM_Start+0x9e>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b10      	cmp	r3, #16
 80058c2:	d109      	bne.n	80058d8 <HAL_TIM_PWM_Start+0x8c>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	bf14      	ite	ne
 80058d0:	2301      	movne	r3, #1
 80058d2:	2300      	moveq	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	e008      	b.n	80058ea <HAL_TIM_PWM_Start+0x9e>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	bf14      	ite	ne
 80058e4:	2301      	movne	r3, #1
 80058e6:	2300      	moveq	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e07e      	b.n	80059f0 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d104      	bne.n	8005902 <HAL_TIM_PWM_Start+0xb6>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005900:	e023      	b.n	800594a <HAL_TIM_PWM_Start+0xfe>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b04      	cmp	r3, #4
 8005906:	d104      	bne.n	8005912 <HAL_TIM_PWM_Start+0xc6>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005910:	e01b      	b.n	800594a <HAL_TIM_PWM_Start+0xfe>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b08      	cmp	r3, #8
 8005916:	d104      	bne.n	8005922 <HAL_TIM_PWM_Start+0xd6>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005920:	e013      	b.n	800594a <HAL_TIM_PWM_Start+0xfe>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b0c      	cmp	r3, #12
 8005926:	d104      	bne.n	8005932 <HAL_TIM_PWM_Start+0xe6>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005930:	e00b      	b.n	800594a <HAL_TIM_PWM_Start+0xfe>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b10      	cmp	r3, #16
 8005936:	d104      	bne.n	8005942 <HAL_TIM_PWM_Start+0xf6>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005940:	e003      	b.n	800594a <HAL_TIM_PWM_Start+0xfe>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2202      	movs	r2, #2
 8005946:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2201      	movs	r2, #1
 8005950:	6839      	ldr	r1, [r7, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fdb2 	bl	80064bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a26      	ldr	r2, [pc, #152]	; (80059f8 <HAL_TIM_PWM_Start+0x1ac>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d009      	beq.n	8005976 <HAL_TIM_PWM_Start+0x12a>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a25      	ldr	r2, [pc, #148]	; (80059fc <HAL_TIM_PWM_Start+0x1b0>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d004      	beq.n	8005976 <HAL_TIM_PWM_Start+0x12a>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a23      	ldr	r2, [pc, #140]	; (8005a00 <HAL_TIM_PWM_Start+0x1b4>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d101      	bne.n	800597a <HAL_TIM_PWM_Start+0x12e>
 8005976:	2301      	movs	r3, #1
 8005978:	e000      	b.n	800597c <HAL_TIM_PWM_Start+0x130>
 800597a:	2300      	movs	r3, #0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d007      	beq.n	8005990 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800598e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a18      	ldr	r2, [pc, #96]	; (80059f8 <HAL_TIM_PWM_Start+0x1ac>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d009      	beq.n	80059ae <HAL_TIM_PWM_Start+0x162>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a2:	d004      	beq.n	80059ae <HAL_TIM_PWM_Start+0x162>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a14      	ldr	r2, [pc, #80]	; (80059fc <HAL_TIM_PWM_Start+0x1b0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d115      	bne.n	80059da <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	4b13      	ldr	r3, [pc, #76]	; (8005a04 <HAL_TIM_PWM_Start+0x1b8>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b06      	cmp	r3, #6
 80059be:	d015      	beq.n	80059ec <HAL_TIM_PWM_Start+0x1a0>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c6:	d011      	beq.n	80059ec <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0201 	orr.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d8:	e008      	b.n	80059ec <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f042 0201 	orr.w	r2, r2, #1
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	e000      	b.n	80059ee <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	40012c00 	.word	0x40012c00
 80059fc:	40014000 	.word	0x40014000
 8005a00:	40014400 	.word	0x40014400
 8005a04:	00010007 	.word	0x00010007

08005a08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e0ff      	b.n	8005c26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b14      	cmp	r3, #20
 8005a32:	f200 80f0 	bhi.w	8005c16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a36:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3c:	08005a91 	.word	0x08005a91
 8005a40:	08005c17 	.word	0x08005c17
 8005a44:	08005c17 	.word	0x08005c17
 8005a48:	08005c17 	.word	0x08005c17
 8005a4c:	08005ad1 	.word	0x08005ad1
 8005a50:	08005c17 	.word	0x08005c17
 8005a54:	08005c17 	.word	0x08005c17
 8005a58:	08005c17 	.word	0x08005c17
 8005a5c:	08005b13 	.word	0x08005b13
 8005a60:	08005c17 	.word	0x08005c17
 8005a64:	08005c17 	.word	0x08005c17
 8005a68:	08005c17 	.word	0x08005c17
 8005a6c:	08005b53 	.word	0x08005b53
 8005a70:	08005c17 	.word	0x08005c17
 8005a74:	08005c17 	.word	0x08005c17
 8005a78:	08005c17 	.word	0x08005c17
 8005a7c:	08005b95 	.word	0x08005b95
 8005a80:	08005c17 	.word	0x08005c17
 8005a84:	08005c17 	.word	0x08005c17
 8005a88:	08005c17 	.word	0x08005c17
 8005a8c:	08005bd5 	.word	0x08005bd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68b9      	ldr	r1, [r7, #8]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 f9f8 	bl	8005e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 0208 	orr.w	r2, r2, #8
 8005aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0204 	bic.w	r2, r2, #4
 8005aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6999      	ldr	r1, [r3, #24]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	691a      	ldr	r2, [r3, #16]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	619a      	str	r2, [r3, #24]
      break;
 8005ace:	e0a5      	b.n	8005c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fa54 	bl	8005f84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6999      	ldr	r1, [r3, #24]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	021a      	lsls	r2, r3, #8
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	619a      	str	r2, [r3, #24]
      break;
 8005b10:	e084      	b.n	8005c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 faad 	bl	8006078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0208 	orr.w	r2, r2, #8
 8005b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69da      	ldr	r2, [r3, #28]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0204 	bic.w	r2, r2, #4
 8005b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69d9      	ldr	r1, [r3, #28]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	61da      	str	r2, [r3, #28]
      break;
 8005b50:	e064      	b.n	8005c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68b9      	ldr	r1, [r7, #8]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 fb05 	bl	8006168 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69da      	ldr	r2, [r3, #28]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69d9      	ldr	r1, [r3, #28]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	021a      	lsls	r2, r3, #8
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	61da      	str	r2, [r3, #28]
      break;
 8005b92:	e043      	b.n	8005c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fb42 	bl	8006224 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0208 	orr.w	r2, r2, #8
 8005bae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0204 	bic.w	r2, r2, #4
 8005bbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	691a      	ldr	r2, [r3, #16]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bd2:	e023      	b.n	8005c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 fb7a 	bl	80062d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	021a      	lsls	r2, r3, #8
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c14:	e002      	b.n	8005c1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	75fb      	strb	r3, [r7, #23]
      break;
 8005c1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop

08005c30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d101      	bne.n	8005c4c <HAL_TIM_ConfigClockSource+0x1c>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e0b6      	b.n	8005dba <HAL_TIM_ConfigClockSource+0x18a>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c88:	d03e      	beq.n	8005d08 <HAL_TIM_ConfigClockSource+0xd8>
 8005c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c8e:	f200 8087 	bhi.w	8005da0 <HAL_TIM_ConfigClockSource+0x170>
 8005c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c96:	f000 8086 	beq.w	8005da6 <HAL_TIM_ConfigClockSource+0x176>
 8005c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c9e:	d87f      	bhi.n	8005da0 <HAL_TIM_ConfigClockSource+0x170>
 8005ca0:	2b70      	cmp	r3, #112	; 0x70
 8005ca2:	d01a      	beq.n	8005cda <HAL_TIM_ConfigClockSource+0xaa>
 8005ca4:	2b70      	cmp	r3, #112	; 0x70
 8005ca6:	d87b      	bhi.n	8005da0 <HAL_TIM_ConfigClockSource+0x170>
 8005ca8:	2b60      	cmp	r3, #96	; 0x60
 8005caa:	d050      	beq.n	8005d4e <HAL_TIM_ConfigClockSource+0x11e>
 8005cac:	2b60      	cmp	r3, #96	; 0x60
 8005cae:	d877      	bhi.n	8005da0 <HAL_TIM_ConfigClockSource+0x170>
 8005cb0:	2b50      	cmp	r3, #80	; 0x50
 8005cb2:	d03c      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0xfe>
 8005cb4:	2b50      	cmp	r3, #80	; 0x50
 8005cb6:	d873      	bhi.n	8005da0 <HAL_TIM_ConfigClockSource+0x170>
 8005cb8:	2b40      	cmp	r3, #64	; 0x40
 8005cba:	d058      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0x13e>
 8005cbc:	2b40      	cmp	r3, #64	; 0x40
 8005cbe:	d86f      	bhi.n	8005da0 <HAL_TIM_ConfigClockSource+0x170>
 8005cc0:	2b30      	cmp	r3, #48	; 0x30
 8005cc2:	d064      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0x15e>
 8005cc4:	2b30      	cmp	r3, #48	; 0x30
 8005cc6:	d86b      	bhi.n	8005da0 <HAL_TIM_ConfigClockSource+0x170>
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	d060      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0x15e>
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	d867      	bhi.n	8005da0 <HAL_TIM_ConfigClockSource+0x170>
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d05c      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0x15e>
 8005cd4:	2b10      	cmp	r3, #16
 8005cd6:	d05a      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0x15e>
 8005cd8:	e062      	b.n	8005da0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6899      	ldr	r1, [r3, #8]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f000 fbc7 	bl	800647c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	609a      	str	r2, [r3, #8]
      break;
 8005d06:	e04f      	b.n	8005da8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6818      	ldr	r0, [r3, #0]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	6899      	ldr	r1, [r3, #8]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f000 fbb0 	bl	800647c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689a      	ldr	r2, [r3, #8]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d2a:	609a      	str	r2, [r3, #8]
      break;
 8005d2c:	e03c      	b.n	8005da8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6818      	ldr	r0, [r3, #0]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	6859      	ldr	r1, [r3, #4]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f000 fb24 	bl	8006388 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2150      	movs	r1, #80	; 0x50
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 fb7d 	bl	8006446 <TIM_ITRx_SetConfig>
      break;
 8005d4c:	e02c      	b.n	8005da8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6818      	ldr	r0, [r3, #0]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	6859      	ldr	r1, [r3, #4]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f000 fb43 	bl	80063e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2160      	movs	r1, #96	; 0x60
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 fb6d 	bl	8006446 <TIM_ITRx_SetConfig>
      break;
 8005d6c:	e01c      	b.n	8005da8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6818      	ldr	r0, [r3, #0]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	6859      	ldr	r1, [r3, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f000 fb04 	bl	8006388 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2140      	movs	r1, #64	; 0x40
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fb5d 	bl	8006446 <TIM_ITRx_SetConfig>
      break;
 8005d8c:	e00c      	b.n	8005da8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4619      	mov	r1, r3
 8005d98:	4610      	mov	r0, r2
 8005d9a:	f000 fb54 	bl	8006446 <TIM_ITRx_SetConfig>
      break;
 8005d9e:	e003      	b.n	8005da8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	73fb      	strb	r3, [r7, #15]
      break;
 8005da4:	e000      	b.n	8005da8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005da6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a2a      	ldr	r2, [pc, #168]	; (8005e80 <TIM_Base_SetConfig+0xbc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d003      	beq.n	8005de4 <TIM_Base_SetConfig+0x20>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de2:	d108      	bne.n	8005df6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a21      	ldr	r2, [pc, #132]	; (8005e80 <TIM_Base_SetConfig+0xbc>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d00b      	beq.n	8005e16 <TIM_Base_SetConfig+0x52>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e04:	d007      	beq.n	8005e16 <TIM_Base_SetConfig+0x52>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a1e      	ldr	r2, [pc, #120]	; (8005e84 <TIM_Base_SetConfig+0xc0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d003      	beq.n	8005e16 <TIM_Base_SetConfig+0x52>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a1d      	ldr	r2, [pc, #116]	; (8005e88 <TIM_Base_SetConfig+0xc4>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d108      	bne.n	8005e28 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a0c      	ldr	r2, [pc, #48]	; (8005e80 <TIM_Base_SetConfig+0xbc>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d007      	beq.n	8005e64 <TIM_Base_SetConfig+0xa0>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a0b      	ldr	r2, [pc, #44]	; (8005e84 <TIM_Base_SetConfig+0xc0>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d003      	beq.n	8005e64 <TIM_Base_SetConfig+0xa0>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a0a      	ldr	r2, [pc, #40]	; (8005e88 <TIM_Base_SetConfig+0xc4>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d103      	bne.n	8005e6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	615a      	str	r2, [r3, #20]
}
 8005e72:	bf00      	nop
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	40012c00 	.word	0x40012c00
 8005e84:	40014000 	.word	0x40014000
 8005e88:	40014400 	.word	0x40014400

08005e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f023 0201 	bic.w	r2, r3, #1
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0303 	bic.w	r3, r3, #3
 8005ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f023 0302 	bic.w	r3, r3, #2
 8005ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a24      	ldr	r2, [pc, #144]	; (8005f78 <TIM_OC1_SetConfig+0xec>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d007      	beq.n	8005efc <TIM_OC1_SetConfig+0x70>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a23      	ldr	r2, [pc, #140]	; (8005f7c <TIM_OC1_SetConfig+0xf0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d003      	beq.n	8005efc <TIM_OC1_SetConfig+0x70>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a22      	ldr	r2, [pc, #136]	; (8005f80 <TIM_OC1_SetConfig+0xf4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d10c      	bne.n	8005f16 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f023 0308 	bic.w	r3, r3, #8
 8005f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f023 0304 	bic.w	r3, r3, #4
 8005f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a17      	ldr	r2, [pc, #92]	; (8005f78 <TIM_OC1_SetConfig+0xec>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d007      	beq.n	8005f2e <TIM_OC1_SetConfig+0xa2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a16      	ldr	r2, [pc, #88]	; (8005f7c <TIM_OC1_SetConfig+0xf0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d003      	beq.n	8005f2e <TIM_OC1_SetConfig+0xa2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a15      	ldr	r2, [pc, #84]	; (8005f80 <TIM_OC1_SetConfig+0xf4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d111      	bne.n	8005f52 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	621a      	str	r2, [r3, #32]
}
 8005f6c:	bf00      	nop
 8005f6e:	371c      	adds	r7, #28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	40012c00 	.word	0x40012c00
 8005f7c:	40014000 	.word	0x40014000
 8005f80:	40014400 	.word	0x40014400

08005f84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	f023 0210 	bic.w	r2, r3, #16
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	021b      	lsls	r3, r3, #8
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f023 0320 	bic.w	r3, r3, #32
 8005fd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	011b      	lsls	r3, r3, #4
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a22      	ldr	r2, [pc, #136]	; (800606c <TIM_OC2_SetConfig+0xe8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d10d      	bne.n	8006004 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006002:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a19      	ldr	r2, [pc, #100]	; (800606c <TIM_OC2_SetConfig+0xe8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d007      	beq.n	800601c <TIM_OC2_SetConfig+0x98>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a18      	ldr	r2, [pc, #96]	; (8006070 <TIM_OC2_SetConfig+0xec>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d003      	beq.n	800601c <TIM_OC2_SetConfig+0x98>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a17      	ldr	r2, [pc, #92]	; (8006074 <TIM_OC2_SetConfig+0xf0>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d113      	bne.n	8006044 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006022:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800602a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	4313      	orrs	r3, r2
 8006036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	4313      	orrs	r3, r2
 8006042:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	621a      	str	r2, [r3, #32]
}
 800605e:	bf00      	nop
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40012c00 	.word	0x40012c00
 8006070:	40014000 	.word	0x40014000
 8006074:	40014400 	.word	0x40014400

08006078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f023 0303 	bic.w	r3, r3, #3
 80060b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a21      	ldr	r2, [pc, #132]	; (800615c <TIM_OC3_SetConfig+0xe4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d10d      	bne.n	80060f6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	021b      	lsls	r3, r3, #8
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a18      	ldr	r2, [pc, #96]	; (800615c <TIM_OC3_SetConfig+0xe4>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d007      	beq.n	800610e <TIM_OC3_SetConfig+0x96>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a17      	ldr	r2, [pc, #92]	; (8006160 <TIM_OC3_SetConfig+0xe8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d003      	beq.n	800610e <TIM_OC3_SetConfig+0x96>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a16      	ldr	r2, [pc, #88]	; (8006164 <TIM_OC3_SetConfig+0xec>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d113      	bne.n	8006136 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800611c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	011b      	lsls	r3, r3, #4
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4313      	orrs	r3, r2
 8006134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	621a      	str	r2, [r3, #32]
}
 8006150:	bf00      	nop
 8006152:	371c      	adds	r7, #28
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	40012c00 	.word	0x40012c00
 8006160:	40014000 	.word	0x40014000
 8006164:	40014400 	.word	0x40014400

08006168 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800619a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	021b      	lsls	r3, r3, #8
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	031b      	lsls	r3, r3, #12
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a14      	ldr	r2, [pc, #80]	; (8006218 <TIM_OC4_SetConfig+0xb0>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d007      	beq.n	80061dc <TIM_OC4_SetConfig+0x74>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a13      	ldr	r2, [pc, #76]	; (800621c <TIM_OC4_SetConfig+0xb4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d003      	beq.n	80061dc <TIM_OC4_SetConfig+0x74>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a12      	ldr	r2, [pc, #72]	; (8006220 <TIM_OC4_SetConfig+0xb8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d109      	bne.n	80061f0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	019b      	lsls	r3, r3, #6
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	621a      	str	r2, [r3, #32]
}
 800620a:	bf00      	nop
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	40012c00 	.word	0x40012c00
 800621c:	40014000 	.word	0x40014000
 8006220:	40014400 	.word	0x40014400

08006224 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006224:	b480      	push	{r7}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006268:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	041b      	lsls	r3, r3, #16
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a13      	ldr	r2, [pc, #76]	; (80062c8 <TIM_OC5_SetConfig+0xa4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d007      	beq.n	800628e <TIM_OC5_SetConfig+0x6a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a12      	ldr	r2, [pc, #72]	; (80062cc <TIM_OC5_SetConfig+0xa8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d003      	beq.n	800628e <TIM_OC5_SetConfig+0x6a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a11      	ldr	r2, [pc, #68]	; (80062d0 <TIM_OC5_SetConfig+0xac>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d109      	bne.n	80062a2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006294:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	021b      	lsls	r3, r3, #8
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	621a      	str	r2, [r3, #32]
}
 80062bc:	bf00      	nop
 80062be:	371c      	adds	r7, #28
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	40012c00 	.word	0x40012c00
 80062cc:	40014000 	.word	0x40014000
 80062d0:	40014400 	.word	0x40014400

080062d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800631a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	051b      	lsls	r3, r3, #20
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a14      	ldr	r2, [pc, #80]	; (800637c <TIM_OC6_SetConfig+0xa8>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d007      	beq.n	8006340 <TIM_OC6_SetConfig+0x6c>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a13      	ldr	r2, [pc, #76]	; (8006380 <TIM_OC6_SetConfig+0xac>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d003      	beq.n	8006340 <TIM_OC6_SetConfig+0x6c>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a12      	ldr	r2, [pc, #72]	; (8006384 <TIM_OC6_SetConfig+0xb0>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d109      	bne.n	8006354 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006346:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	029b      	lsls	r3, r3, #10
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4313      	orrs	r3, r2
 8006352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	621a      	str	r2, [r3, #32]
}
 800636e:	bf00      	nop
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40012c00 	.word	0x40012c00
 8006380:	40014000 	.word	0x40014000
 8006384:	40014400 	.word	0x40014400

08006388 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	f023 0201 	bic.w	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	011b      	lsls	r3, r3, #4
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f023 030a 	bic.w	r3, r3, #10
 80063c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	621a      	str	r2, [r3, #32]
}
 80063da:	bf00      	nop
 80063dc:	371c      	adds	r7, #28
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b087      	sub	sp, #28
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	60f8      	str	r0, [r7, #12]
 80063ee:	60b9      	str	r1, [r7, #8]
 80063f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	f023 0210 	bic.w	r2, r3, #16
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a1b      	ldr	r3, [r3, #32]
 8006408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006410:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	031b      	lsls	r3, r3, #12
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006422:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4313      	orrs	r3, r2
 800642c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	621a      	str	r2, [r3, #32]
}
 800643a:	bf00      	nop
 800643c:	371c      	adds	r7, #28
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006446:	b480      	push	{r7}
 8006448:	b085      	sub	sp, #20
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	f043 0307 	orr.w	r3, r3, #7
 8006468:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	609a      	str	r2, [r3, #8]
}
 8006470:	bf00      	nop
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800647c:	b480      	push	{r7}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006496:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	021a      	lsls	r2, r3, #8
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	431a      	orrs	r2, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	609a      	str	r2, [r3, #8]
}
 80064b0:	bf00      	nop
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f003 031f 	and.w	r3, r3, #31
 80064ce:	2201      	movs	r2, #1
 80064d0:	fa02 f303 	lsl.w	r3, r2, r3
 80064d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a1a      	ldr	r2, [r3, #32]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	43db      	mvns	r3, r3
 80064de:	401a      	ands	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a1a      	ldr	r2, [r3, #32]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f003 031f 	and.w	r3, r3, #31
 80064ee:	6879      	ldr	r1, [r7, #4]
 80064f0:	fa01 f303 	lsl.w	r3, r1, r3
 80064f4:	431a      	orrs	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	621a      	str	r2, [r3, #32]
}
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
	...

08006508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800651c:	2302      	movs	r3, #2
 800651e:	e04f      	b.n	80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a21      	ldr	r2, [pc, #132]	; (80065cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d108      	bne.n	800655c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006550:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	4313      	orrs	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a14      	ldr	r2, [pc, #80]	; (80065cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d009      	beq.n	8006594 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006588:	d004      	beq.n	8006594 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a10      	ldr	r2, [pc, #64]	; (80065d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d10c      	bne.n	80065ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800659a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	40014000 	.word	0x40014000

080065d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d101      	bne.n	80065f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065ec:	2302      	movs	r3, #2
 80065ee:	e060      	b.n	80066b2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	4313      	orrs	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	4313      	orrs	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	041b      	lsls	r3, r3, #16
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a14      	ldr	r2, [pc, #80]	; (80066c0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d115      	bne.n	80066a0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	051b      	lsls	r3, r3, #20
 8006680:	4313      	orrs	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	4313      	orrs	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	4313      	orrs	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	40012c00 	.word	0x40012c00

080066c4 <__libc_init_array>:
 80066c4:	b570      	push	{r4, r5, r6, lr}
 80066c6:	4d0d      	ldr	r5, [pc, #52]	; (80066fc <__libc_init_array+0x38>)
 80066c8:	4c0d      	ldr	r4, [pc, #52]	; (8006700 <__libc_init_array+0x3c>)
 80066ca:	1b64      	subs	r4, r4, r5
 80066cc:	10a4      	asrs	r4, r4, #2
 80066ce:	2600      	movs	r6, #0
 80066d0:	42a6      	cmp	r6, r4
 80066d2:	d109      	bne.n	80066e8 <__libc_init_array+0x24>
 80066d4:	4d0b      	ldr	r5, [pc, #44]	; (8006704 <__libc_init_array+0x40>)
 80066d6:	4c0c      	ldr	r4, [pc, #48]	; (8006708 <__libc_init_array+0x44>)
 80066d8:	f000 f820 	bl	800671c <_init>
 80066dc:	1b64      	subs	r4, r4, r5
 80066de:	10a4      	asrs	r4, r4, #2
 80066e0:	2600      	movs	r6, #0
 80066e2:	42a6      	cmp	r6, r4
 80066e4:	d105      	bne.n	80066f2 <__libc_init_array+0x2e>
 80066e6:	bd70      	pop	{r4, r5, r6, pc}
 80066e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ec:	4798      	blx	r3
 80066ee:	3601      	adds	r6, #1
 80066f0:	e7ee      	b.n	80066d0 <__libc_init_array+0xc>
 80066f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f6:	4798      	blx	r3
 80066f8:	3601      	adds	r6, #1
 80066fa:	e7f2      	b.n	80066e2 <__libc_init_array+0x1e>
 80066fc:	0800677c 	.word	0x0800677c
 8006700:	0800677c 	.word	0x0800677c
 8006704:	0800677c 	.word	0x0800677c
 8006708:	08006780 	.word	0x08006780

0800670c <memset>:
 800670c:	4402      	add	r2, r0
 800670e:	4603      	mov	r3, r0
 8006710:	4293      	cmp	r3, r2
 8006712:	d100      	bne.n	8006716 <memset+0xa>
 8006714:	4770      	bx	lr
 8006716:	f803 1b01 	strb.w	r1, [r3], #1
 800671a:	e7f9      	b.n	8006710 <memset+0x4>

0800671c <_init>:
 800671c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671e:	bf00      	nop
 8006720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006722:	bc08      	pop	{r3}
 8006724:	469e      	mov	lr, r3
 8006726:	4770      	bx	lr

08006728 <_fini>:
 8006728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672a:	bf00      	nop
 800672c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672e:	bc08      	pop	{r3}
 8006730:	469e      	mov	lr, r3
 8006732:	4770      	bx	lr
