
RocketControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007044  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080071d4  080071d4  000171d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007214  08007214  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007214  08007214  00017214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800721c  0800721c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800721c  0800721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007220  08007220  00017220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  2000000c  08007230  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20000324  08007230  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f4b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ab  00000000  00000000  00037f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0003b638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  0003cc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246f0  00000000  00000000  0003e030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bcc4  00000000  00000000  00062720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccd30  00000000  00000000  0007e3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b114  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a8c  00000000  00000000  0014b164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080071bc 	.word	0x080071bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	080071bc 	.word	0x080071bc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <IMUwriteByte>:

HAL_StatusTypeDef status; // for testing purposes


void IMUwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af04      	add	r7, sp, #16
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
 80004de:	460b      	mov	r3, r1
 80004e0:	71bb      	strb	r3, [r7, #6]
 80004e2:	4613      	mov	r3, r2
 80004e4:	717b      	strb	r3, [r7, #5]
	status = HAL_I2C_Mem_Write(&hi2c1, address, subAddress, 1, (uint8_t*)data, 1, HAL_MAX_DELAY);
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	b299      	uxth	r1, r3
 80004ea:	79bb      	ldrb	r3, [r7, #6]
 80004ec:	b29a      	uxth	r2, r3
 80004ee:	797b      	ldrb	r3, [r7, #5]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004f6:	9302      	str	r3, [sp, #8]
 80004f8:	2301      	movs	r3, #1
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	9000      	str	r0, [sp, #0]
 80004fe:	2301      	movs	r3, #1
 8000500:	4805      	ldr	r0, [pc, #20]	; (8000518 <IMUwriteByte+0x44>)
 8000502:	f002 fd21 	bl	8002f48 <HAL_I2C_Mem_Write>
 8000506:	4603      	mov	r3, r0
 8000508:	461a      	mov	r2, r3
 800050a:	4b04      	ldr	r3, [pc, #16]	; (800051c <IMUwriteByte+0x48>)
 800050c:	701a      	strb	r2, [r3, #0]
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	200000ec 	.word	0x200000ec
 800051c:	20000044 	.word	0x20000044

08000520 <IMUreadByte>:

uint8_t IMUreadByte(uint8_t address, uint8_t subAddress)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af04      	add	r7, sp, #16
 8000526:	4603      	mov	r3, r0
 8000528:	460a      	mov	r2, r1
 800052a:	71fb      	strb	r3, [r7, #7]
 800052c:	4613      	mov	r3, r2
 800052e:	71bb      	strb	r3, [r7, #6]
	uint8_t dest;
	status = HAL_I2C_Mem_Read(&hi2c1, address, subAddress, 1, &dest, 1, HAL_MAX_DELAY);
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	b299      	uxth	r1, r3
 8000534:	79bb      	ldrb	r3, [r7, #6]
 8000536:	b29a      	uxth	r2, r3
 8000538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800053c:	9302      	str	r3, [sp, #8]
 800053e:	2301      	movs	r3, #1
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	f107 030f 	add.w	r3, r7, #15
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2301      	movs	r3, #1
 800054a:	4806      	ldr	r0, [pc, #24]	; (8000564 <IMUreadByte+0x44>)
 800054c:	f002 fe10 	bl	8003170 <HAL_I2C_Mem_Read>
 8000550:	4603      	mov	r3, r0
 8000552:	461a      	mov	r2, r3
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <IMUreadByte+0x48>)
 8000556:	701a      	strb	r2, [r3, #0]
	return dest;
 8000558:	7bfb      	ldrb	r3, [r7, #15]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	200000ec 	.word	0x200000ec
 8000568:	20000044 	.word	0x20000044

0800056c <readBytes>:

static void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af04      	add	r7, sp, #16
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	4603      	mov	r3, r0
 8000576:	71fb      	strb	r3, [r7, #7]
 8000578:	460b      	mov	r3, r1
 800057a:	71bb      	strb	r3, [r7, #6]
 800057c:	4613      	mov	r3, r2
 800057e:	717b      	strb	r3, [r7, #5]
	status = HAL_I2C_Mem_Read(&hi2c1, address, subAddress, 1, dest, count, HAL_MAX_DELAY);
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	b299      	uxth	r1, r3
 8000584:	79bb      	ldrb	r3, [r7, #6]
 8000586:	b29a      	uxth	r2, r3
 8000588:	797b      	ldrb	r3, [r7, #5]
 800058a:	b29b      	uxth	r3, r3
 800058c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000590:	9002      	str	r0, [sp, #8]
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2301      	movs	r3, #1
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <readBytes+0x44>)
 800059c:	f002 fde8 	bl	8003170 <HAL_I2C_Mem_Read>
 80005a0:	4603      	mov	r3, r0
 80005a2:	461a      	mov	r2, r3
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <readBytes+0x48>)
 80005a6:	701a      	strb	r2, [r3, #0]
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200000ec 	.word	0x200000ec
 80005b4:	20000044 	.word	0x20000044

080005b8 <MinitAK8963Slave>:
  IMUwriteByte(AK8963_ADDRESS, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
  delay(10);
}

void MinitAK8963Slave(uint8_t Mscale, uint8_t Mmode, float * magCalibration)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	603a      	str	r2, [r7, #0]
 80005c2:	71fb      	strb	r3, [r7, #7]
 80005c4:	460b      	mov	r3, r1
 80005c6:	71bb      	strb	r3, [r7, #6]
   // First extract the factory calibration for each magnetometer axis
   uint8_t rawData[3];  // x/y/z gyro calibration data stored here

   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_ADDR, AK8963_ADDRESS);           // Set the I2C slave address of AK8963 and set for write.
 80005c8:	2218      	movs	r2, #24
 80005ca:	2125      	movs	r1, #37	; 0x25
 80005cc:	20d0      	movs	r0, #208	; 0xd0
 80005ce:	f7ff ff81 	bl	80004d4 <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_REG, AK8963_CNTL);              // I2C slave 0 register address from where to begin data transfer
 80005d2:	220a      	movs	r2, #10
 80005d4:	2126      	movs	r1, #38	; 0x26
 80005d6:	20d0      	movs	r0, #208	; 0xd0
 80005d8:	f7ff ff7c 	bl	80004d4 <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_DO, 0x01);                       // Reset AK8963
 80005dc:	2201      	movs	r2, #1
 80005de:	2163      	movs	r1, #99	; 0x63
 80005e0:	20d0      	movs	r0, #208	; 0xd0
 80005e2:	f7ff ff77 	bl	80004d4 <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_CTRL, 0x81);                     // Enable I2C and write 1 byte
 80005e6:	2281      	movs	r2, #129	; 0x81
 80005e8:	2127      	movs	r1, #39	; 0x27
 80005ea:	20d0      	movs	r0, #208	; 0xd0
 80005ec:	f7ff ff72 	bl	80004d4 <IMUwriteByte>
   delay(50);
 80005f0:	2032      	movs	r0, #50	; 0x32
 80005f2:	f001 ff51 	bl	8002498 <HAL_Delay>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_ADDR, AK8963_ADDRESS);           // Set the I2C slave address of AK8963 and set for write.
 80005f6:	2218      	movs	r2, #24
 80005f8:	2125      	movs	r1, #37	; 0x25
 80005fa:	20d0      	movs	r0, #208	; 0xd0
 80005fc:	f7ff ff6a 	bl	80004d4 <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_REG, AK8963_CNTL);               // I2C slave 0 register address from where to begin data transfer
 8000600:	220a      	movs	r2, #10
 8000602:	2126      	movs	r1, #38	; 0x26
 8000604:	20d0      	movs	r0, #208	; 0xd0
 8000606:	f7ff ff65 	bl	80004d4 <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_DO, 0x00);                       // Power down magnetometer
 800060a:	2200      	movs	r2, #0
 800060c:	2163      	movs	r1, #99	; 0x63
 800060e:	20d0      	movs	r0, #208	; 0xd0
 8000610:	f7ff ff60 	bl	80004d4 <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_CTRL, 0x81);                     // Enable I2C and write 1 byte
 8000614:	2281      	movs	r2, #129	; 0x81
 8000616:	2127      	movs	r1, #39	; 0x27
 8000618:	20d0      	movs	r0, #208	; 0xd0
 800061a:	f7ff ff5b 	bl	80004d4 <IMUwriteByte>
   delay(50);
 800061e:	2032      	movs	r0, #50	; 0x32
 8000620:	f001 ff3a 	bl	8002498 <HAL_Delay>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_ADDR, AK8963_ADDRESS);           // Set the I2C slave address of AK8963 and set for write.
 8000624:	2218      	movs	r2, #24
 8000626:	2125      	movs	r1, #37	; 0x25
 8000628:	20d0      	movs	r0, #208	; 0xd0
 800062a:	f7ff ff53 	bl	80004d4 <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_REG, AK8963_CNTL);               // I2C slave 0 register address from where to begin data transfer
 800062e:	220a      	movs	r2, #10
 8000630:	2126      	movs	r1, #38	; 0x26
 8000632:	20d0      	movs	r0, #208	; 0xd0
 8000634:	f7ff ff4e 	bl	80004d4 <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_DO, 0x0F);                       // Enter fuze mode
 8000638:	220f      	movs	r2, #15
 800063a:	2163      	movs	r1, #99	; 0x63
 800063c:	20d0      	movs	r0, #208	; 0xd0
 800063e:	f7ff ff49 	bl	80004d4 <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_CTRL, 0x81);                     // Enable I2C and write 1 byte
 8000642:	2281      	movs	r2, #129	; 0x81
 8000644:	2127      	movs	r1, #39	; 0x27
 8000646:	20d0      	movs	r0, #208	; 0xd0
 8000648:	f7ff ff44 	bl	80004d4 <IMUwriteByte>
   delay(50);
 800064c:	2032      	movs	r0, #50	; 0x32
 800064e:	f001 ff23 	bl	8002498 <HAL_Delay>

   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_ADDR, AK8963_ADDRESS | 0x80);    // Set the I2C slave address of AK8963 and set for read.
 8000652:	2298      	movs	r2, #152	; 0x98
 8000654:	2125      	movs	r1, #37	; 0x25
 8000656:	20d0      	movs	r0, #208	; 0xd0
 8000658:	f7ff ff3c 	bl	80004d4 <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_REG, AK8963_ASAX);               // I2C slave 0 register address from where to begin data transfer
 800065c:	2210      	movs	r2, #16
 800065e:	2126      	movs	r1, #38	; 0x26
 8000660:	20d0      	movs	r0, #208	; 0xd0
 8000662:	f7ff ff37 	bl	80004d4 <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_CTRL, 0x83);                     // Enable I2C and read 3 bytes
 8000666:	2283      	movs	r2, #131	; 0x83
 8000668:	2127      	movs	r1, #39	; 0x27
 800066a:	20d0      	movs	r0, #208	; 0xd0
 800066c:	f7ff ff32 	bl	80004d4 <IMUwriteByte>
   delay(50);
 8000670:	2032      	movs	r0, #50	; 0x32
 8000672:	f001 ff11 	bl	8002498 <HAL_Delay>
   readBytes(MPU9250_ADDRESS, EXT_SENS_DATA_00, 3, &rawData[0]);        // Read the x-, y-, and z-axis calibration values
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2203      	movs	r2, #3
 800067c:	2149      	movs	r1, #73	; 0x49
 800067e:	20d0      	movs	r0, #208	; 0xd0
 8000680:	f7ff ff74 	bl	800056c <readBytes>
   magCalibration[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;        // Return x-axis sensitivity adjustment values, etc.
 8000684:	7b3b      	ldrb	r3, [r7, #12]
 8000686:	3b80      	subs	r3, #128	; 0x80
 8000688:	ee07 3a90 	vmov	s15, r3
 800068c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000690:	eddf 6a44 	vldr	s13, [pc, #272]	; 80007a4 <MinitAK8963Slave+0x1ec>
 8000694:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000698:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800069c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	edc3 7a00 	vstr	s15, [r3]
   magCalibration[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 80006a6:	7b7b      	ldrb	r3, [r7, #13]
 80006a8:	3b80      	subs	r3, #128	; 0x80
 80006aa:	ee07 3a90 	vmov	s15, r3
 80006ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006b2:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80007a4 <MinitAK8963Slave+0x1ec>
 80006b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	3304      	adds	r3, #4
 80006be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006c6:	edc3 7a00 	vstr	s15, [r3]
   magCalibration[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 80006ca:	7bbb      	ldrb	r3, [r7, #14]
 80006cc:	3b80      	subs	r3, #128	; 0x80
 80006ce:	ee07 3a90 	vmov	s15, r3
 80006d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006d6:	eddf 6a33 	vldr	s13, [pc, #204]	; 80007a4 <MinitAK8963Slave+0x1ec>
 80006da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	3308      	adds	r3, #8
 80006e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006ea:	edc3 7a00 	vstr	s15, [r3]
   _magCalibration[0] = magCalibration[0];
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a2d      	ldr	r2, [pc, #180]	; (80007a8 <MinitAK8963Slave+0x1f0>)
 80006f4:	6013      	str	r3, [r2, #0]
   _magCalibration[1] = magCalibration[1];
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	4a2b      	ldr	r2, [pc, #172]	; (80007a8 <MinitAK8963Slave+0x1f0>)
 80006fc:	6053      	str	r3, [r2, #4]
   _magCalibration[2] = magCalibration[2];
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	4a29      	ldr	r2, [pc, #164]	; (80007a8 <MinitAK8963Slave+0x1f0>)
 8000704:	6093      	str	r3, [r2, #8]
   _Mmode = Mmode;
 8000706:	4a29      	ldr	r2, [pc, #164]	; (80007ac <MinitAK8963Slave+0x1f4>)
 8000708:	79bb      	ldrb	r3, [r7, #6]
 800070a:	7013      	strb	r3, [r2, #0]

   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_ADDR, AK8963_ADDRESS);           // Set the I2C slave address of AK8963 and set for write.
 800070c:	2218      	movs	r2, #24
 800070e:	2125      	movs	r1, #37	; 0x25
 8000710:	20d0      	movs	r0, #208	; 0xd0
 8000712:	f7ff fedf 	bl	80004d4 <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_REG, AK8963_CNTL);               // I2C slave 0 register address from where to begin data transfer
 8000716:	220a      	movs	r2, #10
 8000718:	2126      	movs	r1, #38	; 0x26
 800071a:	20d0      	movs	r0, #208	; 0xd0
 800071c:	f7ff feda 	bl	80004d4 <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_DO, 0x00);                       // Power down magnetometer
 8000720:	2200      	movs	r2, #0
 8000722:	2163      	movs	r1, #99	; 0x63
 8000724:	20d0      	movs	r0, #208	; 0xd0
 8000726:	f7ff fed5 	bl	80004d4 <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_CTRL, 0x81);                     // Enable I2C and transfer 1 byte
 800072a:	2281      	movs	r2, #129	; 0x81
 800072c:	2127      	movs	r1, #39	; 0x27
 800072e:	20d0      	movs	r0, #208	; 0xd0
 8000730:	f7ff fed0 	bl	80004d4 <IMUwriteByte>
   delay(50);
 8000734:	2032      	movs	r0, #50	; 0x32
 8000736:	f001 feaf 	bl	8002498 <HAL_Delay>

   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_ADDR, AK8963_ADDRESS);           // Set the I2C slave address of AK8963 and set for write.
 800073a:	2218      	movs	r2, #24
 800073c:	2125      	movs	r1, #37	; 0x25
 800073e:	20d0      	movs	r0, #208	; 0xd0
 8000740:	f7ff fec8 	bl	80004d4 <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_REG, AK8963_CNTL);               // I2C slave 0 register address from where to begin data transfer
 8000744:	220a      	movs	r2, #10
 8000746:	2126      	movs	r1, #38	; 0x26
 8000748:	20d0      	movs	r0, #208	; 0xd0
 800074a:	f7ff fec3 	bl	80004d4 <IMUwriteByte>
   // Configure the magnetometer for continuous read and highest resolution
   // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
   // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_DO, Mscale << 4 | Mmode);        // Set magnetometer data resolution and sample ODR
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	011b      	lsls	r3, r3, #4
 8000752:	b25a      	sxtb	r2, r3
 8000754:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000758:	4313      	orrs	r3, r2
 800075a:	b25b      	sxtb	r3, r3
 800075c:	b2db      	uxtb	r3, r3
 800075e:	461a      	mov	r2, r3
 8000760:	2163      	movs	r1, #99	; 0x63
 8000762:	20d0      	movs	r0, #208	; 0xd0
 8000764:	f7ff feb6 	bl	80004d4 <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_CTRL, 0x81);                     // Enable I2C and transfer 1 byte
 8000768:	2281      	movs	r2, #129	; 0x81
 800076a:	2127      	movs	r1, #39	; 0x27
 800076c:	20d0      	movs	r0, #208	; 0xd0
 800076e:	f7ff feb1 	bl	80004d4 <IMUwriteByte>
   delay(50);
 8000772:	2032      	movs	r0, #50	; 0x32
 8000774:	f001 fe90 	bl	8002498 <HAL_Delay>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_ADDR, AK8963_ADDRESS | 0x80);    // Set the I2C slave address of AK8963 and set for read.
 8000778:	2298      	movs	r2, #152	; 0x98
 800077a:	2125      	movs	r1, #37	; 0x25
 800077c:	20d0      	movs	r0, #208	; 0xd0
 800077e:	f7ff fea9 	bl	80004d4 <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_REG, AK8963_CNTL);               // I2C slave 0 register address from where to begin data transfer
 8000782:	220a      	movs	r2, #10
 8000784:	2126      	movs	r1, #38	; 0x26
 8000786:	20d0      	movs	r0, #208	; 0xd0
 8000788:	f7ff fea4 	bl	80004d4 <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_CTRL, 0x81);                     // Enable I2C and transfer 1 byte
 800078c:	2281      	movs	r2, #129	; 0x81
 800078e:	2127      	movs	r1, #39	; 0x27
 8000790:	20d0      	movs	r0, #208	; 0xd0
 8000792:	f7ff fe9f 	bl	80004d4 <IMUwriteByte>
   delay(50);
 8000796:	2032      	movs	r0, #50	; 0x32
 8000798:	f001 fe7e 	bl	8002498 <HAL_Delay>
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	43800000 	.word	0x43800000
 80007a8:	2000002c 	.word	0x2000002c
 80007ac:	20000028 	.word	0x20000028

080007b0 <initMPU9250>:


void initMPU9250(uint8_t Ascale, uint8_t Gscale, uint8_t sampleRate)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	460b      	mov	r3, r1
 80007bc:	71bb      	strb	r3, [r7, #6]
 80007be:	4613      	mov	r3, r2
 80007c0:	717b      	strb	r3, [r7, #5]
 // wake up device
  IMUwriteByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80007c2:	2200      	movs	r2, #0
 80007c4:	216b      	movs	r1, #107	; 0x6b
 80007c6:	20d0      	movs	r0, #208	; 0xd0
 80007c8:	f7ff fe84 	bl	80004d4 <IMUwriteByte>
  delay(100); // Wait for all registers to reset
 80007cc:	2064      	movs	r0, #100	; 0x64
 80007ce:	f001 fe63 	bl	8002498 <HAL_Delay>

 // get stable time source
  IMUwriteByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 80007d2:	2201      	movs	r2, #1
 80007d4:	216b      	movs	r1, #107	; 0x6b
 80007d6:	20d0      	movs	r0, #208	; 0xd0
 80007d8:	f7ff fe7c 	bl	80004d4 <IMUwriteByte>
  delay(200);
 80007dc:	20c8      	movs	r0, #200	; 0xc8
 80007de:	f001 fe5b 	bl	8002498 <HAL_Delay>
 // Disable FSYNC and set thermometer and gyro bandwidth to 41 and 42 Hz, respectively;
 // minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
 // be higher than 1 / 0.0059 = 170 Hz
 // DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
 // With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
  IMUwriteByte(MPU9250_ADDRESS, CONFIG, 0x03);
 80007e2:	2203      	movs	r2, #3
 80007e4:	211a      	movs	r1, #26
 80007e6:	20d0      	movs	r0, #208	; 0xd0
 80007e8:	f7ff fe74 	bl	80004d4 <IMUwriteByte>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  IMUwriteByte(MPU9250_ADDRESS, SMPLRT_DIV, sampleRate);  // Use a 200 Hz rate; a rate consistent with the filter update rate
 80007ec:	797b      	ldrb	r3, [r7, #5]
 80007ee:	461a      	mov	r2, r3
 80007f0:	2119      	movs	r1, #25
 80007f2:	20d0      	movs	r0, #208	; 0xd0
 80007f4:	f7ff fe6e 	bl	80004d4 <IMUwriteByte>
                                                       // determined inset in CONFIG above

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c = IMUreadByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 80007f8:	211b      	movs	r1, #27
 80007fa:	20d0      	movs	r0, #208	; 0xd0
 80007fc:	f7ff fe90 	bl	8000520 <IMUreadByte>
 8000800:	4603      	mov	r3, r0
 8000802:	73fb      	strb	r3, [r7, #15]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	f023 0302 	bic.w	r3, r3, #2
 800080a:	73fb      	strb	r3, [r7, #15]
  c = c & ~0x18; // Clear AFS bits [4:3]
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	f023 0318 	bic.w	r3, r3, #24
 8000812:	73fb      	strb	r3, [r7, #15]
  c = c | Gscale << 3; // Set full scale range for the gyro
 8000814:	79bb      	ldrb	r3, [r7, #6]
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	b25a      	sxtb	r2, r3
 800081a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081e:	4313      	orrs	r3, r2
 8000820:	b25b      	sxtb	r3, r3
 8000822:	73fb      	strb	r3, [r7, #15]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
  IMUwriteByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	461a      	mov	r2, r3
 8000828:	211b      	movs	r1, #27
 800082a:	20d0      	movs	r0, #208	; 0xd0
 800082c:	f7ff fe52 	bl	80004d4 <IMUwriteByte>

  c = 0b10000000;
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	73fb      	strb	r3, [r7, #15]

  IMUwriteByte(MPU9250_ADDRESS, CONFIG, c); // setting gyro sampling rate to 8kHz
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	461a      	mov	r2, r3
 8000838:	211a      	movs	r1, #26
 800083a:	20d0      	movs	r0, #208	; 0xd0
 800083c:	f7ff fe4a 	bl	80004d4 <IMUwriteByte>

 // Set accelerometer full-scale range configuration
  c = IMUreadByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 8000840:	211c      	movs	r1, #28
 8000842:	20d0      	movs	r0, #208	; 0xd0
 8000844:	f7ff fe6c 	bl	8000520 <IMUreadByte>
 8000848:	4603      	mov	r3, r0
 800084a:	73fb      	strb	r3, [r7, #15]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	f023 0318 	bic.w	r3, r3, #24
 8000852:	73fb      	strb	r3, [r7, #15]
  c = c | Ascale << 3; // Set full scale range for the accelerometer
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	b25a      	sxtb	r2, r3
 800085a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800085e:	4313      	orrs	r3, r2
 8000860:	b25b      	sxtb	r3, r3
 8000862:	73fb      	strb	r3, [r7, #15]
  IMUwriteByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	461a      	mov	r2, r3
 8000868:	211c      	movs	r1, #28
 800086a:	20d0      	movs	r0, #208	; 0xd0
 800086c:	f7ff fe32 	bl	80004d4 <IMUwriteByte>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = IMUreadByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 8000870:	211d      	movs	r1, #29
 8000872:	20d0      	movs	r0, #208	; 0xd0
 8000874:	f7ff fe54 	bl	8000520 <IMUreadByte>
 8000878:	4603      	mov	r3, r0
 800087a:	73fb      	strb	r3, [r7, #15]
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	f023 030f 	bic.w	r3, r3, #15
 8000882:	73fb      	strb	r3, [r7, #15]
  IMUwriteByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	461a      	mov	r2, r3
 8000888:	211d      	movs	r1, #29
 800088a:	20d0      	movs	r0, #208	; 0xd0
 800088c:	f7ff fe22 	bl	80004d4 <IMUwriteByte>

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
  // clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
   IMUwriteByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x10);  // INT is 50 microsecond pulse and any read to clear
 8000890:	2210      	movs	r2, #16
 8000892:	2137      	movs	r1, #55	; 0x37
 8000894:	20d0      	movs	r0, #208	; 0xd0
 8000896:	f7ff fe1d 	bl	80004d4 <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 800089a:	2201      	movs	r2, #1
 800089c:	2138      	movs	r1, #56	; 0x38
 800089e:	20d0      	movs	r0, #208	; 0xd0
 80008a0:	f7ff fe18 	bl	80004d4 <IMUwriteByte>
   delay(100);
 80008a4:	2064      	movs	r0, #100	; 0x64
 80008a6:	f001 fdf7 	bl	8002498 <HAL_Delay>

  IMUwriteByte(MPU9250_ADDRESS, USER_CTRL, 0x20);          // Enable I2C Master mode
 80008aa:	2220      	movs	r2, #32
 80008ac:	216a      	movs	r1, #106	; 0x6a
 80008ae:	20d0      	movs	r0, #208	; 0xd0
 80008b0:	f7ff fe10 	bl	80004d4 <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x1D);       // I2C configuration STOP after each transaction, master I2C bus at 400 KHz
 80008b4:	221d      	movs	r2, #29
 80008b6:	2124      	movs	r1, #36	; 0x24
 80008b8:	20d0      	movs	r0, #208	; 0xd0
 80008ba:	f7ff fe0b 	bl	80004d4 <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, I2C_MST_DELAY_CTRL, 0x81); // Use blocking data retreival and enable delay for mag sample rate mismatch
 80008be:	2281      	movs	r2, #129	; 0x81
 80008c0:	2167      	movs	r1, #103	; 0x67
 80008c2:	20d0      	movs	r0, #208	; 0xd0
 80008c4:	f7ff fe06 	bl	80004d4 <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, I2C_SLV4_CTRL, 0x01);      // Delay mag data retrieval to once every other accel/gyro data sample
 80008c8:	2201      	movs	r2, #1
 80008ca:	2134      	movs	r1, #52	; 0x34
 80008cc:	20d0      	movs	r0, #208	; 0xd0
 80008ce:	f7ff fe01 	bl	80004d4 <IMUwriteByte>
}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <LoRa_Receive_interrupt_Handler>:

// Higher level abstractions

// LoRa data receive operations

void LoRa_Receive_interrupt_Handler(lora_sx1276 *lora){
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]

}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <Set_LoRa_Connecting>:

/*
 * Emit till handshake with ground unit (IT driven)
 * Set global flag.
 */
void Set_LoRa_Connecting(lora_sx1276 *lora){
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
	lora->lora_status = LORA_CONNECTING;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2202      	movs	r2, #2
 80008fa:	77da      	strb	r2, [r3, #31]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <Set_LoRa_Broadcast_FLight_Info>:

void Set_LoRa_Connected(lora_sx1276 *lora){
	lora->lora_status = LORA_CONNCETED;
}

void Set_LoRa_Broadcast_FLight_Info(lora_sx1276 *lora){
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	lora->lora_status = LORA_BROADCASTING_FLIGHT_DATA;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2203      	movs	r2, #3
 8000914:	77da      	strb	r2, [r3, #31]
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <LoRa_Connecting_Handler>:
}

// LoRa handlers

// Broadcasting connection message
static void LoRa_Connecting_Handler(lora_sx1276 *lora){
 8000922:	b580      	push	{r7, lr}
 8000924:	b0a2      	sub	sp, #136	; 0x88
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
	uint8_t payload[LORA_MAX_PACKET_SIZE];
	payload[0] = 0x10; // device address
 800092a:	2310      	movs	r3, #16
 800092c:	723b      	strb	r3, [r7, #8]
	payload[1] = 0xFF; // command id (need handshake)
 800092e:	23ff      	movs	r3, #255	; 0xff
 8000930:	727b      	strb	r3, [r7, #9]
	lora_send_packet(lora, payload, 2);
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	2202      	movs	r2, #2
 8000938:	4619      	mov	r1, r3
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f000 fb6f 	bl	800101e <lora_send_packet>
}
 8000940:	bf00      	nop
 8000942:	3788      	adds	r7, #136	; 0x88
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <LoRa_Connected_Handler>:


static void LoRa_Connected_Handler(lora_sx1276 *lora){
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]

	Set_LoRa_Broadcast_FLight_Info(lora);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ffd9 	bl	8000908 <Set_LoRa_Broadcast_FLight_Info>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <LoRa_Disconnected_Handler>:

static void LoRa_Disconnected_Handler(lora_sx1276 *lora){
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
	Set_LoRa_Connecting(lora);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff ffc1 	bl	80008ee <Set_LoRa_Connecting>
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <LoRa_Broadcast_Flight_Data_Handler>:

// broadcasting flight data
static void LoRa_Broadcast_Flight_Data_Handler(lora_sx1276 *lora, void* flight_data){ // later change the void*
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
	uint8_t cs = 9;
 800097e:	2309      	movs	r3, #9
 8000980:	73fb      	strb	r3, [r7, #15]
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <LoRa_Error_Transmit_Handler>:


static void LoRa_Error_Transmit_Handler(lora_sx1276 *lora){
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]

}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
	...

080009a4 <LoRa_Timer_Interrupt_Handler>:

/**
 * Here happens everything which is related to sending data.
 * Each operating state triggers different handlers.
 */
void LoRa_Timer_Interrupt_Handler(lora_sx1276 *lora){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	switch(lora->lora_status){
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	7fdb      	ldrb	r3, [r3, #31]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	d81c      	bhi.n	80009f0 <LoRa_Timer_Interrupt_Handler+0x4c>
 80009b6:	a201      	add	r2, pc, #4	; (adr r2, 80009bc <LoRa_Timer_Interrupt_Handler+0x18>)
 80009b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009bc:	080009e5 	.word	0x080009e5
 80009c0:	080009d7 	.word	0x080009d7
 80009c4:	080009d1 	.word	0x080009d1
 80009c8:	080009dd 	.word	0x080009dd
 80009cc:	080009eb 	.word	0x080009eb
	case LORA_CONNECTING:
		LoRa_Connecting_Handler(lora);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff ffa6 	bl	8000922 <LoRa_Connecting_Handler>
	case LORA_CONNCETED:
		LoRa_Connected_Handler(lora);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff ffb6 	bl	8000948 <LoRa_Connected_Handler>
	case LORA_BROADCASTING_FLIGHT_DATA:
		LoRa_Broadcast_Flight_Data_Handler(lora, (uint8_t*)12);
 80009dc:	210c      	movs	r1, #12
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff ffc8 	bl	8000974 <LoRa_Broadcast_Flight_Data_Handler>
	case LORA_DISCONNECTED:
		LoRa_Disconnected_Handler(lora);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff ffba 	bl	800095e <LoRa_Disconnected_Handler>
	case LORA_ROCKET_ERROR_TRANSMIT:
		LoRa_Error_Transmit_Handler(lora);
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff ffcf 	bl	800098e <LoRa_Error_Transmit_Handler>
	}
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	460b      	mov	r3, r1
 8000a02:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8000a08:	78fb      	ldrb	r3, [r7, #3]
 8000a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6858      	ldr	r0, [r3, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	8adb      	ldrh	r3, [r3, #22]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f002 f9d3 	bl	8002dc8 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6818      	ldr	r0, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	1cf9      	adds	r1, r7, #3
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f004 faee 	bl	800500e <HAL_SPI_Transmit>
 8000a32:	4603      	mov	r3, r0
 8000a34:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6818      	ldr	r0, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	f107 010f 	add.w	r1, r7, #15
 8000a42:	2201      	movs	r2, #1
 8000a44:	f004 fc51 	bl	80052ea <HAL_SPI_Receive>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6858      	ldr	r0, [r3, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	8adb      	ldrh	r3, [r3, #22]
 8000a54:	2201      	movs	r2, #1
 8000a56:	4619      	mov	r1, r3
 8000a58:	f002 f9b6 	bl	8002dc8 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b084      	sub	sp, #16
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	70fb      	strb	r3, [r7, #3]
 8000a72:	4613      	mov	r3, r2
 8000a74:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8000a76:	78fb      	ldrb	r3, [r7, #3]
 8000a78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a7c:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8000a7e:	78bb      	ldrb	r3, [r7, #2]
 8000a80:	021b      	lsls	r3, r3, #8
 8000a82:	b21a      	sxth	r2, r3
 8000a84:	78fb      	ldrb	r3, [r7, #3]
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	b21b      	sxth	r3, r3
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6858      	ldr	r0, [r3, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	8adb      	ldrh	r3, [r3, #22]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f002 f994 	bl	8002dc8 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6818      	ldr	r0, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	f107 010a 	add.w	r1, r7, #10
 8000aac:	2202      	movs	r2, #2
 8000aae:	f004 faae 	bl	800500e <HAL_SPI_Transmit>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6858      	ldr	r0, [r3, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	8adb      	ldrh	r3, [r3, #22]
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f002 f981 	bl	8002dc8 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b088      	sub	sp, #32
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	60f8      	str	r0, [r7, #12]
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	4611      	mov	r1, r2
 8000ada:	461a      	mov	r2, r3
 8000adc:	460b      	mov	r3, r1
 8000ade:	71fb      	strb	r3, [r7, #7]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	6858      	ldr	r0, [r3, #4]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	8adb      	ldrh	r3, [r3, #22]
 8000af0:	2200      	movs	r2, #0
 8000af2:	4619      	mov	r1, r3
 8000af4:	f002 f968 	bl	8002dc8 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	6818      	ldr	r0, [r3, #0]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	f107 0117 	add.w	r1, r7, #23
 8000b04:	2201      	movs	r2, #1
 8000b06:	f004 fa82 	bl	800500e <HAL_SPI_Transmit>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8000b0e:	79bb      	ldrb	r3, [r7, #6]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d108      	bne.n	8000b26 <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	79fa      	ldrb	r2, [r7, #7]
 8000b1a:	b292      	uxth	r2, r2
 8000b1c:	68b9      	ldr	r1, [r7, #8]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f004 ff26 	bl	8005970 <HAL_SPI_Transmit_DMA>
 8000b24:	e012      	b.n	8000b4c <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	6818      	ldr	r0, [r3, #0]
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	68b9      	ldr	r1, [r7, #8]
 8000b34:	f004 fa6b 	bl	800500e <HAL_SPI_Transmit>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	6858      	ldr	r0, [r3, #4]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	8adb      	ldrh	r3, [r3, #22]
 8000b44:	2201      	movs	r2, #1
 8000b46:	4619      	mov	r1, r3
 8000b48:	f002 f93e 	bl	8002dc8 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8000b4c:	3720      	adds	r7, #32
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8000b5e:	78fb      	ldrb	r3, [r7, #3]
 8000b60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	461a      	mov	r2, r3
 8000b68:	2101      	movs	r1, #1
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ff7b 	bl	8000a66 <write_register>
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	2b2c      	cmp	r3, #44	; 0x2c
 8000b88:	d801      	bhi.n	8000b8e <set_OCP+0x16>
    imax = 45;
 8000b8a:	232d      	movs	r3, #45	; 0x2d
 8000b8c:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8000b8e:	78fb      	ldrb	r3, [r7, #3]
 8000b90:	2bf0      	cmp	r3, #240	; 0xf0
 8000b92:	d901      	bls.n	8000b98 <set_OCP+0x20>
    imax = 240;
 8000b94:	23f0      	movs	r3, #240	; 0xf0
 8000b96:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8000b98:	78fb      	ldrb	r3, [r7, #3]
 8000b9a:	2b81      	cmp	r3, #129	; 0x81
 8000b9c:	d809      	bhi.n	8000bb2 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8000b9e:	78fb      	ldrb	r3, [r7, #3]
 8000ba0:	3b2d      	subs	r3, #45	; 0x2d
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <set_OCP+0x68>)
 8000ba4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba8:	1052      	asrs	r2, r2, #1
 8000baa:	17db      	asrs	r3, r3, #31
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	73fb      	strb	r3, [r7, #15]
 8000bb0:	e008      	b.n	8000bc4 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8000bb2:	78fb      	ldrb	r3, [r7, #3]
 8000bb4:	331e      	adds	r3, #30
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <set_OCP+0x68>)
 8000bb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bbc:	1092      	asrs	r2, r2, #2
 8000bbe:	17db      	asrs	r3, r3, #31
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	f043 0320 	orr.w	r3, r3, #32
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	461a      	mov	r2, r3
 8000bce:	210b      	movs	r1, #11
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ff48 	bl	8000a66 <write_register>
}
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	66666667 	.word	0x66666667

08000be4 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8000be4:	b5b0      	push	{r4, r5, r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8000bec:	211d      	movs	r1, #29
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ff02 	bl	80009f8 <read_register>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	091b      	lsrs	r3, r3, #4
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	461c      	mov	r4, r3
 8000c00:	4615      	mov	r5, r2
 8000c02:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8000c06:	211e      	movs	r1, #30
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff fef5 	bl	80009f8 <read_register>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	091b      	lsrs	r3, r3, #4
 8000c12:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8000c14:	2304      	movs	r3, #4
 8000c16:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	2b0a      	cmp	r3, #10
 8000c1c:	d908      	bls.n	8000c30 <set_low_data_rate_optimization+0x4c>
 8000c1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c22:	1fd1      	subs	r1, r2, #7
 8000c24:	430b      	orrs	r3, r1
 8000c26:	d103      	bne.n	8000c30 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8000c28:	7ffb      	ldrb	r3, [r7, #31]
 8000c2a:	f043 0308 	orr.w	r3, r3, #8
 8000c2e:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8000c30:	7ffb      	ldrb	r3, [r7, #31]
 8000c32:	461a      	mov	r2, r3
 8000c34:	2126      	movs	r1, #38	; 0x26
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ff15 	bl	8000a66 <write_register>
}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bdb0      	pop	{r4, r5, r7, pc}

08000c44 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ff7f 	bl	8000b52 <set_mode>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8000c64:	2101      	movs	r1, #1
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ff73 	bl	8000b52 <set_mode>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8000c7c:	211d      	movs	r1, #29
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff feba 	bl	80009f8 <read_register>
 8000c84:	4603      	mov	r3, r0
 8000c86:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	f023 0301 	bic.w	r3, r3, #1
 8000c8e:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	461a      	mov	r2, r3
 8000c94:	211d      	movs	r1, #29
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff fee5 	bl	8000a66 <write_register>
}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	691b      	ldr	r3, [r3, #16]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d10e      	bne.n	8000cd6 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8000cb8:	78fb      	ldrb	r3, [r7, #3]
 8000cba:	2b0f      	cmp	r3, #15
 8000cbc:	d901      	bls.n	8000cc2 <lora_set_tx_power+0x1e>
      level = 15;
 8000cbe:	230f      	movs	r3, #15
 8000cc0:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8000cc2:	78fb      	ldrb	r3, [r7, #3]
 8000cc4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	461a      	mov	r2, r3
 8000ccc:	2109      	movs	r1, #9
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff fec9 	bl	8000a66 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8000cd4:	e02e      	b.n	8000d34 <lora_set_tx_power+0x90>
    if (level > 20) {
 8000cd6:	78fb      	ldrb	r3, [r7, #3]
 8000cd8:	2b14      	cmp	r3, #20
 8000cda:	d901      	bls.n	8000ce0 <lora_set_tx_power+0x3c>
      level = 20;
 8000cdc:	2314      	movs	r3, #20
 8000cde:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8000ce0:	78fb      	ldrb	r3, [r7, #3]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d801      	bhi.n	8000cea <lora_set_tx_power+0x46>
      level = 2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 8000cea:	78fb      	ldrb	r3, [r7, #3]
 8000cec:	2b11      	cmp	r3, #17
 8000cee:	d90c      	bls.n	8000d0a <lora_set_tx_power+0x66>
      level -= 3;
 8000cf0:	78fb      	ldrb	r3, [r7, #3]
 8000cf2:	3b03      	subs	r3, #3
 8000cf4:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8000cf6:	2287      	movs	r2, #135	; 0x87
 8000cf8:	214d      	movs	r1, #77	; 0x4d
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff feb3 	bl	8000a66 <write_register>
      set_OCP(lora, 140);
 8000d00:	218c      	movs	r1, #140	; 0x8c
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ff38 	bl	8000b78 <set_OCP>
 8000d08:	e008      	b.n	8000d1c <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8000d0a:	2284      	movs	r2, #132	; 0x84
 8000d0c:	214d      	movs	r1, #77	; 0x4d
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff fea9 	bl	8000a66 <write_register>
      set_OCP(lora, 97);
 8000d14:	2161      	movs	r1, #97	; 0x61
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ff2e 	bl	8000b78 <set_OCP>
    level -= 2;
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	3b02      	subs	r3, #2
 8000d20:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8000d22:	78fb      	ldrb	r3, [r7, #3]
 8000d24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	2109      	movs	r1, #9
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fe99 	bl	8000a66 <write_register>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8000d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d4c:	f04f 0000 	mov.w	r0, #0
 8000d50:	f04f 0100 	mov.w	r1, #0
 8000d54:	04d9      	lsls	r1, r3, #19
 8000d56:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000d5a:	04d0      	lsls	r0, r2, #19
 8000d5c:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <lora_set_frequency+0x88>)
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	f7ff fa35 	bl	80001d0 <__aeabi_uldivmod>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8000d6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d72:	f04f 0200 	mov.w	r2, #0
 8000d76:	f04f 0300 	mov.w	r3, #0
 8000d7a:	0c02      	lsrs	r2, r0, #16
 8000d7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d80:	0c0b      	lsrs	r3, r1, #16
 8000d82:	b2d3      	uxtb	r3, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	2106      	movs	r1, #6
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	f7ff fe6c 	bl	8000a66 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8000d8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d92:	f04f 0200 	mov.w	r2, #0
 8000d96:	f04f 0300 	mov.w	r3, #0
 8000d9a:	0a02      	lsrs	r2, r0, #8
 8000d9c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000da0:	0a0b      	lsrs	r3, r1, #8
 8000da2:	b2d3      	uxtb	r3, r2
 8000da4:	461a      	mov	r2, r3
 8000da6:	2107      	movs	r1, #7
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	f7ff fe5c 	bl	8000a66 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 8000dae:	7c3b      	ldrb	r3, [r7, #16]
 8000db0:	461a      	mov	r2, r3
 8000db2:	2108      	movs	r1, #8
 8000db4:	68f8      	ldr	r0, [r7, #12]
 8000db6:	f7ff fe56 	bl	8000a66 <write_register>
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	01e84800 	.word	0x01e84800

08000dc8 <lora_set_signal_bandwidth>:

  return snr / 5;
}

void lora_set_signal_bandwidth(lora_sx1276 *lora, uint64_t bw)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora && bw < LORA_BW_LAST);

  // REG_MODEM_CONFIG_1 has 2 more parameters:
  // Coding rate / Header mode, so read them before set bandwidth
  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8000dd4:	211d      	movs	r1, #29
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f7ff fe0e 	bl	80009f8 <read_register>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	75fb      	strb	r3, [r7, #23]
  // Signal bandwidth uses 4-7 bits of config
  mc1 = (mc1 & 0x0F) | bw << 4;
 8000de0:	7dfb      	ldrb	r3, [r7, #23]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	783b      	ldrb	r3, [r7, #0]
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4313      	orrs	r3, r2
 8000df0:	75fb      	strb	r3, [r7, #23]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8000df2:	7dfb      	ldrb	r3, [r7, #23]
 8000df4:	461a      	mov	r2, r3
 8000df6:	211d      	movs	r1, #29
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	f7ff fe34 	bl	8000a66 <write_register>

  set_low_data_rate_optimization(lora);
 8000dfe:	68f8      	ldr	r0, [r7, #12]
 8000e00:	f7ff fef0 	bl	8000be4 <set_low_data_rate_optimization>
}
 8000e04:	bf00      	nop
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <lora_set_spreading_factor>:

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8000e18:	78fb      	ldrb	r3, [r7, #3]
 8000e1a:	2b05      	cmp	r3, #5
 8000e1c:	d802      	bhi.n	8000e24 <lora_set_spreading_factor+0x18>
    sf = 6;
 8000e1e:	2306      	movs	r3, #6
 8000e20:	70fb      	strb	r3, [r7, #3]
 8000e22:	e004      	b.n	8000e2e <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	2b0c      	cmp	r3, #12
 8000e28:	d901      	bls.n	8000e2e <lora_set_spreading_factor+0x22>
    sf = 12;
 8000e2a:	230c      	movs	r3, #12
 8000e2c:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	2b06      	cmp	r3, #6
 8000e32:	d10a      	bne.n	8000e4a <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8000e34:	22c5      	movs	r2, #197	; 0xc5
 8000e36:	2131      	movs	r1, #49	; 0x31
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff fe14 	bl	8000a66 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8000e3e:	220c      	movs	r2, #12
 8000e40:	2137      	movs	r1, #55	; 0x37
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff fe0f 	bl	8000a66 <write_register>
 8000e48:	e009      	b.n	8000e5e <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8000e4a:	22c3      	movs	r2, #195	; 0xc3
 8000e4c:	2131      	movs	r1, #49	; 0x31
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff fe09 	bl	8000a66 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8000e54:	220a      	movs	r2, #10
 8000e56:	2137      	movs	r1, #55	; 0x37
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff fe04 	bl	8000a66 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8000e5e:	211e      	movs	r1, #30
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff fdc9 	bl	80009f8 <read_register>
 8000e66:	4603      	mov	r3, r0
 8000e68:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8000e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	b25a      	sxtb	r2, r3
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	b25b      	sxtb	r3, r3
 8000e7e:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	461a      	mov	r2, r3
 8000e84:	211e      	movs	r1, #30
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff fded 	bl	8000a66 <write_register>

  set_low_data_rate_optimization(lora);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff fea9 	bl	8000be4 <set_low_data_rate_optimization>
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <lora_set_crc>:

void lora_set_crc(lora_sx1276 *lora, uint8_t enable)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b084      	sub	sp, #16
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8000ea6:	211e      	movs	r1, #30
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff fda5 	bl	80009f8 <read_register>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	73fb      	strb	r3, [r7, #15]

  if (enable) {
 8000eb2:	78fb      	ldrb	r3, [r7, #3]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d004      	beq.n	8000ec2 <lora_set_crc+0x28>
    mc2 |= MC2_CRC_ON;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	e003      	b.n	8000eca <lora_set_crc+0x30>
  } else {
    mc2 &= ~MC2_CRC_ON;
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	f023 0304 	bic.w	r3, r3, #4
 8000ec8:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	211e      	movs	r1, #30
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff fdc8 	bl	8000a66 <write_register>
}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <lora_set_coding_rate>:

void lora_set_coding_rate(lora_sx1276 *lora, uint8_t rate)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8000eea:	211d      	movs	r1, #29
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff fd83 	bl	80009f8 <read_register>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	73fb      	strb	r3, [r7, #15]

  // coding rate bits are 1-3 in modem config 1 register
  mc1 |= rate << 1;
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	b25a      	sxtb	r2, r3
 8000efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	211d      	movs	r1, #29
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff fdaa 	bl	8000a66 <write_register>
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <lora_set_preamble_length>:

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	461a      	mov	r2, r3
 8000f30:	2120      	movs	r1, #32
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff fd97 	bl	8000a66 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	f003 030f 	and.w	r3, r3, #15
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	461a      	mov	r2, r3
 8000f44:	2121      	movs	r1, #33	; 0x21
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff fd8d 	bl	8000a66 <write_register>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8000f5c:	2142      	movs	r1, #66	; 0x42
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff fd4a 	bl	80009f8 <read_register>
 8000f64:	4603      	mov	r3, r0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b084      	sub	sp, #16
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 8000f76:	2101      	movs	r1, #1
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff fd3d 	bl	80009f8 <read_register>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d101      	bne.n	8000f90 <lora_is_transmitting+0x22>
 8000f8c:	2305      	movs	r3, #5
 8000f8e:	e000      	b.n	8000f92 <lora_is_transmitting+0x24>
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	460b      	mov	r3, r1
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	4613      	mov	r3, r2
 8000fae:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f7ff ffdc 	bl	8000f6e <lora_is_transmitting>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8000fbc:	2305      	movs	r3, #5
 8000fbe:	e02a      	b.n	8001016 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f7ff fdc5 	bl	8000b52 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f000 f854 	bl	8001076 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	7d1b      	ldrb	r3, [r3, #20]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	210d      	movs	r1, #13
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f7ff fd45 	bl	8000a66 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	7d1b      	ldrb	r3, [r3, #20]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	210e      	movs	r1, #14
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f7ff fd3e 	bl	8000a66 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	461a      	mov	r2, r3
 8000fee:	2122      	movs	r1, #34	; 0x22
 8000ff0:	68f8      	ldr	r0, [r7, #12]
 8000ff2:	f7ff fd38 	bl	8000a66 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8000ff6:	79bb      	ldrb	r3, [r7, #6]
 8000ff8:	79fa      	ldrb	r2, [r7, #7]
 8000ffa:	68b9      	ldr	r1, [r7, #8]
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f7ff fd66 	bl	8000ace <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d101      	bne.n	800100c <lora_send_packet_base+0x72>
    return LORA_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	e004      	b.n	8001016 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 800100c:	2103      	movs	r1, #3
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f7ff fd9f 	bl	8000b52 <set_mode>
  return LORA_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af00      	add	r7, sp, #0
 8001024:	60f8      	str	r0, [r7, #12]
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	4613      	mov	r3, r2
 800102a:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 800102c:	79fa      	ldrb	r2, [r7, #7]
 800102e:	2302      	movs	r3, #2
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f7ff ffb1 	bl	8000f9a <lora_send_packet_base>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <lora_enable_interrupt_rx_done>:

  return lora_receive_packet(lora, buffer, buffer_len, error);
}

void lora_enable_interrupt_rx_done(lora_sx1276 *lora)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  // Table 63 DIO Mapping LoRaTM Mode:
  // 00 -> (DIO0 rx_done)
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x00);
 800104a:	2200      	movs	r2, #0
 800104c:	2140      	movs	r1, #64	; 0x40
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fd09 	bl	8000a66 <write_register>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <lora_enable_interrupt_tx_done>:

void lora_enable_interrupt_tx_done(lora_sx1276 *lora)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  // Table 63 DIO Mapping LoRaTM Mode:
  // 01 -> (DIO0 tx_done)
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
 8001064:	2240      	movs	r2, #64	; 0x40
 8001066:	2140      	movs	r1, #64	; 0x40
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff fcfc 	bl	8000a66 <write_register>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <lora_clear_interrupt_tx_done>:

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 800107e:	2208      	movs	r2, #8
 8001080:	2112      	movs	r1, #18
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff fcef 	bl	8000a66 <write_register>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <lora_init>:
	HAL_Delay(100);
}

uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, GPIO_TypeDef *reset_port, uint16_t reset_pin,  uint64_t freq, uint8_t dev_add)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	887a      	ldrh	r2, [r7, #2]
 80010ae:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 80010b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2201      	movs	r2, #1
 80010ba:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2200      	movs	r2, #0
 80010c0:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2200      	movs	r2, #0
 80010c6:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ce:	609a      	str	r2, [r3, #8]

  lora->reset_port = reset_port;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6a3a      	ldr	r2, [r7, #32]
 80010d4:	619a      	str	r2, [r3, #24]
  lora->reset_pin = reset_pin;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80010da:	839a      	strh	r2, [r3, #28]

  // Check version
  uint8_t ver = lora_version(lora);
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f7ff ff39 	bl	8000f54 <lora_version>
 80010e2:	4603      	mov	r3, r0
 80010e4:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
 80010e8:	2b12      	cmp	r3, #18
 80010ea:	d001      	beq.n	80010f0 <lora_init+0x60>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 80010ec:	2304      	movs	r3, #4
 80010ee:	e031      	b.n	8001154 <lora_init+0xc4>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff fda7 	bl	8000c44 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f7ff fda4 	bl	8000c44 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 80010fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f7ff fe1b 	bl	8000d3c <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8001106:	2107      	movs	r1, #7
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f7ff fe7f 	bl	8000e0c <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 800110e:	210a      	movs	r1, #10
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f7ff ff02 	bl	8000f1a <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f7ff fdac 	bl	8000c74 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 800111c:	210c      	movs	r1, #12
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f7ff fc6a 	bl	80009f8 <read_register>
 8001124:	4603      	mov	r3, r0
 8001126:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8001128:	7dbb      	ldrb	r3, [r7, #22]
 800112a:	f043 0303 	orr.w	r3, r3, #3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	461a      	mov	r2, r3
 8001132:	210c      	movs	r1, #12
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f7ff fc96 	bl	8000a66 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 800113a:	2204      	movs	r2, #4
 800113c:	2126      	movs	r1, #38	; 0x26
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f7ff fc91 	bl	8000a66 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8001144:	2111      	movs	r1, #17
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f7ff fdac 	bl	8000ca4 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f7ff fd85 	bl	8000c5c <lora_mode_standby>

  return LORA_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <bmp280_init_default_params>:

BMP280_HandleTypedef bmp280;

Altimeter_Data altimeter_data;

void bmp280_init_default_params(bmp280_params_t *params) {
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2203      	movs	r2, #3
 8001168:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2203      	movs	r2, #3
 8001174:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2203      	movs	r2, #3
 800117a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2203      	movs	r2, #3
 8001180:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2203      	movs	r2, #3
 8001186:	715a      	strb	r2, [r3, #5]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af04      	add	r7, sp, #16
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	460b      	mov	r3, r1
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80011ae:	7afb      	ldrb	r3, [r7, #11]
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	8af9      	ldrh	r1, [r7, #22]
 80011b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	2302      	movs	r3, #2
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2301      	movs	r3, #1
 80011c6:	f001 ffd3 	bl	8003170 <HAL_I2C_Mem_Read>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d10b      	bne.n	80011e8 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80011d0:	7d7b      	ldrb	r3, [r7, #21]
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	7d3b      	ldrb	r3, [r7, #20]
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4313      	orrs	r3, r2
 80011dc:	b21b      	sxth	r3, r3
 80011de:	b29a      	uxth	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	801a      	strh	r2, [r3, #0]
		return true;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e000      	b.n	80011ea <read_register16+0x56>
	} else
		return false;
 80011e8:	2300      	movs	r3, #0

}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80011f2:	b590      	push	{r4, r7, lr}
 80011f4:	b08b      	sub	sp, #44	; 0x2c
 80011f6:	af04      	add	r7, sp, #16
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	461a      	mov	r2, r3
 80011fe:	460b      	mov	r3, r1
 8001200:	72fb      	strb	r3, [r7, #11]
 8001202:	4613      	mov	r3, r2
 8001204:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001212:	7afb      	ldrb	r3, [r7, #11]
 8001214:	b29a      	uxth	r2, r3
 8001216:	7abb      	ldrb	r3, [r7, #10]
 8001218:	b29b      	uxth	r3, r3
 800121a:	8af9      	ldrh	r1, [r7, #22]
 800121c:	f241 3488 	movw	r4, #5000	; 0x1388
 8001220:	9402      	str	r4, [sp, #8]
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2301      	movs	r3, #1
 800122a:	f001 ffa1 	bl	8003170 <HAL_I2C_Mem_Read>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <read_data+0x46>
		return 0;
 8001234:	2300      	movs	r3, #0
 8001236:	e000      	b.n	800123a <read_data+0x48>
	else
		return 1;
 8001238:	2301      	movs	r3, #1

}
 800123a:	4618      	mov	r0, r3
 800123c:	371c      	adds	r7, #28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd90      	pop	{r4, r7, pc}

08001242 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	461a      	mov	r2, r3
 800124e:	2188      	movs	r1, #136	; 0x88
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff9f 	bl	8001194 <read_register16>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d06f      	beq.n	800133c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3302      	adds	r3, #2
 8001260:	461a      	mov	r2, r3
 8001262:	218a      	movs	r1, #138	; 0x8a
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff95 	bl	8001194 <read_register16>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d065      	beq.n	800133c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3304      	adds	r3, #4
 8001274:	461a      	mov	r2, r3
 8001276:	218c      	movs	r1, #140	; 0x8c
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff8b 	bl	8001194 <read_register16>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d05b      	beq.n	800133c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3306      	adds	r3, #6
 8001288:	461a      	mov	r2, r3
 800128a:	218e      	movs	r1, #142	; 0x8e
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff81 	bl	8001194 <read_register16>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d051      	beq.n	800133c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3308      	adds	r3, #8
 800129c:	461a      	mov	r2, r3
 800129e:	2190      	movs	r1, #144	; 0x90
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff77 	bl	8001194 <read_register16>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d047      	beq.n	800133c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	330a      	adds	r3, #10
 80012b0:	461a      	mov	r2, r3
 80012b2:	2192      	movs	r1, #146	; 0x92
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff6d 	bl	8001194 <read_register16>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d03d      	beq.n	800133c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	330c      	adds	r3, #12
 80012c4:	461a      	mov	r2, r3
 80012c6:	2194      	movs	r1, #148	; 0x94
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff63 	bl	8001194 <read_register16>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d033      	beq.n	800133c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	330e      	adds	r3, #14
 80012d8:	461a      	mov	r2, r3
 80012da:	2196      	movs	r1, #150	; 0x96
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff59 	bl	8001194 <read_register16>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d029      	beq.n	800133c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3310      	adds	r3, #16
 80012ec:	461a      	mov	r2, r3
 80012ee:	2198      	movs	r1, #152	; 0x98
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff4f 	bl	8001194 <read_register16>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d01f      	beq.n	800133c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3312      	adds	r3, #18
 8001300:	461a      	mov	r2, r3
 8001302:	219a      	movs	r1, #154	; 0x9a
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff45 	bl	8001194 <read_register16>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d015      	beq.n	800133c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3314      	adds	r3, #20
 8001314:	461a      	mov	r2, r3
 8001316:	219c      	movs	r1, #156	; 0x9c
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff3b 	bl	8001194 <read_register16>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d00b      	beq.n	800133c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001328:	461a      	mov	r2, r3
 800132a:	219e      	movs	r1, #158	; 0x9e
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff31 	bl	8001194 <read_register16>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <read_calibration_data+0xfa>

		return true;
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <read_calibration_data+0xfc>
	}

	return false;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f103 0218 	add.w	r2, r3, #24
 8001354:	2301      	movs	r3, #1
 8001356:	21a1      	movs	r1, #161	; 0xa1
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff4a 	bl	80011f2 <read_data>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d14b      	bne.n	80013fc <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	331a      	adds	r3, #26
 8001368:	461a      	mov	r2, r3
 800136a:	21e1      	movs	r1, #225	; 0xe1
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff11 	bl	8001194 <read_register16>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d041      	beq.n	80013fc <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f103 021c 	add.w	r2, r3, #28
 800137e:	2301      	movs	r3, #1
 8001380:	21e3      	movs	r1, #227	; 0xe3
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ff35 	bl	80011f2 <read_data>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d136      	bne.n	80013fc <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800138e:	f107 030e 	add.w	r3, r7, #14
 8001392:	461a      	mov	r2, r3
 8001394:	21e4      	movs	r1, #228	; 0xe4
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fefc 	bl	8001194 <read_register16>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d02c      	beq.n	80013fc <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	461a      	mov	r2, r3
 80013a8:	21e5      	movs	r1, #229	; 0xe5
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff fef2 	bl	8001194 <read_register16>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d022      	beq.n	80013fc <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80013bc:	2301      	movs	r3, #1
 80013be:	21e7      	movs	r1, #231	; 0xe7
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff16 	bl	80011f2 <read_data>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d117      	bne.n	80013fc <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80013cc:	89fb      	ldrh	r3, [r7, #14]
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80013d6:	b21a      	sxth	r2, r3
 80013d8:	89fb      	ldrh	r3, [r7, #14]
 80013da:	121b      	asrs	r3, r3, #8
 80013dc:	b21b      	sxth	r3, r3
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	4313      	orrs	r3, r2
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80013ec:	89bb      	ldrh	r3, [r7, #12]
 80013ee:	091b      	lsrs	r3, r3, #4
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	b21a      	sxth	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	841a      	strh	r2, [r3, #32]

		return true;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e000      	b.n	80013fe <read_hum_calibration_data+0xb8>
	}

	return false;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001406:	b580      	push	{r7, lr}
 8001408:	b088      	sub	sp, #32
 800140a:	af04      	add	r7, sp, #16
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	460b      	mov	r3, r1
 8001410:	70fb      	strb	r3, [r7, #3]
 8001412:	4613      	mov	r3, r2
 8001414:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001422:	78fb      	ldrb	r3, [r7, #3]
 8001424:	b29a      	uxth	r2, r3
 8001426:	89f9      	ldrh	r1, [r7, #14]
 8001428:	f242 7310 	movw	r3, #10000	; 0x2710
 800142c:	9302      	str	r3, [sp, #8]
 800142e:	2301      	movs	r3, #1
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	1cbb      	adds	r3, r7, #2
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	2301      	movs	r3, #1
 8001438:	f001 fd86 	bl	8002f48 <HAL_I2C_Mem_Write>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <write_register8+0x40>
		return false;
 8001442:	2300      	movs	r3, #0
 8001444:	e000      	b.n	8001448 <write_register8+0x42>
	else
		return true;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800145e:	2b76      	cmp	r3, #118	; 0x76
 8001460:	d005      	beq.n	800146e <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001466:	2b77      	cmp	r3, #119	; 0x77
 8001468:	d001      	beq.n	800146e <bmp280_init+0x1e>

		return false;
 800146a:	2300      	movs	r3, #0
 800146c:	e099      	b.n	80015a2 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001474:	2301      	movs	r3, #1
 8001476:	21d0      	movs	r1, #208	; 0xd0
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff feba 	bl	80011f2 <read_data>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <bmp280_init+0x38>
		return false;
 8001484:	2300      	movs	r3, #0
 8001486:	e08c      	b.n	80015a2 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800148e:	2b58      	cmp	r3, #88	; 0x58
 8001490:	d006      	beq.n	80014a0 <bmp280_init+0x50>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001498:	2b60      	cmp	r3, #96	; 0x60
 800149a:	d001      	beq.n	80014a0 <bmp280_init+0x50>

		return false;
 800149c:	2300      	movs	r3, #0
 800149e:	e080      	b.n	80015a2 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80014a0:	22b6      	movs	r2, #182	; 0xb6
 80014a2:	21e0      	movs	r1, #224	; 0xe0
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ffae 	bl	8001406 <write_register8>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <bmp280_init+0x64>
		return false;
 80014b0:	2300      	movs	r3, #0
 80014b2:	e076      	b.n	80015a2 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80014b4:	f107 020c 	add.w	r2, r7, #12
 80014b8:	2301      	movs	r3, #1
 80014ba:	21f3      	movs	r1, #243	; 0xf3
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff fe98 	bl	80011f2 <read_data>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f5      	bne.n	80014b4 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80014c8:	7b3b      	ldrb	r3, [r7, #12]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff feb5 	bl	8001242 <read_calibration_data>
 80014d8:	4603      	mov	r3, r0
 80014da:	f083 0301 	eor.w	r3, r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d100      	bne.n	80014e6 <bmp280_init+0x96>
 80014e4:	e001      	b.n	80014ea <bmp280_init+0x9a>
		return false;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e05b      	b.n	80015a2 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014f0:	2b60      	cmp	r3, #96	; 0x60
 80014f2:	d10a      	bne.n	800150a <bmp280_init+0xba>
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff26 	bl	8001346 <read_hum_calibration_data>
 80014fa:	4603      	mov	r3, r0
 80014fc:	f083 0301 	eor.w	r3, r3, #1
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <bmp280_init+0xba>
		return false;
 8001506:	2300      	movs	r3, #0
 8001508:	e04b      	b.n	80015a2 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	795b      	ldrb	r3, [r3, #5]
 800150e:	015b      	lsls	r3, r3, #5
 8001510:	b25a      	sxtb	r2, r3
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	785b      	ldrb	r3, [r3, #1]
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	b25b      	sxtb	r3, r3
 800151a:	4313      	orrs	r3, r2
 800151c:	b25b      	sxtb	r3, r3
 800151e:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	461a      	mov	r2, r3
 8001524:	21f5      	movs	r1, #245	; 0xf5
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ff6d 	bl	8001406 <write_register8>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <bmp280_init+0xe6>
		return false;
 8001532:	2300      	movs	r3, #0
 8001534:	e035      	b.n	80015a2 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d102      	bne.n	8001544 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	78db      	ldrb	r3, [r3, #3]
 8001548:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 800154a:	b25a      	sxtb	r2, r3
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	789b      	ldrb	r3, [r3, #2]
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	b25b      	sxtb	r3, r3
 8001554:	4313      	orrs	r3, r2
 8001556:	b25a      	sxtb	r2, r3
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b25b      	sxtb	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001562:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800156a:	2b60      	cmp	r3, #96	; 0x60
 800156c:	d10d      	bne.n	800158a <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	791b      	ldrb	r3, [r3, #4]
 8001572:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001574:	7b7b      	ldrb	r3, [r7, #13]
 8001576:	461a      	mov	r2, r3
 8001578:	21f2      	movs	r1, #242	; 0xf2
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ff43 	bl	8001406 <write_register8>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <bmp280_init+0x13a>
			return false;
 8001586:	2300      	movs	r3, #0
 8001588:	e00b      	b.n	80015a2 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800158a:	7bbb      	ldrb	r3, [r7, #14]
 800158c:	461a      	mov	r2, r3
 800158e:	21f4      	movs	r1, #244	; 0xf4
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff38 	bl	8001406 <write_register8>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <bmp280_init+0x150>
		return false;
 800159c:	2300      	movs	r3, #0
 800159e:	e000      	b.n	80015a2 <bmp280_init+0x152>
	}

	return true;
 80015a0:	2301      	movs	r3, #1
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <MX_DMA_Init+0x48>)
 80015b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b6:	4a0f      	ldr	r2, [pc, #60]	; (80015f4 <MX_DMA_Init+0x48>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6493      	str	r3, [r2, #72]	; 0x48
 80015be:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <MX_DMA_Init+0x48>)
 80015c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	200c      	movs	r0, #12
 80015d0:	f001 f861 	bl	8002696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80015d4:	200c      	movs	r0, #12
 80015d6:	f001 f87a 	bl	80026ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	200d      	movs	r0, #13
 80015e0:	f001 f859 	bl	8002696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80015e4:	200d      	movs	r0, #13
 80015e6:	f001 f872 	bl	80026ce <HAL_NVIC_EnableIRQ>

}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000

080015f8 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15 (JTDI)   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fe:	f107 030c 	add.w	r3, r7, #12
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800160e:	4b3e      	ldr	r3, [pc, #248]	; (8001708 <MX_GPIO_Init+0x110>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	4a3d      	ldr	r2, [pc, #244]	; (8001708 <MX_GPIO_Init+0x110>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161a:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <MX_GPIO_Init+0x110>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	4b38      	ldr	r3, [pc, #224]	; (8001708 <MX_GPIO_Init+0x110>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	4a37      	ldr	r2, [pc, #220]	; (8001708 <MX_GPIO_Init+0x110>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001632:	4b35      	ldr	r3, [pc, #212]	; (8001708 <MX_GPIO_Init+0x110>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	4b32      	ldr	r3, [pc, #200]	; (8001708 <MX_GPIO_Init+0x110>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	4a31      	ldr	r2, [pc, #196]	; (8001708 <MX_GPIO_Init+0x110>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164a:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <MX_GPIO_Init+0x110>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 8001656:	2201      	movs	r2, #1
 8001658:	2110      	movs	r1, #16
 800165a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165e:	f001 fbb3 	bl	8002dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	2108      	movs	r1, #8
 8001666:	4829      	ldr	r0, [pc, #164]	; (800170c <MX_GPIO_Init+0x114>)
 8001668:	f001 fbae 	bl	8002dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LoRa_Reset_GPIO_Port, LoRa_Reset_Pin, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	2120      	movs	r1, #32
 8001670:	4826      	ldr	r0, [pc, #152]	; (800170c <MX_GPIO_Init+0x114>)
 8001672:	f001 fba9 	bl	8002dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LoRa_Interrupt_Pin;
 8001676:	2308      	movs	r3, #8
 8001678:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800167a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800167e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LoRa_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	4619      	mov	r1, r3
 800168a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168e:	f001 fa31 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LoRa_NSS_Pin;
 8001692:	2310      	movs	r3, #16
 8001694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LoRa_NSS_GPIO_Port, &GPIO_InitStruct);
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	4619      	mov	r1, r3
 80016a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ac:	f001 fa22 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80016b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80016c2:	2303      	movs	r3, #3
 80016c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	4619      	mov	r1, r3
 80016cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d0:	f001 fa10 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LoRa_Reset_Pin;
 80016d4:	2328      	movs	r3, #40	; 0x28
 80016d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d8:	2301      	movs	r3, #1
 80016da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	4619      	mov	r1, r3
 80016ea:	4808      	ldr	r0, [pc, #32]	; (800170c <MX_GPIO_Init+0x114>)
 80016ec:	f001 fa02 	bl	8002af4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2100      	movs	r1, #0
 80016f4:	2009      	movs	r0, #9
 80016f6:	f000 ffce 	bl	8002696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016fa:	2009      	movs	r0, #9
 80016fc:	f000 ffe7 	bl	80026ce <HAL_NVIC_EnableIRQ>

}
 8001700:	bf00      	nop
 8001702:	3720      	adds	r7, #32
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000
 800170c:	48000400 	.word	0x48000400

08001710 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <MX_I2C1_Init+0x74>)
 8001716:	4a1c      	ldr	r2, [pc, #112]	; (8001788 <MX_I2C1_Init+0x78>)
 8001718:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B02989;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_I2C1_Init+0x74>)
 800171c:	4a1b      	ldr	r2, [pc, #108]	; (800178c <MX_I2C1_Init+0x7c>)
 800171e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <MX_I2C1_Init+0x74>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_I2C1_Init+0x74>)
 8001728:	2201      	movs	r2, #1
 800172a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <MX_I2C1_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_I2C1_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <MX_I2C1_Init+0x74>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_I2C1_Init+0x74>)
 8001740:	2200      	movs	r2, #0
 8001742:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_I2C1_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800174a:	480e      	ldr	r0, [pc, #56]	; (8001784 <MX_I2C1_Init+0x74>)
 800174c:	f001 fb6c 	bl	8002e28 <HAL_I2C_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001756:	f000 f9b1 	bl	8001abc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800175a:	2100      	movs	r1, #0
 800175c:	4809      	ldr	r0, [pc, #36]	; (8001784 <MX_I2C1_Init+0x74>)
 800175e:	f002 f9cf 	bl	8003b00 <HAL_I2CEx_ConfigAnalogFilter>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001768:	f000 f9a8 	bl	8001abc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800176c:	2100      	movs	r1, #0
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_I2C1_Init+0x74>)
 8001770:	f002 fa11 	bl	8003b96 <HAL_I2CEx_ConfigDigitalFilter>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800177a:	f000 f99f 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200000ec 	.word	0x200000ec
 8001788:	40005400 	.word	0x40005400
 800178c:	00b02989 	.word	0x00b02989

08001790 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <MX_I2C3_Init+0x74>)
 8001796:	4a1c      	ldr	r2, [pc, #112]	; (8001808 <MX_I2C3_Init+0x78>)
 8001798:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <MX_I2C3_Init+0x74>)
 800179c:	4a1b      	ldr	r2, [pc, #108]	; (800180c <MX_I2C3_Init+0x7c>)
 800179e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <MX_I2C3_Init+0x74>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <MX_I2C3_Init+0x74>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ac:	4b15      	ldr	r3, [pc, #84]	; (8001804 <MX_I2C3_Init+0x74>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <MX_I2C3_Init+0x74>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <MX_I2C3_Init+0x74>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_I2C3_Init+0x74>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <MX_I2C3_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017ca:	480e      	ldr	r0, [pc, #56]	; (8001804 <MX_I2C3_Init+0x74>)
 80017cc:	f001 fb2c 	bl	8002e28 <HAL_I2C_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80017d6:	f000 f971 	bl	8001abc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017da:	2100      	movs	r1, #0
 80017dc:	4809      	ldr	r0, [pc, #36]	; (8001804 <MX_I2C3_Init+0x74>)
 80017de:	f002 f98f 	bl	8003b00 <HAL_I2CEx_ConfigAnalogFilter>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80017e8:	f000 f968 	bl	8001abc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80017ec:	2100      	movs	r1, #0
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_I2C3_Init+0x74>)
 80017f0:	f002 f9d1 	bl	8003b96 <HAL_I2CEx_ConfigDigitalFilter>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80017fa:	f000 f95f 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000140 	.word	0x20000140
 8001808:	40005c00 	.word	0x40005c00
 800180c:	10909cec 	.word	0x10909cec

08001810 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b0a2      	sub	sp, #136	; 0x88
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001828:	f107 0320 	add.w	r3, r7, #32
 800182c:	2254      	movs	r2, #84	; 0x54
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f005 fcbb 	bl	80071ac <memset>
  if(i2cHandle->Instance==I2C1)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a4e      	ldr	r2, [pc, #312]	; (8001974 <HAL_I2C_MspInit+0x164>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d138      	bne.n	80018b2 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001840:	2340      	movs	r3, #64	; 0x40
 8001842:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001844:	2300      	movs	r3, #0
 8001846:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001848:	f107 0320 	add.w	r3, r7, #32
 800184c:	4618      	mov	r0, r3
 800184e:	f003 f853 	bl	80048f8 <HAL_RCCEx_PeriphCLKConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001858:	f000 f930 	bl	8001abc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185c:	4b46      	ldr	r3, [pc, #280]	; (8001978 <HAL_I2C_MspInit+0x168>)
 800185e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001860:	4a45      	ldr	r2, [pc, #276]	; (8001978 <HAL_I2C_MspInit+0x168>)
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001868:	4b43      	ldr	r3, [pc, #268]	; (8001978 <HAL_I2C_MspInit+0x168>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001874:	23c0      	movs	r3, #192	; 0xc0
 8001876:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001878:	2312      	movs	r3, #18
 800187a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001886:	2304      	movs	r3, #4
 8001888:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001890:	4619      	mov	r1, r3
 8001892:	483a      	ldr	r0, [pc, #232]	; (800197c <HAL_I2C_MspInit+0x16c>)
 8001894:	f001 f92e 	bl	8002af4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001898:	4b37      	ldr	r3, [pc, #220]	; (8001978 <HAL_I2C_MspInit+0x168>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	4a36      	ldr	r2, [pc, #216]	; (8001978 <HAL_I2C_MspInit+0x168>)
 800189e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018a2:	6593      	str	r3, [r2, #88]	; 0x58
 80018a4:	4b34      	ldr	r3, [pc, #208]	; (8001978 <HAL_I2C_MspInit+0x168>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80018b0:	e05c      	b.n	800196c <HAL_I2C_MspInit+0x15c>
  else if(i2cHandle->Instance==I2C3)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a32      	ldr	r2, [pc, #200]	; (8001980 <HAL_I2C_MspInit+0x170>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d157      	bne.n	800196c <HAL_I2C_MspInit+0x15c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80018bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018c0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c6:	f107 0320 	add.w	r3, r7, #32
 80018ca:	4618      	mov	r0, r3
 80018cc:	f003 f814 	bl	80048f8 <HAL_RCCEx_PeriphCLKConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_I2C_MspInit+0xca>
      Error_Handler();
 80018d6:	f000 f8f1 	bl	8001abc <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	4b27      	ldr	r3, [pc, #156]	; (8001978 <HAL_I2C_MspInit+0x168>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	4a26      	ldr	r2, [pc, #152]	; (8001978 <HAL_I2C_MspInit+0x168>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e6:	4b24      	ldr	r3, [pc, #144]	; (8001978 <HAL_I2C_MspInit+0x168>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f2:	4b21      	ldr	r3, [pc, #132]	; (8001978 <HAL_I2C_MspInit+0x168>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	4a20      	ldr	r2, [pc, #128]	; (8001978 <HAL_I2C_MspInit+0x168>)
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fe:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <HAL_I2C_MspInit+0x168>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190e:	2312      	movs	r3, #18
 8001910:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800191c:	2304      	movs	r3, #4
 800191e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001922:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001926:	4619      	mov	r1, r3
 8001928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192c:	f001 f8e2 	bl	8002af4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001930:	2310      	movs	r3, #16
 8001932:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001934:	2312      	movs	r3, #18
 8001936:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001942:	2304      	movs	r3, #4
 8001944:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800194c:	4619      	mov	r1, r3
 800194e:	480b      	ldr	r0, [pc, #44]	; (800197c <HAL_I2C_MspInit+0x16c>)
 8001950:	f001 f8d0 	bl	8002af4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_I2C_MspInit+0x168>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_I2C_MspInit+0x168>)
 800195a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800195e:	6593      	str	r3, [r2, #88]	; 0x58
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_I2C_MspInit+0x168>)
 8001962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001964:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	bf00      	nop
 800196e:	3788      	adds	r7, #136	; 0x88
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40005400 	.word	0x40005400
 8001978:	40021000 	.word	0x40021000
 800197c:	48000400 	.word	0x48000400
 8001980:	40005c00 	.word	0x40005c00

08001984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001988:	f000 fd11 	bl	80023ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800198c:	f000 f81e 	bl	80019cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001990:	f7ff fe32 	bl	80015f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001994:	f7ff fe0a 	bl	80015ac <MX_DMA_Init>
  MX_I2C1_Init();
 8001998:	f7ff feba 	bl	8001710 <MX_I2C1_Init>
  MX_TIM1_Init();
 800199c:	f000 fb6c 	bl	8002078 <MX_TIM1_Init>
  MX_SPI1_Init();
 80019a0:	f000 f8e8 	bl	8001b74 <MX_SPI1_Init>
  MX_I2C3_Init();
 80019a4:	f7ff fef4 	bl	8001790 <MX_I2C3_Init>
  MX_TIM16_Init();
 80019a8:	f000 fc38 	bl	800221c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  //Servo_Init();

  Check_Peripherals();
 80019ac:	f000 fa36 	bl	8001e1c <Check_Peripherals>
  Init_Peripherals();
 80019b0:	f000 fa5c 	bl	8001e6c <Init_Peripherals>

  Set_LoRa_Connecting(&LoRa);
 80019b4:	4803      	ldr	r0, [pc, #12]	; (80019c4 <main+0x40>)
 80019b6:	f7fe ff9a 	bl	80008ee <Set_LoRa_Connecting>
  HAL_TIM_Base_Start_IT(&htim16); // start interrupts after device initialization
 80019ba:	4803      	ldr	r0, [pc, #12]	; (80019c8 <main+0x44>)
 80019bc:	f004 fb80 	bl	80060c0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <main+0x3c>
 80019c2:	bf00      	nop
 80019c4:	20000048 	.word	0x20000048
 80019c8:	200002d4 	.word	0x200002d4

080019cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b096      	sub	sp, #88	; 0x58
 80019d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	2244      	movs	r2, #68	; 0x44
 80019d8:	2100      	movs	r1, #0
 80019da:	4618      	mov	r0, r3
 80019dc:	f005 fbe6 	bl	80071ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e0:	463b      	mov	r3, r7
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019f2:	f002 f92b 	bl	8003c4c <HAL_PWREx_ControlVoltageScaling>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019fc:	f000 f85e 	bl	8001abc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a00:	2302      	movs	r3, #2
 8001a02:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a08:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a0a:	2310      	movs	r3, #16
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a12:	2302      	movs	r3, #2
 8001a14:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a16:	2301      	movs	r3, #1
 8001a18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a1a:	230a      	movs	r3, #10
 8001a1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a1e:	2307      	movs	r3, #7
 8001a20:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a22:	2302      	movs	r3, #2
 8001a24:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a26:	2302      	movs	r3, #2
 8001a28:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f002 f962 	bl	8003cf8 <HAL_RCC_OscConfig>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001a3a:	f000 f83f 	bl	8001abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a3e:	230f      	movs	r3, #15
 8001a40:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a42:	2303      	movs	r3, #3
 8001a44:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a52:	463b      	mov	r3, r7
 8001a54:	2104      	movs	r1, #4
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 fd62 	bl	8004520 <HAL_RCC_ClockConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a62:	f000 f82b 	bl	8001abc <Error_Handler>
  }
}
 8001a66:	bf00      	nop
 8001a68:	3758      	adds	r7, #88	; 0x58
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t pin){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
	if (pin == LoRa_Interrupt_Pin){
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d102      	bne.n	8001a86 <HAL_GPIO_EXTI_Callback+0x16>
		LoRa_Receive_interrupt_Handler(&LoRa);
 8001a80:	4803      	ldr	r0, [pc, #12]	; (8001a90 <HAL_GPIO_EXTI_Callback+0x20>)
 8001a82:	f7fe ff2a 	bl	80008da <LoRa_Receive_interrupt_Handler>
	}
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000048 	.word	0x20000048

08001a94 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	if (htim == &htim16){
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d102      	bne.n	8001aaa <HAL_TIM_PeriodElapsedCallback+0x16>
		LoRa_Timer_Interrupt_Handler(&LoRa);
 8001aa4:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001aa6:	f7fe ff7d 	bl	80009a4 <LoRa_Timer_Interrupt_Handler>
	}
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200002d4 	.word	0x200002d4
 8001ab8:	20000048 	.word	0x20000048

08001abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac0:	b672      	cpsid	i
}
 8001ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	2110      	movs	r1, #16
 8001ac8:	4808      	ldr	r0, [pc, #32]	; (8001aec <Error_Handler+0x30>)
 8001aca:	f001 f97d 	bl	8002dc8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8001ace:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ad2:	f000 fce1 	bl	8002498 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2110      	movs	r1, #16
 8001ada:	4804      	ldr	r0, [pc, #16]	; (8001aec <Error_Handler+0x30>)
 8001adc:	f001 f974 	bl	8002dc8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8001ae0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ae4:	f000 fcd8 	bl	8002498 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001ae8:	e7ec      	b.n	8001ac4 <Error_Handler+0x8>
 8001aea:	bf00      	nop
 8001aec:	48000400 	.word	0x48000400

08001af0 <__Test_Servos>:


/*
 * For testing purposes!
 */
void __Test_Servos(){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	TIM1->CCR1 = INLINE_DUTY_CYCLE;
 8001af4:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <__Test_Servos+0x80>)
 8001af6:	2296      	movs	r2, #150	; 0x96
 8001af8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = INLINE_DUTY_CYCLE;
 8001afa:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <__Test_Servos+0x80>)
 8001afc:	2296      	movs	r2, #150	; 0x96
 8001afe:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = INLINE_DUTY_CYCLE;
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <__Test_Servos+0x80>)
 8001b02:	2296      	movs	r2, #150	; 0x96
 8001b04:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = INLINE_DUTY_CYCLE;
 8001b06:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <__Test_Servos+0x80>)
 8001b08:	2296      	movs	r2, #150	; 0x96
 8001b0a:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_Delay(2000);
 8001b0c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b10:	f000 fcc2 	bl	8002498 <HAL_Delay>


	TIM1->CCR1 = LOWEST_ENABLED_PITCH_DUTY_CYCLE;
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <__Test_Servos+0x80>)
 8001b16:	227d      	movs	r2, #125	; 0x7d
 8001b18:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = LOWEST_ENABLED_PITCH_DUTY_CYCLE;
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <__Test_Servos+0x80>)
 8001b1c:	227d      	movs	r2, #125	; 0x7d
 8001b1e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = LOWEST_ENABLED_PITCH_DUTY_CYCLE;
 8001b20:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <__Test_Servos+0x80>)
 8001b22:	227d      	movs	r2, #125	; 0x7d
 8001b24:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = LOWEST_ENABLED_PITCH_DUTY_CYCLE;
 8001b26:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <__Test_Servos+0x80>)
 8001b28:	227d      	movs	r2, #125	; 0x7d
 8001b2a:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_Delay(2000);
 8001b2c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b30:	f000 fcb2 	bl	8002498 <HAL_Delay>


	TIM1->CCR1 = HIGHEST_ENABLED_PICH_DUTY_CYCLE;
 8001b34:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <__Test_Servos+0x80>)
 8001b36:	22af      	movs	r2, #175	; 0xaf
 8001b38:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = HIGHEST_ENABLED_PICH_DUTY_CYCLE;
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <__Test_Servos+0x80>)
 8001b3c:	22af      	movs	r2, #175	; 0xaf
 8001b3e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = HIGHEST_ENABLED_PICH_DUTY_CYCLE;
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <__Test_Servos+0x80>)
 8001b42:	22af      	movs	r2, #175	; 0xaf
 8001b44:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = HIGHEST_ENABLED_PICH_DUTY_CYCLE;
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <__Test_Servos+0x80>)
 8001b48:	22af      	movs	r2, #175	; 0xaf
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40


	HAL_Delay(2000);
 8001b4c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b50:	f000 fca2 	bl	8002498 <HAL_Delay>

	TIM1->CCR1 = INLINE_DUTY_CYCLE;
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <__Test_Servos+0x80>)
 8001b56:	2296      	movs	r2, #150	; 0x96
 8001b58:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = INLINE_DUTY_CYCLE;
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <__Test_Servos+0x80>)
 8001b5c:	2296      	movs	r2, #150	; 0x96
 8001b5e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = INLINE_DUTY_CYCLE;
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <__Test_Servos+0x80>)
 8001b62:	2296      	movs	r2, #150	; 0x96
 8001b64:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = INLINE_DUTY_CYCLE;
 8001b66:	4b02      	ldr	r3, [pc, #8]	; (8001b70 <__Test_Servos+0x80>)
 8001b68:	2296      	movs	r2, #150	; 0x96
 8001b6a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40012c00 	.word	0x40012c00

08001b74 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <MX_SPI1_Init+0x74>)
 8001b7a:	4a1c      	ldr	r2, [pc, #112]	; (8001bec <MX_SPI1_Init+0x78>)
 8001b7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <MX_SPI1_Init+0x74>)
 8001b80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <MX_SPI1_Init+0x74>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <MX_SPI1_Init+0x74>)
 8001b8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b92:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b94:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <MX_SPI1_Init+0x74>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <MX_SPI1_Init+0x74>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <MX_SPI1_Init+0x74>)
 8001ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <MX_SPI1_Init+0x74>)
 8001baa:	2218      	movs	r2, #24
 8001bac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <MX_SPI1_Init+0x74>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <MX_SPI1_Init+0x74>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <MX_SPI1_Init+0x74>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <MX_SPI1_Init+0x74>)
 8001bc2:	2207      	movs	r2, #7
 8001bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <MX_SPI1_Init+0x74>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <MX_SPI1_Init+0x74>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bd2:	4805      	ldr	r0, [pc, #20]	; (8001be8 <MX_SPI1_Init+0x74>)
 8001bd4:	f003 f978 	bl	8004ec8 <HAL_SPI_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001bde:	f7ff ff6d 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000194 	.word	0x20000194
 8001bec:	40013000 	.word	0x40013000

08001bf0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a41      	ldr	r2, [pc, #260]	; (8001d14 <HAL_SPI_MspInit+0x124>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d17b      	bne.n	8001d0a <HAL_SPI_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c12:	4b41      	ldr	r3, [pc, #260]	; (8001d18 <HAL_SPI_MspInit+0x128>)
 8001c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c16:	4a40      	ldr	r2, [pc, #256]	; (8001d18 <HAL_SPI_MspInit+0x128>)
 8001c18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c1e:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <HAL_SPI_MspInit+0x128>)
 8001c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <HAL_SPI_MspInit+0x128>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	4a3a      	ldr	r2, [pc, #232]	; (8001d18 <HAL_SPI_MspInit+0x128>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c36:	4b38      	ldr	r3, [pc, #224]	; (8001d18 <HAL_SPI_MspInit+0x128>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_12;
 8001c42:	f241 0342 	movw	r3, #4162	; 0x1042
 8001c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c50:	2303      	movs	r3, #3
 8001c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c54:	2305      	movs	r3, #5
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c62:	f000 ff47 	bl	8002af4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001c66:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <HAL_SPI_MspInit+0x12c>)
 8001c68:	4a2d      	ldr	r2, [pc, #180]	; (8001d20 <HAL_SPI_MspInit+0x130>)
 8001c6a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <HAL_SPI_MspInit+0x12c>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c72:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <HAL_SPI_MspInit+0x12c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c78:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <HAL_SPI_MspInit+0x12c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c7e:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <HAL_SPI_MspInit+0x12c>)
 8001c80:	2280      	movs	r2, #128	; 0x80
 8001c82:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c84:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <HAL_SPI_MspInit+0x12c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c8a:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_SPI_MspInit+0x12c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001c90:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <HAL_SPI_MspInit+0x12c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c96:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <HAL_SPI_MspInit+0x12c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001c9c:	481f      	ldr	r0, [pc, #124]	; (8001d1c <HAL_SPI_MspInit+0x12c>)
 8001c9e:	f000 fd31 	bl	8002704 <HAL_DMA_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8001ca8:	f7ff ff08 	bl	8001abc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a1b      	ldr	r2, [pc, #108]	; (8001d1c <HAL_SPI_MspInit+0x12c>)
 8001cb0:	659a      	str	r2, [r3, #88]	; 0x58
 8001cb2:	4a1a      	ldr	r2, [pc, #104]	; (8001d1c <HAL_SPI_MspInit+0x12c>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <HAL_SPI_MspInit+0x134>)
 8001cba:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <HAL_SPI_MspInit+0x138>)
 8001cbc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001cbe:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_SPI_MspInit+0x134>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <HAL_SPI_MspInit+0x134>)
 8001cc6:	2210      	movs	r2, #16
 8001cc8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <HAL_SPI_MspInit+0x134>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <HAL_SPI_MspInit+0x134>)
 8001cd2:	2280      	movs	r2, #128	; 0x80
 8001cd4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_SPI_MspInit+0x134>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_SPI_MspInit+0x134>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_SPI_MspInit+0x134>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <HAL_SPI_MspInit+0x134>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001cee:	480d      	ldr	r0, [pc, #52]	; (8001d24 <HAL_SPI_MspInit+0x134>)
 8001cf0:	f000 fd08 	bl	8002704 <HAL_DMA_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8001cfa:	f7ff fedf 	bl	8001abc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <HAL_SPI_MspInit+0x134>)
 8001d02:	655a      	str	r2, [r3, #84]	; 0x54
 8001d04:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <HAL_SPI_MspInit+0x134>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	3728      	adds	r7, #40	; 0x28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40013000 	.word	0x40013000
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	200001f8 	.word	0x200001f8
 8001d20:	4002001c 	.word	0x4002001c
 8001d24:	20000240 	.word	0x20000240
 8001d28:	40020030 	.word	0x40020030

08001d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d32:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <HAL_MspInit+0x44>)
 8001d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d36:	4a0e      	ldr	r2, [pc, #56]	; (8001d70 <HAL_MspInit+0x44>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <HAL_MspInit+0x44>)
 8001d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_MspInit+0x44>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	4a08      	ldr	r2, [pc, #32]	; (8001d70 <HAL_MspInit+0x44>)
 8001d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d54:	6593      	str	r3, [r2, #88]	; 0x58
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_MspInit+0x44>)
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000

08001d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <NMI_Handler+0x4>

08001d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7e:	e7fe      	b.n	8001d7e <HardFault_Handler+0x4>

08001d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <MemManage_Handler+0x4>

08001d86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <BusFault_Handler+0x4>

08001d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <UsageFault_Handler+0x4>

08001d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc0:	f000 fb4a 	bl	8002458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LoRa_Interrupt_Pin);
 8001dcc:	2008      	movs	r0, #8
 8001dce:	f001 f813 	bl	8002df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <DMA1_Channel2_IRQHandler+0x10>)
 8001dde:	f000 fda9 	bl	8002934 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200001f8 	.word	0x200001f8

08001dec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <DMA1_Channel3_IRQHandler+0x10>)
 8001df2:	f000 fd9f 	bl	8002934 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000240 	.word	0x20000240

08001e00 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e04:	4803      	ldr	r0, [pc, #12]	; (8001e14 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001e06:	f004 fa10 	bl	800622a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001e0a:	4803      	ldr	r0, [pc, #12]	; (8001e18 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001e0c:	f004 fa0d 	bl	800622a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000288 	.word	0x20000288
 8001e18:	200002d4 	.word	0x200002d4

08001e1c <Check_Peripherals>:
 * 		- LoRa
 * 		- Altimeter
 * 		- Servos
 * 	(all of the peripherals are essential pretty much)
 */
void Check_Peripherals(){
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	if (!Is_BMP280_Available()){ // not putting all check into one if
 8001e20:	f000 f82e 	bl	8001e80 <Is_BMP280_Available>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f083 0301 	eor.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <Check_Peripherals+0x18>
		Error_Handler();		 // bc this way it is easier to debug
 8001e30:	f7ff fe44 	bl	8001abc <Error_Handler>
	}

	if (!Is_IMU_Available()){
 8001e34:	f000 f83c 	bl	8001eb0 <Is_IMU_Available>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f083 0301 	eor.w	r3, r3, #1
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <Check_Peripherals+0x2c>
		Error_Handler();
 8001e44:	f7ff fe3a 	bl	8001abc <Error_Handler>
	}

	if (!Is_LoRa_Available()){
 8001e48:	f000 f84a 	bl	8001ee0 <Is_LoRa_Available>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f083 0301 	eor.w	r3, r3, #1
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <Check_Peripherals+0x40>
		Error_Handler();
 8001e58:	f7ff fe30 	bl	8001abc <Error_Handler>
	}

	// Manual testing (look at the rocket canards)
	Are_Servos_Available();
 8001e5c:	f7ff fe48 	bl	8001af0 <__Test_Servos>
	HAL_Delay(2000);
 8001e60:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e64:	f000 fb18 	bl	8002498 <HAL_Delay>
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <Init_Peripherals>:

void Init_Peripherals(){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	Init_LoRa();
 8001e70:	f000 f866 	bl	8001f40 <Init_LoRa>
	Init_BMP280();
 8001e74:	f000 f8aa 	bl	8001fcc <Init_BMP280>
	Init_IMU();
 8001e78:	f000 f8ca 	bl	8002010 <Init_IMU>
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <Is_BMP280_Available>:


/**
 * Checking if altimeter is available.
 */
bool Is_BMP280_Available(){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c3, BMP280_I2C_ADDRESS_0 << 1, 10, 10);
 8001e86:	230a      	movs	r3, #10
 8001e88:	220a      	movs	r2, #10
 8001e8a:	21ec      	movs	r1, #236	; 0xec
 8001e8c:	4807      	ldr	r0, [pc, #28]	; (8001eac <Is_BMP280_Available+0x2c>)
 8001e8e:	f001 fa89 	bl	80033a4 <HAL_I2C_IsDeviceReady>
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
	if (status == HAL_OK){
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <Is_BMP280_Available+0x20>
		return 1;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <Is_BMP280_Available+0x22>
	}

	return 0;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000140 	.word	0x20000140

08001eb0 <Is_IMU_Available>:


bool Is_IMU_Available(){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, MPU9250_ADDRESS, 10, 10);
 8001eb6:	230a      	movs	r3, #10
 8001eb8:	220a      	movs	r2, #10
 8001eba:	21d0      	movs	r1, #208	; 0xd0
 8001ebc:	4807      	ldr	r0, [pc, #28]	; (8001edc <Is_IMU_Available+0x2c>)
 8001ebe:	f001 fa71 	bl	80033a4 <HAL_I2C_IsDeviceReady>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
	if (status == HAL_OK){
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <Is_IMU_Available+0x20>
		return 1;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <Is_IMU_Available+0x22>
	}

	return 0;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200000ec 	.word	0x200000ec

08001ee0 <Is_LoRa_Available>:


bool Is_LoRa_Available(){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
	uint32_t res;
	uint8_t address = 0x0D;
 8001ee6:	230d      	movs	r3, #13
 8001ee8:	71fb      	strb	r3, [r7, #7]
	for (int i=0;i<50;i++){
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	e01c      	b.n	8001f2a <Is_LoRa_Available+0x4a>
		HAL_GPIO_WritePin(GPIOA, LoRa_NSS_Pin, GPIO_PIN_RESET);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2110      	movs	r1, #16
 8001ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef8:	f000 ff66 	bl	8002dc8 <HAL_GPIO_WritePin>
		res = HAL_SPI_Transmit(&hspi1, &address, 1, 500);
 8001efc:	1df9      	adds	r1, r7, #7
 8001efe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f02:	2201      	movs	r2, #1
 8001f04:	480d      	ldr	r0, [pc, #52]	; (8001f3c <Is_LoRa_Available+0x5c>)
 8001f06:	f003 f882 	bl	800500e <HAL_SPI_Transmit>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_WritePin(GPIOA, LoRa_NSS_Pin, GPIO_PIN_SET);
 8001f0e:	2201      	movs	r2, #1
 8001f10:	2110      	movs	r1, #16
 8001f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f16:	f000 ff57 	bl	8002dc8 <HAL_GPIO_WritePin>

		if (res == HAL_OK){
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <Is_LoRa_Available+0x44>
			return 1;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e006      	b.n	8001f32 <Is_LoRa_Available+0x52>
	for (int i=0;i<50;i++){
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	3301      	adds	r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2b31      	cmp	r3, #49	; 0x31
 8001f2e:	dddf      	ble.n	8001ef0 <Is_LoRa_Available+0x10>
		}
	}

	return 0;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000194 	.word	0x20000194

08001f40 <Init_LoRa>:


void Init_LoRa(){
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af06      	add	r7, sp, #24
	lora_init(&LoRa, &hspi1, LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, LoRa_Reset_GPIO_Port, LoRa_Reset_Pin, LORA_BASE_FREQUENCY_EU, 0x10);
 8001f46:	2310      	movs	r3, #16
 8001f48:	9304      	str	r3, [sp, #16]
 8001f4a:	a31e      	add	r3, pc, #120	; (adr r3, 8001fc4 <Init_LoRa+0x84>)
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f54:	2320      	movs	r3, #32
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <Init_LoRa+0x78>)
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2310      	movs	r3, #16
 8001f5e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f62:	4916      	ldr	r1, [pc, #88]	; (8001fbc <Init_LoRa+0x7c>)
 8001f64:	4816      	ldr	r0, [pc, #88]	; (8001fc0 <Init_LoRa+0x80>)
 8001f66:	f7ff f893 	bl	8001090 <lora_init>
	lora_set_tx_power(&LoRa, 17);
 8001f6a:	2111      	movs	r1, #17
 8001f6c:	4814      	ldr	r0, [pc, #80]	; (8001fc0 <Init_LoRa+0x80>)
 8001f6e:	f7fe fe99 	bl	8000ca4 <lora_set_tx_power>
	lora_set_signal_bandwidth(&LoRa, LORA_BANDWIDTH_7_8_KHZ);
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	4811      	ldr	r0, [pc, #68]	; (8001fc0 <Init_LoRa+0x80>)
 8001f7c:	f7fe ff24 	bl	8000dc8 <lora_set_signal_bandwidth>
	lora_set_spreading_factor(&LoRa, 12);
 8001f80:	210c      	movs	r1, #12
 8001f82:	480f      	ldr	r0, [pc, #60]	; (8001fc0 <Init_LoRa+0x80>)
 8001f84:	f7fe ff42 	bl	8000e0c <lora_set_spreading_factor>
	lora_set_coding_rate(&LoRa, LORA_CODING_RATE_4_8);
 8001f88:	2120      	movs	r1, #32
 8001f8a:	480d      	ldr	r0, [pc, #52]	; (8001fc0 <Init_LoRa+0x80>)
 8001f8c:	f7fe ffa7 	bl	8000ede <lora_set_coding_rate>
	lora_set_crc(&LoRa, 3);
 8001f90:	2103      	movs	r1, #3
 8001f92:	480b      	ldr	r0, [pc, #44]	; (8001fc0 <Init_LoRa+0x80>)
 8001f94:	f7fe ff81 	bl	8000e9a <lora_set_crc>
	lora_set_preamble_length(&LoRa, 12);
 8001f98:	210c      	movs	r1, #12
 8001f9a:	4809      	ldr	r0, [pc, #36]	; (8001fc0 <Init_LoRa+0x80>)
 8001f9c:	f7fe ffbd 	bl	8000f1a <lora_set_preamble_length>
	lora_set_explicit_header_mode(&LoRa);
 8001fa0:	4807      	ldr	r0, [pc, #28]	; (8001fc0 <Init_LoRa+0x80>)
 8001fa2:	f7fe fe67 	bl	8000c74 <lora_set_explicit_header_mode>
	lora_enable_interrupt_rx_done(&LoRa);
 8001fa6:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <Init_LoRa+0x80>)
 8001fa8:	f7ff f84b 	bl	8001042 <lora_enable_interrupt_rx_done>
	lora_enable_interrupt_tx_done(&LoRa);
 8001fac:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <Init_LoRa+0x80>)
 8001fae:	f7ff f855 	bl	800105c <lora_enable_interrupt_tx_done>
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	48000400 	.word	0x48000400
 8001fbc:	20000194 	.word	0x20000194
 8001fc0:	20000048 	.word	0x20000048
 8001fc4:	33bca100 	.word	0x33bca100
 8001fc8:	00000000 	.word	0x00000000

08001fcc <Init_BMP280>:

void Init_BMP280(){
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
	  bmp280_init_default_params(&bmp280.params);
 8001fd2:	480c      	ldr	r0, [pc, #48]	; (8002004 <Init_BMP280+0x38>)
 8001fd4:	f7ff f8c2 	bl	800115c <bmp280_init_default_params>
	  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <Init_BMP280+0x3c>)
 8001fda:	2276      	movs	r2, #118	; 0x76
 8001fdc:	849a      	strh	r2, [r3, #36]	; 0x24
	  bmp280.i2c = &hi2c3;
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <Init_BMP280+0x3c>)
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	; (800200c <Init_BMP280+0x40>)
 8001fe2:	629a      	str	r2, [r3, #40]	; 0x28
	  bool bme280p = bmp280.id == BME280_CHIP_ID;
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <Init_BMP280+0x3c>)
 8001fe6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001fea:	2b60      	cmp	r3, #96	; 0x60
 8001fec:	bf0c      	ite	eq
 8001fee:	2301      	moveq	r3, #1
 8001ff0:	2300      	movne	r3, #0
 8001ff2:	71fb      	strb	r3, [r7, #7]
	  bmp280_init(&bmp280, &bmp280.params);
 8001ff4:	4903      	ldr	r1, [pc, #12]	; (8002004 <Init_BMP280+0x38>)
 8001ff6:	4804      	ldr	r0, [pc, #16]	; (8002008 <Init_BMP280+0x3c>)
 8001ff8:	f7ff fa2a 	bl	8001450 <bmp280_init>
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	200000e4 	.word	0x200000e4
 8002008:	200000b8 	.word	0x200000b8
 800200c:	20000140 	.word	0x20000140

08002010 <Init_IMU>:


void Init_IMU(){
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
	if (IMUreadByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250) != 0x70){
 8002016:	2175      	movs	r1, #117	; 0x75
 8002018:	20d0      	movs	r0, #208	; 0xd0
 800201a:	f7fe fa81 	bl	8000520 <IMUreadByte>
 800201e:	4603      	mov	r3, r0
 8002020:	2b70      	cmp	r3, #112	; 0x70
 8002022:	d007      	beq.n	8002034 <Init_IMU+0x24>
		uint8_t res = IMUreadByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
 8002024:	2175      	movs	r1, #117	; 0x75
 8002026:	20d0      	movs	r0, #208	; 0xd0
 8002028:	f7fe fa7a 	bl	8000520 <IMUreadByte>
 800202c:	4603      	mov	r3, r0
 800202e:	71fb      	strb	r3, [r7, #7]
		Error_Handler();
 8002030:	f7ff fd44 	bl	8001abc <Error_Handler>
	}

	initMPU9250(AFS_8G, GFS_250DPS, 7); // sample rate  SAMPLE_RATE = Internal_Sample_Rate / (1 + 7) = 1kHz
 8002034:	2207      	movs	r2, #7
 8002036:	2100      	movs	r1, #0
 8002038:	2002      	movs	r0, #2
 800203a:	f7fe fbb9 	bl	80007b0 <initMPU9250>
	MinitAK8963Slave(MFS_16BITS, 6, magCalibration);
 800203e:	4a04      	ldr	r2, [pc, #16]	; (8002050 <Init_IMU+0x40>)
 8002040:	2106      	movs	r1, #6
 8002042:	2001      	movs	r0, #1
 8002044:	f7fe fab8 	bl	80005b8 <MinitAK8963Slave>

}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000038 	.word	0x20000038

08002054 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <SystemInit+0x20>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205e:	4a05      	ldr	r2, [pc, #20]	; (8002074 <SystemInit+0x20>)
 8002060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b09a      	sub	sp, #104	; 0x68
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800207e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800208c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002098:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
 80020a8:	615a      	str	r2, [r3, #20]
 80020aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	222c      	movs	r2, #44	; 0x2c
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f005 f87a 	bl	80071ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020b8:	4b56      	ldr	r3, [pc, #344]	; (8002214 <MX_TIM1_Init+0x19c>)
 80020ba:	4a57      	ldr	r2, [pc, #348]	; (8002218 <MX_TIM1_Init+0x1a0>)
 80020bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 800-1;
 80020be:	4b55      	ldr	r3, [pc, #340]	; (8002214 <MX_TIM1_Init+0x19c>)
 80020c0:	f240 321f 	movw	r2, #799	; 0x31f
 80020c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c6:	4b53      	ldr	r3, [pc, #332]	; (8002214 <MX_TIM1_Init+0x19c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 80020cc:	4b51      	ldr	r3, [pc, #324]	; (8002214 <MX_TIM1_Init+0x19c>)
 80020ce:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80020d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d4:	4b4f      	ldr	r3, [pc, #316]	; (8002214 <MX_TIM1_Init+0x19c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020da:	4b4e      	ldr	r3, [pc, #312]	; (8002214 <MX_TIM1_Init+0x19c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e0:	4b4c      	ldr	r3, [pc, #304]	; (8002214 <MX_TIM1_Init+0x19c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020e6:	484b      	ldr	r0, [pc, #300]	; (8002214 <MX_TIM1_Init+0x19c>)
 80020e8:	f003 ff92 	bl	8006010 <HAL_TIM_Base_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80020f2:	f7ff fce3 	bl	8001abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020fa:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002100:	4619      	mov	r1, r3
 8002102:	4844      	ldr	r0, [pc, #272]	; (8002214 <MX_TIM1_Init+0x19c>)
 8002104:	f004 fac4 	bl	8006690 <HAL_TIM_ConfigClockSource>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800210e:	f7ff fcd5 	bl	8001abc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002112:	4840      	ldr	r0, [pc, #256]	; (8002214 <MX_TIM1_Init+0x19c>)
 8002114:	f004 f828 	bl	8006168 <HAL_TIM_PWM_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800211e:	f7ff fccd 	bl	8001abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800212e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002132:	4619      	mov	r1, r3
 8002134:	4837      	ldr	r0, [pc, #220]	; (8002214 <MX_TIM1_Init+0x19c>)
 8002136:	f004 ff19 	bl	8006f6c <HAL_TIMEx_MasterConfigSynchronization>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8002140:	f7ff fcbc 	bl	8001abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002144:	2360      	movs	r3, #96	; 0x60
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800214c:	2300      	movs	r3, #0
 800214e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002150:	2300      	movs	r3, #0
 8002152:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002158:	2300      	movs	r3, #0
 800215a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002160:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002164:	2200      	movs	r2, #0
 8002166:	4619      	mov	r1, r3
 8002168:	482a      	ldr	r0, [pc, #168]	; (8002214 <MX_TIM1_Init+0x19c>)
 800216a:	f004 f97d 	bl	8006468 <HAL_TIM_PWM_ConfigChannel>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002174:	f7ff fca2 	bl	8001abc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002178:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800217c:	2204      	movs	r2, #4
 800217e:	4619      	mov	r1, r3
 8002180:	4824      	ldr	r0, [pc, #144]	; (8002214 <MX_TIM1_Init+0x19c>)
 8002182:	f004 f971 	bl	8006468 <HAL_TIM_PWM_ConfigChannel>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800218c:	f7ff fc96 	bl	8001abc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002190:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002194:	2208      	movs	r2, #8
 8002196:	4619      	mov	r1, r3
 8002198:	481e      	ldr	r0, [pc, #120]	; (8002214 <MX_TIM1_Init+0x19c>)
 800219a:	f004 f965 	bl	8006468 <HAL_TIM_PWM_ConfigChannel>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80021a4:	f7ff fc8a 	bl	8001abc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021ac:	220c      	movs	r2, #12
 80021ae:	4619      	mov	r1, r3
 80021b0:	4818      	ldr	r0, [pc, #96]	; (8002214 <MX_TIM1_Init+0x19c>)
 80021b2:	f004 f959 	bl	8006468 <HAL_TIM_PWM_ConfigChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80021bc:	f7ff fc7e 	bl	8001abc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80021de:	2300      	movs	r3, #0
 80021e0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80021e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	4619      	mov	r1, r3
 80021f4:	4807      	ldr	r0, [pc, #28]	; (8002214 <MX_TIM1_Init+0x19c>)
 80021f6:	f004 ff1f 	bl	8007038 <HAL_TIMEx_ConfigBreakDeadTime>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8002200:	f7ff fc5c 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002204:	4803      	ldr	r0, [pc, #12]	; (8002214 <MX_TIM1_Init+0x19c>)
 8002206:	f000 f871 	bl	80022ec <HAL_TIM_MspPostInit>

}
 800220a:	bf00      	nop
 800220c:	3768      	adds	r7, #104	; 0x68
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000288 	.word	0x20000288
 8002218:	40012c00 	.word	0x40012c00

0800221c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <MX_TIM16_Init+0x44>)
 8002222:	4a10      	ldr	r2, [pc, #64]	; (8002264 <MX_TIM16_Init+0x48>)
 8002224:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <MX_TIM16_Init+0x44>)
 8002228:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800222c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222e:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <MX_TIM16_Init+0x44>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100-1;
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <MX_TIM16_Init+0x44>)
 8002236:	2263      	movs	r2, #99	; 0x63
 8002238:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223a:	4b09      	ldr	r3, [pc, #36]	; (8002260 <MX_TIM16_Init+0x44>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002240:	4b07      	ldr	r3, [pc, #28]	; (8002260 <MX_TIM16_Init+0x44>)
 8002242:	2200      	movs	r2, #0
 8002244:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002246:	4b06      	ldr	r3, [pc, #24]	; (8002260 <MX_TIM16_Init+0x44>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800224c:	4804      	ldr	r0, [pc, #16]	; (8002260 <MX_TIM16_Init+0x44>)
 800224e:	f003 fedf 	bl	8006010 <HAL_TIM_Base_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002258:	f7ff fc30 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}
 8002260:	200002d4 	.word	0x200002d4
 8002264:	40014400 	.word	0x40014400

08002268 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a1a      	ldr	r2, [pc, #104]	; (80022e0 <HAL_TIM_Base_MspInit+0x78>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d114      	bne.n	80022a4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <HAL_TIM_Base_MspInit+0x7c>)
 800227c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227e:	4a19      	ldr	r2, [pc, #100]	; (80022e4 <HAL_TIM_Base_MspInit+0x7c>)
 8002280:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002284:	6613      	str	r3, [r2, #96]	; 0x60
 8002286:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <HAL_TIM_Base_MspInit+0x7c>)
 8002288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2100      	movs	r1, #0
 8002296:	2019      	movs	r0, #25
 8002298:	f000 f9fd 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800229c:	2019      	movs	r0, #25
 800229e:	f000 fa16 	bl	80026ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80022a2:	e018      	b.n	80022d6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM16)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <HAL_TIM_Base_MspInit+0x80>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d113      	bne.n	80022d6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80022ae:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <HAL_TIM_Base_MspInit+0x7c>)
 80022b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b2:	4a0c      	ldr	r2, [pc, #48]	; (80022e4 <HAL_TIM_Base_MspInit+0x7c>)
 80022b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b8:	6613      	str	r3, [r2, #96]	; 0x60
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_TIM_Base_MspInit+0x7c>)
 80022bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	2019      	movs	r0, #25
 80022cc:	f000 f9e3 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80022d0:	2019      	movs	r0, #25
 80022d2:	f000 f9fc 	bl	80026ce <HAL_NVIC_EnableIRQ>
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40012c00 	.word	0x40012c00
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40014400 	.word	0x40014400

080022ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a12      	ldr	r2, [pc, #72]	; (8002354 <HAL_TIM_MspPostInit+0x68>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d11d      	bne.n	800234a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_TIM_MspPostInit+0x6c>)
 8002310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002312:	4a11      	ldr	r2, [pc, #68]	; (8002358 <HAL_TIM_MspPostInit+0x6c>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <HAL_TIM_MspPostInit+0x6c>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002326:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800232a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	2300      	movs	r3, #0
 8002336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002338:	2301      	movs	r3, #1
 800233a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	4619      	mov	r1, r3
 8002342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002346:	f000 fbd5 	bl	8002af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800234a:	bf00      	nop
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40012c00 	.word	0x40012c00
 8002358:	40021000 	.word	0x40021000

0800235c <Reset_Handler>:
 800235c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002394 <LoopForever+0x2>
 8002360:	f7ff fe78 	bl	8002054 <SystemInit>
 8002364:	480c      	ldr	r0, [pc, #48]	; (8002398 <LoopForever+0x6>)
 8002366:	490d      	ldr	r1, [pc, #52]	; (800239c <LoopForever+0xa>)
 8002368:	4a0d      	ldr	r2, [pc, #52]	; (80023a0 <LoopForever+0xe>)
 800236a:	2300      	movs	r3, #0
 800236c:	e002      	b.n	8002374 <LoopCopyDataInit>

0800236e <CopyDataInit>:
 800236e:	58d4      	ldr	r4, [r2, r3]
 8002370:	50c4      	str	r4, [r0, r3]
 8002372:	3304      	adds	r3, #4

08002374 <LoopCopyDataInit>:
 8002374:	18c4      	adds	r4, r0, r3
 8002376:	428c      	cmp	r4, r1
 8002378:	d3f9      	bcc.n	800236e <CopyDataInit>
 800237a:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <LoopForever+0x12>)
 800237c:	4c0a      	ldr	r4, [pc, #40]	; (80023a8 <LoopForever+0x16>)
 800237e:	2300      	movs	r3, #0
 8002380:	e001      	b.n	8002386 <LoopFillZerobss>

08002382 <FillZerobss>:
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	3204      	adds	r2, #4

08002386 <LoopFillZerobss>:
 8002386:	42a2      	cmp	r2, r4
 8002388:	d3fb      	bcc.n	8002382 <FillZerobss>
 800238a:	f004 feeb 	bl	8007164 <__libc_init_array>
 800238e:	f7ff faf9 	bl	8001984 <main>

08002392 <LoopForever>:
 8002392:	e7fe      	b.n	8002392 <LoopForever>
 8002394:	20010000 	.word	0x20010000
 8002398:	20000000 	.word	0x20000000
 800239c:	2000000c 	.word	0x2000000c
 80023a0:	08007224 	.word	0x08007224
 80023a4:	2000000c 	.word	0x2000000c
 80023a8:	20000324 	.word	0x20000324

080023ac <ADC1_IRQHandler>:
 80023ac:	e7fe      	b.n	80023ac <ADC1_IRQHandler>

080023ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b8:	2003      	movs	r0, #3
 80023ba:	f000 f961 	bl	8002680 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023be:	2000      	movs	r0, #0
 80023c0:	f000 f80e 	bl	80023e0 <HAL_InitTick>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	71fb      	strb	r3, [r7, #7]
 80023ce:	e001      	b.n	80023d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023d0:	f7ff fcac 	bl	8001d2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023d4:	79fb      	ldrb	r3, [r7, #7]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <HAL_InitTick+0x6c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d023      	beq.n	800243c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023f4:	4b16      	ldr	r3, [pc, #88]	; (8002450 <HAL_InitTick+0x70>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_InitTick+0x6c>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	4619      	mov	r1, r3
 80023fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002402:	fbb3 f3f1 	udiv	r3, r3, r1
 8002406:	fbb2 f3f3 	udiv	r3, r2, r3
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f96d 	bl	80026ea <HAL_SYSTICK_Config>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10f      	bne.n	8002436 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b0f      	cmp	r3, #15
 800241a:	d809      	bhi.n	8002430 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800241c:	2200      	movs	r2, #0
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002424:	f000 f937 	bl	8002696 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002428:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <HAL_InitTick+0x74>)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e007      	b.n	8002440 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	e004      	b.n	8002440 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
 800243a:	e001      	b.n	8002440 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002440:	7bfb      	ldrb	r3, [r7, #15]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000008 	.word	0x20000008
 8002450:	20000000 	.word	0x20000000
 8002454:	20000004 	.word	0x20000004

08002458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_IncTick+0x20>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_IncTick+0x24>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4413      	add	r3, r2
 8002468:	4a04      	ldr	r2, [pc, #16]	; (800247c <HAL_IncTick+0x24>)
 800246a:	6013      	str	r3, [r2, #0]
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000008 	.word	0x20000008
 800247c:	20000320 	.word	0x20000320

08002480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return uwTick;
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <HAL_GetTick+0x14>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000320 	.word	0x20000320

08002498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a0:	f7ff ffee 	bl	8002480 <HAL_GetTick>
 80024a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024b0:	d005      	beq.n	80024be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_Delay+0x44>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024be:	bf00      	nop
 80024c0:	f7ff ffde 	bl	8002480 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d8f7      	bhi.n	80024c0 <HAL_Delay+0x28>
  {
  }
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000008 	.word	0x20000008

080024e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <__NVIC_SetPriorityGrouping+0x44>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024fc:	4013      	ands	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800250c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002512:	4a04      	ldr	r2, [pc, #16]	; (8002524 <__NVIC_SetPriorityGrouping+0x44>)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	60d3      	str	r3, [r2, #12]
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <__NVIC_GetPriorityGrouping+0x18>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	0a1b      	lsrs	r3, r3, #8
 8002532:	f003 0307 	and.w	r3, r3, #7
}
 8002536:	4618      	mov	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	2b00      	cmp	r3, #0
 8002554:	db0b      	blt.n	800256e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	4907      	ldr	r1, [pc, #28]	; (800257c <__NVIC_EnableIRQ+0x38>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	2001      	movs	r0, #1
 8002566:	fa00 f202 	lsl.w	r2, r0, r2
 800256a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000e100 	.word	0xe000e100

08002580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	6039      	str	r1, [r7, #0]
 800258a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002590:	2b00      	cmp	r3, #0
 8002592:	db0a      	blt.n	80025aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	b2da      	uxtb	r2, r3
 8002598:	490c      	ldr	r1, [pc, #48]	; (80025cc <__NVIC_SetPriority+0x4c>)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	0112      	lsls	r2, r2, #4
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	440b      	add	r3, r1
 80025a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a8:	e00a      	b.n	80025c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4908      	ldr	r1, [pc, #32]	; (80025d0 <__NVIC_SetPriority+0x50>)
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	3b04      	subs	r3, #4
 80025b8:	0112      	lsls	r2, r2, #4
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	440b      	add	r3, r1
 80025be:	761a      	strb	r2, [r3, #24]
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000e100 	.word	0xe000e100
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	; 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f1c3 0307 	rsb	r3, r3, #7
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	bf28      	it	cs
 80025f2:	2304      	movcs	r3, #4
 80025f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3304      	adds	r3, #4
 80025fa:	2b06      	cmp	r3, #6
 80025fc:	d902      	bls.n	8002604 <NVIC_EncodePriority+0x30>
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3b03      	subs	r3, #3
 8002602:	e000      	b.n	8002606 <NVIC_EncodePriority+0x32>
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43da      	mvns	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	401a      	ands	r2, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800261c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	fa01 f303 	lsl.w	r3, r1, r3
 8002626:	43d9      	mvns	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	4313      	orrs	r3, r2
         );
}
 800262e:	4618      	mov	r0, r3
 8002630:	3724      	adds	r7, #36	; 0x24
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800264c:	d301      	bcc.n	8002652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800264e:	2301      	movs	r3, #1
 8002650:	e00f      	b.n	8002672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002652:	4a0a      	ldr	r2, [pc, #40]	; (800267c <SysTick_Config+0x40>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800265a:	210f      	movs	r1, #15
 800265c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002660:	f7ff ff8e 	bl	8002580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <SysTick_Config+0x40>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800266a:	4b04      	ldr	r3, [pc, #16]	; (800267c <SysTick_Config+0x40>)
 800266c:	2207      	movs	r2, #7
 800266e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	e000e010 	.word	0xe000e010

08002680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ff29 	bl	80024e0 <__NVIC_SetPriorityGrouping>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026a8:	f7ff ff3e 	bl	8002528 <__NVIC_GetPriorityGrouping>
 80026ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	6978      	ldr	r0, [r7, #20]
 80026b4:	f7ff ff8e 	bl	80025d4 <NVIC_EncodePriority>
 80026b8:	4602      	mov	r2, r0
 80026ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026be:	4611      	mov	r1, r2
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff5d 	bl	8002580 <__NVIC_SetPriority>
}
 80026c6:	bf00      	nop
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff31 	bl	8002544 <__NVIC_EnableIRQ>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff ffa2 	bl	800263c <SysTick_Config>
 80026f8:	4603      	mov	r3, r0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e098      	b.n	8002848 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	4b4d      	ldr	r3, [pc, #308]	; (8002854 <HAL_DMA_Init+0x150>)
 800271e:	429a      	cmp	r2, r3
 8002720:	d80f      	bhi.n	8002742 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	4b4b      	ldr	r3, [pc, #300]	; (8002858 <HAL_DMA_Init+0x154>)
 800272a:	4413      	add	r3, r2
 800272c:	4a4b      	ldr	r2, [pc, #300]	; (800285c <HAL_DMA_Init+0x158>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	009a      	lsls	r2, r3, #2
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a48      	ldr	r2, [pc, #288]	; (8002860 <HAL_DMA_Init+0x15c>)
 800273e:	641a      	str	r2, [r3, #64]	; 0x40
 8002740:	e00e      	b.n	8002760 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	4b46      	ldr	r3, [pc, #280]	; (8002864 <HAL_DMA_Init+0x160>)
 800274a:	4413      	add	r3, r2
 800274c:	4a43      	ldr	r2, [pc, #268]	; (800285c <HAL_DMA_Init+0x158>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	091b      	lsrs	r3, r3, #4
 8002754:	009a      	lsls	r2, r3, #2
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a42      	ldr	r2, [pc, #264]	; (8002868 <HAL_DMA_Init+0x164>)
 800275e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002784:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027ba:	d039      	beq.n	8002830 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	4a27      	ldr	r2, [pc, #156]	; (8002860 <HAL_DMA_Init+0x15c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d11a      	bne.n	80027fc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027c6:	4b29      	ldr	r3, [pc, #164]	; (800286c <HAL_DMA_Init+0x168>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	f003 031c 	and.w	r3, r3, #28
 80027d2:	210f      	movs	r1, #15
 80027d4:	fa01 f303 	lsl.w	r3, r1, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	4924      	ldr	r1, [pc, #144]	; (800286c <HAL_DMA_Init+0x168>)
 80027dc:	4013      	ands	r3, r2
 80027de:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80027e0:	4b22      	ldr	r3, [pc, #136]	; (800286c <HAL_DMA_Init+0x168>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ec:	f003 031c 	and.w	r3, r3, #28
 80027f0:	fa01 f303 	lsl.w	r3, r1, r3
 80027f4:	491d      	ldr	r1, [pc, #116]	; (800286c <HAL_DMA_Init+0x168>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]
 80027fa:	e019      	b.n	8002830 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027fc:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <HAL_DMA_Init+0x16c>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	f003 031c 	and.w	r3, r3, #28
 8002808:	210f      	movs	r1, #15
 800280a:	fa01 f303 	lsl.w	r3, r1, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	4917      	ldr	r1, [pc, #92]	; (8002870 <HAL_DMA_Init+0x16c>)
 8002812:	4013      	ands	r3, r2
 8002814:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002816:	4b16      	ldr	r3, [pc, #88]	; (8002870 <HAL_DMA_Init+0x16c>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6859      	ldr	r1, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f003 031c 	and.w	r3, r3, #28
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	4911      	ldr	r1, [pc, #68]	; (8002870 <HAL_DMA_Init+0x16c>)
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	40020407 	.word	0x40020407
 8002858:	bffdfff8 	.word	0xbffdfff8
 800285c:	cccccccd 	.word	0xcccccccd
 8002860:	40020000 	.word	0x40020000
 8002864:	bffdfbf8 	.word	0xbffdfbf8
 8002868:	40020400 	.word	0x40020400
 800286c:	400200a8 	.word	0x400200a8
 8002870:	400204a8 	.word	0x400204a8

08002874 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_DMA_Start_IT+0x20>
 8002890:	2302      	movs	r3, #2
 8002892:	e04b      	b.n	800292c <HAL_DMA_Start_IT+0xb8>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d13a      	bne.n	800291e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0201 	bic.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f8e0 	bl	8002a92 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d008      	beq.n	80028ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 020e 	orr.w	r2, r2, #14
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e00f      	b.n	800290c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0204 	bic.w	r2, r2, #4
 80028fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 020a 	orr.w	r2, r2, #10
 800290a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e005      	b.n	800292a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002926:	2302      	movs	r3, #2
 8002928:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800292a:	7dfb      	ldrb	r3, [r7, #23]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002950:	f003 031c 	and.w	r3, r3, #28
 8002954:	2204      	movs	r2, #4
 8002956:	409a      	lsls	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d026      	beq.n	80029ae <HAL_DMA_IRQHandler+0x7a>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d021      	beq.n	80029ae <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	2b00      	cmp	r3, #0
 8002976:	d107      	bne.n	8002988 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0204 	bic.w	r2, r2, #4
 8002986:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298c:	f003 021c 	and.w	r2, r3, #28
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	2104      	movs	r1, #4
 8002996:	fa01 f202 	lsl.w	r2, r1, r2
 800299a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d071      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80029ac:	e06c      	b.n	8002a88 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	f003 031c 	and.w	r3, r3, #28
 80029b6:	2202      	movs	r2, #2
 80029b8:	409a      	lsls	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4013      	ands	r3, r2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d02e      	beq.n	8002a20 <HAL_DMA_IRQHandler+0xec>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d029      	beq.n	8002a20 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0320 	and.w	r3, r3, #32
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10b      	bne.n	80029f2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 020a 	bic.w	r2, r2, #10
 80029e8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	f003 021c 	and.w	r2, r3, #28
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	2102      	movs	r1, #2
 8002a00:	fa01 f202 	lsl.w	r2, r1, r2
 8002a04:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d038      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a1e:	e033      	b.n	8002a88 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a24:	f003 031c 	and.w	r3, r3, #28
 8002a28:	2208      	movs	r2, #8
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d02a      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x156>
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d025      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 020e 	bic.w	r2, r2, #14
 8002a4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	f003 021c 	and.w	r2, r3, #28
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a60:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d004      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
}
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b085      	sub	sp, #20
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa4:	f003 021c 	and.w	r2, r3, #28
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	2101      	movs	r1, #1
 8002aae:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b10      	cmp	r3, #16
 8002ac2:	d108      	bne.n	8002ad6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ad4:	e007      	b.n	8002ae6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	60da      	str	r2, [r3, #12]
}
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b02:	e148      	b.n	8002d96 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	2101      	movs	r1, #1
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b10:	4013      	ands	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 813a 	beq.w	8002d90 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d005      	beq.n	8002b34 <HAL_GPIO_Init+0x40>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d130      	bne.n	8002b96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	091b      	lsrs	r3, r3, #4
 8002b80:	f003 0201 	and.w	r2, r3, #1
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d017      	beq.n	8002bd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	2203      	movs	r2, #3
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d123      	bne.n	8002c26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	08da      	lsrs	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3208      	adds	r2, #8
 8002be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	220f      	movs	r2, #15
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	08da      	lsrs	r2, r3, #3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3208      	adds	r2, #8
 8002c20:	6939      	ldr	r1, [r7, #16]
 8002c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	2203      	movs	r2, #3
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 0203 	and.w	r2, r3, #3
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 8094 	beq.w	8002d90 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c68:	4b52      	ldr	r3, [pc, #328]	; (8002db4 <HAL_GPIO_Init+0x2c0>)
 8002c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6c:	4a51      	ldr	r2, [pc, #324]	; (8002db4 <HAL_GPIO_Init+0x2c0>)
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	6613      	str	r3, [r2, #96]	; 0x60
 8002c74:	4b4f      	ldr	r3, [pc, #316]	; (8002db4 <HAL_GPIO_Init+0x2c0>)
 8002c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c80:	4a4d      	ldr	r2, [pc, #308]	; (8002db8 <HAL_GPIO_Init+0x2c4>)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	089b      	lsrs	r3, r3, #2
 8002c86:	3302      	adds	r3, #2
 8002c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	220f      	movs	r2, #15
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002caa:	d00d      	beq.n	8002cc8 <HAL_GPIO_Init+0x1d4>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a43      	ldr	r2, [pc, #268]	; (8002dbc <HAL_GPIO_Init+0x2c8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d007      	beq.n	8002cc4 <HAL_GPIO_Init+0x1d0>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a42      	ldr	r2, [pc, #264]	; (8002dc0 <HAL_GPIO_Init+0x2cc>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d101      	bne.n	8002cc0 <HAL_GPIO_Init+0x1cc>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e004      	b.n	8002cca <HAL_GPIO_Init+0x1d6>
 8002cc0:	2307      	movs	r3, #7
 8002cc2:	e002      	b.n	8002cca <HAL_GPIO_Init+0x1d6>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <HAL_GPIO_Init+0x1d6>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	f002 0203 	and.w	r2, r2, #3
 8002cd0:	0092      	lsls	r2, r2, #2
 8002cd2:	4093      	lsls	r3, r2
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cda:	4937      	ldr	r1, [pc, #220]	; (8002db8 <HAL_GPIO_Init+0x2c4>)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	089b      	lsrs	r3, r3, #2
 8002ce0:	3302      	adds	r3, #2
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ce8:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <HAL_GPIO_Init+0x2d0>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d0c:	4a2d      	ldr	r2, [pc, #180]	; (8002dc4 <HAL_GPIO_Init+0x2d0>)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d12:	4b2c      	ldr	r3, [pc, #176]	; (8002dc4 <HAL_GPIO_Init+0x2d0>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d36:	4a23      	ldr	r2, [pc, #140]	; (8002dc4 <HAL_GPIO_Init+0x2d0>)
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d3c:	4b21      	ldr	r3, [pc, #132]	; (8002dc4 <HAL_GPIO_Init+0x2d0>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d60:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <HAL_GPIO_Init+0x2d0>)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <HAL_GPIO_Init+0x2d0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d8a:	4a0e      	ldr	r2, [pc, #56]	; (8002dc4 <HAL_GPIO_Init+0x2d0>)
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	3301      	adds	r3, #1
 8002d94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f47f aeaf 	bne.w	8002b04 <HAL_GPIO_Init+0x10>
  }
}
 8002da6:	bf00      	nop
 8002da8:	bf00      	nop
 8002daa:	371c      	adds	r7, #28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40010000 	.word	0x40010000
 8002dbc:	48000400 	.word	0x48000400
 8002dc0:	48000800 	.word	0x48000800
 8002dc4:	40010400 	.word	0x40010400

08002dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	807b      	strh	r3, [r7, #2]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd8:	787b      	ldrb	r3, [r7, #1]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002de4:	e002      	b.n	8002dec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e0e:	4a05      	ldr	r2, [pc, #20]	; (8002e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fe2a 	bl	8001a70 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40010400 	.word	0x40010400

08002e28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e081      	b.n	8002f3e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fe fcde 	bl	8001810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2224      	movs	r2, #36	; 0x24
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d107      	bne.n	8002ea2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	e006      	b.n	8002eb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002eae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d104      	bne.n	8002ec2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ec0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ed4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ee4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69d9      	ldr	r1, [r3, #28]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1a      	ldr	r2, [r3, #32]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	4608      	mov	r0, r1
 8002f52:	4611      	mov	r1, r2
 8002f54:	461a      	mov	r2, r3
 8002f56:	4603      	mov	r3, r0
 8002f58:	817b      	strh	r3, [r7, #10]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	813b      	strh	r3, [r7, #8]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	f040 80f9 	bne.w	8003162 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <HAL_I2C_Mem_Write+0x34>
 8002f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0ed      	b.n	8003164 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_I2C_Mem_Write+0x4e>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e0e6      	b.n	8003164 <HAL_I2C_Mem_Write+0x21c>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f9e:	f7ff fa6f 	bl	8002480 <HAL_GetTick>
 8002fa2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	2319      	movs	r3, #25
 8002faa:	2201      	movs	r2, #1
 8002fac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 fbcb 	bl	800374c <I2C_WaitOnFlagUntilTimeout>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0d1      	b.n	8003164 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2221      	movs	r2, #33	; 0x21
 8002fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2240      	movs	r2, #64	; 0x40
 8002fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a3a      	ldr	r2, [r7, #32]
 8002fda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fe8:	88f8      	ldrh	r0, [r7, #6]
 8002fea:	893a      	ldrh	r2, [r7, #8]
 8002fec:	8979      	ldrh	r1, [r7, #10]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	9301      	str	r3, [sp, #4]
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fadb 	bl	80035b4 <I2C_RequestMemoryWrite>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0a9      	b.n	8003164 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	2bff      	cmp	r3, #255	; 0xff
 8003018:	d90e      	bls.n	8003038 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	22ff      	movs	r2, #255	; 0xff
 800301e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003024:	b2da      	uxtb	r2, r3
 8003026:	8979      	ldrh	r1, [r7, #10]
 8003028:	2300      	movs	r3, #0
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 fd33 	bl	8003a9c <I2C_TransferConfig>
 8003036:	e00f      	b.n	8003058 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003046:	b2da      	uxtb	r2, r3
 8003048:	8979      	ldrh	r1, [r7, #10]
 800304a:	2300      	movs	r3, #0
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fd22 	bl	8003a9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 fbb5 	bl	80037cc <I2C_WaitOnTXISFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e07b      	b.n	8003164 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	781a      	ldrb	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d034      	beq.n	8003110 <HAL_I2C_Mem_Write+0x1c8>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d130      	bne.n	8003110 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	2200      	movs	r2, #0
 80030b6:	2180      	movs	r1, #128	; 0x80
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fb47 	bl	800374c <I2C_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e04d      	b.n	8003164 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2bff      	cmp	r3, #255	; 0xff
 80030d0:	d90e      	bls.n	80030f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	22ff      	movs	r2, #255	; 0xff
 80030d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	8979      	ldrh	r1, [r7, #10]
 80030e0:	2300      	movs	r3, #0
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fcd7 	bl	8003a9c <I2C_TransferConfig>
 80030ee:	e00f      	b.n	8003110 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	8979      	ldrh	r1, [r7, #10]
 8003102:	2300      	movs	r3, #0
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 fcc6 	bl	8003a9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d19e      	bne.n	8003058 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 fb94 	bl	800384c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e01a      	b.n	8003164 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2220      	movs	r2, #32
 8003134:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4b0a      	ldr	r3, [pc, #40]	; (800316c <HAL_I2C_Mem_Write+0x224>)
 8003142:	400b      	ands	r3, r1
 8003144:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	e000      	b.n	8003164 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003162:	2302      	movs	r3, #2
  }
}
 8003164:	4618      	mov	r0, r3
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	fe00e800 	.word	0xfe00e800

08003170 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	4608      	mov	r0, r1
 800317a:	4611      	mov	r1, r2
 800317c:	461a      	mov	r2, r3
 800317e:	4603      	mov	r3, r0
 8003180:	817b      	strh	r3, [r7, #10]
 8003182:	460b      	mov	r3, r1
 8003184:	813b      	strh	r3, [r7, #8]
 8003186:	4613      	mov	r3, r2
 8003188:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b20      	cmp	r3, #32
 8003194:	f040 80fd 	bne.w	8003392 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <HAL_I2C_Mem_Read+0x34>
 800319e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d105      	bne.n	80031b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0f1      	b.n	8003394 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_I2C_Mem_Read+0x4e>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e0ea      	b.n	8003394 <HAL_I2C_Mem_Read+0x224>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031c6:	f7ff f95b 	bl	8002480 <HAL_GetTick>
 80031ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	2319      	movs	r3, #25
 80031d2:	2201      	movs	r2, #1
 80031d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fab7 	bl	800374c <I2C_WaitOnFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0d5      	b.n	8003394 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2222      	movs	r2, #34	; 0x22
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2240      	movs	r2, #64	; 0x40
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a3a      	ldr	r2, [r7, #32]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003208:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003210:	88f8      	ldrh	r0, [r7, #6]
 8003212:	893a      	ldrh	r2, [r7, #8]
 8003214:	8979      	ldrh	r1, [r7, #10]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	4603      	mov	r3, r0
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 fa1b 	bl	800365c <I2C_RequestMemoryRead>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0ad      	b.n	8003394 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323c:	b29b      	uxth	r3, r3
 800323e:	2bff      	cmp	r3, #255	; 0xff
 8003240:	d90e      	bls.n	8003260 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	22ff      	movs	r2, #255	; 0xff
 8003246:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	b2da      	uxtb	r2, r3
 800324e:	8979      	ldrh	r1, [r7, #10]
 8003250:	4b52      	ldr	r3, [pc, #328]	; (800339c <HAL_I2C_Mem_Read+0x22c>)
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fc1f 	bl	8003a9c <I2C_TransferConfig>
 800325e:	e00f      	b.n	8003280 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326e:	b2da      	uxtb	r2, r3
 8003270:	8979      	ldrh	r1, [r7, #10]
 8003272:	4b4a      	ldr	r3, [pc, #296]	; (800339c <HAL_I2C_Mem_Read+0x22c>)
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fc0e 	bl	8003a9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003286:	2200      	movs	r2, #0
 8003288:	2104      	movs	r1, #4
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 fa5e 	bl	800374c <I2C_WaitOnFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e07c      	b.n	8003394 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d034      	beq.n	8003340 <HAL_I2C_Mem_Read+0x1d0>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d130      	bne.n	8003340 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	2200      	movs	r2, #0
 80032e6:	2180      	movs	r1, #128	; 0x80
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 fa2f 	bl	800374c <I2C_WaitOnFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e04d      	b.n	8003394 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2bff      	cmp	r3, #255	; 0xff
 8003300:	d90e      	bls.n	8003320 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	22ff      	movs	r2, #255	; 0xff
 8003306:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330c:	b2da      	uxtb	r2, r3
 800330e:	8979      	ldrh	r1, [r7, #10]
 8003310:	2300      	movs	r3, #0
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fbbf 	bl	8003a9c <I2C_TransferConfig>
 800331e:	e00f      	b.n	8003340 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332e:	b2da      	uxtb	r2, r3
 8003330:	8979      	ldrh	r1, [r7, #10]
 8003332:	2300      	movs	r3, #0
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fbae 	bl	8003a9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d19a      	bne.n	8003280 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fa7c 	bl	800384c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e01a      	b.n	8003394 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2220      	movs	r2, #32
 8003364:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6859      	ldr	r1, [r3, #4]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <HAL_I2C_Mem_Read+0x230>)
 8003372:	400b      	ands	r3, r1
 8003374:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	e000      	b.n	8003394 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003392:	2302      	movs	r3, #2
  }
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	80002400 	.word	0x80002400
 80033a0:	fe00e800 	.word	0xfe00e800

080033a4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	; 0x28
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	460b      	mov	r3, r1
 80033b2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	f040 80f1 	bne.w	80035a8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d4:	d101      	bne.n	80033da <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80033d6:	2302      	movs	r3, #2
 80033d8:	e0e7      	b.n	80035aa <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_I2C_IsDeviceReady+0x44>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e0e0      	b.n	80035aa <HAL_I2C_IsDeviceReady+0x206>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2224      	movs	r2, #36	; 0x24
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d107      	bne.n	8003416 <HAL_I2C_IsDeviceReady+0x72>
 8003406:	897b      	ldrh	r3, [r7, #10]
 8003408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800340c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003410:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003414:	e004      	b.n	8003420 <HAL_I2C_IsDeviceReady+0x7c>
 8003416:	897b      	ldrh	r3, [r7, #10]
 8003418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800341c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003426:	f7ff f82b 	bl	8002480 <HAL_GetTick>
 800342a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b20      	cmp	r3, #32
 8003438:	bf0c      	ite	eq
 800343a:	2301      	moveq	r3, #1
 800343c:	2300      	movne	r3, #0
 800343e:	b2db      	uxtb	r3, r3
 8003440:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b10      	cmp	r3, #16
 800344e:	bf0c      	ite	eq
 8003450:	2301      	moveq	r3, #1
 8003452:	2300      	movne	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003458:	e034      	b.n	80034c4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003460:	d01a      	beq.n	8003498 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003462:	f7ff f80d 	bl	8002480 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <HAL_I2C_IsDeviceReady+0xd4>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10f      	bne.n	8003498 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003484:	f043 0220 	orr.w	r2, r3, #32
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e088      	b.n	80035aa <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	bf0c      	ite	eq
 80034a6:	2301      	moveq	r3, #1
 80034a8:	2300      	movne	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b10      	cmp	r3, #16
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80034c4:	7ffb      	ldrb	r3, [r7, #31]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d102      	bne.n	80034d0 <HAL_I2C_IsDeviceReady+0x12c>
 80034ca:	7fbb      	ldrb	r3, [r7, #30]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0c4      	beq.n	800345a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b10      	cmp	r3, #16
 80034dc:	d01a      	beq.n	8003514 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2200      	movs	r2, #0
 80034e6:	2120      	movs	r1, #32
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f92f 	bl	800374c <I2C_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e058      	b.n	80035aa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2220      	movs	r2, #32
 80034fe:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	e04a      	b.n	80035aa <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2200      	movs	r2, #0
 800351c:	2120      	movs	r1, #32
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f914 	bl	800374c <I2C_WaitOnFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e03d      	b.n	80035aa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2210      	movs	r2, #16
 8003534:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2220      	movs	r2, #32
 800353c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	429a      	cmp	r2, r3
 8003544:	d118      	bne.n	8003578 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003554:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2200      	movs	r2, #0
 800355e:	2120      	movs	r1, #32
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f8f3 	bl	800374c <I2C_WaitOnFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e01c      	b.n	80035aa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2220      	movs	r2, #32
 8003576:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3301      	adds	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	429a      	cmp	r2, r3
 8003584:	f63f af3b 	bhi.w	80033fe <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003594:	f043 0220 	orr.w	r2, r3, #32
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e000      	b.n	80035aa <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80035a8:	2302      	movs	r3, #2
  }
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	4608      	mov	r0, r1
 80035be:	4611      	mov	r1, r2
 80035c0:	461a      	mov	r2, r3
 80035c2:	4603      	mov	r3, r0
 80035c4:	817b      	strh	r3, [r7, #10]
 80035c6:	460b      	mov	r3, r1
 80035c8:	813b      	strh	r3, [r7, #8]
 80035ca:	4613      	mov	r3, r2
 80035cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	8979      	ldrh	r1, [r7, #10]
 80035d4:	4b20      	ldr	r3, [pc, #128]	; (8003658 <I2C_RequestMemoryWrite+0xa4>)
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 fa5d 	bl	8003a9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	69b9      	ldr	r1, [r7, #24]
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f8f0 	bl	80037cc <I2C_WaitOnTXISFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e02c      	b.n	8003650 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d105      	bne.n	8003608 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035fc:	893b      	ldrh	r3, [r7, #8]
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	629a      	str	r2, [r3, #40]	; 0x28
 8003606:	e015      	b.n	8003634 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003608:	893b      	ldrh	r3, [r7, #8]
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	b29b      	uxth	r3, r3
 800360e:	b2da      	uxtb	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	69b9      	ldr	r1, [r7, #24]
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f8d6 	bl	80037cc <I2C_WaitOnTXISFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e012      	b.n	8003650 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800362a:	893b      	ldrh	r3, [r7, #8]
 800362c:	b2da      	uxtb	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2200      	movs	r2, #0
 800363c:	2180      	movs	r1, #128	; 0x80
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f884 	bl	800374c <I2C_WaitOnFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	80002000 	.word	0x80002000

0800365c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	4608      	mov	r0, r1
 8003666:	4611      	mov	r1, r2
 8003668:	461a      	mov	r2, r3
 800366a:	4603      	mov	r3, r0
 800366c:	817b      	strh	r3, [r7, #10]
 800366e:	460b      	mov	r3, r1
 8003670:	813b      	strh	r3, [r7, #8]
 8003672:	4613      	mov	r3, r2
 8003674:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	b2da      	uxtb	r2, r3
 800367a:	8979      	ldrh	r1, [r7, #10]
 800367c:	4b20      	ldr	r3, [pc, #128]	; (8003700 <I2C_RequestMemoryRead+0xa4>)
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	2300      	movs	r3, #0
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 fa0a 	bl	8003a9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	69b9      	ldr	r1, [r7, #24]
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f89d 	bl	80037cc <I2C_WaitOnTXISFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e02c      	b.n	80036f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800369c:	88fb      	ldrh	r3, [r7, #6]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d105      	bne.n	80036ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036a2:	893b      	ldrh	r3, [r7, #8]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28
 80036ac:	e015      	b.n	80036da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036ae:	893b      	ldrh	r3, [r7, #8]
 80036b0:	0a1b      	lsrs	r3, r3, #8
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	69b9      	ldr	r1, [r7, #24]
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f883 	bl	80037cc <I2C_WaitOnTXISFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e012      	b.n	80036f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036d0:	893b      	ldrh	r3, [r7, #8]
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	2200      	movs	r2, #0
 80036e2:	2140      	movs	r1, #64	; 0x40
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f831 	bl	800374c <I2C_WaitOnFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	80002000 	.word	0x80002000

08003704 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b02      	cmp	r3, #2
 8003718:	d103      	bne.n	8003722 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2200      	movs	r2, #0
 8003720:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b01      	cmp	r3, #1
 800372e:	d007      	beq.n	8003740 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	619a      	str	r2, [r3, #24]
  }
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	4613      	mov	r3, r2
 800375a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800375c:	e022      	b.n	80037a4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003764:	d01e      	beq.n	80037a4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003766:	f7fe fe8b 	bl	8002480 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d302      	bcc.n	800377c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d113      	bne.n	80037a4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003780:	f043 0220 	orr.w	r2, r3, #32
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e00f      	b.n	80037c4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699a      	ldr	r2, [r3, #24]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	4013      	ands	r3, r2
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	461a      	mov	r2, r3
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d0cd      	beq.n	800375e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037d8:	e02c      	b.n	8003834 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f870 	bl	80038c4 <I2C_IsErrorOccurred>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e02a      	b.n	8003844 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037f4:	d01e      	beq.n	8003834 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f6:	f7fe fe43 	bl	8002480 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	429a      	cmp	r2, r3
 8003804:	d302      	bcc.n	800380c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d113      	bne.n	8003834 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003810:	f043 0220 	orr.w	r2, r3, #32
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e007      	b.n	8003844 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b02      	cmp	r3, #2
 8003840:	d1cb      	bne.n	80037da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003858:	e028      	b.n	80038ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 f830 	bl	80038c4 <I2C_IsErrorOccurred>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e026      	b.n	80038bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386e:	f7fe fe07 	bl	8002480 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	429a      	cmp	r2, r3
 800387c:	d302      	bcc.n	8003884 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d113      	bne.n	80038ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003888:	f043 0220 	orr.w	r2, r3, #32
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e007      	b.n	80038bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d1cf      	bne.n	800385a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08a      	sub	sp, #40	; 0x28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d075      	beq.n	80039dc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2210      	movs	r2, #16
 80038f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038f8:	e056      	b.n	80039a8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003900:	d052      	beq.n	80039a8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003902:	f7fe fdbd 	bl	8002480 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	429a      	cmp	r2, r3
 8003910:	d302      	bcc.n	8003918 <I2C_IsErrorOccurred+0x54>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d147      	bne.n	80039a8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003922:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800392a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800393a:	d12e      	bne.n	800399a <I2C_IsErrorOccurred+0xd6>
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003942:	d02a      	beq.n	800399a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003944:	7cfb      	ldrb	r3, [r7, #19]
 8003946:	2b20      	cmp	r3, #32
 8003948:	d027      	beq.n	800399a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003958:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800395a:	f7fe fd91 	bl	8002480 <HAL_GetTick>
 800395e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003960:	e01b      	b.n	800399a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003962:	f7fe fd8d 	bl	8002480 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b19      	cmp	r3, #25
 800396e:	d914      	bls.n	800399a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003974:	f043 0220 	orr.w	r2, r3, #32
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d1dc      	bne.n	8003962 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d003      	beq.n	80039be <I2C_IsErrorOccurred+0xfa>
 80039b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d09d      	beq.n	80038fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80039be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d103      	bne.n	80039ce <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2220      	movs	r2, #32
 80039cc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	f043 0304 	orr.w	r3, r3, #4
 80039d4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00b      	beq.n	8003a28 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	f043 0308 	orr.w	r3, r3, #8
 8003a16:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	f043 0302 	orr.w	r3, r3, #2
 8003a38:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d01c      	beq.n	8003a8c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f7ff fe56 	bl	8003704 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6859      	ldr	r1, [r3, #4]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <I2C_IsErrorOccurred+0x1d4>)
 8003a64:	400b      	ands	r3, r1
 8003a66:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3728      	adds	r7, #40	; 0x28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	fe00e800 	.word	0xfe00e800

08003a9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	607b      	str	r3, [r7, #4]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	817b      	strh	r3, [r7, #10]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aae:	897b      	ldrh	r3, [r7, #10]
 8003ab0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ab4:	7a7b      	ldrb	r3, [r7, #9]
 8003ab6:	041b      	lsls	r3, r3, #16
 8003ab8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003abc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003aca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	0d5b      	lsrs	r3, r3, #21
 8003ad6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ada:	4b08      	ldr	r3, [pc, #32]	; (8003afc <I2C_TransferConfig+0x60>)
 8003adc:	430b      	orrs	r3, r1
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	ea02 0103 	and.w	r1, r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003aee:	bf00      	nop
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	03ff63ff 	.word	0x03ff63ff

08003b00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	d138      	bne.n	8003b88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e032      	b.n	8003b8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2224      	movs	r2, #36	; 0x24
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0201 	bic.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6819      	ldr	r1, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	e000      	b.n	8003b8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b88:	2302      	movs	r3, #2
  }
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b085      	sub	sp, #20
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d139      	bne.n	8003c20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e033      	b.n	8003c22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2224      	movs	r2, #36	; 0x24
 8003bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0201 	bic.w	r2, r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003be8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	021b      	lsls	r3, r3, #8
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	e000      	b.n	8003c22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c20:	2302      	movs	r3, #2
  }
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c34:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40007000 	.word	0x40007000

08003c4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c5a:	d130      	bne.n	8003cbe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c5c:	4b23      	ldr	r3, [pc, #140]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c68:	d038      	beq.n	8003cdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c6a:	4b20      	ldr	r3, [pc, #128]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c72:	4a1e      	ldr	r2, [pc, #120]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c7a:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2232      	movs	r2, #50	; 0x32
 8003c80:	fb02 f303 	mul.w	r3, r2, r3
 8003c84:	4a1b      	ldr	r2, [pc, #108]	; (8003cf4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	0c9b      	lsrs	r3, r3, #18
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c90:	e002      	b.n	8003c98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	3b01      	subs	r3, #1
 8003c96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c98:	4b14      	ldr	r3, [pc, #80]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca4:	d102      	bne.n	8003cac <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1f2      	bne.n	8003c92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cac:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb8:	d110      	bne.n	8003cdc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e00f      	b.n	8003cde <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cca:	d007      	beq.n	8003cdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ccc:	4b07      	ldr	r3, [pc, #28]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cd4:	4a05      	ldr	r2, [pc, #20]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40007000 	.word	0x40007000
 8003cf0:	20000000 	.word	0x20000000
 8003cf4:	431bde83 	.word	0x431bde83

08003cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d102      	bne.n	8003d0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f000 bc02 	b.w	8004510 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d0c:	4b96      	ldr	r3, [pc, #600]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 030c 	and.w	r3, r3, #12
 8003d14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d16:	4b94      	ldr	r3, [pc, #592]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80e4 	beq.w	8003ef6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d007      	beq.n	8003d44 <HAL_RCC_OscConfig+0x4c>
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	2b0c      	cmp	r3, #12
 8003d38:	f040 808b 	bne.w	8003e52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	f040 8087 	bne.w	8003e52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d44:	4b88      	ldr	r3, [pc, #544]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_RCC_OscConfig+0x64>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e3d9      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1a      	ldr	r2, [r3, #32]
 8003d60:	4b81      	ldr	r3, [pc, #516]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d004      	beq.n	8003d76 <HAL_RCC_OscConfig+0x7e>
 8003d6c:	4b7e      	ldr	r3, [pc, #504]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d74:	e005      	b.n	8003d82 <HAL_RCC_OscConfig+0x8a>
 8003d76:	4b7c      	ldr	r3, [pc, #496]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d223      	bcs.n	8003dce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fd54 	bl	8004838 <RCC_SetFlashLatencyFromMSIRange>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e3ba      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d9a:	4b73      	ldr	r3, [pc, #460]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a72      	ldr	r2, [pc, #456]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003da0:	f043 0308 	orr.w	r3, r3, #8
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	4b70      	ldr	r3, [pc, #448]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	496d      	ldr	r1, [pc, #436]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003db8:	4b6b      	ldr	r3, [pc, #428]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	021b      	lsls	r3, r3, #8
 8003dc6:	4968      	ldr	r1, [pc, #416]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	604b      	str	r3, [r1, #4]
 8003dcc:	e025      	b.n	8003e1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dce:	4b66      	ldr	r3, [pc, #408]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a65      	ldr	r2, [pc, #404]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003dd4:	f043 0308 	orr.w	r3, r3, #8
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	4b63      	ldr	r3, [pc, #396]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	4960      	ldr	r1, [pc, #384]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dec:	4b5e      	ldr	r3, [pc, #376]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	495b      	ldr	r1, [pc, #364]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d109      	bne.n	8003e1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fd14 	bl	8004838 <RCC_SetFlashLatencyFromMSIRange>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e37a      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e1a:	f000 fc81 	bl	8004720 <HAL_RCC_GetSysClockFreq>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	4b51      	ldr	r3, [pc, #324]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	091b      	lsrs	r3, r3, #4
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	4950      	ldr	r1, [pc, #320]	; (8003f6c <HAL_RCC_OscConfig+0x274>)
 8003e2c:	5ccb      	ldrb	r3, [r1, r3]
 8003e2e:	f003 031f 	and.w	r3, r3, #31
 8003e32:	fa22 f303 	lsr.w	r3, r2, r3
 8003e36:	4a4e      	ldr	r2, [pc, #312]	; (8003f70 <HAL_RCC_OscConfig+0x278>)
 8003e38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e3a:	4b4e      	ldr	r3, [pc, #312]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe face 	bl	80023e0 <HAL_InitTick>
 8003e44:	4603      	mov	r3, r0
 8003e46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d052      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	e35e      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d032      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e5a:	4b43      	ldr	r3, [pc, #268]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a42      	ldr	r2, [pc, #264]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e66:	f7fe fb0b 	bl	8002480 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e6e:	f7fe fb07 	bl	8002480 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e347      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e80:	4b39      	ldr	r3, [pc, #228]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e8c:	4b36      	ldr	r3, [pc, #216]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a35      	ldr	r2, [pc, #212]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003e92:	f043 0308 	orr.w	r3, r3, #8
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	4b33      	ldr	r3, [pc, #204]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	4930      	ldr	r1, [pc, #192]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eaa:	4b2f      	ldr	r3, [pc, #188]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	021b      	lsls	r3, r3, #8
 8003eb8:	492b      	ldr	r1, [pc, #172]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	604b      	str	r3, [r1, #4]
 8003ebe:	e01a      	b.n	8003ef6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ec0:	4b29      	ldr	r3, [pc, #164]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a28      	ldr	r2, [pc, #160]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003ec6:	f023 0301 	bic.w	r3, r3, #1
 8003eca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ecc:	f7fe fad8 	bl	8002480 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ed4:	f7fe fad4 	bl	8002480 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e314      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ee6:	4b20      	ldr	r3, [pc, #128]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f0      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x1dc>
 8003ef2:	e000      	b.n	8003ef6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ef4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d073      	beq.n	8003fea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d005      	beq.n	8003f14 <HAL_RCC_OscConfig+0x21c>
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	2b0c      	cmp	r3, #12
 8003f0c:	d10e      	bne.n	8003f2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d10b      	bne.n	8003f2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f14:	4b14      	ldr	r3, [pc, #80]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d063      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x2f0>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d15f      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e2f1      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f34:	d106      	bne.n	8003f44 <HAL_RCC_OscConfig+0x24c>
 8003f36:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a0b      	ldr	r2, [pc, #44]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	e025      	b.n	8003f90 <HAL_RCC_OscConfig+0x298>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f4c:	d114      	bne.n	8003f78 <HAL_RCC_OscConfig+0x280>
 8003f4e:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a05      	ldr	r2, [pc, #20]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a02      	ldr	r2, [pc, #8]	; (8003f68 <HAL_RCC_OscConfig+0x270>)
 8003f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	e013      	b.n	8003f90 <HAL_RCC_OscConfig+0x298>
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	080071d4 	.word	0x080071d4
 8003f70:	20000000 	.word	0x20000000
 8003f74:	20000004 	.word	0x20000004
 8003f78:	4ba0      	ldr	r3, [pc, #640]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a9f      	ldr	r2, [pc, #636]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 8003f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	4b9d      	ldr	r3, [pc, #628]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a9c      	ldr	r2, [pc, #624]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 8003f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d013      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7fe fa72 	bl	8002480 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fa0:	f7fe fa6e 	bl	8002480 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b64      	cmp	r3, #100	; 0x64
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e2ae      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fb2:	4b92      	ldr	r3, [pc, #584]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x2a8>
 8003fbe:	e014      	b.n	8003fea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc0:	f7fe fa5e 	bl	8002480 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc8:	f7fe fa5a 	bl	8002480 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	; 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e29a      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fda:	4b88      	ldr	r3, [pc, #544]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x2d0>
 8003fe6:	e000      	b.n	8003fea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d060      	beq.n	80040b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d005      	beq.n	8004008 <HAL_RCC_OscConfig+0x310>
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	2b0c      	cmp	r3, #12
 8004000:	d119      	bne.n	8004036 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2b02      	cmp	r3, #2
 8004006:	d116      	bne.n	8004036 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004008:	4b7c      	ldr	r3, [pc, #496]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <HAL_RCC_OscConfig+0x328>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e277      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004020:	4b76      	ldr	r3, [pc, #472]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	061b      	lsls	r3, r3, #24
 800402e:	4973      	ldr	r1, [pc, #460]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 8004030:	4313      	orrs	r3, r2
 8004032:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004034:	e040      	b.n	80040b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d023      	beq.n	8004086 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800403e:	4b6f      	ldr	r3, [pc, #444]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a6e      	ldr	r2, [pc, #440]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 8004044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404a:	f7fe fa19 	bl	8002480 <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004052:	f7fe fa15 	bl	8002480 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e255      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004064:	4b65      	ldr	r3, [pc, #404]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0f0      	beq.n	8004052 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004070:	4b62      	ldr	r3, [pc, #392]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	495f      	ldr	r1, [pc, #380]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 8004080:	4313      	orrs	r3, r2
 8004082:	604b      	str	r3, [r1, #4]
 8004084:	e018      	b.n	80040b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004086:	4b5d      	ldr	r3, [pc, #372]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a5c      	ldr	r2, [pc, #368]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 800408c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004092:	f7fe f9f5 	bl	8002480 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800409a:	f7fe f9f1 	bl	8002480 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e231      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040ac:	4b53      	ldr	r3, [pc, #332]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f0      	bne.n	800409a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d03c      	beq.n	800413e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d01c      	beq.n	8004106 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040cc:	4b4b      	ldr	r3, [pc, #300]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 80040ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d2:	4a4a      	ldr	r2, [pc, #296]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040dc:	f7fe f9d0 	bl	8002480 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040e4:	f7fe f9cc 	bl	8002480 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e20c      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040f6:	4b41      	ldr	r3, [pc, #260]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 80040f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0ef      	beq.n	80040e4 <HAL_RCC_OscConfig+0x3ec>
 8004104:	e01b      	b.n	800413e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004106:	4b3d      	ldr	r3, [pc, #244]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 8004108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800410c:	4a3b      	ldr	r2, [pc, #236]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 800410e:	f023 0301 	bic.w	r3, r3, #1
 8004112:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004116:	f7fe f9b3 	bl	8002480 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800411e:	f7fe f9af 	bl	8002480 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e1ef      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004130:	4b32      	ldr	r3, [pc, #200]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 8004132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1ef      	bne.n	800411e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 80a6 	beq.w	8004298 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800414c:	2300      	movs	r3, #0
 800414e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004150:	4b2a      	ldr	r3, [pc, #168]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 8004152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10d      	bne.n	8004178 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800415c:	4b27      	ldr	r3, [pc, #156]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 800415e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004160:	4a26      	ldr	r2, [pc, #152]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 8004162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004166:	6593      	str	r3, [r2, #88]	; 0x58
 8004168:	4b24      	ldr	r3, [pc, #144]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 800416a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004170:	60bb      	str	r3, [r7, #8]
 8004172:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004174:	2301      	movs	r3, #1
 8004176:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004178:	4b21      	ldr	r3, [pc, #132]	; (8004200 <HAL_RCC_OscConfig+0x508>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d118      	bne.n	80041b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004184:	4b1e      	ldr	r3, [pc, #120]	; (8004200 <HAL_RCC_OscConfig+0x508>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a1d      	ldr	r2, [pc, #116]	; (8004200 <HAL_RCC_OscConfig+0x508>)
 800418a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004190:	f7fe f976 	bl	8002480 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004198:	f7fe f972 	bl	8002480 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e1b2      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041aa:	4b15      	ldr	r3, [pc, #84]	; (8004200 <HAL_RCC_OscConfig+0x508>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d108      	bne.n	80041d0 <HAL_RCC_OscConfig+0x4d8>
 80041be:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c4:	4a0d      	ldr	r2, [pc, #52]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041ce:	e029      	b.n	8004224 <HAL_RCC_OscConfig+0x52c>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2b05      	cmp	r3, #5
 80041d6:	d115      	bne.n	8004204 <HAL_RCC_OscConfig+0x50c>
 80041d8:	4b08      	ldr	r3, [pc, #32]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	4a07      	ldr	r2, [pc, #28]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 80041e0:	f043 0304 	orr.w	r3, r3, #4
 80041e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ee:	4a03      	ldr	r2, [pc, #12]	; (80041fc <HAL_RCC_OscConfig+0x504>)
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041f8:	e014      	b.n	8004224 <HAL_RCC_OscConfig+0x52c>
 80041fa:	bf00      	nop
 80041fc:	40021000 	.word	0x40021000
 8004200:	40007000 	.word	0x40007000
 8004204:	4b9a      	ldr	r3, [pc, #616]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420a:	4a99      	ldr	r2, [pc, #612]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 800420c:	f023 0301 	bic.w	r3, r3, #1
 8004210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004214:	4b96      	ldr	r3, [pc, #600]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421a:	4a95      	ldr	r2, [pc, #596]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 800421c:	f023 0304 	bic.w	r3, r3, #4
 8004220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d016      	beq.n	800425a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422c:	f7fe f928 	bl	8002480 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004232:	e00a      	b.n	800424a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004234:	f7fe f924 	bl	8002480 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004242:	4293      	cmp	r3, r2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e162      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800424a:	4b89      	ldr	r3, [pc, #548]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 800424c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0ed      	beq.n	8004234 <HAL_RCC_OscConfig+0x53c>
 8004258:	e015      	b.n	8004286 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425a:	f7fe f911 	bl	8002480 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004260:	e00a      	b.n	8004278 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004262:	f7fe f90d 	bl	8002480 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004270:	4293      	cmp	r3, r2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e14b      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004278:	4b7d      	ldr	r3, [pc, #500]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1ed      	bne.n	8004262 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004286:	7ffb      	ldrb	r3, [r7, #31]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d105      	bne.n	8004298 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800428c:	4b78      	ldr	r3, [pc, #480]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 800428e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004290:	4a77      	ldr	r2, [pc, #476]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 8004292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004296:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d03c      	beq.n	800431e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01c      	beq.n	80042e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042ac:	4b70      	ldr	r3, [pc, #448]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 80042ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042b2:	4a6f      	ldr	r2, [pc, #444]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042bc:	f7fe f8e0 	bl	8002480 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042c4:	f7fe f8dc 	bl	8002480 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e11c      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042d6:	4b66      	ldr	r3, [pc, #408]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 80042d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0ef      	beq.n	80042c4 <HAL_RCC_OscConfig+0x5cc>
 80042e4:	e01b      	b.n	800431e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042e6:	4b62      	ldr	r3, [pc, #392]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 80042e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ec:	4a60      	ldr	r2, [pc, #384]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 80042ee:	f023 0301 	bic.w	r3, r3, #1
 80042f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f6:	f7fe f8c3 	bl	8002480 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042fe:	f7fe f8bf 	bl	8002480 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e0ff      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004310:	4b57      	ldr	r3, [pc, #348]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 8004312:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1ef      	bne.n	80042fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 80f3 	beq.w	800450e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	2b02      	cmp	r3, #2
 800432e:	f040 80c9 	bne.w	80044c4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004332:	4b4f      	ldr	r3, [pc, #316]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f003 0203 	and.w	r2, r3, #3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	429a      	cmp	r2, r3
 8004344:	d12c      	bne.n	80043a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004350:	3b01      	subs	r3, #1
 8004352:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004354:	429a      	cmp	r2, r3
 8004356:	d123      	bne.n	80043a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004362:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d11b      	bne.n	80043a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d113      	bne.n	80043a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004382:	085b      	lsrs	r3, r3, #1
 8004384:	3b01      	subs	r3, #1
 8004386:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004388:	429a      	cmp	r2, r3
 800438a:	d109      	bne.n	80043a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	085b      	lsrs	r3, r3, #1
 8004398:	3b01      	subs	r3, #1
 800439a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800439c:	429a      	cmp	r2, r3
 800439e:	d06b      	beq.n	8004478 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b0c      	cmp	r3, #12
 80043a4:	d062      	beq.n	800446c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043a6:	4b32      	ldr	r3, [pc, #200]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e0ac      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043b6:	4b2e      	ldr	r3, [pc, #184]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a2d      	ldr	r2, [pc, #180]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 80043bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043c2:	f7fe f85d 	bl	8002480 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ca:	f7fe f859 	bl	8002480 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e099      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043dc:	4b24      	ldr	r3, [pc, #144]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f0      	bne.n	80043ca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043e8:	4b21      	ldr	r3, [pc, #132]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	4b21      	ldr	r3, [pc, #132]	; (8004474 <HAL_RCC_OscConfig+0x77c>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043f8:	3a01      	subs	r2, #1
 80043fa:	0112      	lsls	r2, r2, #4
 80043fc:	4311      	orrs	r1, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004402:	0212      	lsls	r2, r2, #8
 8004404:	4311      	orrs	r1, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800440a:	0852      	lsrs	r2, r2, #1
 800440c:	3a01      	subs	r2, #1
 800440e:	0552      	lsls	r2, r2, #21
 8004410:	4311      	orrs	r1, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004416:	0852      	lsrs	r2, r2, #1
 8004418:	3a01      	subs	r2, #1
 800441a:	0652      	lsls	r2, r2, #25
 800441c:	4311      	orrs	r1, r2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004422:	06d2      	lsls	r2, r2, #27
 8004424:	430a      	orrs	r2, r1
 8004426:	4912      	ldr	r1, [pc, #72]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 8004428:	4313      	orrs	r3, r2
 800442a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800442c:	4b10      	ldr	r3, [pc, #64]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a0f      	ldr	r2, [pc, #60]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 8004432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004436:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004438:	4b0d      	ldr	r3, [pc, #52]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	4a0c      	ldr	r2, [pc, #48]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 800443e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004442:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004444:	f7fe f81c 	bl	8002480 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444c:	f7fe f818 	bl	8002480 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e058      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800445e:	4b04      	ldr	r3, [pc, #16]	; (8004470 <HAL_RCC_OscConfig+0x778>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0f0      	beq.n	800444c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800446a:	e050      	b.n	800450e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e04f      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
 8004470:	40021000 	.word	0x40021000
 8004474:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004478:	4b27      	ldr	r3, [pc, #156]	; (8004518 <HAL_RCC_OscConfig+0x820>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d144      	bne.n	800450e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004484:	4b24      	ldr	r3, [pc, #144]	; (8004518 <HAL_RCC_OscConfig+0x820>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a23      	ldr	r2, [pc, #140]	; (8004518 <HAL_RCC_OscConfig+0x820>)
 800448a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800448e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004490:	4b21      	ldr	r3, [pc, #132]	; (8004518 <HAL_RCC_OscConfig+0x820>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	4a20      	ldr	r2, [pc, #128]	; (8004518 <HAL_RCC_OscConfig+0x820>)
 8004496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800449a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800449c:	f7fd fff0 	bl	8002480 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a4:	f7fd ffec 	bl	8002480 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e02c      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b6:	4b18      	ldr	r3, [pc, #96]	; (8004518 <HAL_RCC_OscConfig+0x820>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0x7ac>
 80044c2:	e024      	b.n	800450e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	2b0c      	cmp	r3, #12
 80044c8:	d01f      	beq.n	800450a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ca:	4b13      	ldr	r3, [pc, #76]	; (8004518 <HAL_RCC_OscConfig+0x820>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a12      	ldr	r2, [pc, #72]	; (8004518 <HAL_RCC_OscConfig+0x820>)
 80044d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d6:	f7fd ffd3 	bl	8002480 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044de:	f7fd ffcf 	bl	8002480 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e00f      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f0:	4b09      	ldr	r3, [pc, #36]	; (8004518 <HAL_RCC_OscConfig+0x820>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f0      	bne.n	80044de <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <HAL_RCC_OscConfig+0x820>)
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	4905      	ldr	r1, [pc, #20]	; (8004518 <HAL_RCC_OscConfig+0x820>)
 8004502:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_RCC_OscConfig+0x824>)
 8004504:	4013      	ands	r3, r2
 8004506:	60cb      	str	r3, [r1, #12]
 8004508:	e001      	b.n	800450e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3720      	adds	r7, #32
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40021000 	.word	0x40021000
 800451c:	feeefffc 	.word	0xfeeefffc

08004520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e0e7      	b.n	8004704 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004534:	4b75      	ldr	r3, [pc, #468]	; (800470c <HAL_RCC_ClockConfig+0x1ec>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d910      	bls.n	8004564 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004542:	4b72      	ldr	r3, [pc, #456]	; (800470c <HAL_RCC_ClockConfig+0x1ec>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 0207 	bic.w	r2, r3, #7
 800454a:	4970      	ldr	r1, [pc, #448]	; (800470c <HAL_RCC_ClockConfig+0x1ec>)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	4313      	orrs	r3, r2
 8004550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	4b6e      	ldr	r3, [pc, #440]	; (800470c <HAL_RCC_ClockConfig+0x1ec>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0cf      	b.n	8004704 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d010      	beq.n	8004592 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	4b66      	ldr	r3, [pc, #408]	; (8004710 <HAL_RCC_ClockConfig+0x1f0>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800457c:	429a      	cmp	r2, r3
 800457e:	d908      	bls.n	8004592 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004580:	4b63      	ldr	r3, [pc, #396]	; (8004710 <HAL_RCC_ClockConfig+0x1f0>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4960      	ldr	r1, [pc, #384]	; (8004710 <HAL_RCC_ClockConfig+0x1f0>)
 800458e:	4313      	orrs	r3, r2
 8004590:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d04c      	beq.n	8004638 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d107      	bne.n	80045b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a6:	4b5a      	ldr	r3, [pc, #360]	; (8004710 <HAL_RCC_ClockConfig+0x1f0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d121      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e0a6      	b.n	8004704 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d107      	bne.n	80045ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045be:	4b54      	ldr	r3, [pc, #336]	; (8004710 <HAL_RCC_ClockConfig+0x1f0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d115      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e09a      	b.n	8004704 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d107      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045d6:	4b4e      	ldr	r3, [pc, #312]	; (8004710 <HAL_RCC_ClockConfig+0x1f0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d109      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e08e      	b.n	8004704 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045e6:	4b4a      	ldr	r3, [pc, #296]	; (8004710 <HAL_RCC_ClockConfig+0x1f0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e086      	b.n	8004704 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045f6:	4b46      	ldr	r3, [pc, #280]	; (8004710 <HAL_RCC_ClockConfig+0x1f0>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f023 0203 	bic.w	r2, r3, #3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	4943      	ldr	r1, [pc, #268]	; (8004710 <HAL_RCC_ClockConfig+0x1f0>)
 8004604:	4313      	orrs	r3, r2
 8004606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004608:	f7fd ff3a 	bl	8002480 <HAL_GetTick>
 800460c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800460e:	e00a      	b.n	8004626 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004610:	f7fd ff36 	bl	8002480 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	f241 3288 	movw	r2, #5000	; 0x1388
 800461e:	4293      	cmp	r3, r2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e06e      	b.n	8004704 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004626:	4b3a      	ldr	r3, [pc, #232]	; (8004710 <HAL_RCC_ClockConfig+0x1f0>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 020c 	and.w	r2, r3, #12
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	429a      	cmp	r2, r3
 8004636:	d1eb      	bne.n	8004610 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d010      	beq.n	8004666 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	4b31      	ldr	r3, [pc, #196]	; (8004710 <HAL_RCC_ClockConfig+0x1f0>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004650:	429a      	cmp	r2, r3
 8004652:	d208      	bcs.n	8004666 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004654:	4b2e      	ldr	r3, [pc, #184]	; (8004710 <HAL_RCC_ClockConfig+0x1f0>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	492b      	ldr	r1, [pc, #172]	; (8004710 <HAL_RCC_ClockConfig+0x1f0>)
 8004662:	4313      	orrs	r3, r2
 8004664:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004666:	4b29      	ldr	r3, [pc, #164]	; (800470c <HAL_RCC_ClockConfig+0x1ec>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d210      	bcs.n	8004696 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004674:	4b25      	ldr	r3, [pc, #148]	; (800470c <HAL_RCC_ClockConfig+0x1ec>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f023 0207 	bic.w	r2, r3, #7
 800467c:	4923      	ldr	r1, [pc, #140]	; (800470c <HAL_RCC_ClockConfig+0x1ec>)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	4313      	orrs	r3, r2
 8004682:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004684:	4b21      	ldr	r3, [pc, #132]	; (800470c <HAL_RCC_ClockConfig+0x1ec>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d001      	beq.n	8004696 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e036      	b.n	8004704 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d008      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046a2:	4b1b      	ldr	r3, [pc, #108]	; (8004710 <HAL_RCC_ClockConfig+0x1f0>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	4918      	ldr	r1, [pc, #96]	; (8004710 <HAL_RCC_ClockConfig+0x1f0>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d009      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046c0:	4b13      	ldr	r3, [pc, #76]	; (8004710 <HAL_RCC_ClockConfig+0x1f0>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	4910      	ldr	r1, [pc, #64]	; (8004710 <HAL_RCC_ClockConfig+0x1f0>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046d4:	f000 f824 	bl	8004720 <HAL_RCC_GetSysClockFreq>
 80046d8:	4602      	mov	r2, r0
 80046da:	4b0d      	ldr	r3, [pc, #52]	; (8004710 <HAL_RCC_ClockConfig+0x1f0>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	091b      	lsrs	r3, r3, #4
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	490b      	ldr	r1, [pc, #44]	; (8004714 <HAL_RCC_ClockConfig+0x1f4>)
 80046e6:	5ccb      	ldrb	r3, [r1, r3]
 80046e8:	f003 031f 	and.w	r3, r3, #31
 80046ec:	fa22 f303 	lsr.w	r3, r2, r3
 80046f0:	4a09      	ldr	r2, [pc, #36]	; (8004718 <HAL_RCC_ClockConfig+0x1f8>)
 80046f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046f4:	4b09      	ldr	r3, [pc, #36]	; (800471c <HAL_RCC_ClockConfig+0x1fc>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fd fe71 	bl	80023e0 <HAL_InitTick>
 80046fe:	4603      	mov	r3, r0
 8004700:	72fb      	strb	r3, [r7, #11]

  return status;
 8004702:	7afb      	ldrb	r3, [r7, #11]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40022000 	.word	0x40022000
 8004710:	40021000 	.word	0x40021000
 8004714:	080071d4 	.word	0x080071d4
 8004718:	20000000 	.word	0x20000000
 800471c:	20000004 	.word	0x20000004

08004720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004720:	b480      	push	{r7}
 8004722:	b089      	sub	sp, #36	; 0x24
 8004724:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	61fb      	str	r3, [r7, #28]
 800472a:	2300      	movs	r3, #0
 800472c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800472e:	4b3e      	ldr	r3, [pc, #248]	; (8004828 <HAL_RCC_GetSysClockFreq+0x108>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 030c 	and.w	r3, r3, #12
 8004736:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004738:	4b3b      	ldr	r3, [pc, #236]	; (8004828 <HAL_RCC_GetSysClockFreq+0x108>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <HAL_RCC_GetSysClockFreq+0x34>
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	2b0c      	cmp	r3, #12
 800474c:	d121      	bne.n	8004792 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d11e      	bne.n	8004792 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004754:	4b34      	ldr	r3, [pc, #208]	; (8004828 <HAL_RCC_GetSysClockFreq+0x108>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b00      	cmp	r3, #0
 800475e:	d107      	bne.n	8004770 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004760:	4b31      	ldr	r3, [pc, #196]	; (8004828 <HAL_RCC_GetSysClockFreq+0x108>)
 8004762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004766:	0a1b      	lsrs	r3, r3, #8
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	61fb      	str	r3, [r7, #28]
 800476e:	e005      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004770:	4b2d      	ldr	r3, [pc, #180]	; (8004828 <HAL_RCC_GetSysClockFreq+0x108>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800477c:	4a2b      	ldr	r2, [pc, #172]	; (800482c <HAL_RCC_GetSysClockFreq+0x10c>)
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004784:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10d      	bne.n	80047a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004790:	e00a      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	2b04      	cmp	r3, #4
 8004796:	d102      	bne.n	800479e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004798:	4b25      	ldr	r3, [pc, #148]	; (8004830 <HAL_RCC_GetSysClockFreq+0x110>)
 800479a:	61bb      	str	r3, [r7, #24]
 800479c:	e004      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d101      	bne.n	80047a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047a4:	4b23      	ldr	r3, [pc, #140]	; (8004834 <HAL_RCC_GetSysClockFreq+0x114>)
 80047a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	2b0c      	cmp	r3, #12
 80047ac:	d134      	bne.n	8004818 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047ae:	4b1e      	ldr	r3, [pc, #120]	; (8004828 <HAL_RCC_GetSysClockFreq+0x108>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d003      	beq.n	80047c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d003      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0xac>
 80047c4:	e005      	b.n	80047d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047c6:	4b1a      	ldr	r3, [pc, #104]	; (8004830 <HAL_RCC_GetSysClockFreq+0x110>)
 80047c8:	617b      	str	r3, [r7, #20]
      break;
 80047ca:	e005      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047cc:	4b19      	ldr	r3, [pc, #100]	; (8004834 <HAL_RCC_GetSysClockFreq+0x114>)
 80047ce:	617b      	str	r3, [r7, #20]
      break;
 80047d0:	e002      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	617b      	str	r3, [r7, #20]
      break;
 80047d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047d8:	4b13      	ldr	r3, [pc, #76]	; (8004828 <HAL_RCC_GetSysClockFreq+0x108>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	3301      	adds	r3, #1
 80047e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047e6:	4b10      	ldr	r3, [pc, #64]	; (8004828 <HAL_RCC_GetSysClockFreq+0x108>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	0a1b      	lsrs	r3, r3, #8
 80047ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	fb03 f202 	mul.w	r2, r3, r2
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047fe:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <HAL_RCC_GetSysClockFreq+0x108>)
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	0e5b      	lsrs	r3, r3, #25
 8004804:	f003 0303 	and.w	r3, r3, #3
 8004808:	3301      	adds	r3, #1
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	fbb2 f3f3 	udiv	r3, r2, r3
 8004816:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004818:	69bb      	ldr	r3, [r7, #24]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3724      	adds	r7, #36	; 0x24
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40021000 	.word	0x40021000
 800482c:	080071e4 	.word	0x080071e4
 8004830:	00f42400 	.word	0x00f42400
 8004834:	016e3600 	.word	0x016e3600

08004838 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004840:	2300      	movs	r3, #0
 8004842:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004844:	4b2a      	ldr	r3, [pc, #168]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004850:	f7ff f9ee 	bl	8003c30 <HAL_PWREx_GetVoltageRange>
 8004854:	6178      	str	r0, [r7, #20]
 8004856:	e014      	b.n	8004882 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004858:	4b25      	ldr	r3, [pc, #148]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800485a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485c:	4a24      	ldr	r2, [pc, #144]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800485e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004862:	6593      	str	r3, [r2, #88]	; 0x58
 8004864:	4b22      	ldr	r3, [pc, #136]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004870:	f7ff f9de 	bl	8003c30 <HAL_PWREx_GetVoltageRange>
 8004874:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004876:	4b1e      	ldr	r3, [pc, #120]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487a:	4a1d      	ldr	r2, [pc, #116]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800487c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004880:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004888:	d10b      	bne.n	80048a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b80      	cmp	r3, #128	; 0x80
 800488e:	d919      	bls.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2ba0      	cmp	r3, #160	; 0xa0
 8004894:	d902      	bls.n	800489c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004896:	2302      	movs	r3, #2
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	e013      	b.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800489c:	2301      	movs	r3, #1
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	e010      	b.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b80      	cmp	r3, #128	; 0x80
 80048a6:	d902      	bls.n	80048ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80048a8:	2303      	movs	r3, #3
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	e00a      	b.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b80      	cmp	r3, #128	; 0x80
 80048b2:	d102      	bne.n	80048ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048b4:	2302      	movs	r3, #2
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	e004      	b.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b70      	cmp	r3, #112	; 0x70
 80048be:	d101      	bne.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048c0:	2301      	movs	r3, #1
 80048c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048c4:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f023 0207 	bic.w	r2, r3, #7
 80048cc:	4909      	ldr	r1, [pc, #36]	; (80048f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048d4:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d001      	beq.n	80048e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40021000 	.word	0x40021000
 80048f4:	40022000 	.word	0x40022000

080048f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004900:	2300      	movs	r3, #0
 8004902:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004904:	2300      	movs	r3, #0
 8004906:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004910:	2b00      	cmp	r3, #0
 8004912:	d031      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004918:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800491c:	d01a      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800491e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004922:	d814      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004924:	2b00      	cmp	r3, #0
 8004926:	d009      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004928:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800492c:	d10f      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800492e:	4b5d      	ldr	r3, [pc, #372]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	4a5c      	ldr	r2, [pc, #368]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004938:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800493a:	e00c      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3304      	adds	r3, #4
 8004940:	2100      	movs	r1, #0
 8004942:	4618      	mov	r0, r3
 8004944:	f000 f9ce 	bl	8004ce4 <RCCEx_PLLSAI1_Config>
 8004948:	4603      	mov	r3, r0
 800494a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800494c:	e003      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	74fb      	strb	r3, [r7, #19]
      break;
 8004952:	e000      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004956:	7cfb      	ldrb	r3, [r7, #19]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10b      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800495c:	4b51      	ldr	r3, [pc, #324]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004962:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	494e      	ldr	r1, [pc, #312]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004972:	e001      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004974:	7cfb      	ldrb	r3, [r7, #19]
 8004976:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 809e 	beq.w	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004986:	2300      	movs	r3, #0
 8004988:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800498a:	4b46      	ldr	r3, [pc, #280]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800498c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800499a:	2300      	movs	r3, #0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00d      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049a0:	4b40      	ldr	r3, [pc, #256]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a4:	4a3f      	ldr	r2, [pc, #252]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049aa:	6593      	str	r3, [r2, #88]	; 0x58
 80049ac:	4b3d      	ldr	r3, [pc, #244]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b4:	60bb      	str	r3, [r7, #8]
 80049b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049b8:	2301      	movs	r3, #1
 80049ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049bc:	4b3a      	ldr	r3, [pc, #232]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a39      	ldr	r2, [pc, #228]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80049c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049c8:	f7fd fd5a 	bl	8002480 <HAL_GetTick>
 80049cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049ce:	e009      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d0:	f7fd fd56 	bl	8002480 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d902      	bls.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	74fb      	strb	r3, [r7, #19]
        break;
 80049e2:	e005      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049e4:	4b30      	ldr	r3, [pc, #192]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0ef      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80049f0:	7cfb      	ldrb	r3, [r7, #19]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d15a      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049f6:	4b2b      	ldr	r3, [pc, #172]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01e      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d019      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a12:	4b24      	ldr	r3, [pc, #144]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a1c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a1e:	4b21      	ldr	r3, [pc, #132]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a24:	4a1f      	ldr	r2, [pc, #124]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a2e:	4b1d      	ldr	r3, [pc, #116]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a34:	4a1b      	ldr	r2, [pc, #108]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a3e:	4a19      	ldr	r2, [pc, #100]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d016      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a50:	f7fd fd16 	bl	8002480 <HAL_GetTick>
 8004a54:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a56:	e00b      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a58:	f7fd fd12 	bl	8002480 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d902      	bls.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	74fb      	strb	r3, [r7, #19]
            break;
 8004a6e:	e006      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a70:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0ec      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004a7e:	7cfb      	ldrb	r3, [r7, #19]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10b      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a84:	4b07      	ldr	r3, [pc, #28]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a92:	4904      	ldr	r1, [pc, #16]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a9a:	e009      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a9c:	7cfb      	ldrb	r3, [r7, #19]
 8004a9e:	74bb      	strb	r3, [r7, #18]
 8004aa0:	e006      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004aa2:	bf00      	nop
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aac:	7cfb      	ldrb	r3, [r7, #19]
 8004aae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ab0:	7c7b      	ldrb	r3, [r7, #17]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d105      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab6:	4b8a      	ldr	r3, [pc, #552]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aba:	4a89      	ldr	r2, [pc, #548]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ace:	4b84      	ldr	r3, [pc, #528]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad4:	f023 0203 	bic.w	r2, r3, #3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	4980      	ldr	r1, [pc, #512]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00a      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004af0:	4b7b      	ldr	r3, [pc, #492]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af6:	f023 020c 	bic.w	r2, r3, #12
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	4978      	ldr	r1, [pc, #480]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0320 	and.w	r3, r3, #32
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b12:	4b73      	ldr	r3, [pc, #460]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b20:	496f      	ldr	r1, [pc, #444]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b34:	4b6a      	ldr	r3, [pc, #424]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b42:	4967      	ldr	r1, [pc, #412]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b56:	4b62      	ldr	r3, [pc, #392]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	495e      	ldr	r1, [pc, #376]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b78:	4b59      	ldr	r3, [pc, #356]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	4956      	ldr	r1, [pc, #344]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b9a:	4b51      	ldr	r3, [pc, #324]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	494d      	ldr	r1, [pc, #308]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d028      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bbc:	4b48      	ldr	r3, [pc, #288]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	4945      	ldr	r1, [pc, #276]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bda:	d106      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bdc:	4b40      	ldr	r3, [pc, #256]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	4a3f      	ldr	r2, [pc, #252]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004be6:	60d3      	str	r3, [r2, #12]
 8004be8:	e011      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bf2:	d10c      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 f872 	bl	8004ce4 <RCCEx_PLLSAI1_Config>
 8004c00:	4603      	mov	r3, r0
 8004c02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c04:	7cfb      	ldrb	r3, [r7, #19]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004c0a:	7cfb      	ldrb	r3, [r7, #19]
 8004c0c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d028      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c1a:	4b31      	ldr	r3, [pc, #196]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c28:	492d      	ldr	r1, [pc, #180]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c38:	d106      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c3a:	4b29      	ldr	r3, [pc, #164]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	4a28      	ldr	r2, [pc, #160]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c44:	60d3      	str	r3, [r2, #12]
 8004c46:	e011      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c50:	d10c      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3304      	adds	r3, #4
 8004c56:	2101      	movs	r1, #1
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 f843 	bl	8004ce4 <RCCEx_PLLSAI1_Config>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c62:	7cfb      	ldrb	r3, [r7, #19]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004c68:	7cfb      	ldrb	r3, [r7, #19]
 8004c6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01c      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c78:	4b19      	ldr	r3, [pc, #100]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c86:	4916      	ldr	r1, [pc, #88]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c96:	d10c      	bne.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	2102      	movs	r1, #2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 f820 	bl	8004ce4 <RCCEx_PLLSAI1_Config>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ca8:	7cfb      	ldrb	r3, [r7, #19]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004cae:	7cfb      	ldrb	r3, [r7, #19]
 8004cb0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cbe:	4b08      	ldr	r3, [pc, #32]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ccc:	4904      	ldr	r1, [pc, #16]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004cd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	40021000 	.word	0x40021000

08004ce4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cf2:	4b74      	ldr	r3, [pc, #464]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d018      	beq.n	8004d30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cfe:	4b71      	ldr	r3, [pc, #452]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f003 0203 	and.w	r2, r3, #3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d10d      	bne.n	8004d2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
       ||
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d009      	beq.n	8004d2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d16:	4b6b      	ldr	r3, [pc, #428]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	091b      	lsrs	r3, r3, #4
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
       ||
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d047      	beq.n	8004dba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	73fb      	strb	r3, [r7, #15]
 8004d2e:	e044      	b.n	8004dba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b03      	cmp	r3, #3
 8004d36:	d018      	beq.n	8004d6a <RCCEx_PLLSAI1_Config+0x86>
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d825      	bhi.n	8004d88 <RCCEx_PLLSAI1_Config+0xa4>
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d002      	beq.n	8004d46 <RCCEx_PLLSAI1_Config+0x62>
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d009      	beq.n	8004d58 <RCCEx_PLLSAI1_Config+0x74>
 8004d44:	e020      	b.n	8004d88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d46:	4b5f      	ldr	r3, [pc, #380]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d11d      	bne.n	8004d8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d56:	e01a      	b.n	8004d8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d58:	4b5a      	ldr	r3, [pc, #360]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d116      	bne.n	8004d92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d68:	e013      	b.n	8004d92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d6a:	4b56      	ldr	r3, [pc, #344]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10f      	bne.n	8004d96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d76:	4b53      	ldr	r3, [pc, #332]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d109      	bne.n	8004d96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d86:	e006      	b.n	8004d96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d8c:	e004      	b.n	8004d98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d8e:	bf00      	nop
 8004d90:	e002      	b.n	8004d98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d92:	bf00      	nop
 8004d94:	e000      	b.n	8004d98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d96:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10d      	bne.n	8004dba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d9e:	4b49      	ldr	r3, [pc, #292]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6819      	ldr	r1, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	430b      	orrs	r3, r1
 8004db4:	4943      	ldr	r1, [pc, #268]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d17c      	bne.n	8004eba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004dc0:	4b40      	ldr	r3, [pc, #256]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a3f      	ldr	r2, [pc, #252]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dcc:	f7fd fb58 	bl	8002480 <HAL_GetTick>
 8004dd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dd2:	e009      	b.n	8004de8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dd4:	f7fd fb54 	bl	8002480 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d902      	bls.n	8004de8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	73fb      	strb	r3, [r7, #15]
        break;
 8004de6:	e005      	b.n	8004df4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004de8:	4b36      	ldr	r3, [pc, #216]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1ef      	bne.n	8004dd4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d15f      	bne.n	8004eba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d110      	bne.n	8004e22 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e00:	4b30      	ldr	r3, [pc, #192]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004e08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6892      	ldr	r2, [r2, #8]
 8004e10:	0211      	lsls	r1, r2, #8
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	68d2      	ldr	r2, [r2, #12]
 8004e16:	06d2      	lsls	r2, r2, #27
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	492a      	ldr	r1, [pc, #168]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	610b      	str	r3, [r1, #16]
 8004e20:	e027      	b.n	8004e72 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d112      	bne.n	8004e4e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e28:	4b26      	ldr	r3, [pc, #152]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6892      	ldr	r2, [r2, #8]
 8004e38:	0211      	lsls	r1, r2, #8
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6912      	ldr	r2, [r2, #16]
 8004e3e:	0852      	lsrs	r2, r2, #1
 8004e40:	3a01      	subs	r2, #1
 8004e42:	0552      	lsls	r2, r2, #21
 8004e44:	430a      	orrs	r2, r1
 8004e46:	491f      	ldr	r1, [pc, #124]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	610b      	str	r3, [r1, #16]
 8004e4c:	e011      	b.n	8004e72 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e4e:	4b1d      	ldr	r3, [pc, #116]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6892      	ldr	r2, [r2, #8]
 8004e5e:	0211      	lsls	r1, r2, #8
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6952      	ldr	r2, [r2, #20]
 8004e64:	0852      	lsrs	r2, r2, #1
 8004e66:	3a01      	subs	r2, #1
 8004e68:	0652      	lsls	r2, r2, #25
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	4915      	ldr	r1, [pc, #84]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e72:	4b14      	ldr	r3, [pc, #80]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a13      	ldr	r2, [pc, #76]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e7c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7e:	f7fd faff 	bl	8002480 <HAL_GetTick>
 8004e82:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e84:	e009      	b.n	8004e9a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e86:	f7fd fafb 	bl	8002480 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d902      	bls.n	8004e9a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	73fb      	strb	r3, [r7, #15]
          break;
 8004e98:	e005      	b.n	8004ea6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0ef      	beq.n	8004e86 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d106      	bne.n	8004eba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	4903      	ldr	r1, [pc, #12]	; (8004ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40021000 	.word	0x40021000

08004ec8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e095      	b.n	8005006 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d108      	bne.n	8004ef4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eea:	d009      	beq.n	8004f00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	61da      	str	r2, [r3, #28]
 8004ef2:	e005      	b.n	8004f00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fc fe68 	bl	8001bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f40:	d902      	bls.n	8004f48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	e002      	b.n	8004f4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f56:	d007      	beq.n	8004f68 <HAL_SPI_Init+0xa0>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f60:	d002      	beq.n	8004f68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004faa:	ea42 0103 	orr.w	r1, r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	0c1b      	lsrs	r3, r3, #16
 8004fc4:	f003 0204 	and.w	r2, r3, #4
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004fe4:	ea42 0103 	orr.w	r1, r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b088      	sub	sp, #32
 8005012:	af00      	add	r7, sp, #0
 8005014:	60f8      	str	r0, [r7, #12]
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	603b      	str	r3, [r7, #0]
 800501a:	4613      	mov	r3, r2
 800501c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_SPI_Transmit+0x22>
 800502c:	2302      	movs	r3, #2
 800502e:	e158      	b.n	80052e2 <HAL_SPI_Transmit+0x2d4>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005038:	f7fd fa22 	bl	8002480 <HAL_GetTick>
 800503c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800503e:	88fb      	ldrh	r3, [r7, #6]
 8005040:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b01      	cmp	r3, #1
 800504c:	d002      	beq.n	8005054 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800504e:	2302      	movs	r3, #2
 8005050:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005052:	e13d      	b.n	80052d0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_SPI_Transmit+0x52>
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d102      	bne.n	8005066 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005064:	e134      	b.n	80052d0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2203      	movs	r2, #3
 800506a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	88fa      	ldrh	r2, [r7, #6]
 800507e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	88fa      	ldrh	r2, [r7, #6]
 8005084:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b0:	d10f      	bne.n	80050d2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050dc:	2b40      	cmp	r3, #64	; 0x40
 80050de:	d007      	beq.n	80050f0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050f8:	d94b      	bls.n	8005192 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <HAL_SPI_Transmit+0xfa>
 8005102:	8afb      	ldrh	r3, [r7, #22]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d13e      	bne.n	8005186 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	881a      	ldrh	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005118:	1c9a      	adds	r2, r3, #2
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800512c:	e02b      	b.n	8005186 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b02      	cmp	r3, #2
 800513a:	d112      	bne.n	8005162 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005140:	881a      	ldrh	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	1c9a      	adds	r2, r3, #2
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005156:	b29b      	uxth	r3, r3
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005160:	e011      	b.n	8005186 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005162:	f7fd f98d 	bl	8002480 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d803      	bhi.n	800517a <HAL_SPI_Transmit+0x16c>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005178:	d102      	bne.n	8005180 <HAL_SPI_Transmit+0x172>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d102      	bne.n	8005186 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005184:	e0a4      	b.n	80052d0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800518a:	b29b      	uxth	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1ce      	bne.n	800512e <HAL_SPI_Transmit+0x120>
 8005190:	e07c      	b.n	800528c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <HAL_SPI_Transmit+0x192>
 800519a:	8afb      	ldrh	r3, [r7, #22]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d170      	bne.n	8005282 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d912      	bls.n	80051d0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	881a      	ldrh	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	1c9a      	adds	r2, r3, #2
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b02      	subs	r3, #2
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051ce:	e058      	b.n	8005282 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	330c      	adds	r3, #12
 80051da:	7812      	ldrb	r2, [r2, #0]
 80051dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80051f6:	e044      	b.n	8005282 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b02      	cmp	r3, #2
 8005204:	d12b      	bne.n	800525e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	d912      	bls.n	8005236 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	881a      	ldrh	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	1c9a      	adds	r2, r3, #2
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b02      	subs	r3, #2
 800522e:	b29a      	uxth	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005234:	e025      	b.n	8005282 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	330c      	adds	r3, #12
 8005240:	7812      	ldrb	r2, [r2, #0]
 8005242:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005252:	b29b      	uxth	r3, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800525c:	e011      	b.n	8005282 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800525e:	f7fd f90f 	bl	8002480 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d803      	bhi.n	8005276 <HAL_SPI_Transmit+0x268>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005274:	d102      	bne.n	800527c <HAL_SPI_Transmit+0x26e>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d102      	bne.n	8005282 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005280:	e026      	b.n	80052d0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005286:	b29b      	uxth	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1b5      	bne.n	80051f8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	6839      	ldr	r1, [r7, #0]
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 fe77 	bl	8005f84 <SPI_EndRxTxTransaction>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10a      	bne.n	80052c0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052aa:	2300      	movs	r3, #0
 80052ac:	613b      	str	r3, [r7, #16]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	613b      	str	r3, [r7, #16]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	613b      	str	r3, [r7, #16]
 80052be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	77fb      	strb	r3, [r7, #31]
 80052cc:	e000      	b.n	80052d0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80052ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3720      	adds	r7, #32
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b088      	sub	sp, #32
 80052ee:	af02      	add	r7, sp, #8
 80052f0:	60f8      	str	r0, [r7, #12]
 80052f2:	60b9      	str	r1, [r7, #8]
 80052f4:	603b      	str	r3, [r7, #0]
 80052f6:	4613      	mov	r3, r2
 80052f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005306:	d112      	bne.n	800532e <HAL_SPI_Receive+0x44>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10e      	bne.n	800532e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2204      	movs	r2, #4
 8005314:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005318:	88fa      	ldrh	r2, [r7, #6]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	4613      	mov	r3, r2
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f910 	bl	800554a <HAL_SPI_TransmitReceive>
 800532a:	4603      	mov	r3, r0
 800532c:	e109      	b.n	8005542 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_SPI_Receive+0x52>
 8005338:	2302      	movs	r3, #2
 800533a:	e102      	b.n	8005542 <HAL_SPI_Receive+0x258>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005344:	f7fd f89c 	bl	8002480 <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b01      	cmp	r3, #1
 8005354:	d002      	beq.n	800535c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005356:	2302      	movs	r3, #2
 8005358:	75fb      	strb	r3, [r7, #23]
    goto error;
 800535a:	e0e9      	b.n	8005530 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <HAL_SPI_Receive+0x7e>
 8005362:	88fb      	ldrh	r3, [r7, #6]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d102      	bne.n	800536e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800536c:	e0e0      	b.n	8005530 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2204      	movs	r2, #4
 8005372:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	88fa      	ldrh	r2, [r7, #6]
 8005386:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	88fa      	ldrh	r2, [r7, #6]
 800538e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053b8:	d908      	bls.n	80053cc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053c8:	605a      	str	r2, [r3, #4]
 80053ca:	e007      	b.n	80053dc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053da:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e4:	d10f      	bne.n	8005406 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005404:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005410:	2b40      	cmp	r3, #64	; 0x40
 8005412:	d007      	beq.n	8005424 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005422:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800542c:	d867      	bhi.n	80054fe <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800542e:	e030      	b.n	8005492 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b01      	cmp	r3, #1
 800543c:	d117      	bne.n	800546e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f103 020c 	add.w	r2, r3, #12
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	7812      	ldrb	r2, [r2, #0]
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005460:	b29b      	uxth	r3, r3
 8005462:	3b01      	subs	r3, #1
 8005464:	b29a      	uxth	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800546c:	e011      	b.n	8005492 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800546e:	f7fd f807 	bl	8002480 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d803      	bhi.n	8005486 <HAL_SPI_Receive+0x19c>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005484:	d102      	bne.n	800548c <HAL_SPI_Receive+0x1a2>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005490:	e04e      	b.n	8005530 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005498:	b29b      	uxth	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1c8      	bne.n	8005430 <HAL_SPI_Receive+0x146>
 800549e:	e034      	b.n	800550a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d115      	bne.n	80054da <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	b292      	uxth	r2, r2
 80054ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	1c9a      	adds	r2, r3, #2
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80054d8:	e011      	b.n	80054fe <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054da:	f7fc ffd1 	bl	8002480 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d803      	bhi.n	80054f2 <HAL_SPI_Receive+0x208>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054f0:	d102      	bne.n	80054f8 <HAL_SPI_Receive+0x20e>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d102      	bne.n	80054fe <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80054fc:	e018      	b.n	8005530 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005504:	b29b      	uxth	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1ca      	bne.n	80054a0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	6839      	ldr	r1, [r7, #0]
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 fce0 	bl	8005ed4 <SPI_EndRxTransaction>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2220      	movs	r2, #32
 800551e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	75fb      	strb	r3, [r7, #23]
 800552c:	e000      	b.n	8005530 <HAL_SPI_Receive+0x246>
  }

error :
 800552e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005540:	7dfb      	ldrb	r3, [r7, #23]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b08a      	sub	sp, #40	; 0x28
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
 8005556:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005558:	2301      	movs	r3, #1
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_SPI_TransmitReceive+0x26>
 800556c:	2302      	movs	r3, #2
 800556e:	e1fb      	b.n	8005968 <HAL_SPI_TransmitReceive+0x41e>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005578:	f7fc ff82 	bl	8002480 <HAL_GetTick>
 800557c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005584:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800558c:	887b      	ldrh	r3, [r7, #2]
 800558e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005590:	887b      	ldrh	r3, [r7, #2]
 8005592:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005594:	7efb      	ldrb	r3, [r7, #27]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d00e      	beq.n	80055b8 <HAL_SPI_TransmitReceive+0x6e>
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055a0:	d106      	bne.n	80055b0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d102      	bne.n	80055b0 <HAL_SPI_TransmitReceive+0x66>
 80055aa:	7efb      	ldrb	r3, [r7, #27]
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d003      	beq.n	80055b8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80055b0:	2302      	movs	r3, #2
 80055b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80055b6:	e1cd      	b.n	8005954 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <HAL_SPI_TransmitReceive+0x80>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <HAL_SPI_TransmitReceive+0x80>
 80055c4:	887b      	ldrh	r3, [r7, #2]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d103      	bne.n	80055d2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80055d0:	e1c0      	b.n	8005954 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d003      	beq.n	80055e6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2205      	movs	r2, #5
 80055e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	887a      	ldrh	r2, [r7, #2]
 80055f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	887a      	ldrh	r2, [r7, #2]
 80055fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	887a      	ldrh	r2, [r7, #2]
 800560c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	887a      	ldrh	r2, [r7, #2]
 8005612:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005628:	d802      	bhi.n	8005630 <HAL_SPI_TransmitReceive+0xe6>
 800562a:	8a3b      	ldrh	r3, [r7, #16]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d908      	bls.n	8005642 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800563e:	605a      	str	r2, [r3, #4]
 8005640:	e007      	b.n	8005652 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005650:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565c:	2b40      	cmp	r3, #64	; 0x40
 800565e:	d007      	beq.n	8005670 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800566e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005678:	d97c      	bls.n	8005774 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <HAL_SPI_TransmitReceive+0x13e>
 8005682:	8a7b      	ldrh	r3, [r7, #18]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d169      	bne.n	800575c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568c:	881a      	ldrh	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005698:	1c9a      	adds	r2, r3, #2
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056ac:	e056      	b.n	800575c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d11b      	bne.n	80056f4 <HAL_SPI_TransmitReceive+0x1aa>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d016      	beq.n	80056f4 <HAL_SPI_TransmitReceive+0x1aa>
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d113      	bne.n	80056f4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	881a      	ldrh	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	1c9a      	adds	r2, r3, #2
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d11c      	bne.n	800573c <HAL_SPI_TransmitReceive+0x1f2>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005708:	b29b      	uxth	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d016      	beq.n	800573c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68da      	ldr	r2, [r3, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	b292      	uxth	r2, r2
 800571a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005720:	1c9a      	adds	r2, r3, #2
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005738:	2301      	movs	r3, #1
 800573a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800573c:	f7fc fea0 	bl	8002480 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005748:	429a      	cmp	r2, r3
 800574a:	d807      	bhi.n	800575c <HAL_SPI_TransmitReceive+0x212>
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005752:	d003      	beq.n	800575c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800575a:	e0fb      	b.n	8005954 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1a3      	bne.n	80056ae <HAL_SPI_TransmitReceive+0x164>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d19d      	bne.n	80056ae <HAL_SPI_TransmitReceive+0x164>
 8005772:	e0df      	b.n	8005934 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <HAL_SPI_TransmitReceive+0x23a>
 800577c:	8a7b      	ldrh	r3, [r7, #18]
 800577e:	2b01      	cmp	r3, #1
 8005780:	f040 80cb 	bne.w	800591a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005788:	b29b      	uxth	r3, r3
 800578a:	2b01      	cmp	r3, #1
 800578c:	d912      	bls.n	80057b4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	881a      	ldrh	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579e:	1c9a      	adds	r2, r3, #2
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b02      	subs	r3, #2
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057b2:	e0b2      	b.n	800591a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	330c      	adds	r3, #12
 80057be:	7812      	ldrb	r2, [r2, #0]
 80057c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057da:	e09e      	b.n	800591a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d134      	bne.n	8005854 <HAL_SPI_TransmitReceive+0x30a>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d02f      	beq.n	8005854 <HAL_SPI_TransmitReceive+0x30a>
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d12c      	bne.n	8005854 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057fe:	b29b      	uxth	r3, r3
 8005800:	2b01      	cmp	r3, #1
 8005802:	d912      	bls.n	800582a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	881a      	ldrh	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	1c9a      	adds	r2, r3, #2
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800581e:	b29b      	uxth	r3, r3
 8005820:	3b02      	subs	r3, #2
 8005822:	b29a      	uxth	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005828:	e012      	b.n	8005850 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	330c      	adds	r3, #12
 8005834:	7812      	ldrb	r2, [r2, #0]
 8005836:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005846:	b29b      	uxth	r3, r3
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b01      	cmp	r3, #1
 8005860:	d148      	bne.n	80058f4 <HAL_SPI_TransmitReceive+0x3aa>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005868:	b29b      	uxth	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d042      	beq.n	80058f4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b01      	cmp	r3, #1
 8005878:	d923      	bls.n	80058c2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005884:	b292      	uxth	r2, r2
 8005886:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588c:	1c9a      	adds	r2, r3, #2
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005898:	b29b      	uxth	r3, r3
 800589a:	3b02      	subs	r3, #2
 800589c:	b29a      	uxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d81f      	bhi.n	80058f0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058be:	605a      	str	r2, [r3, #4]
 80058c0:	e016      	b.n	80058f0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f103 020c 	add.w	r2, r3, #12
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	7812      	ldrb	r2, [r2, #0]
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058f0:	2301      	movs	r3, #1
 80058f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80058f4:	f7fc fdc4 	bl	8002480 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005900:	429a      	cmp	r2, r3
 8005902:	d803      	bhi.n	800590c <HAL_SPI_TransmitReceive+0x3c2>
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800590a:	d102      	bne.n	8005912 <HAL_SPI_TransmitReceive+0x3c8>
 800590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005918:	e01c      	b.n	8005954 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800591e:	b29b      	uxth	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	f47f af5b 	bne.w	80057dc <HAL_SPI_TransmitReceive+0x292>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800592c:	b29b      	uxth	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	f47f af54 	bne.w	80057dc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005934:	69fa      	ldr	r2, [r7, #28]
 8005936:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fb23 	bl	8005f84 <SPI_EndRxTxTransaction>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d006      	beq.n	8005952 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2220      	movs	r2, #32
 800594e:	661a      	str	r2, [r3, #96]	; 0x60
 8005950:	e000      	b.n	8005954 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005952:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005964:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005968:	4618      	mov	r0, r3
 800596a:	3728      	adds	r7, #40	; 0x28
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	4613      	mov	r3, r2
 800597c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_SPI_Transmit_DMA+0x20>
 800598c:	2302      	movs	r3, #2
 800598e:	e0d8      	b.n	8005b42 <HAL_SPI_Transmit_DMA+0x1d2>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d002      	beq.n	80059aa <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80059a4:	2302      	movs	r3, #2
 80059a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059a8:	e0c6      	b.n	8005b38 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <HAL_SPI_Transmit_DMA+0x46>
 80059b0:	88fb      	ldrh	r3, [r7, #6]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d102      	bne.n	80059bc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059ba:	e0bd      	b.n	8005b38 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2203      	movs	r2, #3
 80059c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	88fa      	ldrh	r2, [r7, #6]
 80059d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	88fa      	ldrh	r2, [r7, #6]
 80059da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a06:	d10f      	bne.n	8005a28 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a26:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2c:	4a47      	ldr	r2, [pc, #284]	; (8005b4c <HAL_SPI_Transmit_DMA+0x1dc>)
 8005a2e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a34:	4a46      	ldr	r2, [pc, #280]	; (8005b50 <HAL_SPI_Transmit_DMA+0x1e0>)
 8005a36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3c:	4a45      	ldr	r2, [pc, #276]	; (8005b54 <HAL_SPI_Transmit_DMA+0x1e4>)
 8005a3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a44:	2200      	movs	r2, #0
 8005a46:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a56:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a60:	d82d      	bhi.n	8005abe <HAL_SPI_Transmit_DMA+0x14e>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a6c:	d127      	bne.n	8005abe <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10f      	bne.n	8005a9c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a8a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	085b      	lsrs	r3, r3, #1
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a9a:	e010      	b.n	8005abe <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aaa:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	085b      	lsrs	r3, r3, #1
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	330c      	adds	r3, #12
 8005ace:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005ad6:	f7fc fecd 	bl	8002874 <HAL_DMA_Start_IT>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00c      	beq.n	8005afa <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ae4:	f043 0210 	orr.w	r2, r3, #16
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005af8:	e01e      	b.n	8005b38 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b04:	2b40      	cmp	r3, #64	; 0x40
 8005b06:	d007      	beq.n	8005b18 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b16:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0220 	orr.w	r2, r2, #32
 8005b26:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 0202 	orr.w	r2, r2, #2
 8005b36:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	08005c3b 	.word	0x08005c3b
 8005b50:	08005b95 	.word	0x08005b95
 8005b54:	08005c57 	.word	0x08005c57

08005b58 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ba2:	f7fc fc6d 	bl	8002480 <HAL_GetTick>
 8005ba6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	d03b      	beq.n	8005c2e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0220 	bic.w	r2, r2, #32
 8005bc4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0202 	bic.w	r2, r2, #2
 8005bd4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	2164      	movs	r1, #100	; 0x64
 8005bda:	6978      	ldr	r0, [r7, #20]
 8005bdc:	f000 f9d2 	bl	8005f84 <SPI_EndRxTxTransaction>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d005      	beq.n	8005bf2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bea:	f043 0220 	orr.w	r2, r3, #32
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10a      	bne.n	8005c10 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2200      	movs	r2, #0
 8005c14:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005c26:	6978      	ldr	r0, [r7, #20]
 8005c28:	f7ff ffaa 	bl	8005b80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005c2c:	e002      	b.n	8005c34 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005c2e:	6978      	ldr	r0, [r7, #20]
 8005c30:	f7ff ff92 	bl	8005b58 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f7ff ff8f 	bl	8005b6c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c4e:	bf00      	nop
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b084      	sub	sp, #16
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0203 	bic.w	r2, r2, #3
 8005c72:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c78:	f043 0210 	orr.w	r2, r3, #16
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7ff ff79 	bl	8005b80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c8e:	bf00      	nop
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ca8:	f7fc fbea 	bl	8002480 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	1a9b      	subs	r3, r3, r2
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005cb8:	f7fc fbe2 	bl	8002480 <HAL_GetTick>
 8005cbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cbe:	4b39      	ldr	r3, [pc, #228]	; (8005da4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	015b      	lsls	r3, r3, #5
 8005cc4:	0d1b      	lsrs	r3, r3, #20
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	fb02 f303 	mul.w	r3, r2, r3
 8005ccc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cce:	e054      	b.n	8005d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cd6:	d050      	beq.n	8005d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cd8:	f7fc fbd2 	bl	8002480 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d902      	bls.n	8005cee <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d13d      	bne.n	8005d6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d06:	d111      	bne.n	8005d2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d10:	d004      	beq.n	8005d1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d1a:	d107      	bne.n	8005d2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d34:	d10f      	bne.n	8005d56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e017      	b.n	8005d9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d70:	2300      	movs	r3, #0
 8005d72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	3b01      	subs	r3, #1
 8005d78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4013      	ands	r3, r2
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	bf0c      	ite	eq
 8005d8a:	2301      	moveq	r3, #1
 8005d8c:	2300      	movne	r3, #0
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	79fb      	ldrb	r3, [r7, #7]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d19b      	bne.n	8005cd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3720      	adds	r7, #32
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20000000 	.word	0x20000000

08005da8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08a      	sub	sp, #40	; 0x28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
 8005db4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005db6:	2300      	movs	r3, #0
 8005db8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005dba:	f7fc fb61 	bl	8002480 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc2:	1a9b      	subs	r3, r3, r2
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005dca:	f7fc fb59 	bl	8002480 <HAL_GetTick>
 8005dce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	330c      	adds	r3, #12
 8005dd6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005dd8:	4b3d      	ldr	r3, [pc, #244]	; (8005ed0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	00da      	lsls	r2, r3, #3
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	0d1b      	lsrs	r3, r3, #20
 8005de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dea:	fb02 f303 	mul.w	r3, r2, r3
 8005dee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005df0:	e060      	b.n	8005eb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005df8:	d107      	bne.n	8005e0a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d104      	bne.n	8005e0a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005e08:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e10:	d050      	beq.n	8005eb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e12:	f7fc fb35 	bl	8002480 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d902      	bls.n	8005e28 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d13d      	bne.n	8005ea4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e40:	d111      	bne.n	8005e66 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e4a:	d004      	beq.n	8005e56 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e54:	d107      	bne.n	8005e66 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e6e:	d10f      	bne.n	8005e90 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e010      	b.n	8005ec6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d196      	bne.n	8005df2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3728      	adds	r7, #40	; 0x28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	20000000 	.word	0x20000000

08005ed4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ee8:	d111      	bne.n	8005f0e <SPI_EndRxTransaction+0x3a>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ef2:	d004      	beq.n	8005efe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005efc:	d107      	bne.n	8005f0e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f0c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2200      	movs	r2, #0
 8005f16:	2180      	movs	r1, #128	; 0x80
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f7ff febd 	bl	8005c98 <SPI_WaitFlagStateUntilTimeout>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d007      	beq.n	8005f34 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f28:	f043 0220 	orr.w	r2, r3, #32
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e023      	b.n	8005f7c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f3c:	d11d      	bne.n	8005f7a <SPI_EndRxTransaction+0xa6>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f46:	d004      	beq.n	8005f52 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f50:	d113      	bne.n	8005f7a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f7ff ff22 	bl	8005da8 <SPI_WaitFifoStateUntilTimeout>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d007      	beq.n	8005f7a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f6e:	f043 0220 	orr.w	r2, r3, #32
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e000      	b.n	8005f7c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f7ff ff03 	bl	8005da8 <SPI_WaitFifoStateUntilTimeout>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d007      	beq.n	8005fb8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fac:	f043 0220 	orr.w	r2, r3, #32
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e027      	b.n	8006008 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	2180      	movs	r1, #128	; 0x80
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f7ff fe68 	bl	8005c98 <SPI_WaitFlagStateUntilTimeout>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd2:	f043 0220 	orr.w	r2, r3, #32
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e014      	b.n	8006008 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f7ff fedc 	bl	8005da8 <SPI_WaitFifoStateUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d007      	beq.n	8006006 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ffa:	f043 0220 	orr.w	r2, r3, #32
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e000      	b.n	8006008 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e049      	b.n	80060b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fc f916 	bl	8002268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3304      	adds	r3, #4
 800604c:	4619      	mov	r1, r3
 800604e:	4610      	mov	r0, r2
 8006050:	f000 fc10 	bl	8006874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d001      	beq.n	80060d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e03b      	b.n	8006150 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0201 	orr.w	r2, r2, #1
 80060ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a19      	ldr	r2, [pc, #100]	; (800615c <HAL_TIM_Base_Start_IT+0x9c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d009      	beq.n	800610e <HAL_TIM_Base_Start_IT+0x4e>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006102:	d004      	beq.n	800610e <HAL_TIM_Base_Start_IT+0x4e>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a15      	ldr	r2, [pc, #84]	; (8006160 <HAL_TIM_Base_Start_IT+0xa0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d115      	bne.n	800613a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	4b13      	ldr	r3, [pc, #76]	; (8006164 <HAL_TIM_Base_Start_IT+0xa4>)
 8006116:	4013      	ands	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2b06      	cmp	r3, #6
 800611e:	d015      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x8c>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006126:	d011      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006138:	e008      	b.n	800614c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f042 0201 	orr.w	r2, r2, #1
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	e000      	b.n	800614e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800614c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	40012c00 	.word	0x40012c00
 8006160:	40014000 	.word	0x40014000
 8006164:	00010007 	.word	0x00010007

08006168 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e049      	b.n	800620e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d106      	bne.n	8006194 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f841 	bl	8006216 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2202      	movs	r2, #2
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4619      	mov	r1, r3
 80061a6:	4610      	mov	r0, r2
 80061a8:	f000 fb64 	bl	8006874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800621e:	bf00      	nop
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b082      	sub	sp, #8
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b02      	cmp	r3, #2
 800623e:	d122      	bne.n	8006286 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b02      	cmp	r3, #2
 800624c:	d11b      	bne.n	8006286 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f06f 0202 	mvn.w	r2, #2
 8006256:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	f003 0303 	and.w	r3, r3, #3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fae2 	bl	8006836 <HAL_TIM_IC_CaptureCallback>
 8006272:	e005      	b.n	8006280 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fad4 	bl	8006822 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fae5 	bl	800684a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b04      	cmp	r3, #4
 8006292:	d122      	bne.n	80062da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f003 0304 	and.w	r3, r3, #4
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d11b      	bne.n	80062da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f06f 0204 	mvn.w	r2, #4
 80062aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fab8 	bl	8006836 <HAL_TIM_IC_CaptureCallback>
 80062c6:	e005      	b.n	80062d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 faaa 	bl	8006822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fabb 	bl	800684a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f003 0308 	and.w	r3, r3, #8
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d122      	bne.n	800632e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f003 0308 	and.w	r3, r3, #8
 80062f2:	2b08      	cmp	r3, #8
 80062f4:	d11b      	bne.n	800632e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f06f 0208 	mvn.w	r2, #8
 80062fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2204      	movs	r2, #4
 8006304:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69db      	ldr	r3, [r3, #28]
 800630c:	f003 0303 	and.w	r3, r3, #3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d003      	beq.n	800631c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fa8e 	bl	8006836 <HAL_TIM_IC_CaptureCallback>
 800631a:	e005      	b.n	8006328 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fa80 	bl	8006822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fa91 	bl	800684a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	f003 0310 	and.w	r3, r3, #16
 8006338:	2b10      	cmp	r3, #16
 800633a:	d122      	bne.n	8006382 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f003 0310 	and.w	r3, r3, #16
 8006346:	2b10      	cmp	r3, #16
 8006348:	d11b      	bne.n	8006382 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f06f 0210 	mvn.w	r2, #16
 8006352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2208      	movs	r2, #8
 8006358:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fa64 	bl	8006836 <HAL_TIM_IC_CaptureCallback>
 800636e:	e005      	b.n	800637c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fa56 	bl	8006822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fa67 	bl	800684a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b01      	cmp	r3, #1
 800638e:	d10e      	bne.n	80063ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b01      	cmp	r3, #1
 800639c:	d107      	bne.n	80063ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f06f 0201 	mvn.w	r2, #1
 80063a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7fb fb73 	bl	8001a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b8:	2b80      	cmp	r3, #128	; 0x80
 80063ba:	d10e      	bne.n	80063da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c6:	2b80      	cmp	r3, #128	; 0x80
 80063c8:	d107      	bne.n	80063da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 feb1 	bl	800713c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063e8:	d10e      	bne.n	8006408 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f4:	2b80      	cmp	r3, #128	; 0x80
 80063f6:	d107      	bne.n	8006408 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fea4 	bl	8007150 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006412:	2b40      	cmp	r3, #64	; 0x40
 8006414:	d10e      	bne.n	8006434 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	d107      	bne.n	8006434 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800642c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fa15 	bl	800685e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	2b20      	cmp	r3, #32
 8006440:	d10e      	bne.n	8006460 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f003 0320 	and.w	r3, r3, #32
 800644c:	2b20      	cmp	r3, #32
 800644e:	d107      	bne.n	8006460 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f06f 0220 	mvn.w	r2, #32
 8006458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fe64 	bl	8007128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006460:	bf00      	nop
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006482:	2302      	movs	r3, #2
 8006484:	e0ff      	b.n	8006686 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b14      	cmp	r3, #20
 8006492:	f200 80f0 	bhi.w	8006676 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006496:	a201      	add	r2, pc, #4	; (adr r2, 800649c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649c:	080064f1 	.word	0x080064f1
 80064a0:	08006677 	.word	0x08006677
 80064a4:	08006677 	.word	0x08006677
 80064a8:	08006677 	.word	0x08006677
 80064ac:	08006531 	.word	0x08006531
 80064b0:	08006677 	.word	0x08006677
 80064b4:	08006677 	.word	0x08006677
 80064b8:	08006677 	.word	0x08006677
 80064bc:	08006573 	.word	0x08006573
 80064c0:	08006677 	.word	0x08006677
 80064c4:	08006677 	.word	0x08006677
 80064c8:	08006677 	.word	0x08006677
 80064cc:	080065b3 	.word	0x080065b3
 80064d0:	08006677 	.word	0x08006677
 80064d4:	08006677 	.word	0x08006677
 80064d8:	08006677 	.word	0x08006677
 80064dc:	080065f5 	.word	0x080065f5
 80064e0:	08006677 	.word	0x08006677
 80064e4:	08006677 	.word	0x08006677
 80064e8:	08006677 	.word	0x08006677
 80064ec:	08006635 	.word	0x08006635
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68b9      	ldr	r1, [r7, #8]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 fa20 	bl	800693c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699a      	ldr	r2, [r3, #24]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f042 0208 	orr.w	r2, r2, #8
 800650a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699a      	ldr	r2, [r3, #24]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0204 	bic.w	r2, r2, #4
 800651a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6999      	ldr	r1, [r3, #24]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	691a      	ldr	r2, [r3, #16]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	619a      	str	r2, [r3, #24]
      break;
 800652e:	e0a5      	b.n	800667c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68b9      	ldr	r1, [r7, #8]
 8006536:	4618      	mov	r0, r3
 8006538:	f000 fa7c 	bl	8006a34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699a      	ldr	r2, [r3, #24]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800654a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699a      	ldr	r2, [r3, #24]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800655a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6999      	ldr	r1, [r3, #24]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	021a      	lsls	r2, r3, #8
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	619a      	str	r2, [r3, #24]
      break;
 8006570:	e084      	b.n	800667c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68b9      	ldr	r1, [r7, #8]
 8006578:	4618      	mov	r0, r3
 800657a:	f000 fad5 	bl	8006b28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	69da      	ldr	r2, [r3, #28]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0208 	orr.w	r2, r2, #8
 800658c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69da      	ldr	r2, [r3, #28]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0204 	bic.w	r2, r2, #4
 800659c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69d9      	ldr	r1, [r3, #28]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	691a      	ldr	r2, [r3, #16]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	61da      	str	r2, [r3, #28]
      break;
 80065b0:	e064      	b.n	800667c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68b9      	ldr	r1, [r7, #8]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 fb2d 	bl	8006c18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69da      	ldr	r2, [r3, #28]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69da      	ldr	r2, [r3, #28]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69d9      	ldr	r1, [r3, #28]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	021a      	lsls	r2, r3, #8
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	61da      	str	r2, [r3, #28]
      break;
 80065f2:	e043      	b.n	800667c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68b9      	ldr	r1, [r7, #8]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 fb6a 	bl	8006cd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0208 	orr.w	r2, r2, #8
 800660e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0204 	bic.w	r2, r2, #4
 800661e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	691a      	ldr	r2, [r3, #16]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006632:	e023      	b.n	800667c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68b9      	ldr	r1, [r7, #8]
 800663a:	4618      	mov	r0, r3
 800663c:	f000 fba2 	bl	8006d84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800664e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800665e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	021a      	lsls	r2, r3, #8
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006674:	e002      	b.n	800667c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	75fb      	strb	r3, [r7, #23]
      break;
 800667a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006684:	7dfb      	ldrb	r3, [r7, #23]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop

08006690 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <HAL_TIM_ConfigClockSource+0x1c>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e0b6      	b.n	800681a <HAL_TIM_ConfigClockSource+0x18a>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066e8:	d03e      	beq.n	8006768 <HAL_TIM_ConfigClockSource+0xd8>
 80066ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ee:	f200 8087 	bhi.w	8006800 <HAL_TIM_ConfigClockSource+0x170>
 80066f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f6:	f000 8086 	beq.w	8006806 <HAL_TIM_ConfigClockSource+0x176>
 80066fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066fe:	d87f      	bhi.n	8006800 <HAL_TIM_ConfigClockSource+0x170>
 8006700:	2b70      	cmp	r3, #112	; 0x70
 8006702:	d01a      	beq.n	800673a <HAL_TIM_ConfigClockSource+0xaa>
 8006704:	2b70      	cmp	r3, #112	; 0x70
 8006706:	d87b      	bhi.n	8006800 <HAL_TIM_ConfigClockSource+0x170>
 8006708:	2b60      	cmp	r3, #96	; 0x60
 800670a:	d050      	beq.n	80067ae <HAL_TIM_ConfigClockSource+0x11e>
 800670c:	2b60      	cmp	r3, #96	; 0x60
 800670e:	d877      	bhi.n	8006800 <HAL_TIM_ConfigClockSource+0x170>
 8006710:	2b50      	cmp	r3, #80	; 0x50
 8006712:	d03c      	beq.n	800678e <HAL_TIM_ConfigClockSource+0xfe>
 8006714:	2b50      	cmp	r3, #80	; 0x50
 8006716:	d873      	bhi.n	8006800 <HAL_TIM_ConfigClockSource+0x170>
 8006718:	2b40      	cmp	r3, #64	; 0x40
 800671a:	d058      	beq.n	80067ce <HAL_TIM_ConfigClockSource+0x13e>
 800671c:	2b40      	cmp	r3, #64	; 0x40
 800671e:	d86f      	bhi.n	8006800 <HAL_TIM_ConfigClockSource+0x170>
 8006720:	2b30      	cmp	r3, #48	; 0x30
 8006722:	d064      	beq.n	80067ee <HAL_TIM_ConfigClockSource+0x15e>
 8006724:	2b30      	cmp	r3, #48	; 0x30
 8006726:	d86b      	bhi.n	8006800 <HAL_TIM_ConfigClockSource+0x170>
 8006728:	2b20      	cmp	r3, #32
 800672a:	d060      	beq.n	80067ee <HAL_TIM_ConfigClockSource+0x15e>
 800672c:	2b20      	cmp	r3, #32
 800672e:	d867      	bhi.n	8006800 <HAL_TIM_ConfigClockSource+0x170>
 8006730:	2b00      	cmp	r3, #0
 8006732:	d05c      	beq.n	80067ee <HAL_TIM_ConfigClockSource+0x15e>
 8006734:	2b10      	cmp	r3, #16
 8006736:	d05a      	beq.n	80067ee <HAL_TIM_ConfigClockSource+0x15e>
 8006738:	e062      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	6899      	ldr	r1, [r3, #8]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f000 fbef 	bl	8006f2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800675c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	609a      	str	r2, [r3, #8]
      break;
 8006766:	e04f      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6818      	ldr	r0, [r3, #0]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	6899      	ldr	r1, [r3, #8]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f000 fbd8 	bl	8006f2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689a      	ldr	r2, [r3, #8]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800678a:	609a      	str	r2, [r3, #8]
      break;
 800678c:	e03c      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6818      	ldr	r0, [r3, #0]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	6859      	ldr	r1, [r3, #4]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	461a      	mov	r2, r3
 800679c:	f000 fb4c 	bl	8006e38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2150      	movs	r1, #80	; 0x50
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 fba5 	bl	8006ef6 <TIM_ITRx_SetConfig>
      break;
 80067ac:	e02c      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	6859      	ldr	r1, [r3, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	461a      	mov	r2, r3
 80067bc:	f000 fb6b 	bl	8006e96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2160      	movs	r1, #96	; 0x60
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fb95 	bl	8006ef6 <TIM_ITRx_SetConfig>
      break;
 80067cc:	e01c      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6818      	ldr	r0, [r3, #0]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	6859      	ldr	r1, [r3, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	461a      	mov	r2, r3
 80067dc:	f000 fb2c 	bl	8006e38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2140      	movs	r1, #64	; 0x40
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fb85 	bl	8006ef6 <TIM_ITRx_SetConfig>
      break;
 80067ec:	e00c      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4619      	mov	r1, r3
 80067f8:	4610      	mov	r0, r2
 80067fa:	f000 fb7c 	bl	8006ef6 <TIM_ITRx_SetConfig>
      break;
 80067fe:	e003      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	73fb      	strb	r3, [r7, #15]
      break;
 8006804:	e000      	b.n	8006808 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006806:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006818:	7bfb      	ldrb	r3, [r7, #15]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800682a:	bf00      	nop
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800683e:	bf00      	nop
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006852:	bf00      	nop
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800685e:	b480      	push	{r7}
 8006860:	b083      	sub	sp, #12
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
	...

08006874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a2a      	ldr	r2, [pc, #168]	; (8006930 <TIM_Base_SetConfig+0xbc>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d003      	beq.n	8006894 <TIM_Base_SetConfig+0x20>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006892:	d108      	bne.n	80068a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a21      	ldr	r2, [pc, #132]	; (8006930 <TIM_Base_SetConfig+0xbc>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d00b      	beq.n	80068c6 <TIM_Base_SetConfig+0x52>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b4:	d007      	beq.n	80068c6 <TIM_Base_SetConfig+0x52>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a1e      	ldr	r2, [pc, #120]	; (8006934 <TIM_Base_SetConfig+0xc0>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d003      	beq.n	80068c6 <TIM_Base_SetConfig+0x52>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a1d      	ldr	r2, [pc, #116]	; (8006938 <TIM_Base_SetConfig+0xc4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d108      	bne.n	80068d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a0c      	ldr	r2, [pc, #48]	; (8006930 <TIM_Base_SetConfig+0xbc>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d007      	beq.n	8006914 <TIM_Base_SetConfig+0xa0>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a0b      	ldr	r2, [pc, #44]	; (8006934 <TIM_Base_SetConfig+0xc0>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d003      	beq.n	8006914 <TIM_Base_SetConfig+0xa0>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a0a      	ldr	r2, [pc, #40]	; (8006938 <TIM_Base_SetConfig+0xc4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d103      	bne.n	800691c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	691a      	ldr	r2, [r3, #16]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	615a      	str	r2, [r3, #20]
}
 8006922:	bf00      	nop
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	40012c00 	.word	0x40012c00
 8006934:	40014000 	.word	0x40014000
 8006938:	40014400 	.word	0x40014400

0800693c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	f023 0201 	bic.w	r2, r3, #1
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800696a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0303 	bic.w	r3, r3, #3
 8006976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f023 0302 	bic.w	r3, r3, #2
 8006988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4313      	orrs	r3, r2
 8006992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a24      	ldr	r2, [pc, #144]	; (8006a28 <TIM_OC1_SetConfig+0xec>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d007      	beq.n	80069ac <TIM_OC1_SetConfig+0x70>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a23      	ldr	r2, [pc, #140]	; (8006a2c <TIM_OC1_SetConfig+0xf0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d003      	beq.n	80069ac <TIM_OC1_SetConfig+0x70>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a22      	ldr	r2, [pc, #136]	; (8006a30 <TIM_OC1_SetConfig+0xf4>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d10c      	bne.n	80069c6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f023 0308 	bic.w	r3, r3, #8
 80069b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f023 0304 	bic.w	r3, r3, #4
 80069c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a17      	ldr	r2, [pc, #92]	; (8006a28 <TIM_OC1_SetConfig+0xec>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d007      	beq.n	80069de <TIM_OC1_SetConfig+0xa2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a16      	ldr	r2, [pc, #88]	; (8006a2c <TIM_OC1_SetConfig+0xf0>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d003      	beq.n	80069de <TIM_OC1_SetConfig+0xa2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a15      	ldr	r2, [pc, #84]	; (8006a30 <TIM_OC1_SetConfig+0xf4>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d111      	bne.n	8006a02 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	621a      	str	r2, [r3, #32]
}
 8006a1c:	bf00      	nop
 8006a1e:	371c      	adds	r7, #28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	40012c00 	.word	0x40012c00
 8006a2c:	40014000 	.word	0x40014000
 8006a30:	40014400 	.word	0x40014400

08006a34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	f023 0210 	bic.w	r2, r3, #16
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	021b      	lsls	r3, r3, #8
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f023 0320 	bic.w	r3, r3, #32
 8006a82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	011b      	lsls	r3, r3, #4
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a22      	ldr	r2, [pc, #136]	; (8006b1c <TIM_OC2_SetConfig+0xe8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d10d      	bne.n	8006ab4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	011b      	lsls	r3, r3, #4
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ab2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a19      	ldr	r2, [pc, #100]	; (8006b1c <TIM_OC2_SetConfig+0xe8>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d007      	beq.n	8006acc <TIM_OC2_SetConfig+0x98>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a18      	ldr	r2, [pc, #96]	; (8006b20 <TIM_OC2_SetConfig+0xec>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d003      	beq.n	8006acc <TIM_OC2_SetConfig+0x98>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a17      	ldr	r2, [pc, #92]	; (8006b24 <TIM_OC2_SetConfig+0xf0>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d113      	bne.n	8006af4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ad2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ada:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	621a      	str	r2, [r3, #32]
}
 8006b0e:	bf00      	nop
 8006b10:	371c      	adds	r7, #28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	40012c00 	.word	0x40012c00
 8006b20:	40014000 	.word	0x40014000
 8006b24:	40014400 	.word	0x40014400

08006b28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f023 0303 	bic.w	r3, r3, #3
 8006b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	021b      	lsls	r3, r3, #8
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a21      	ldr	r2, [pc, #132]	; (8006c0c <TIM_OC3_SetConfig+0xe4>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d10d      	bne.n	8006ba6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	021b      	lsls	r3, r3, #8
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a18      	ldr	r2, [pc, #96]	; (8006c0c <TIM_OC3_SetConfig+0xe4>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d007      	beq.n	8006bbe <TIM_OC3_SetConfig+0x96>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a17      	ldr	r2, [pc, #92]	; (8006c10 <TIM_OC3_SetConfig+0xe8>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d003      	beq.n	8006bbe <TIM_OC3_SetConfig+0x96>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a16      	ldr	r2, [pc, #88]	; (8006c14 <TIM_OC3_SetConfig+0xec>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d113      	bne.n	8006be6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	011b      	lsls	r3, r3, #4
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	621a      	str	r2, [r3, #32]
}
 8006c00:	bf00      	nop
 8006c02:	371c      	adds	r7, #28
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	40012c00 	.word	0x40012c00
 8006c10:	40014000 	.word	0x40014000
 8006c14:	40014400 	.word	0x40014400

08006c18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	021b      	lsls	r3, r3, #8
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	031b      	lsls	r3, r3, #12
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a14      	ldr	r2, [pc, #80]	; (8006cc8 <TIM_OC4_SetConfig+0xb0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d007      	beq.n	8006c8c <TIM_OC4_SetConfig+0x74>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a13      	ldr	r2, [pc, #76]	; (8006ccc <TIM_OC4_SetConfig+0xb4>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d003      	beq.n	8006c8c <TIM_OC4_SetConfig+0x74>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a12      	ldr	r2, [pc, #72]	; (8006cd0 <TIM_OC4_SetConfig+0xb8>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d109      	bne.n	8006ca0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	019b      	lsls	r3, r3, #6
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	621a      	str	r2, [r3, #32]
}
 8006cba:	bf00      	nop
 8006cbc:	371c      	adds	r7, #28
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	40012c00 	.word	0x40012c00
 8006ccc:	40014000 	.word	0x40014000
 8006cd0:	40014400 	.word	0x40014400

08006cd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	041b      	lsls	r3, r3, #16
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a13      	ldr	r2, [pc, #76]	; (8006d78 <TIM_OC5_SetConfig+0xa4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d007      	beq.n	8006d3e <TIM_OC5_SetConfig+0x6a>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a12      	ldr	r2, [pc, #72]	; (8006d7c <TIM_OC5_SetConfig+0xa8>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d003      	beq.n	8006d3e <TIM_OC5_SetConfig+0x6a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a11      	ldr	r2, [pc, #68]	; (8006d80 <TIM_OC5_SetConfig+0xac>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d109      	bne.n	8006d52 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	021b      	lsls	r3, r3, #8
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	621a      	str	r2, [r3, #32]
}
 8006d6c:	bf00      	nop
 8006d6e:	371c      	adds	r7, #28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	40012c00 	.word	0x40012c00
 8006d7c:	40014000 	.word	0x40014000
 8006d80:	40014400 	.word	0x40014400

08006d84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	021b      	lsls	r3, r3, #8
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006dca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	051b      	lsls	r3, r3, #20
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a14      	ldr	r2, [pc, #80]	; (8006e2c <TIM_OC6_SetConfig+0xa8>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d007      	beq.n	8006df0 <TIM_OC6_SetConfig+0x6c>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a13      	ldr	r2, [pc, #76]	; (8006e30 <TIM_OC6_SetConfig+0xac>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d003      	beq.n	8006df0 <TIM_OC6_SetConfig+0x6c>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a12      	ldr	r2, [pc, #72]	; (8006e34 <TIM_OC6_SetConfig+0xb0>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d109      	bne.n	8006e04 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006df6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	029b      	lsls	r3, r3, #10
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	621a      	str	r2, [r3, #32]
}
 8006e1e:	bf00      	nop
 8006e20:	371c      	adds	r7, #28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	40012c00 	.word	0x40012c00
 8006e30:	40014000 	.word	0x40014000
 8006e34:	40014400 	.word	0x40014400

08006e38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6a1b      	ldr	r3, [r3, #32]
 8006e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	f023 0201 	bic.w	r2, r3, #1
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	011b      	lsls	r3, r3, #4
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f023 030a 	bic.w	r3, r3, #10
 8006e74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	621a      	str	r2, [r3, #32]
}
 8006e8a:	bf00      	nop
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b087      	sub	sp, #28
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	60f8      	str	r0, [r7, #12]
 8006e9e:	60b9      	str	r1, [r7, #8]
 8006ea0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	f023 0210 	bic.w	r2, r3, #16
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ec0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	031b      	lsls	r3, r3, #12
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ed2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	011b      	lsls	r3, r3, #4
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	621a      	str	r2, [r3, #32]
}
 8006eea:	bf00      	nop
 8006eec:	371c      	adds	r7, #28
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b085      	sub	sp, #20
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	f043 0307 	orr.w	r3, r3, #7
 8006f18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	609a      	str	r2, [r3, #8]
}
 8006f20:	bf00      	nop
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	021a      	lsls	r2, r3, #8
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	609a      	str	r2, [r3, #8]
}
 8006f60:	bf00      	nop
 8006f62:	371c      	adds	r7, #28
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d101      	bne.n	8006f84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f80:	2302      	movs	r3, #2
 8006f82:	e04f      	b.n	8007024 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a21      	ldr	r2, [pc, #132]	; (8007030 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d108      	bne.n	8006fc0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fb4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a14      	ldr	r2, [pc, #80]	; (8007030 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d009      	beq.n	8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fec:	d004      	beq.n	8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a10      	ldr	r2, [pc, #64]	; (8007034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d10c      	bne.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ffe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	4313      	orrs	r3, r2
 8007008:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	40012c00 	.word	0x40012c00
 8007034:	40014000 	.word	0x40014000

08007038 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800704c:	2b01      	cmp	r3, #1
 800704e:	d101      	bne.n	8007054 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007050:	2302      	movs	r3, #2
 8007052:	e060      	b.n	8007116 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	041b      	lsls	r3, r3, #16
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a14      	ldr	r2, [pc, #80]	; (8007124 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d115      	bne.n	8007104 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e2:	051b      	lsls	r3, r3, #20
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	4313      	orrs	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	40012c00 	.word	0x40012c00

08007128 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <__libc_init_array>:
 8007164:	b570      	push	{r4, r5, r6, lr}
 8007166:	4d0d      	ldr	r5, [pc, #52]	; (800719c <__libc_init_array+0x38>)
 8007168:	4c0d      	ldr	r4, [pc, #52]	; (80071a0 <__libc_init_array+0x3c>)
 800716a:	1b64      	subs	r4, r4, r5
 800716c:	10a4      	asrs	r4, r4, #2
 800716e:	2600      	movs	r6, #0
 8007170:	42a6      	cmp	r6, r4
 8007172:	d109      	bne.n	8007188 <__libc_init_array+0x24>
 8007174:	4d0b      	ldr	r5, [pc, #44]	; (80071a4 <__libc_init_array+0x40>)
 8007176:	4c0c      	ldr	r4, [pc, #48]	; (80071a8 <__libc_init_array+0x44>)
 8007178:	f000 f820 	bl	80071bc <_init>
 800717c:	1b64      	subs	r4, r4, r5
 800717e:	10a4      	asrs	r4, r4, #2
 8007180:	2600      	movs	r6, #0
 8007182:	42a6      	cmp	r6, r4
 8007184:	d105      	bne.n	8007192 <__libc_init_array+0x2e>
 8007186:	bd70      	pop	{r4, r5, r6, pc}
 8007188:	f855 3b04 	ldr.w	r3, [r5], #4
 800718c:	4798      	blx	r3
 800718e:	3601      	adds	r6, #1
 8007190:	e7ee      	b.n	8007170 <__libc_init_array+0xc>
 8007192:	f855 3b04 	ldr.w	r3, [r5], #4
 8007196:	4798      	blx	r3
 8007198:	3601      	adds	r6, #1
 800719a:	e7f2      	b.n	8007182 <__libc_init_array+0x1e>
 800719c:	0800721c 	.word	0x0800721c
 80071a0:	0800721c 	.word	0x0800721c
 80071a4:	0800721c 	.word	0x0800721c
 80071a8:	08007220 	.word	0x08007220

080071ac <memset>:
 80071ac:	4402      	add	r2, r0
 80071ae:	4603      	mov	r3, r0
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d100      	bne.n	80071b6 <memset+0xa>
 80071b4:	4770      	bx	lr
 80071b6:	f803 1b01 	strb.w	r1, [r3], #1
 80071ba:	e7f9      	b.n	80071b0 <memset+0x4>

080071bc <_init>:
 80071bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071be:	bf00      	nop
 80071c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071c2:	bc08      	pop	{r3}
 80071c4:	469e      	mov	lr, r3
 80071c6:	4770      	bx	lr

080071c8 <_fini>:
 80071c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ca:	bf00      	nop
 80071cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ce:	bc08      	pop	{r3}
 80071d0:	469e      	mov	lr, r3
 80071d2:	4770      	bx	lr
