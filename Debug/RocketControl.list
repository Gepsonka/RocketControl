
RocketControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000654c  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080066e0  080066e0  000166e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006760  08006760  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006760  08006760  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006760  08006760  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006760  08006760  00016760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006764  08006764  00016764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000070  080067d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  200001d4  080067d8  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f7f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002993  00000000  00000000  0003201f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  000349b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  00035b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021fef  00000000  00000000  00036b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b60  00000000  00000000  00058b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb120  00000000  00000000  0006e6df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001397ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dbc  00000000  00000000  00139850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066c4 	.word	0x080066c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080066c4 	.word	0x080066c4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <Self_Test>:

/*
 * For more info on self-testing:
 * https://github.com/kriswiner/MPU9250/blob/master/Documents/AN-MPU-9250A-03%20MPU-9250%20Accel%20Gyro%20and%20Compass%20Self-Test%20Implementation%20v1%200_062813.pdf
 */
void Self_Test(){
 8000b48:	b5b0      	push	{r4, r5, r7, lr}
 8000b4a:	b0a0      	sub	sp, #128	; 0x80
 8000b4c:	af04      	add	r7, sp, #16
	uint8_t i;
	uint8_t raw_data[6] = {0, 0, 0, 0, 0, 0};
 8000b4e:	4a9d      	ldr	r2, [pc, #628]	; (8000dc4 <Self_Test+0x27c>)
 8000b50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b58:	6018      	str	r0, [r3, #0]
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	8019      	strh	r1, [r3, #0]
	uint8_t self_test[6];
	int32_t gyroAVG[3] = {0};
 8000b5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
	int32_t gyro_self_testAVG[3] = {0};
 8000b6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
	int32_t accelAVG[3] = {0};
 8000b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
	int32_t accel_self_testAVG[3] = {0};
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
	float factory_trim[6];
	uint8_t FS = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	HAL_StatusTypeDef status;

	// Set gyro sample rate to 1kHz
	status = HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, SMPLRT_DIV, 1, (uint8_t*)(0x00), 1, HAL_MAX_DELAY);
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295
 8000b98:	9302      	str	r3, [sp, #8]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	2219      	movs	r2, #25
 8000ba6:	21d0      	movs	r1, #208	; 0xd0
 8000ba8:	4887      	ldr	r0, [pc, #540]	; (8000dc8 <Self_Test+0x280>)
 8000baa:	f001 feef 	bl	800298c <HAL_I2C_Mem_Write>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	// Set DLFP to 92Hz
	status = HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, CONFIG, 1, (uint8_t*)(0x02), 1, HAL_MAX_DELAY);
 8000bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb8:	9302      	str	r3, [sp, #8]
 8000bba:	2301      	movs	r3, #1
 8000bbc:	9301      	str	r3, [sp, #4]
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	221a      	movs	r2, #26
 8000bc6:	21d0      	movs	r1, #208	; 0xd0
 8000bc8:	487f      	ldr	r0, [pc, #508]	; (8000dc8 <Self_Test+0x280>)
 8000bca:	f001 fedf 	bl	800298c <HAL_I2C_Mem_Write>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	// Set full scale range of the gyro to 250 dps
	status = HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, GYRO_CONFIG, 1, (uint8_t*)(1<<FS), 1, HAL_MAX_DELAY);
 8000bd4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000bd8:	2201      	movs	r2, #1
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	461a      	mov	r2, r3
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295
 8000be4:	9302      	str	r3, [sp, #8]
 8000be6:	2301      	movs	r3, #1
 8000be8:	9301      	str	r3, [sp, #4]
 8000bea:	9200      	str	r2, [sp, #0]
 8000bec:	2301      	movs	r3, #1
 8000bee:	221b      	movs	r2, #27
 8000bf0:	21d0      	movs	r1, #208	; 0xd0
 8000bf2:	4875      	ldr	r0, [pc, #468]	; (8000dc8 <Self_Test+0x280>)
 8000bf4:	f001 feca 	bl	800298c <HAL_I2C_Mem_Write>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	// Set accel rate to 1kHz and bandwidth to 92Hz
	status = HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, ACCEL_CONFIG, 1, (uint8_t*)(0x02), 1, HAL_MAX_DELAY);
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	9302      	str	r3, [sp, #8]
 8000c04:	2301      	movs	r3, #1
 8000c06:	9301      	str	r3, [sp, #4]
 8000c08:	2302      	movs	r3, #2
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	221c      	movs	r2, #28
 8000c10:	21d0      	movs	r1, #208	; 0xd0
 8000c12:	486d      	ldr	r0, [pc, #436]	; (8000dc8 <Self_Test+0x280>)
 8000c14:	f001 feba 	bl	800298c <HAL_I2C_Mem_Write>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	// Set accel full scale range to 2G
	status = HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, ACCEL_CONFIG, 1, (uint8_t*)(1<<FS), 1, HAL_MAX_DELAY);
 8000c1e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000c22:	2201      	movs	r2, #1
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	461a      	mov	r2, r3
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	9302      	str	r3, [sp, #8]
 8000c30:	2301      	movs	r3, #1
 8000c32:	9301      	str	r3, [sp, #4]
 8000c34:	9200      	str	r2, [sp, #0]
 8000c36:	2301      	movs	r3, #1
 8000c38:	221c      	movs	r2, #28
 8000c3a:	21d0      	movs	r1, #208	; 0xd0
 8000c3c:	4862      	ldr	r0, [pc, #392]	; (8000dc8 <Self_Test+0x280>)
 8000c3e:	f001 fea5 	bl	800298c <HAL_I2C_Mem_Write>
 8000c42:	4603      	mov	r3, r0
 8000c44:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a


	// Calculate data needed to get the average
	for(i=0; i<200; i++){
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000c4e:	e068      	b.n	8000d22 <Self_Test+0x1da>
		// Reading accel data registers
		HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &raw_data[0], 6, HAL_MAX_DELAY);
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	9302      	str	r3, [sp, #8]
 8000c56:	2306      	movs	r3, #6
 8000c58:	9301      	str	r3, [sp, #4]
 8000c5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	2301      	movs	r3, #1
 8000c62:	223b      	movs	r2, #59	; 0x3b
 8000c64:	21d0      	movs	r1, #208	; 0xd0
 8000c66:	4858      	ldr	r0, [pc, #352]	; (8000dc8 <Self_Test+0x280>)
 8000c68:	f001 ffa4 	bl	8002bb4 <HAL_I2C_Mem_Read>
		accelAVG[0] += (int16_t) (((int16_t)raw_data[0] << 8) | raw_data[1]);
 8000c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c6e:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8000c72:	0212      	lsls	r2, r2, #8
 8000c74:	b211      	sxth	r1, r2
 8000c76:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8000c7a:	b212      	sxth	r2, r2
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	b212      	sxth	r2, r2
 8000c80:	4413      	add	r3, r2
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
		accelAVG[1] += (int16_t) (((int16_t)raw_data[2] << 8) | raw_data[3]);
 8000c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c86:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000c8a:	0212      	lsls	r2, r2, #8
 8000c8c:	b211      	sxth	r1, r2
 8000c8e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000c92:	b212      	sxth	r2, r2
 8000c94:	430a      	orrs	r2, r1
 8000c96:	b212      	sxth	r2, r2
 8000c98:	4413      	add	r3, r2
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
		accelAVG[2] += (int16_t) (((int16_t)raw_data[4] << 8) | raw_data[5]);
 8000c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c9e:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8000ca2:	0212      	lsls	r2, r2, #8
 8000ca4:	b211      	sxth	r1, r2
 8000ca6:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8000caa:	b212      	sxth	r2, r2
 8000cac:	430a      	orrs	r2, r1
 8000cae:	b212      	sxth	r2, r2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	633b      	str	r3, [r7, #48]	; 0x30

		HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &raw_data[0], 6, HAL_MAX_DELAY);
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb8:	9302      	str	r3, [sp, #8]
 8000cba:	2306      	movs	r3, #6
 8000cbc:	9301      	str	r3, [sp, #4]
 8000cbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	2243      	movs	r2, #67	; 0x43
 8000cc8:	21d0      	movs	r1, #208	; 0xd0
 8000cca:	483f      	ldr	r0, [pc, #252]	; (8000dc8 <Self_Test+0x280>)
 8000ccc:	f001 ff72 	bl	8002bb4 <HAL_I2C_Mem_Read>
		gyroAVG[0] += (int16_t) (((int16_t)raw_data[0] << 8) | raw_data[1]);
 8000cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cd2:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8000cd6:	0212      	lsls	r2, r2, #8
 8000cd8:	b211      	sxth	r1, r2
 8000cda:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8000cde:	b212      	sxth	r2, r2
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	b212      	sxth	r2, r2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	643b      	str	r3, [r7, #64]	; 0x40
		gyroAVG[1] += (int16_t) (((int16_t)raw_data[2] << 8) | raw_data[3]);
 8000ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cea:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000cee:	0212      	lsls	r2, r2, #8
 8000cf0:	b211      	sxth	r1, r2
 8000cf2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000cf6:	b212      	sxth	r2, r2
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	b212      	sxth	r2, r2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	647b      	str	r3, [r7, #68]	; 0x44
		gyroAVG[2] += (int16_t) (((int16_t)raw_data[4] << 8) | raw_data[5]);
 8000d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d02:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8000d06:	0212      	lsls	r2, r2, #8
 8000d08:	b211      	sxth	r1, r2
 8000d0a:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8000d0e:	b212      	sxth	r2, r2
 8000d10:	430a      	orrs	r2, r1
 8000d12:	b212      	sxth	r2, r2
 8000d14:	4413      	add	r3, r2
 8000d16:	64bb      	str	r3, [r7, #72]	; 0x48
	for(i=0; i<200; i++){
 8000d18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000d22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d26:	2bc7      	cmp	r3, #199	; 0xc7
 8000d28:	d992      	bls.n	8000c50 <Self_Test+0x108>

	}

	// Get the average of the 200 readings
	for(int i=0; i<3; i++){
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8000d2e:	e026      	b.n	8000d7e <Self_Test+0x236>
		accelAVG[i] /= 200;
 8000d30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	3370      	adds	r3, #112	; 0x70
 8000d36:	443b      	add	r3, r7
 8000d38:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000d3c:	4a23      	ldr	r2, [pc, #140]	; (8000dcc <Self_Test+0x284>)
 8000d3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d42:	1192      	asrs	r2, r2, #6
 8000d44:	17db      	asrs	r3, r3, #31
 8000d46:	1ad2      	subs	r2, r2, r3
 8000d48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	3370      	adds	r3, #112	; 0x70
 8000d4e:	443b      	add	r3, r7
 8000d50:	f843 2c48 	str.w	r2, [r3, #-72]
		gyroAVG[i] /= 200;
 8000d54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	3370      	adds	r3, #112	; 0x70
 8000d5a:	443b      	add	r3, r7
 8000d5c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000d60:	4a1a      	ldr	r2, [pc, #104]	; (8000dcc <Self_Test+0x284>)
 8000d62:	fb82 1203 	smull	r1, r2, r2, r3
 8000d66:	1192      	asrs	r2, r2, #6
 8000d68:	17db      	asrs	r3, r3, #31
 8000d6a:	1ad2      	subs	r2, r2, r3
 8000d6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	3370      	adds	r3, #112	; 0x70
 8000d72:	443b      	add	r3, r7
 8000d74:	f843 2c30 	str.w	r2, [r3, #-48]
	for(int i=0; i<3; i++){
 8000d78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8000d7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	ddd5      	ble.n	8000d30 <Self_Test+0x1e8>
	}

	// Configure accel and gyro for self test
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, ACCEL_CONFIG, 1, (uint8_t*)(0xE0), 1, HAL_MAX_DELAY);
 8000d84:	f04f 33ff 	mov.w	r3, #4294967295
 8000d88:	9302      	str	r3, [sp, #8]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	23e0      	movs	r3, #224	; 0xe0
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	2301      	movs	r3, #1
 8000d94:	221c      	movs	r2, #28
 8000d96:	21d0      	movs	r1, #208	; 0xd0
 8000d98:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <Self_Test+0x280>)
 8000d9a:	f001 fdf7 	bl	800298c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, GYRO_CONFIG, 1, (uint8_t*)(0xE0), 1, HAL_MAX_DELAY);
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	9302      	str	r3, [sp, #8]
 8000da4:	2301      	movs	r3, #1
 8000da6:	9301      	str	r3, [sp, #4]
 8000da8:	23e0      	movs	r3, #224	; 0xe0
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	2301      	movs	r3, #1
 8000dae:	221b      	movs	r2, #27
 8000db0:	21d0      	movs	r1, #208	; 0xd0
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <Self_Test+0x280>)
 8000db4:	f001 fdea 	bl	800298c <HAL_I2C_Mem_Write>
	HAL_Delay(100); // Let the device to stabilize
 8000db8:	2064      	movs	r0, #100	; 0x64
 8000dba:	f001 facb 	bl	8002354 <HAL_Delay>

	// Calculate data needed to get the average (self-test)
	for(int i=0; i<200; i++){
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	667b      	str	r3, [r7, #100]	; 0x64
 8000dc2:	e06c      	b.n	8000e9e <Self_Test+0x356>
 8000dc4:	080066e0 	.word	0x080066e0
 8000dc8:	200000bc 	.word	0x200000bc
 8000dcc:	51eb851f 	.word	0x51eb851f
		// Reading accel data registers
		HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &raw_data[0], 6, HAL_MAX_DELAY);
 8000dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd4:	9302      	str	r3, [sp, #8]
 8000dd6:	2306      	movs	r3, #6
 8000dd8:	9301      	str	r3, [sp, #4]
 8000dda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2301      	movs	r3, #1
 8000de2:	223b      	movs	r2, #59	; 0x3b
 8000de4:	21d0      	movs	r1, #208	; 0xd0
 8000de6:	4831      	ldr	r0, [pc, #196]	; (8000eac <Self_Test+0x364>)
 8000de8:	f001 fee4 	bl	8002bb4 <HAL_I2C_Mem_Read>
		accel_self_testAVG[0] += (int16_t) (((int16_t)raw_data[0] << 8) | raw_data[1]);
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8000df2:	0212      	lsls	r2, r2, #8
 8000df4:	b211      	sxth	r1, r2
 8000df6:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8000dfa:	b212      	sxth	r2, r2
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	b212      	sxth	r2, r2
 8000e00:	4413      	add	r3, r2
 8000e02:	61fb      	str	r3, [r7, #28]
		accel_self_testAVG[1] += (int16_t) (((int16_t)raw_data[2] << 8) | raw_data[3]);
 8000e04:	6a3b      	ldr	r3, [r7, #32]
 8000e06:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000e0a:	0212      	lsls	r2, r2, #8
 8000e0c:	b211      	sxth	r1, r2
 8000e0e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000e12:	b212      	sxth	r2, r2
 8000e14:	430a      	orrs	r2, r1
 8000e16:	b212      	sxth	r2, r2
 8000e18:	4413      	add	r3, r2
 8000e1a:	623b      	str	r3, [r7, #32]
		accel_self_testAVG[2] += (int16_t) (((int16_t)raw_data[4] << 8) | raw_data[5]);
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1e:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8000e22:	0212      	lsls	r2, r2, #8
 8000e24:	b211      	sxth	r1, r2
 8000e26:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8000e2a:	b212      	sxth	r2, r2
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	b212      	sxth	r2, r2
 8000e30:	4413      	add	r3, r2
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24

		HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &raw_data[0], 6, HAL_MAX_DELAY);
 8000e34:	f04f 33ff 	mov.w	r3, #4294967295
 8000e38:	9302      	str	r3, [sp, #8]
 8000e3a:	2306      	movs	r3, #6
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	2301      	movs	r3, #1
 8000e46:	2243      	movs	r2, #67	; 0x43
 8000e48:	21d0      	movs	r1, #208	; 0xd0
 8000e4a:	4818      	ldr	r0, [pc, #96]	; (8000eac <Self_Test+0x364>)
 8000e4c:	f001 feb2 	bl	8002bb4 <HAL_I2C_Mem_Read>
		gyro_self_testAVG[0] += (int16_t) (((int16_t)raw_data[0] << 8) | raw_data[1]);
 8000e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e52:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8000e56:	0212      	lsls	r2, r2, #8
 8000e58:	b211      	sxth	r1, r2
 8000e5a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8000e5e:	b212      	sxth	r2, r2
 8000e60:	430a      	orrs	r2, r1
 8000e62:	b212      	sxth	r2, r2
 8000e64:	4413      	add	r3, r2
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
		gyro_self_testAVG[1] += (int16_t) (((int16_t)raw_data[2] << 8) | raw_data[3]);
 8000e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e6a:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000e6e:	0212      	lsls	r2, r2, #8
 8000e70:	b211      	sxth	r1, r2
 8000e72:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000e76:	b212      	sxth	r2, r2
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	b212      	sxth	r2, r2
 8000e7c:	4413      	add	r3, r2
 8000e7e:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_self_testAVG[2] += (int16_t) (((int16_t)raw_data[4] << 8) | raw_data[5]);
 8000e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e82:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8000e86:	0212      	lsls	r2, r2, #8
 8000e88:	b211      	sxth	r1, r2
 8000e8a:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8000e8e:	b212      	sxth	r2, r2
 8000e90:	430a      	orrs	r2, r1
 8000e92:	b212      	sxth	r2, r2
 8000e94:	4413      	add	r3, r2
 8000e96:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int i=0; i<200; i++){
 8000e98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	667b      	str	r3, [r7, #100]	; 0x64
 8000e9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ea0:	2bc7      	cmp	r3, #199	; 0xc7
 8000ea2:	dd95      	ble.n	8000dd0 <Self_Test+0x288>
	}


	// Get the average of the 200 readings for self test
	for(int i=0; i<3; i++){
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	663b      	str	r3, [r7, #96]	; 0x60
 8000ea8:	e029      	b.n	8000efe <Self_Test+0x3b6>
 8000eaa:	bf00      	nop
 8000eac:	200000bc 	.word	0x200000bc
		accel_self_testAVG[i] /= 200;
 8000eb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	3370      	adds	r3, #112	; 0x70
 8000eb6:	443b      	add	r3, r7
 8000eb8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8000ebc:	4ae0      	ldr	r2, [pc, #896]	; (8001240 <Self_Test+0x6f8>)
 8000ebe:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec2:	1192      	asrs	r2, r2, #6
 8000ec4:	17db      	asrs	r3, r3, #31
 8000ec6:	1ad2      	subs	r2, r2, r3
 8000ec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	3370      	adds	r3, #112	; 0x70
 8000ece:	443b      	add	r3, r7
 8000ed0:	f843 2c54 	str.w	r2, [r3, #-84]
		gyro_self_testAVG[i] /= 200;
 8000ed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	3370      	adds	r3, #112	; 0x70
 8000eda:	443b      	add	r3, r7
 8000edc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000ee0:	4ad7      	ldr	r2, [pc, #860]	; (8001240 <Self_Test+0x6f8>)
 8000ee2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee6:	1192      	asrs	r2, r2, #6
 8000ee8:	17db      	asrs	r3, r3, #31
 8000eea:	1ad2      	subs	r2, r2, r3
 8000eec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	3370      	adds	r3, #112	; 0x70
 8000ef2:	443b      	add	r3, r7
 8000ef4:	f843 2c3c 	str.w	r2, [r3, #-60]
	for(int i=0; i<3; i++){
 8000ef8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000efa:	3301      	adds	r3, #1
 8000efc:	663b      	str	r3, [r7, #96]	; 0x60
 8000efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	ddd5      	ble.n	8000eb0 <Self_Test+0x368>
	}

	// Configure accel and gyro for normal operation
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, ACCEL_CONFIG, 1, (uint8_t*)(0x00), 1, HAL_MAX_DELAY);
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
 8000f08:	9302      	str	r3, [sp, #8]
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	221c      	movs	r2, #28
 8000f16:	21d0      	movs	r1, #208	; 0xd0
 8000f18:	48ca      	ldr	r0, [pc, #808]	; (8001244 <Self_Test+0x6fc>)
 8000f1a:	f001 fd37 	bl	800298c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, GYRO_CONFIG, 1, (uint8_t*)(0x00), 1, HAL_MAX_DELAY);
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	9302      	str	r3, [sp, #8]
 8000f24:	2301      	movs	r3, #1
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	221b      	movs	r2, #27
 8000f30:	21d0      	movs	r1, #208	; 0xd0
 8000f32:	48c4      	ldr	r0, [pc, #784]	; (8001244 <Self_Test+0x6fc>)
 8000f34:	f001 fd2a 	bl	800298c <HAL_I2C_Mem_Write>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, SELF_TEST_X_ACCEL, 1, &self_test[0], 1, HAL_MAX_DELAY);
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3c:	9302      	str	r3, [sp, #8]
 8000f3e:	2301      	movs	r3, #1
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	220d      	movs	r2, #13
 8000f4c:	21d0      	movs	r1, #208	; 0xd0
 8000f4e:	48bd      	ldr	r0, [pc, #756]	; (8001244 <Self_Test+0x6fc>)
 8000f50:	f001 fe30 	bl	8002bb4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, SELF_TEST_Y_ACCEL, 1, &self_test[1], 1, HAL_MAX_DELAY);
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	9302      	str	r3, [sp, #8]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f62:	3301      	adds	r3, #1
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2301      	movs	r3, #1
 8000f68:	220e      	movs	r2, #14
 8000f6a:	21d0      	movs	r1, #208	; 0xd0
 8000f6c:	48b5      	ldr	r0, [pc, #724]	; (8001244 <Self_Test+0x6fc>)
 8000f6e:	f001 fe21 	bl	8002bb4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, SELF_TEST_Z_ACCEL, 1, &self_test[2], 1, HAL_MAX_DELAY);
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	9302      	str	r3, [sp, #8]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f80:	3302      	adds	r3, #2
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2301      	movs	r3, #1
 8000f86:	220f      	movs	r2, #15
 8000f88:	21d0      	movs	r1, #208	; 0xd0
 8000f8a:	48ae      	ldr	r0, [pc, #696]	; (8001244 <Self_Test+0x6fc>)
 8000f8c:	f001 fe12 	bl	8002bb4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, SELF_TEST_X_GYRO, 1, &self_test[3], 1, HAL_MAX_DELAY);
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	9302      	str	r3, [sp, #8]
 8000f96:	2301      	movs	r3, #1
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f9e:	3303      	adds	r3, #3
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	21d0      	movs	r1, #208	; 0xd0
 8000fa8:	48a6      	ldr	r0, [pc, #664]	; (8001244 <Self_Test+0x6fc>)
 8000faa:	f001 fe03 	bl	8002bb4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, SELF_TEST_Y_GYRO, 1, &self_test[4], 1, HAL_MAX_DELAY);
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	21d0      	movs	r1, #208	; 0xd0
 8000fc6:	489f      	ldr	r0, [pc, #636]	; (8001244 <Self_Test+0x6fc>)
 8000fc8:	f001 fdf4 	bl	8002bb4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, SELF_TEST_Z_GYRO, 1, &self_test[5], 1, HAL_MAX_DELAY);
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fda:	3305      	adds	r3, #5
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	21d0      	movs	r1, #208	; 0xd0
 8000fe4:	4897      	ldr	r0, [pc, #604]	; (8001244 <Self_Test+0x6fc>)
 8000fe6:	f001 fde5 	bl	8002bb4 <HAL_I2C_Mem_Read>


	// Retrieve factory self-test value from self-test code reads
	factory_trim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)self_test[0] - 1.0) )); // FT[Xa] factory trim calculation
 8000fea:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000fee:	f640 223c 	movw	r2, #2620	; 0xa3c
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	ee07 3a90 	vmov	s15, r3
 8000ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffe:	ee17 0a90 	vmov	r0, s15
 8001002:	f7ff fa49 	bl	8000498 <__aeabi_f2d>
 8001006:	4604      	mov	r4, r0
 8001008:	460d      	mov	r5, r1
 800100a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001016:	ee17 0a90 	vmov	r0, s15
 800101a:	f7ff fa3d 	bl	8000498 <__aeabi_f2d>
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	4b89      	ldr	r3, [pc, #548]	; (8001248 <Self_Test+0x700>)
 8001024:	f7ff f8d8 	bl	80001d8 <__aeabi_dsub>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	ec43 2b17 	vmov	d7, r2, r3
 8001030:	eeb0 1a47 	vmov.f32	s2, s14
 8001034:	eef0 1a67 	vmov.f32	s3, s15
 8001038:	ed9f 0b7f 	vldr	d0, [pc, #508]	; 8001238 <Self_Test+0x6f0>
 800103c:	f004 fc28 	bl	8005890 <pow>
 8001040:	ec53 2b10 	vmov	r2, r3, d0
 8001044:	4620      	mov	r0, r4
 8001046:	4629      	mov	r1, r5
 8001048:	f7ff fa7e 	bl	8000548 <__aeabi_dmul>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fd28 	bl	8000aa8 <__aeabi_d2f>
 8001058:	4603      	mov	r3, r0
 800105a:	607b      	str	r3, [r7, #4]
	factory_trim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)self_test[1] - 1.0) )); // FT[Ya] factory trim calculation
 800105c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001060:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	ee07 3a90 	vmov	s15, r3
 800106c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001070:	ee17 0a90 	vmov	r0, s15
 8001074:	f7ff fa10 	bl	8000498 <__aeabi_f2d>
 8001078:	4604      	mov	r4, r0
 800107a:	460d      	mov	r5, r1
 800107c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001080:	ee07 3a90 	vmov	s15, r3
 8001084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001088:	ee17 0a90 	vmov	r0, s15
 800108c:	f7ff fa04 	bl	8000498 <__aeabi_f2d>
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	4b6c      	ldr	r3, [pc, #432]	; (8001248 <Self_Test+0x700>)
 8001096:	f7ff f89f 	bl	80001d8 <__aeabi_dsub>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	ec43 2b17 	vmov	d7, r2, r3
 80010a2:	eeb0 1a47 	vmov.f32	s2, s14
 80010a6:	eef0 1a67 	vmov.f32	s3, s15
 80010aa:	ed9f 0b63 	vldr	d0, [pc, #396]	; 8001238 <Self_Test+0x6f0>
 80010ae:	f004 fbef 	bl	8005890 <pow>
 80010b2:	ec53 2b10 	vmov	r2, r3, d0
 80010b6:	4620      	mov	r0, r4
 80010b8:	4629      	mov	r1, r5
 80010ba:	f7ff fa45 	bl	8000548 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fcef 	bl	8000aa8 <__aeabi_d2f>
 80010ca:	4603      	mov	r3, r0
 80010cc:	60bb      	str	r3, [r7, #8]
	factory_trim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)self_test[2] - 1.0) )); // FT[Za] factory trim calculation
 80010ce:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80010d2:	f640 223c 	movw	r2, #2620	; 0xa3c
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e2:	ee17 0a90 	vmov	r0, s15
 80010e6:	f7ff f9d7 	bl	8000498 <__aeabi_f2d>
 80010ea:	4604      	mov	r4, r0
 80010ec:	460d      	mov	r5, r1
 80010ee:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010fa:	ee17 0a90 	vmov	r0, s15
 80010fe:	f7ff f9cb 	bl	8000498 <__aeabi_f2d>
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	4b50      	ldr	r3, [pc, #320]	; (8001248 <Self_Test+0x700>)
 8001108:	f7ff f866 	bl	80001d8 <__aeabi_dsub>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	ec43 2b17 	vmov	d7, r2, r3
 8001114:	eeb0 1a47 	vmov.f32	s2, s14
 8001118:	eef0 1a67 	vmov.f32	s3, s15
 800111c:	ed9f 0b46 	vldr	d0, [pc, #280]	; 8001238 <Self_Test+0x6f0>
 8001120:	f004 fbb6 	bl	8005890 <pow>
 8001124:	ec53 2b10 	vmov	r2, r3, d0
 8001128:	4620      	mov	r0, r4
 800112a:	4629      	mov	r1, r5
 800112c:	f7ff fa0c 	bl	8000548 <__aeabi_dmul>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff fcb6 	bl	8000aa8 <__aeabi_d2f>
 800113c:	4603      	mov	r3, r0
 800113e:	60fb      	str	r3, [r7, #12]
	factory_trim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)self_test[3] - 1.0) )); // FT[Xg] factory trim calculation
 8001140:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001144:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	ee07 3a90 	vmov	s15, r3
 8001150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001154:	ee17 0a90 	vmov	r0, s15
 8001158:	f7ff f99e 	bl	8000498 <__aeabi_f2d>
 800115c:	4604      	mov	r4, r0
 800115e:	460d      	mov	r5, r1
 8001160:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800116c:	ee17 0a90 	vmov	r0, s15
 8001170:	f7ff f992 	bl	8000498 <__aeabi_f2d>
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	4b33      	ldr	r3, [pc, #204]	; (8001248 <Self_Test+0x700>)
 800117a:	f7ff f82d 	bl	80001d8 <__aeabi_dsub>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	ec43 2b17 	vmov	d7, r2, r3
 8001186:	eeb0 1a47 	vmov.f32	s2, s14
 800118a:	eef0 1a67 	vmov.f32	s3, s15
 800118e:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8001238 <Self_Test+0x6f0>
 8001192:	f004 fb7d 	bl	8005890 <pow>
 8001196:	ec53 2b10 	vmov	r2, r3, d0
 800119a:	4620      	mov	r0, r4
 800119c:	4629      	mov	r1, r5
 800119e:	f7ff f9d3 	bl	8000548 <__aeabi_dmul>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f7ff fc7d 	bl	8000aa8 <__aeabi_d2f>
 80011ae:	4603      	mov	r3, r0
 80011b0:	613b      	str	r3, [r7, #16]
	factory_trim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)self_test[4] - 1.0) )); // FT[Yg] factory trim calculation
 80011b2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80011b6:	f640 223c 	movw	r2, #2620	; 0xa3c
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c6:	ee17 0a90 	vmov	r0, s15
 80011ca:	f7ff f965 	bl	8000498 <__aeabi_f2d>
 80011ce:	4604      	mov	r4, r0
 80011d0:	460d      	mov	r5, r1
 80011d2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80011d6:	ee07 3a90 	vmov	s15, r3
 80011da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011de:	ee17 0a90 	vmov	r0, s15
 80011e2:	f7ff f959 	bl	8000498 <__aeabi_f2d>
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <Self_Test+0x700>)
 80011ec:	f7fe fff4 	bl	80001d8 <__aeabi_dsub>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	ec43 2b17 	vmov	d7, r2, r3
 80011f8:	eeb0 1a47 	vmov.f32	s2, s14
 80011fc:	eef0 1a67 	vmov.f32	s3, s15
 8001200:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8001238 <Self_Test+0x6f0>
 8001204:	f004 fb44 	bl	8005890 <pow>
 8001208:	ec53 2b10 	vmov	r2, r3, d0
 800120c:	4620      	mov	r0, r4
 800120e:	4629      	mov	r1, r5
 8001210:	f7ff f99a 	bl	8000548 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff fc44 	bl	8000aa8 <__aeabi_d2f>
 8001220:	4603      	mov	r3, r0
 8001222:	617b      	str	r3, [r7, #20]
	factory_trim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)self_test[5] - 1.0) )); // FT[Zg] factory trim calculation
 8001224:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001228:	f640 223c 	movw	r2, #2620	; 0xa3c
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	e00a      	b.n	800124c <Self_Test+0x704>
 8001236:	bf00      	nop
 8001238:	c28f5c29 	.word	0xc28f5c29
 800123c:	3ff028f5 	.word	0x3ff028f5
 8001240:	51eb851f 	.word	0x51eb851f
 8001244:	200000bc 	.word	0x200000bc
 8001248:	3ff00000 	.word	0x3ff00000
 800124c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001250:	ee17 0a90 	vmov	r0, s15
 8001254:	f7ff f920 	bl	8000498 <__aeabi_f2d>
 8001258:	4604      	mov	r4, r0
 800125a:	460d      	mov	r5, r1
 800125c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001260:	ee07 3a90 	vmov	s15, r3
 8001264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001268:	ee17 0a90 	vmov	r0, s15
 800126c:	f7ff f914 	bl	8000498 <__aeabi_f2d>
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	4b40      	ldr	r3, [pc, #256]	; (8001378 <Self_Test+0x830>)
 8001276:	f7fe ffaf 	bl	80001d8 <__aeabi_dsub>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	ec43 2b17 	vmov	d7, r2, r3
 8001282:	eeb0 1a47 	vmov.f32	s2, s14
 8001286:	eef0 1a67 	vmov.f32	s3, s15
 800128a:	ed9f 0b39 	vldr	d0, [pc, #228]	; 8001370 <Self_Test+0x828>
 800128e:	f004 faff 	bl	8005890 <pow>
 8001292:	ec53 2b10 	vmov	r2, r3, d0
 8001296:	4620      	mov	r0, r4
 8001298:	4629      	mov	r1, r5
 800129a:	f7ff f955 	bl	8000548 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fbff 	bl	8000aa8 <__aeabi_d2f>
 80012aa:	4603      	mov	r3, r0
 80012ac:	61bb      	str	r3, [r7, #24]


	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 80012ae:	2300      	movs	r3, #0
 80012b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012b2:	e054      	b.n	800135e <Self_Test+0x816>
		_self_test_result[i]   = 100.0f*((float)(accel_self_testAVG[i] - accelAVG[i]))/factory_trim[i] - 100.0f;   // Report percent differences
 80012b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	3370      	adds	r3, #112	; 0x70
 80012ba:	443b      	add	r3, r7
 80012bc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80012c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	3370      	adds	r3, #112	; 0x70
 80012c6:	443b      	add	r3, r7
 80012c8:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800137c <Self_Test+0x834>
 80012da:	ee67 6a87 	vmul.f32	s13, s15, s14
 80012de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	3370      	adds	r3, #112	; 0x70
 80012e4:	443b      	add	r3, r7
 80012e6:	3b6c      	subs	r3, #108	; 0x6c
 80012e8:	ed93 7a00 	vldr	s14, [r3]
 80012ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800137c <Self_Test+0x834>
 80012f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012f8:	4a21      	ldr	r2, [pc, #132]	; (8001380 <Self_Test+0x838>)
 80012fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	edc3 7a00 	vstr	s15, [r3]
		_self_test_result[i+3] = 100.0f*((float)(gyro_self_testAVG[i] - gyroAVG[i]))/factory_trim[i+3] - 100.0f; // Report percent differences
 8001304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	3370      	adds	r3, #112	; 0x70
 800130a:	443b      	add	r3, r7
 800130c:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8001310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	3370      	adds	r3, #112	; 0x70
 8001316:	443b      	add	r3, r7
 8001318:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001326:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800137c <Self_Test+0x834>
 800132a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800132e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001330:	3303      	adds	r3, #3
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	3370      	adds	r3, #112	; 0x70
 8001336:	443b      	add	r3, r7
 8001338:	3b6c      	subs	r3, #108	; 0x6c
 800133a:	ed93 7a00 	vldr	s14, [r3]
 800133e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001344:	3303      	adds	r3, #3
 8001346:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800137c <Self_Test+0x834>
 800134a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800134e:	4a0c      	ldr	r2, [pc, #48]	; (8001380 <Self_Test+0x838>)
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; i++) {
 8001358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800135a:	3301      	adds	r3, #1
 800135c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800135e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001360:	2b02      	cmp	r3, #2
 8001362:	dda7      	ble.n	80012b4 <Self_Test+0x76c>
	}
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3770      	adds	r7, #112	; 0x70
 800136a:	46bd      	mov	sp, r7
 800136c:	bdb0      	pop	{r4, r5, r7, pc}
 800136e:	bf00      	nop
 8001370:	c28f5c29 	.word	0xc28f5c29
 8001374:	3ff028f5 	.word	0x3ff028f5
 8001378:	3ff00000 	.word	0x3ff00000
 800137c:	42c80000 	.word	0x42c80000
 8001380:	2000008c 	.word	0x2000008c

08001384 <Calibrate_MPU9250>:

void Calibrate_MPU9250(){
 8001384:	b580      	push	{r7, lr}
 8001386:	b09a      	sub	sp, #104	; 0x68
 8001388:	af04      	add	r7, sp, #16
	uint8_t raw_data[12]; // holds gyro and accel x,y,z data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
 800138a:	2300      	movs	r3, #0
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800138e:	2300      	movs	r3, #0
 8001390:	633b      	str	r3, [r7, #48]	; 0x30
 8001392:	2300      	movs	r3, #0
 8001394:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t accel_bias[3] = {0, 0, 0};
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
 800139e:	2300      	movs	r3, #0
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28

	// reset device
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, PWR_MGMT_1, 1, (uint8_t*)(0x80), 1, HAL_MAX_DELAY);
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	9302      	str	r3, [sp, #8]
 80013a8:	2301      	movs	r3, #1
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2301      	movs	r3, #1
 80013b2:	226b      	movs	r2, #107	; 0x6b
 80013b4:	21d0      	movs	r1, #208	; 0xd0
 80013b6:	487e      	ldr	r0, [pc, #504]	; (80015b0 <Calibrate_MPU9250+0x22c>)
 80013b8:	f001 fae8 	bl	800298c <HAL_I2C_Mem_Write>
	HAL_Delay(100); // Wait till the the device resets
 80013bc:	2064      	movs	r0, #100	; 0x64
 80013be:	f000 ffc9 	bl	8002354 <HAL_Delay>


	// Get stable time source
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, PWR_MGMT_1, 1, (uint8_t*)(0x01), 1, HAL_MAX_DELAY);
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	2301      	movs	r3, #1
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	2301      	movs	r3, #1
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2301      	movs	r3, #1
 80013d2:	226b      	movs	r2, #107	; 0x6b
 80013d4:	21d0      	movs	r1, #208	; 0xd0
 80013d6:	4876      	ldr	r0, [pc, #472]	; (80015b0 <Calibrate_MPU9250+0x22c>)
 80013d8:	f001 fad8 	bl	800298c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, PWR_MGMT_2, 1, (uint8_t*)(0x00), 1, HAL_MAX_DELAY);
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295
 80013e0:	9302      	str	r3, [sp, #8]
 80013e2:	2301      	movs	r3, #1
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	2300      	movs	r3, #0
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2301      	movs	r3, #1
 80013ec:	226c      	movs	r2, #108	; 0x6c
 80013ee:	21d0      	movs	r1, #208	; 0xd0
 80013f0:	486f      	ldr	r0, [pc, #444]	; (80015b0 <Calibrate_MPU9250+0x22c>)
 80013f2:	f001 facb 	bl	800298c <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 80013f6:	20c8      	movs	r0, #200	; 0xc8
 80013f8:	f000 ffac 	bl	8002354 <HAL_Delay>

	// Configure for bias
	// Disable all interrupts
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, INT_ENABLE, 1, (uint8_t*)(0x00), 1, HAL_MAX_DELAY);
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	9302      	str	r3, [sp, #8]
 8001402:	2301      	movs	r3, #1
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	2300      	movs	r3, #0
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	2301      	movs	r3, #1
 800140c:	2238      	movs	r2, #56	; 0x38
 800140e:	21d0      	movs	r1, #208	; 0xd0
 8001410:	4867      	ldr	r0, [pc, #412]	; (80015b0 <Calibrate_MPU9250+0x22c>)
 8001412:	f001 fabb 	bl	800298c <HAL_I2C_Mem_Write>
	// Disable FIFO
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, FIFO_EN, 1, (uint8_t*)(0x00), 1, HAL_MAX_DELAY);
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	9302      	str	r3, [sp, #8]
 800141c:	2301      	movs	r3, #1
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	2300      	movs	r3, #0
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2301      	movs	r3, #1
 8001426:	2223      	movs	r2, #35	; 0x23
 8001428:	21d0      	movs	r1, #208	; 0xd0
 800142a:	4861      	ldr	r0, [pc, #388]	; (80015b0 <Calibrate_MPU9250+0x22c>)
 800142c:	f001 faae 	bl	800298c <HAL_I2C_Mem_Write>
	// Turn on internal clock
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, PWR_MGMT_1, 1, (uint8_t*)(0x00), 1, HAL_MAX_DELAY);
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	9302      	str	r3, [sp, #8]
 8001436:	2301      	movs	r3, #1
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	2300      	movs	r3, #0
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2301      	movs	r3, #1
 8001440:	226b      	movs	r2, #107	; 0x6b
 8001442:	21d0      	movs	r1, #208	; 0xd0
 8001444:	485a      	ldr	r0, [pc, #360]	; (80015b0 <Calibrate_MPU9250+0x22c>)
 8001446:	f001 faa1 	bl	800298c <HAL_I2C_Mem_Write>
	// Disable i2c master
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, I2C_MST_CTRL, 1, (uint8_t*)(0x00), 1, HAL_MAX_DELAY);
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	9302      	str	r3, [sp, #8]
 8001450:	2301      	movs	r3, #1
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	2300      	movs	r3, #0
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2301      	movs	r3, #1
 800145a:	2224      	movs	r2, #36	; 0x24
 800145c:	21d0      	movs	r1, #208	; 0xd0
 800145e:	4854      	ldr	r0, [pc, #336]	; (80015b0 <Calibrate_MPU9250+0x22c>)
 8001460:	f001 fa94 	bl	800298c <HAL_I2C_Mem_Write>
	// Disable FIFO and i2c master modes
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, USER_CTRL, 1, (uint8_t*)(0x00), 1, HAL_MAX_DELAY);
 8001464:	f04f 33ff 	mov.w	r3, #4294967295
 8001468:	9302      	str	r3, [sp, #8]
 800146a:	2301      	movs	r3, #1
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	2300      	movs	r3, #0
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2301      	movs	r3, #1
 8001474:	226a      	movs	r2, #106	; 0x6a
 8001476:	21d0      	movs	r1, #208	; 0xd0
 8001478:	484d      	ldr	r0, [pc, #308]	; (80015b0 <Calibrate_MPU9250+0x22c>)
 800147a:	f001 fa87 	bl	800298c <HAL_I2C_Mem_Write>
	// Reset FIFO and DMP
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, USER_CTRL, 1, (uint8_t*)(0x0C), 1, HAL_MAX_DELAY);
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	9302      	str	r3, [sp, #8]
 8001484:	2301      	movs	r3, #1
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	230c      	movs	r3, #12
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2301      	movs	r3, #1
 800148e:	226a      	movs	r2, #106	; 0x6a
 8001490:	21d0      	movs	r1, #208	; 0xd0
 8001492:	4847      	ldr	r0, [pc, #284]	; (80015b0 <Calibrate_MPU9250+0x22c>)
 8001494:	f001 fa7a 	bl	800298c <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8001498:	2064      	movs	r0, #100	; 0x64
 800149a:	f000 ff5b 	bl	8002354 <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	// Set low-pass filter to 188Hz
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, CONFIG, 1, (uint8_t*)(0x01), 1, HAL_MAX_DELAY);
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	9302      	str	r3, [sp, #8]
 80014a4:	2301      	movs	r3, #1
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	2301      	movs	r3, #1
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	221a      	movs	r2, #26
 80014b0:	21d0      	movs	r1, #208	; 0xd0
 80014b2:	483f      	ldr	r0, [pc, #252]	; (80015b0 <Calibrate_MPU9250+0x22c>)
 80014b4:	f001 fa6a 	bl	800298c <HAL_I2C_Mem_Write>
	// Set sample rate to 1kHz
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, SMPLRT_DIV, 1, (uint8_t*)(0x00), 1, HAL_MAX_DELAY);
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
 80014bc:	9302      	str	r3, [sp, #8]
 80014be:	2301      	movs	r3, #1
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	2300      	movs	r3, #0
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	2301      	movs	r3, #1
 80014c8:	2219      	movs	r2, #25
 80014ca:	21d0      	movs	r1, #208	; 0xd0
 80014cc:	4838      	ldr	r0, [pc, #224]	; (80015b0 <Calibrate_MPU9250+0x22c>)
 80014ce:	f001 fa5d 	bl	800298c <HAL_I2C_Mem_Write>
	// Set gyro full-scale to 250 degrees per second
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, GYRO_CONFIG, 1, (uint8_t*)(0x00), 1, HAL_MAX_DELAY);
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
 80014d6:	9302      	str	r3, [sp, #8]
 80014d8:	2301      	movs	r3, #1
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	2300      	movs	r3, #0
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	2301      	movs	r3, #1
 80014e2:	221b      	movs	r2, #27
 80014e4:	21d0      	movs	r1, #208	; 0xd0
 80014e6:	4832      	ldr	r0, [pc, #200]	; (80015b0 <Calibrate_MPU9250+0x22c>)
 80014e8:	f001 fa50 	bl	800298c <HAL_I2C_Mem_Write>
	// Set accelerometer full-scale to 2 g
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, ACCEL_CONFIG, 1, (uint8_t*)(0x00), 1, HAL_MAX_DELAY);
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295
 80014f0:	9302      	str	r3, [sp, #8]
 80014f2:	2301      	movs	r3, #1
 80014f4:	9301      	str	r3, [sp, #4]
 80014f6:	2300      	movs	r3, #0
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	2301      	movs	r3, #1
 80014fc:	221c      	movs	r2, #28
 80014fe:	21d0      	movs	r1, #208	; 0xd0
 8001500:	482b      	ldr	r0, [pc, #172]	; (80015b0 <Calibrate_MPU9250+0x22c>)
 8001502:	f001 fa43 	bl	800298c <HAL_I2C_Mem_Write>

	uint16_t gyro_sensitivity = 131; // 131 LSB/degrees/sec
 8001506:	2383      	movs	r3, #131	; 0x83
 8001508:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t accel_sensitivity = 16384; // 16384 LSB/g
 800150c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001510:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	// Enable FIFO
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, USER_CTRL, 1, (uint8_t*)(0x40), 1, HAL_MAX_DELAY);
 8001514:	f04f 33ff 	mov.w	r3, #4294967295
 8001518:	9302      	str	r3, [sp, #8]
 800151a:	2301      	movs	r3, #1
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	2340      	movs	r3, #64	; 0x40
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	2301      	movs	r3, #1
 8001524:	226a      	movs	r2, #106	; 0x6a
 8001526:	21d0      	movs	r1, #208	; 0xd0
 8001528:	4821      	ldr	r0, [pc, #132]	; (80015b0 <Calibrate_MPU9250+0x22c>)
 800152a:	f001 fa2f 	bl	800298c <HAL_I2C_Mem_Write>
	// Enable gyro and accelerometer sensors for FIFO
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, FIFO_EN, 1, (uint8_t*)(0x78), 1, HAL_MAX_DELAY);
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	2301      	movs	r3, #1
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	2378      	movs	r3, #120	; 0x78
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2301      	movs	r3, #1
 800153e:	2223      	movs	r2, #35	; 0x23
 8001540:	21d0      	movs	r1, #208	; 0xd0
 8001542:	481b      	ldr	r0, [pc, #108]	; (80015b0 <Calibrate_MPU9250+0x22c>)
 8001544:	f001 fa22 	bl	800298c <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8001548:	2028      	movs	r0, #40	; 0x28
 800154a:	f000 ff03 	bl	8002354 <HAL_Delay>


	// At end of sample accumulation, turn off FIFO sensor read
	// Disable gyro and accel sensors for FIFO
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, FIFO_EN, 1, (uint8_t*)(0x00), 1, HAL_MAX_DELAY);
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
 8001552:	9302      	str	r3, [sp, #8]
 8001554:	2301      	movs	r3, #1
 8001556:	9301      	str	r3, [sp, #4]
 8001558:	2300      	movs	r3, #0
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	2301      	movs	r3, #1
 800155e:	2223      	movs	r2, #35	; 0x23
 8001560:	21d0      	movs	r1, #208	; 0xd0
 8001562:	4813      	ldr	r0, [pc, #76]	; (80015b0 <Calibrate_MPU9250+0x22c>)
 8001564:	f001 fa12 	bl	800298c <HAL_I2C_Mem_Write>
	// Read FIFO sample count
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, FIFO_COUNTH, 1, &raw_data[0], 6, HAL_MAX_DELAY);
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
 800156c:	9302      	str	r3, [sp, #8]
 800156e:	2306      	movs	r3, #6
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2301      	movs	r3, #1
 800157a:	2272      	movs	r2, #114	; 0x72
 800157c:	21d0      	movs	r1, #208	; 0xd0
 800157e:	480c      	ldr	r0, [pc, #48]	; (80015b0 <Calibrate_MPU9250+0x22c>)
 8001580:	f001 fb18 	bl	8002bb4 <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)raw_data[0] << 8) | raw_data[1];
 8001584:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	b21a      	sxth	r2, r3
 800158c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001590:	b21b      	sxth	r3, r3
 8001592:	4313      	orrs	r3, r2
 8001594:	b21b      	sxth	r3, r3
 8001596:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	packet_count = (uint16_t)(fifo_count / 12); // How many sets of full gyro and accelerometer data for averaging
 800159a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <Calibrate_MPU9250+0x230>)
 80015a0:	fba2 2303 	umull	r2, r3, r2, r3
 80015a4:	08db      	lsrs	r3, r3, #3
 80015a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	for (int i=0; i<packet_count; i++){
 80015aa:	2300      	movs	r3, #0
 80015ac:	653b      	str	r3, [r7, #80]	; 0x50
 80015ae:	e07a      	b.n	80016a6 <Calibrate_MPU9250+0x322>
 80015b0:	200000bc 	.word	0x200000bc
 80015b4:	aaaaaaab 	.word	0xaaaaaaab
		int16_t accel_temp[3] = {0, 0, 0};
 80015b8:	2300      	movs	r3, #0
 80015ba:	813b      	strh	r3, [r7, #8]
 80015bc:	2300      	movs	r3, #0
 80015be:	817b      	strh	r3, [r7, #10]
 80015c0:	2300      	movs	r3, #0
 80015c2:	81bb      	strh	r3, [r7, #12]
		int16_t gyro_temp[3] = {0, 0, 0};
 80015c4:	2300      	movs	r3, #0
 80015c6:	803b      	strh	r3, [r7, #0]
 80015c8:	2300      	movs	r3, #0
 80015ca:	807b      	strh	r3, [r7, #2]
 80015cc:	2300      	movs	r3, #0
 80015ce:	80bb      	strh	r3, [r7, #4]

		HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, FIFO_R_W, 1, &raw_data[0], 12, HAL_MAX_DELAY);
 80015d0:	f04f 33ff 	mov.w	r3, #4294967295
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	230c      	movs	r3, #12
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	2274      	movs	r2, #116	; 0x74
 80015e4:	21d0      	movs	r1, #208	; 0xd0
 80015e6:	4849      	ldr	r0, [pc, #292]	; (800170c <Calibrate_MPU9250+0x388>)
 80015e8:	f001 fae4 	bl	8002bb4 <HAL_I2C_Mem_Read>
		accel_temp[0] = (int16_t) (((int16_t)raw_data[0] << 8) | raw_data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 80015ec:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	813b      	strh	r3, [r7, #8]
		accel_temp[1] = (int16_t) (((int16_t)raw_data[2] << 8) | raw_data[3]  ) ;
 8001600:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001604:	021b      	lsls	r3, r3, #8
 8001606:	b21a      	sxth	r2, r3
 8001608:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800160c:	b21b      	sxth	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	b21b      	sxth	r3, r3
 8001612:	817b      	strh	r3, [r7, #10]
		accel_temp[2] = (int16_t) (((int16_t)raw_data[4] << 8) | raw_data[5]  ) ;
 8001614:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001618:	021b      	lsls	r3, r3, #8
 800161a:	b21a      	sxth	r2, r3
 800161c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001620:	b21b      	sxth	r3, r3
 8001622:	4313      	orrs	r3, r2
 8001624:	b21b      	sxth	r3, r3
 8001626:	81bb      	strh	r3, [r7, #12]
		gyro_temp[0]  = (int16_t) (((int16_t)raw_data[6] << 8) | raw_data[7]  ) ;
 8001628:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	b21a      	sxth	r2, r3
 8001630:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001634:	b21b      	sxth	r3, r3
 8001636:	4313      	orrs	r3, r2
 8001638:	b21b      	sxth	r3, r3
 800163a:	803b      	strh	r3, [r7, #0]
		gyro_temp[1]  = (int16_t) (((int16_t)raw_data[8] << 8) | raw_data[9]  ) ;
 800163c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	b21a      	sxth	r2, r3
 8001644:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001648:	b21b      	sxth	r3, r3
 800164a:	4313      	orrs	r3, r2
 800164c:	b21b      	sxth	r3, r3
 800164e:	807b      	strh	r3, [r7, #2]
		gyro_temp[2]  = (int16_t) (((int16_t)raw_data[10] << 8) | raw_data[11]) ;
 8001650:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	b21a      	sxth	r2, r3
 8001658:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800165c:	b21b      	sxth	r3, r3
 800165e:	4313      	orrs	r3, r2
 8001660:	b21b      	sxth	r3, r3
 8001662:	80bb      	strh	r3, [r7, #4]

		// Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800166a:	4413      	add	r3, r2
 800166c:	623b      	str	r3, [r7, #32]
		accel_bias[1] += (int32_t) accel_temp[1];
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001674:	4413      	add	r3, r2
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
		accel_bias[2] += (int32_t) accel_temp[2];
 8001678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8001682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001684:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001688:	4413      	add	r3, r2
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 800168c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001692:	4413      	add	r3, r2
 8001694:	633b      	str	r3, [r7, #48]	; 0x30
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8001696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001698:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=0; i<packet_count; i++){
 80016a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016a2:	3301      	adds	r3, #1
 80016a4:	653b      	str	r3, [r7, #80]	; 0x50
 80016a6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80016aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80016ac:	429a      	cmp	r2, r3
 80016ae:	db83      	blt.n	80015b8 <Calibrate_MPU9250+0x234>
	}

	// Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 80016b0:	6a3a      	ldr	r2, [r7, #32]
 80016b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80016b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ba:	623b      	str	r3, [r7, #32]
	accel_bias[1] /= (int32_t) packet_count;
 80016bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80016c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias[2] /= (int32_t) packet_count;
 80016c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80016ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
	gyro_bias[0]  /= (int32_t) packet_count;
 80016d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80016da:	fb92 f3f3 	sdiv	r3, r2, r3
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
	gyro_bias[1]  /= (int32_t) packet_count;
 80016e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80016e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ea:	633b      	str	r3, [r7, #48]	; 0x30
	gyro_bias[2]  /= (int32_t) packet_count;
 80016ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80016f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34

	// Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accel_sensitivity;}
 80016f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	dd08      	ble.n	8001710 <Calibrate_MPU9250+0x38c>
 80016fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001700:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
 8001708:	e007      	b.n	800171a <Calibrate_MPU9250+0x396>
 800170a:	bf00      	nop
 800170c:	200000bc 	.word	0x200000bc
	else {accel_bias[2] += (int32_t) accel_sensitivity;}
 8001710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001712:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001716:	4413      	add	r3, r2
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	raw_data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 800171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171c:	425b      	negs	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	da00      	bge.n	8001724 <Calibrate_MPU9250+0x3a0>
 8001722:	3303      	adds	r3, #3
 8001724:	109b      	asrs	r3, r3, #2
 8001726:	121b      	asrs	r3, r3, #8
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	raw_data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 800172e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001730:	425b      	negs	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	da00      	bge.n	8001738 <Calibrate_MPU9250+0x3b4>
 8001736:	3303      	adds	r3, #3
 8001738:	109b      	asrs	r3, r3, #2
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	raw_data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8001740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001742:	425b      	negs	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	da00      	bge.n	800174a <Calibrate_MPU9250+0x3c6>
 8001748:	3303      	adds	r3, #3
 800174a:	109b      	asrs	r3, r3, #2
 800174c:	121b      	asrs	r3, r3, #8
 800174e:	b2db      	uxtb	r3, r3
 8001750:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	raw_data[3] = (-gyro_bias[1]/4)       & 0xFF;
 8001754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001756:	425b      	negs	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	da00      	bge.n	800175e <Calibrate_MPU9250+0x3da>
 800175c:	3303      	adds	r3, #3
 800175e:	109b      	asrs	r3, r3, #2
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	raw_data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8001766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001768:	425b      	negs	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	da00      	bge.n	8001770 <Calibrate_MPU9250+0x3ec>
 800176e:	3303      	adds	r3, #3
 8001770:	109b      	asrs	r3, r3, #2
 8001772:	121b      	asrs	r3, r3, #8
 8001774:	b2db      	uxtb	r3, r3
 8001776:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	raw_data[5] = (-gyro_bias[2]/4)       & 0xFF;
 800177a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177c:	425b      	negs	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	da00      	bge.n	8001784 <Calibrate_MPU9250+0x400>
 8001782:	3303      	adds	r3, #3
 8001784:	109b      	asrs	r3, r3, #2
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	// Push gyro biases to hardware registers
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, XG_OFFSET_H, 1, &raw_data[0], 1, HAL_MAX_DELAY);
 800178c:	f04f 33ff 	mov.w	r3, #4294967295
 8001790:	9302      	str	r3, [sp, #8]
 8001792:	2301      	movs	r3, #1
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2301      	movs	r3, #1
 800179e:	2213      	movs	r2, #19
 80017a0:	21d0      	movs	r1, #208	; 0xd0
 80017a2:	48b6      	ldr	r0, [pc, #728]	; (8001a7c <Calibrate_MPU9250+0x6f8>)
 80017a4:	f001 f8f2 	bl	800298c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, XG_OFFSET_L, 1, &raw_data[1], 1, HAL_MAX_DELAY);
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ac:	9302      	str	r3, [sp, #8]
 80017ae:	2301      	movs	r3, #1
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017b6:	3301      	adds	r3, #1
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2301      	movs	r3, #1
 80017bc:	2214      	movs	r2, #20
 80017be:	21d0      	movs	r1, #208	; 0xd0
 80017c0:	48ae      	ldr	r0, [pc, #696]	; (8001a7c <Calibrate_MPU9250+0x6f8>)
 80017c2:	f001 f8e3 	bl	800298c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, YG_OFFSET_H, 1, &raw_data[2], 1, HAL_MAX_DELAY);
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ca:	9302      	str	r3, [sp, #8]
 80017cc:	2301      	movs	r3, #1
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017d4:	3302      	adds	r3, #2
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2301      	movs	r3, #1
 80017da:	2215      	movs	r2, #21
 80017dc:	21d0      	movs	r1, #208	; 0xd0
 80017de:	48a7      	ldr	r0, [pc, #668]	; (8001a7c <Calibrate_MPU9250+0x6f8>)
 80017e0:	f001 f8d4 	bl	800298c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, YG_OFFSET_L, 1, &raw_data[3], 1, HAL_MAX_DELAY);
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
 80017e8:	9302      	str	r3, [sp, #8]
 80017ea:	2301      	movs	r3, #1
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017f2:	3303      	adds	r3, #3
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2301      	movs	r3, #1
 80017f8:	2216      	movs	r2, #22
 80017fa:	21d0      	movs	r1, #208	; 0xd0
 80017fc:	489f      	ldr	r0, [pc, #636]	; (8001a7c <Calibrate_MPU9250+0x6f8>)
 80017fe:	f001 f8c5 	bl	800298c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, ZG_OFFSET_H, 1, &raw_data[4], 1, HAL_MAX_DELAY);
 8001802:	f04f 33ff 	mov.w	r3, #4294967295
 8001806:	9302      	str	r3, [sp, #8]
 8001808:	2301      	movs	r3, #1
 800180a:	9301      	str	r3, [sp, #4]
 800180c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001810:	3304      	adds	r3, #4
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2301      	movs	r3, #1
 8001816:	2217      	movs	r2, #23
 8001818:	21d0      	movs	r1, #208	; 0xd0
 800181a:	4898      	ldr	r0, [pc, #608]	; (8001a7c <Calibrate_MPU9250+0x6f8>)
 800181c:	f001 f8b6 	bl	800298c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, ZG_OFFSET_L, 1, &raw_data[5], 1, HAL_MAX_DELAY);
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
 8001824:	9302      	str	r3, [sp, #8]
 8001826:	2301      	movs	r3, #1
 8001828:	9301      	str	r3, [sp, #4]
 800182a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800182e:	3305      	adds	r3, #5
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2301      	movs	r3, #1
 8001834:	2218      	movs	r2, #24
 8001836:	21d0      	movs	r1, #208	; 0xd0
 8001838:	4890      	ldr	r0, [pc, #576]	; (8001a7c <Calibrate_MPU9250+0x6f8>)
 800183a:	f001 f8a7 	bl	800298c <HAL_I2C_Mem_Write>


	// Store scaled gyro bias
	_gyro_bias[0] = (float) gyro_bias[0]/(float) gyro_sensitivity;
 800183e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001840:	ee07 3a90 	vmov	s15, r3
 8001844:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001848:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001858:	4b89      	ldr	r3, [pc, #548]	; (8001a80 <Calibrate_MPU9250+0x6fc>)
 800185a:	edc3 7a00 	vstr	s15, [r3]
	_gyro_bias[1] = (float) gyro_bias[1]/(float) gyro_sensitivity;
 800185e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001860:	ee07 3a90 	vmov	s15, r3
 8001864:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001868:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800186c:	ee07 3a90 	vmov	s15, r3
 8001870:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001878:	4b81      	ldr	r3, [pc, #516]	; (8001a80 <Calibrate_MPU9250+0x6fc>)
 800187a:	edc3 7a01 	vstr	s15, [r3, #4]
	_gyro_bias[2] = (float) gyro_bias[2]/(float) gyro_sensitivity;
 800187e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001888:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001898:	4b79      	ldr	r3, [pc, #484]	; (8001a80 <Calibrate_MPU9250+0x6fc>)
 800189a:	edc3 7a02 	vstr	s15, [r3, #8]
	// Construct the accelerometer biases for push to the hardware accelerometer bias registers. These registers contain
	// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.
	int32_t accel_bias_reg[3] = {0, 0, 0};
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, XA_OFFSET_H, 1, &raw_data[0], 2, HAL_MAX_DELAY);
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	9302      	str	r3, [sp, #8]
 80018b0:	2302      	movs	r3, #2
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2301      	movs	r3, #1
 80018bc:	2277      	movs	r2, #119	; 0x77
 80018be:	21d0      	movs	r1, #208	; 0xd0
 80018c0:	486e      	ldr	r0, [pc, #440]	; (8001a7c <Calibrate_MPU9250+0x6f8>)
 80018c2:	f001 f977 	bl	8002bb4 <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)raw_data[0] << 8) | raw_data[1]);
 80018c6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80018d0:	4313      	orrs	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, YA_OFFSET_H, 1, &raw_data[0], 2, HAL_MAX_DELAY);
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
 80018d8:	9302      	str	r3, [sp, #8]
 80018da:	2302      	movs	r3, #2
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2301      	movs	r3, #1
 80018e6:	227a      	movs	r2, #122	; 0x7a
 80018e8:	21d0      	movs	r1, #208	; 0xd0
 80018ea:	4864      	ldr	r0, [pc, #400]	; (8001a7c <Calibrate_MPU9250+0x6f8>)
 80018ec:	f001 f962 	bl	8002bb4 <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)raw_data[0] << 8) | raw_data[1]);
 80018f0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &raw_data[0], 2, HAL_MAX_DELAY);
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	2302      	movs	r3, #2
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2301      	movs	r3, #1
 8001910:	227d      	movs	r2, #125	; 0x7d
 8001912:	21d0      	movs	r1, #208	; 0xd0
 8001914:	4859      	ldr	r0, [pc, #356]	; (8001a7c <Calibrate_MPU9250+0x6f8>)
 8001916:	f001 f94d 	bl	8002bb4 <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)raw_data[0] << 8) | raw_data[1]);
 800191a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8001924:	4313      	orrs	r3, r2
 8001926:	61fb      	str	r3, [r7, #28]

	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8001928:	2301      	movs	r3, #1
 800192a:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 800192c:	4a55      	ldr	r2, [pc, #340]	; (8001a84 <Calibrate_MPU9250+0x700>)
 800192e:	f107 0310 	add.w	r3, r7, #16
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	4611      	mov	r1, r2
 8001936:	8019      	strh	r1, [r3, #0]
 8001938:	3302      	adds	r3, #2
 800193a:	0c12      	lsrs	r2, r2, #16
 800193c:	701a      	strb	r2, [r3, #0]


	for(ii = 0; ii < 3; ii++) {
 800193e:	2300      	movs	r3, #0
 8001940:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001944:	e017      	b.n	8001976 <Calibrate_MPU9250+0x5f2>
		// If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 8001946:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	3358      	adds	r3, #88	; 0x58
 800194e:	443b      	add	r3, r7
 8001950:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8001954:	461a      	mov	r2, r3
 8001956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001958:	4013      	ands	r3, r2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d006      	beq.n	800196c <Calibrate_MPU9250+0x5e8>
 800195e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001962:	3358      	adds	r3, #88	; 0x58
 8001964:	443b      	add	r3, r7
 8001966:	2201      	movs	r2, #1
 8001968:	f803 2c48 	strb.w	r2, [r3, #-72]
	for(ii = 0; ii < 3; ii++) {
 800196c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001970:	3301      	adds	r3, #1
 8001972:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001976:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800197a:	2b02      	cmp	r3, #2
 800197c:	d9e3      	bls.n	8001946 <Calibrate_MPU9250+0x5c2>
	}

	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	2b00      	cmp	r3, #0
 8001984:	da00      	bge.n	8001988 <Calibrate_MPU9250+0x604>
 8001986:	3307      	adds	r3, #7
 8001988:	10db      	asrs	r3, r3, #3
 800198a:	425b      	negs	r3, r3
 800198c:	4413      	add	r3, r2
 800198e:	617b      	str	r3, [r7, #20]
	accel_bias_reg[1] -= (accel_bias[1]/8);
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	2b00      	cmp	r3, #0
 8001996:	da00      	bge.n	800199a <Calibrate_MPU9250+0x616>
 8001998:	3307      	adds	r3, #7
 800199a:	10db      	asrs	r3, r3, #3
 800199c:	425b      	negs	r3, r3
 800199e:	4413      	add	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
	accel_bias_reg[2] -= (accel_bias[2]/8);
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	da00      	bge.n	80019ac <Calibrate_MPU9250+0x628>
 80019aa:	3307      	adds	r3, #7
 80019ac:	10db      	asrs	r3, r3, #3
 80019ae:	425b      	negs	r3, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	61fb      	str	r3, [r7, #28]

	raw_data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	121b      	asrs	r3, r3, #8
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	raw_data[1] = (accel_bias_reg[0])      & 0xFF;
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	raw_data[1] = raw_data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80019c6:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80019ca:	7c3b      	ldrb	r3, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	raw_data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	121b      	asrs	r3, r3, #8
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	raw_data[3] = (accel_bias_reg[1])      & 0xFF;
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	raw_data[3] = raw_data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80019e6:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80019ea:	7c7b      	ldrb	r3, [r7, #17]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	raw_data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	121b      	asrs	r3, r3, #8
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	raw_data[5] = (accel_bias_reg[2])      & 0xFF;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	raw_data[5] = raw_data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001a06:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001a0a:	7cbb      	ldrb	r3, [r7, #18]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	// Output scaled accelerometer biases for display in the main program
	_accel_bias[0] = (float)accel_bias[0]/(float) accel_sensitivity;
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a1e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001a22:	ee07 3a90 	vmov	s15, r3
 8001a26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <Calibrate_MPU9250+0x704>)
 8001a30:	edc3 7a00 	vstr	s15, [r3]
	_accel_bias[1] = (float)accel_bias[1]/(float) accel_sensitivity;
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a3e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <Calibrate_MPU9250+0x704>)
 8001a50:	edc3 7a01 	vstr	s15, [r3, #4]
	_accel_bias[2] = (float)accel_bias[2]/(float) accel_sensitivity;
 8001a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a56:	ee07 3a90 	vmov	s15, r3
 8001a5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a5e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001a62:	ee07 3a90 	vmov	s15, r3
 8001a66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <Calibrate_MPU9250+0x704>)
 8001a70:	edc3 7a02 	vstr	s15, [r3, #8]


}
 8001a74:	bf00      	nop
 8001a76:	3758      	adds	r7, #88	; 0x58
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200000bc 	.word	0x200000bc
 8001a80:	200000a4 	.word	0x200000a4
 8001a84:	080066e8 	.word	0x080066e8
 8001a88:	200000b0 	.word	0x200000b0

08001a8c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15 (JTDI)   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <MX_GPIO_Init+0xb0>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	4a25      	ldr	r2, [pc, #148]	; (8001b3c <MX_GPIO_Init+0xb0>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aae:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <MX_GPIO_Init+0xb0>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <MX_GPIO_Init+0xb0>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <MX_GPIO_Init+0xb0>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <MX_GPIO_Init+0xb0>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <MX_GPIO_Init+0xb0>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	4a19      	ldr	r2, [pc, #100]	; (8001b3c <MX_GPIO_Init+0xb0>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <MX_GPIO_Init+0xb0>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2108      	movs	r1, #8
 8001aee:	4814      	ldr	r0, [pc, #80]	; (8001b40 <MX_GPIO_Init+0xb4>)
 8001af0:	f000 fea4 	bl	800283c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001af4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001af8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b02:	2303      	movs	r3, #3
 8001b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001b06:	2303      	movs	r3, #3
 8001b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001b0a:	f107 030c 	add.w	r3, r7, #12
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b14:	f000 fd28 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001b18:	2308      	movs	r3, #8
 8001b1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4804      	ldr	r0, [pc, #16]	; (8001b40 <MX_GPIO_Init+0xb4>)
 8001b30:	f000 fd1a 	bl	8002568 <HAL_GPIO_Init>

}
 8001b34:	bf00      	nop
 8001b36:	3720      	adds	r7, #32
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	48000400 	.word	0x48000400

08001b44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b48:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b4a:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <MX_I2C1_Init+0x78>)
 8001b4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00400F35;
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b50:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <MX_I2C1_Init+0x7c>)
 8001b52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b54:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b7e:	480e      	ldr	r0, [pc, #56]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b80:	f000 fe74 	bl	800286c <HAL_I2C_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b8a:	f000 f8f0 	bl	8001d6e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4809      	ldr	r0, [pc, #36]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b92:	f001 fbcf 	bl	8003334 <HAL_I2CEx_ConfigAnalogFilter>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b9c:	f000 f8e7 	bl	8001d6e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001ba4:	f001 fc11 	bl	80033ca <HAL_I2CEx_ConfigDigitalFilter>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001bae:	f000 f8de 	bl	8001d6e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200000bc 	.word	0x200000bc
 8001bbc:	40005400 	.word	0x40005400
 8001bc0:	00400f35 	.word	0x00400f35

08001bc4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b09e      	sub	sp, #120	; 0x78
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	2254      	movs	r2, #84	; 0x54
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f003 fe4b 	bl	8005880 <memset>
  if(i2cHandle->Instance==I2C1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1e      	ldr	r2, [pc, #120]	; (8001c68 <HAL_I2C_MspInit+0xa4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d135      	bne.n	8001c60 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bf4:	2340      	movs	r3, #64	; 0x40
 8001bf6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	4618      	mov	r0, r3
 8001c02:	f002 fa93 	bl	800412c <HAL_RCCEx_PeriphCLKConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c0c:	f000 f8af 	bl	8001d6e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <HAL_I2C_MspInit+0xa8>)
 8001c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c14:	4a15      	ldr	r2, [pc, #84]	; (8001c6c <HAL_I2C_MspInit+0xa8>)
 8001c16:	f043 0302 	orr.w	r3, r3, #2
 8001c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <HAL_I2C_MspInit+0xa8>)
 8001c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c28:	23c0      	movs	r3, #192	; 0xc0
 8001c2a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c2c:	2312      	movs	r3, #18
 8001c2e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	2303      	movs	r3, #3
 8001c36:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c38:	2304      	movs	r3, #4
 8001c3a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c40:	4619      	mov	r1, r3
 8001c42:	480b      	ldr	r0, [pc, #44]	; (8001c70 <HAL_I2C_MspInit+0xac>)
 8001c44:	f000 fc90 	bl	8002568 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <HAL_I2C_MspInit+0xa8>)
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	4a07      	ldr	r2, [pc, #28]	; (8001c6c <HAL_I2C_MspInit+0xa8>)
 8001c4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c52:	6593      	str	r3, [r2, #88]	; 0x58
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_I2C_MspInit+0xa8>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c60:	bf00      	nop
 8001c62:	3778      	adds	r7, #120	; 0x78
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40005400 	.word	0x40005400
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	48000400 	.word	0x48000400

08001c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c7a:	f000 faf6 	bl	800226a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c7e:	f000 f825 	bl	8001ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c82:	f7ff ff03 	bl	8001a8c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c86:	f7ff ff5d 	bl	8001b44 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001c8a:	f000 f99b 	bl	8001fc4 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001c8e:	f000 f8b7 	bl	8001e00 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  Servo_Init();
 8001c92:	f000 f871 	bl	8001d78 <Servo_Init>

  //Check_Servos_Manually();

  uint8_t raw_data[8];
  HAL_StatusTypeDef a = HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &raw_data[0], 6, HAL_MAX_DELAY);
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	9302      	str	r3, [sp, #8]
 8001c9c:	2306      	movs	r3, #6
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	223b      	movs	r2, #59	; 0x3b
 8001ca8:	21d0      	movs	r1, #208	; 0xd0
 8001caa:	4807      	ldr	r0, [pc, #28]	; (8001cc8 <main+0x54>)
 8001cac:	f000 ff82 	bl	8002bb4 <HAL_I2C_Mem_Read>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	73fb      	strb	r3, [r7, #15]
  int32_t accel_bias_reg = (int32_t) (((int16_t)raw_data[0] << 8) | raw_data[1]);
 8001cb4:	783b      	ldrb	r3, [r7, #0]
 8001cb6:	021b      	lsls	r3, r3, #8
 8001cb8:	787a      	ldrb	r2, [r7, #1]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60bb      	str	r3, [r7, #8]



  Self_Test();
 8001cbe:	f7fe ff43 	bl	8000b48 <Self_Test>
  Calibrate_MPU9250();
 8001cc2:	f7ff fb5f 	bl	8001384 <Calibrate_MPU9250>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <main+0x52>
 8001cc8:	200000bc 	.word	0x200000bc

08001ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b096      	sub	sp, #88	; 0x58
 8001cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	2244      	movs	r2, #68	; 0x44
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f003 fdd0 	bl	8005880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce0:	463b      	mov	r3, r7
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]
 8001cec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001cee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001cf2:	f001 fbc5 	bl	8003480 <HAL_PWREx_ControlVoltageScaling>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001cfc:	f000 f837 	bl	8001d6e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d00:	2302      	movs	r3, #2
 8001d02:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d08:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d0a:	2310      	movs	r3, #16
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d12:	2302      	movs	r3, #2
 8001d14:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001d16:	2302      	movs	r3, #2
 8001d18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001d1a:	2308      	movs	r3, #8
 8001d1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d1e:	2307      	movs	r3, #7
 8001d20:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d22:	2302      	movs	r3, #2
 8001d24:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d26:	2302      	movs	r3, #2
 8001d28:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f001 fbfc 	bl	800352c <HAL_RCC_OscConfig>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001d3a:	f000 f818 	bl	8001d6e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d3e:	230f      	movs	r3, #15
 8001d40:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d42:	2303      	movs	r3, #3
 8001d44:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d52:	463b      	mov	r3, r7
 8001d54:	2101      	movs	r1, #1
 8001d56:	4618      	mov	r0, r3
 8001d58:	f001 fffc 	bl	8003d54 <HAL_RCC_ClockConfig>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d62:	f000 f804 	bl	8001d6e <Error_Handler>
  }
}
 8001d66:	bf00      	nop
 8001d68:	3758      	adds	r7, #88	; 0x58
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d72:	b672      	cpsid	i
}
 8001d74:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d76:	e7fe      	b.n	8001d76 <Error_Handler+0x8>

08001d78 <Servo_Init>:
 * Starting the timer of each channel.
 * Storing Capture Compare Registers in the servo module.
 * Set the servos to their default (0deg) position.
 * All the funtions below require to call this before using them.
 */
void Servo_Init(){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	480f      	ldr	r0, [pc, #60]	; (8001dbc <Servo_Init+0x44>)
 8001d80:	f002 fe18 	bl	80049b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001d84:	2104      	movs	r1, #4
 8001d86:	480d      	ldr	r0, [pc, #52]	; (8001dbc <Servo_Init+0x44>)
 8001d88:	f002 fe14 	bl	80049b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001d8c:	2108      	movs	r1, #8
 8001d8e:	480b      	ldr	r0, [pc, #44]	; (8001dbc <Servo_Init+0x44>)
 8001d90:	f002 fe10 	bl	80049b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001d94:	210c      	movs	r1, #12
 8001d96:	4809      	ldr	r0, [pc, #36]	; (8001dbc <Servo_Init+0x44>)
 8001d98:	f002 fe0c 	bl	80049b4 <HAL_TIM_PWM_Start>

	servoDutyCycles.Servo1DutyCycle = &TIM1->CCR1;
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <Servo_Init+0x48>)
 8001d9e:	4a09      	ldr	r2, [pc, #36]	; (8001dc4 <Servo_Init+0x4c>)
 8001da0:	601a      	str	r2, [r3, #0]
	servoDutyCycles.Servo2DutyCycle = &TIM1->CCR2;
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <Servo_Init+0x48>)
 8001da4:	4a08      	ldr	r2, [pc, #32]	; (8001dc8 <Servo_Init+0x50>)
 8001da6:	605a      	str	r2, [r3, #4]
	servoDutyCycles.Servo3DutyCycle = &TIM1->CCR3;
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <Servo_Init+0x48>)
 8001daa:	4a08      	ldr	r2, [pc, #32]	; (8001dcc <Servo_Init+0x54>)
 8001dac:	609a      	str	r2, [r3, #8]
	servoDutyCycles.Servo4DutyCycle = &TIM1->CCR4;
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <Servo_Init+0x48>)
 8001db0:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <Servo_Init+0x58>)
 8001db2:	60da      	str	r2, [r3, #12]

	Set_Servos_Into_Default_Position();
 8001db4:	f000 f80e 	bl	8001dd4 <Set_Servos_Into_Default_Position>
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000184 	.word	0x20000184
 8001dc0:	20000110 	.word	0x20000110
 8001dc4:	40012c34 	.word	0x40012c34
 8001dc8:	40012c38 	.word	0x40012c38
 8001dcc:	40012c3c 	.word	0x40012c3c
 8001dd0:	40012c40 	.word	0x40012c40

08001dd4 <Set_Servos_Into_Default_Position>:
	Set_Servos_Into_Default_Position();

}


void Set_Servos_Into_Default_Position(){
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
	TIM1->CCR1 = INLINE_DUTY_CYCLE;
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <Set_Servos_Into_Default_Position+0x28>)
 8001dda:	2296      	movs	r2, #150	; 0x96
 8001ddc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = INLINE_DUTY_CYCLE;
 8001dde:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <Set_Servos_Into_Default_Position+0x28>)
 8001de0:	2296      	movs	r2, #150	; 0x96
 8001de2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = INLINE_DUTY_CYCLE;
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <Set_Servos_Into_Default_Position+0x28>)
 8001de6:	2296      	movs	r2, #150	; 0x96
 8001de8:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = INLINE_DUTY_CYCLE;
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <Set_Servos_Into_Default_Position+0x28>)
 8001dec:	2296      	movs	r2, #150	; 0x96
 8001dee:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40012c00 	.word	0x40012c00

08001e00 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <MX_SPI1_Init+0x74>)
 8001e06:	4a1c      	ldr	r2, [pc, #112]	; (8001e78 <MX_SPI1_Init+0x78>)
 8001e08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <MX_SPI1_Init+0x74>)
 8001e0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <MX_SPI1_Init+0x74>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e18:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <MX_SPI1_Init+0x74>)
 8001e1a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e1e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e20:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <MX_SPI1_Init+0x74>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e26:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <MX_SPI1_Init+0x74>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <MX_SPI1_Init+0x74>)
 8001e2e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e32:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <MX_SPI1_Init+0x74>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <MX_SPI1_Init+0x74>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <MX_SPI1_Init+0x74>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e46:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <MX_SPI1_Init+0x74>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <MX_SPI1_Init+0x74>)
 8001e4e:	2207      	movs	r2, #7
 8001e50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e52:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <MX_SPI1_Init+0x74>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <MX_SPI1_Init+0x74>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_SPI1_Init+0x74>)
 8001e60:	f002 fc4c 	bl	80046fc <HAL_SPI_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e6a:	f7ff ff80 	bl	8001d6e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000120 	.word	0x20000120
 8001e78:	40013000 	.word	0x40013000

08001e7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a18      	ldr	r2, [pc, #96]	; (8001efc <HAL_SPI_MspInit+0x80>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d129      	bne.n	8001ef2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e9e:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <HAL_SPI_MspInit+0x84>)
 8001ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea2:	4a17      	ldr	r2, [pc, #92]	; (8001f00 <HAL_SPI_MspInit+0x84>)
 8001ea4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ea8:	6613      	str	r3, [r2, #96]	; 0x60
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <HAL_SPI_MspInit+0x84>)
 8001eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_SPI_MspInit+0x84>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	4a11      	ldr	r2, [pc, #68]	; (8001f00 <HAL_SPI_MspInit+0x84>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <HAL_SPI_MspInit+0x84>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_12;
 8001ece:	f241 0352 	movw	r3, #4178	; 0x1052
 8001ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001edc:	2303      	movs	r3, #3
 8001ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ee0:	2305      	movs	r3, #5
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eee:	f000 fb3b 	bl	8002568 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	3728      	adds	r7, #40	; 0x28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40013000 	.word	0x40013000
 8001f00:	40021000 	.word	0x40021000

08001f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0a:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <HAL_MspInit+0x44>)
 8001f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0e:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <HAL_MspInit+0x44>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6613      	str	r3, [r2, #96]	; 0x60
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <HAL_MspInit+0x44>)
 8001f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_MspInit+0x44>)
 8001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f26:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <HAL_MspInit+0x44>)
 8001f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_MspInit+0x44>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000

08001f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <NMI_Handler+0x4>

08001f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f56:	e7fe      	b.n	8001f56 <HardFault_Handler+0x4>

08001f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f5c:	e7fe      	b.n	8001f5c <MemManage_Handler+0x4>

08001f5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <BusFault_Handler+0x4>

08001f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <UsageFault_Handler+0x4>

08001f6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f98:	f000 f9bc 	bl	8002314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <SystemInit+0x20>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001faa:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <SystemInit+0x20>)
 8001fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b09a      	sub	sp, #104	; 0x68
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fe4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
 8001ff4:	615a      	str	r2, [r3, #20]
 8001ff6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	222c      	movs	r2, #44	; 0x2c
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 fc3e 	bl	8005880 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002004:	4b56      	ldr	r3, [pc, #344]	; (8002160 <MX_TIM1_Init+0x19c>)
 8002006:	4a57      	ldr	r2, [pc, #348]	; (8002164 <MX_TIM1_Init+0x1a0>)
 8002008:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320-1;
 800200a:	4b55      	ldr	r3, [pc, #340]	; (8002160 <MX_TIM1_Init+0x19c>)
 800200c:	f240 123f 	movw	r2, #319	; 0x13f
 8002010:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002012:	4b53      	ldr	r3, [pc, #332]	; (8002160 <MX_TIM1_Init+0x19c>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8002018:	4b51      	ldr	r3, [pc, #324]	; (8002160 <MX_TIM1_Init+0x19c>)
 800201a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800201e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002020:	4b4f      	ldr	r3, [pc, #316]	; (8002160 <MX_TIM1_Init+0x19c>)
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002026:	4b4e      	ldr	r3, [pc, #312]	; (8002160 <MX_TIM1_Init+0x19c>)
 8002028:	2200      	movs	r2, #0
 800202a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800202c:	4b4c      	ldr	r3, [pc, #304]	; (8002160 <MX_TIM1_Init+0x19c>)
 800202e:	2200      	movs	r2, #0
 8002030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002032:	484b      	ldr	r0, [pc, #300]	; (8002160 <MX_TIM1_Init+0x19c>)
 8002034:	f002 fc05 	bl	8004842 <HAL_TIM_Base_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800203e:	f7ff fe96 	bl	8001d6e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002046:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002048:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800204c:	4619      	mov	r1, r3
 800204e:	4844      	ldr	r0, [pc, #272]	; (8002160 <MX_TIM1_Init+0x19c>)
 8002050:	f002 fea2 	bl	8004d98 <HAL_TIM_ConfigClockSource>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800205a:	f7ff fe88 	bl	8001d6e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800205e:	4840      	ldr	r0, [pc, #256]	; (8002160 <MX_TIM1_Init+0x19c>)
 8002060:	f002 fc46 	bl	80048f0 <HAL_TIM_PWM_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800206a:	f7ff fe80 	bl	8001d6e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800207a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800207e:	4619      	mov	r1, r3
 8002080:	4837      	ldr	r0, [pc, #220]	; (8002160 <MX_TIM1_Init+0x19c>)
 8002082:	f003 faf5 	bl	8005670 <HAL_TIMEx_MasterConfigSynchronization>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 800208c:	f7ff fe6f 	bl	8001d6e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002090:	2360      	movs	r3, #96	; 0x60
 8002092:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002098:	2300      	movs	r3, #0
 800209a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800209c:	2300      	movs	r3, #0
 800209e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020a4:	2300      	movs	r3, #0
 80020a6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020a8:	2300      	movs	r3, #0
 80020aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020b0:	2200      	movs	r2, #0
 80020b2:	4619      	mov	r1, r3
 80020b4:	482a      	ldr	r0, [pc, #168]	; (8002160 <MX_TIM1_Init+0x19c>)
 80020b6:	f002 fd5b 	bl	8004b70 <HAL_TIM_PWM_ConfigChannel>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80020c0:	f7ff fe55 	bl	8001d6e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020c8:	2204      	movs	r2, #4
 80020ca:	4619      	mov	r1, r3
 80020cc:	4824      	ldr	r0, [pc, #144]	; (8002160 <MX_TIM1_Init+0x19c>)
 80020ce:	f002 fd4f 	bl	8004b70 <HAL_TIM_PWM_ConfigChannel>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80020d8:	f7ff fe49 	bl	8001d6e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020e0:	2208      	movs	r2, #8
 80020e2:	4619      	mov	r1, r3
 80020e4:	481e      	ldr	r0, [pc, #120]	; (8002160 <MX_TIM1_Init+0x19c>)
 80020e6:	f002 fd43 	bl	8004b70 <HAL_TIM_PWM_ConfigChannel>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80020f0:	f7ff fe3d 	bl	8001d6e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020f8:	220c      	movs	r2, #12
 80020fa:	4619      	mov	r1, r3
 80020fc:	4818      	ldr	r0, [pc, #96]	; (8002160 <MX_TIM1_Init+0x19c>)
 80020fe:	f002 fd37 	bl	8004b70 <HAL_TIM_PWM_ConfigChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8002108:	f7ff fe31 	bl	8001d6e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002120:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002124:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800212e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	4619      	mov	r1, r3
 8002140:	4807      	ldr	r0, [pc, #28]	; (8002160 <MX_TIM1_Init+0x19c>)
 8002142:	f003 fafb 	bl	800573c <HAL_TIMEx_ConfigBreakDeadTime>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 800214c:	f7ff fe0f 	bl	8001d6e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002150:	4803      	ldr	r0, [pc, #12]	; (8002160 <MX_TIM1_Init+0x19c>)
 8002152:	f000 f829 	bl	80021a8 <HAL_TIM_MspPostInit>

}
 8002156:	bf00      	nop
 8002158:	3768      	adds	r7, #104	; 0x68
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000184 	.word	0x20000184
 8002164:	40012c00 	.word	0x40012c00

08002168 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <HAL_TIM_Base_MspInit+0x38>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d10b      	bne.n	8002192 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_TIM_Base_MspInit+0x3c>)
 800217c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <HAL_TIM_Base_MspInit+0x3c>)
 8002180:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002184:	6613      	str	r3, [r2, #96]	; 0x60
 8002186:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <HAL_TIM_Base_MspInit+0x3c>)
 8002188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40012c00 	.word	0x40012c00
 80021a4:	40021000 	.word	0x40021000

080021a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 030c 	add.w	r3, r7, #12
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a12      	ldr	r2, [pc, #72]	; (8002210 <HAL_TIM_MspPostInit+0x68>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d11d      	bne.n	8002206 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_TIM_MspPostInit+0x6c>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	4a11      	ldr	r2, [pc, #68]	; (8002214 <HAL_TIM_MspPostInit+0x6c>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <HAL_TIM_MspPostInit+0x6c>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80021e2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80021e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021f4:	2301      	movs	r3, #1
 80021f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	4619      	mov	r1, r3
 80021fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002202:	f000 f9b1 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002206:	bf00      	nop
 8002208:	3720      	adds	r7, #32
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40012c00 	.word	0x40012c00
 8002214:	40021000 	.word	0x40021000

08002218 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002250 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800221c:	f7ff fec0 	bl	8001fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002220:	480c      	ldr	r0, [pc, #48]	; (8002254 <LoopForever+0x6>)
  ldr r1, =_edata
 8002222:	490d      	ldr	r1, [pc, #52]	; (8002258 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002224:	4a0d      	ldr	r2, [pc, #52]	; (800225c <LoopForever+0xe>)
  movs r3, #0
 8002226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002228:	e002      	b.n	8002230 <LoopCopyDataInit>

0800222a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800222c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800222e:	3304      	adds	r3, #4

08002230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002234:	d3f9      	bcc.n	800222a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002236:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002238:	4c0a      	ldr	r4, [pc, #40]	; (8002264 <LoopForever+0x16>)
  movs r3, #0
 800223a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800223c:	e001      	b.n	8002242 <LoopFillZerobss>

0800223e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800223e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002240:	3204      	adds	r2, #4

08002242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002244:	d3fb      	bcc.n	800223e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002246:	f003 faf7 	bl	8005838 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800224a:	f7ff fd13 	bl	8001c74 <main>

0800224e <LoopForever>:

LoopForever:
    b LoopForever
 800224e:	e7fe      	b.n	800224e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002250:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002258:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800225c:	08006768 	.word	0x08006768
  ldr r2, =_sbss
 8002260:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002264:	200001d4 	.word	0x200001d4

08002268 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002268:	e7fe      	b.n	8002268 <ADC1_IRQHandler>

0800226a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002274:	2003      	movs	r0, #3
 8002276:	f000 f943 	bl	8002500 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800227a:	2000      	movs	r0, #0
 800227c:	f000 f80e 	bl	800229c <HAL_InitTick>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	71fb      	strb	r3, [r7, #7]
 800228a:	e001      	b.n	8002290 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800228c:	f7ff fe3a 	bl	8001f04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002290:	79fb      	ldrb	r3, [r7, #7]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <HAL_InitTick+0x6c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d023      	beq.n	80022f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022b0:	4b16      	ldr	r3, [pc, #88]	; (800230c <HAL_InitTick+0x70>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b14      	ldr	r3, [pc, #80]	; (8002308 <HAL_InitTick+0x6c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022be:	fbb3 f3f1 	udiv	r3, r3, r1
 80022c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f941 	bl	800254e <HAL_SYSTICK_Config>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10f      	bne.n	80022f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b0f      	cmp	r3, #15
 80022d6:	d809      	bhi.n	80022ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d8:	2200      	movs	r2, #0
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295
 80022e0:	f000 f919 	bl	8002516 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022e4:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <HAL_InitTick+0x74>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e007      	b.n	80022fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e004      	b.n	80022fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	73fb      	strb	r3, [r7, #15]
 80022f6:	e001      	b.n	80022fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000008 	.word	0x20000008
 800230c:	20000000 	.word	0x20000000
 8002310:	20000004 	.word	0x20000004

08002314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_IncTick+0x20>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_IncTick+0x24>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4413      	add	r3, r2
 8002324:	4a04      	ldr	r2, [pc, #16]	; (8002338 <HAL_IncTick+0x24>)
 8002326:	6013      	str	r3, [r2, #0]
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	20000008 	.word	0x20000008
 8002338:	200001d0 	.word	0x200001d0

0800233c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return uwTick;
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <HAL_GetTick+0x14>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	200001d0 	.word	0x200001d0

08002354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800235c:	f7ff ffee 	bl	800233c <HAL_GetTick>
 8002360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236c:	d005      	beq.n	800237a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <HAL_Delay+0x44>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4413      	add	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800237a:	bf00      	nop
 800237c:	f7ff ffde 	bl	800233c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	429a      	cmp	r2, r3
 800238a:	d8f7      	bhi.n	800237c <HAL_Delay+0x28>
  {
  }
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000008 	.word	0x20000008

0800239c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023ac:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <__NVIC_SetPriorityGrouping+0x44>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023b8:	4013      	ands	r3, r2
 80023ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ce:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <__NVIC_SetPriorityGrouping+0x44>)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	60d3      	str	r3, [r2, #12]
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <__NVIC_GetPriorityGrouping+0x18>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	0a1b      	lsrs	r3, r3, #8
 80023ee:	f003 0307 	and.w	r3, r3, #7
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	db0a      	blt.n	800242a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	b2da      	uxtb	r2, r3
 8002418:	490c      	ldr	r1, [pc, #48]	; (800244c <__NVIC_SetPriority+0x4c>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	0112      	lsls	r2, r2, #4
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	440b      	add	r3, r1
 8002424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002428:	e00a      	b.n	8002440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4908      	ldr	r1, [pc, #32]	; (8002450 <__NVIC_SetPriority+0x50>)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	3b04      	subs	r3, #4
 8002438:	0112      	lsls	r2, r2, #4
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	440b      	add	r3, r1
 800243e:	761a      	strb	r2, [r3, #24]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000e100 	.word	0xe000e100
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f1c3 0307 	rsb	r3, r3, #7
 800246e:	2b04      	cmp	r3, #4
 8002470:	bf28      	it	cs
 8002472:	2304      	movcs	r3, #4
 8002474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3304      	adds	r3, #4
 800247a:	2b06      	cmp	r3, #6
 800247c:	d902      	bls.n	8002484 <NVIC_EncodePriority+0x30>
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3b03      	subs	r3, #3
 8002482:	e000      	b.n	8002486 <NVIC_EncodePriority+0x32>
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	f04f 32ff 	mov.w	r2, #4294967295
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43da      	mvns	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	401a      	ands	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800249c:	f04f 31ff 	mov.w	r1, #4294967295
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	43d9      	mvns	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	4313      	orrs	r3, r2
         );
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3724      	adds	r7, #36	; 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024cc:	d301      	bcc.n	80024d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00f      	b.n	80024f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <SysTick_Config+0x40>)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024da:	210f      	movs	r1, #15
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295
 80024e0:	f7ff ff8e 	bl	8002400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <SysTick_Config+0x40>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <SysTick_Config+0x40>)
 80024ec:	2207      	movs	r2, #7
 80024ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	e000e010 	.word	0xe000e010

08002500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ff47 	bl	800239c <__NVIC_SetPriorityGrouping>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002528:	f7ff ff5c 	bl	80023e4 <__NVIC_GetPriorityGrouping>
 800252c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f7ff ff8e 	bl	8002454 <NVIC_EncodePriority>
 8002538:	4602      	mov	r2, r0
 800253a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff5d 	bl	8002400 <__NVIC_SetPriority>
}
 8002546:	bf00      	nop
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ffb0 	bl	80024bc <SysTick_Config>
 800255c:	4603      	mov	r3, r0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002576:	e148      	b.n	800280a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	2101      	movs	r1, #1
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	4013      	ands	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 813a 	beq.w	8002804 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b01      	cmp	r3, #1
 800259a:	d005      	beq.n	80025a8 <HAL_GPIO_Init+0x40>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d130      	bne.n	800260a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025de:	2201      	movs	r2, #1
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	f003 0201 	and.w	r2, r3, #1
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b03      	cmp	r3, #3
 8002614:	d017      	beq.n	8002646 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d123      	bne.n	800269a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	08da      	lsrs	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3208      	adds	r2, #8
 800265a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	08da      	lsrs	r2, r3, #3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3208      	adds	r2, #8
 8002694:	6939      	ldr	r1, [r7, #16]
 8002696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	2203      	movs	r2, #3
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0203 	and.w	r2, r3, #3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 8094 	beq.w	8002804 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026dc:	4b52      	ldr	r3, [pc, #328]	; (8002828 <HAL_GPIO_Init+0x2c0>)
 80026de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e0:	4a51      	ldr	r2, [pc, #324]	; (8002828 <HAL_GPIO_Init+0x2c0>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6613      	str	r3, [r2, #96]	; 0x60
 80026e8:	4b4f      	ldr	r3, [pc, #316]	; (8002828 <HAL_GPIO_Init+0x2c0>)
 80026ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026f4:	4a4d      	ldr	r2, [pc, #308]	; (800282c <HAL_GPIO_Init+0x2c4>)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	089b      	lsrs	r3, r3, #2
 80026fa:	3302      	adds	r3, #2
 80026fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002700:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	220f      	movs	r2, #15
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800271e:	d00d      	beq.n	800273c <HAL_GPIO_Init+0x1d4>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a43      	ldr	r2, [pc, #268]	; (8002830 <HAL_GPIO_Init+0x2c8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d007      	beq.n	8002738 <HAL_GPIO_Init+0x1d0>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a42      	ldr	r2, [pc, #264]	; (8002834 <HAL_GPIO_Init+0x2cc>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d101      	bne.n	8002734 <HAL_GPIO_Init+0x1cc>
 8002730:	2302      	movs	r3, #2
 8002732:	e004      	b.n	800273e <HAL_GPIO_Init+0x1d6>
 8002734:	2307      	movs	r3, #7
 8002736:	e002      	b.n	800273e <HAL_GPIO_Init+0x1d6>
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <HAL_GPIO_Init+0x1d6>
 800273c:	2300      	movs	r3, #0
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	f002 0203 	and.w	r2, r2, #3
 8002744:	0092      	lsls	r2, r2, #2
 8002746:	4093      	lsls	r3, r2
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800274e:	4937      	ldr	r1, [pc, #220]	; (800282c <HAL_GPIO_Init+0x2c4>)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	089b      	lsrs	r3, r3, #2
 8002754:	3302      	adds	r3, #2
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800275c:	4b36      	ldr	r3, [pc, #216]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	43db      	mvns	r3, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002780:	4a2d      	ldr	r2, [pc, #180]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002786:	4b2c      	ldr	r3, [pc, #176]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	43db      	mvns	r3, r3
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4013      	ands	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027aa:	4a23      	ldr	r2, [pc, #140]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027b0:	4b21      	ldr	r3, [pc, #132]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027d4:	4a18      	ldr	r2, [pc, #96]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80027da:	4b17      	ldr	r3, [pc, #92]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027fe:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	3301      	adds	r3, #1
 8002808:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	f47f aeaf 	bne.w	8002578 <HAL_GPIO_Init+0x10>
  }
}
 800281a:	bf00      	nop
 800281c:	bf00      	nop
 800281e:	371c      	adds	r7, #28
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	40021000 	.word	0x40021000
 800282c:	40010000 	.word	0x40010000
 8002830:	48000400 	.word	0x48000400
 8002834:	48000800 	.word	0x48000800
 8002838:	40010400 	.word	0x40010400

0800283c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	807b      	strh	r3, [r7, #2]
 8002848:	4613      	mov	r3, r2
 800284a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800284c:	787b      	ldrb	r3, [r7, #1]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002852:	887a      	ldrh	r2, [r7, #2]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002858:	e002      	b.n	8002860 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800285a:	887a      	ldrh	r2, [r7, #2]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e081      	b.n	8002982 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff f996 	bl	8001bc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2224      	movs	r2, #36	; 0x24
 800289c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0201 	bic.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d107      	bne.n	80028e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	e006      	b.n	80028f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d104      	bne.n	8002906 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002904:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002918:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002928:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69d9      	ldr	r1, [r3, #28]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1a      	ldr	r2, [r3, #32]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af02      	add	r7, sp, #8
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	4608      	mov	r0, r1
 8002996:	4611      	mov	r1, r2
 8002998:	461a      	mov	r2, r3
 800299a:	4603      	mov	r3, r0
 800299c:	817b      	strh	r3, [r7, #10]
 800299e:	460b      	mov	r3, r1
 80029a0:	813b      	strh	r3, [r7, #8]
 80029a2:	4613      	mov	r3, r2
 80029a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	f040 80f9 	bne.w	8002ba6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <HAL_I2C_Mem_Write+0x34>
 80029ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d105      	bne.n	80029cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0ed      	b.n	8002ba8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_I2C_Mem_Write+0x4e>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e0e6      	b.n	8002ba8 <HAL_I2C_Mem_Write+0x21c>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029e2:	f7ff fcab 	bl	800233c <HAL_GetTick>
 80029e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	2319      	movs	r3, #25
 80029ee:	2201      	movs	r2, #1
 80029f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fac3 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0d1      	b.n	8002ba8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2221      	movs	r2, #33	; 0x21
 8002a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2240      	movs	r2, #64	; 0x40
 8002a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a3a      	ldr	r2, [r7, #32]
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a2c:	88f8      	ldrh	r0, [r7, #6]
 8002a2e:	893a      	ldrh	r2, [r7, #8]
 8002a30:	8979      	ldrh	r1, [r7, #10]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	9301      	str	r3, [sp, #4]
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 f9d3 	bl	8002de8 <I2C_RequestMemoryWrite>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0a9      	b.n	8002ba8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2bff      	cmp	r3, #255	; 0xff
 8002a5c:	d90e      	bls.n	8002a7c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	22ff      	movs	r2, #255	; 0xff
 8002a62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	8979      	ldrh	r1, [r7, #10]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 fc2b 	bl	80032d0 <I2C_TransferConfig>
 8002a7a:	e00f      	b.n	8002a9c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	8979      	ldrh	r1, [r7, #10]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fc1a 	bl	80032d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 faad 	bl	8003000 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e07b      	b.n	8002ba8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	781a      	ldrb	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d034      	beq.n	8002b54 <HAL_I2C_Mem_Write+0x1c8>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d130      	bne.n	8002b54 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	2200      	movs	r2, #0
 8002afa:	2180      	movs	r1, #128	; 0x80
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 fa3f 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e04d      	b.n	8002ba8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2bff      	cmp	r3, #255	; 0xff
 8002b14:	d90e      	bls.n	8002b34 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	22ff      	movs	r2, #255	; 0xff
 8002b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	8979      	ldrh	r1, [r7, #10]
 8002b24:	2300      	movs	r3, #0
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 fbcf 	bl	80032d0 <I2C_TransferConfig>
 8002b32:	e00f      	b.n	8002b54 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	8979      	ldrh	r1, [r7, #10]
 8002b46:	2300      	movs	r3, #0
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 fbbe 	bl	80032d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d19e      	bne.n	8002a9c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 fa8c 	bl	8003080 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e01a      	b.n	8002ba8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2220      	movs	r2, #32
 8002b78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6859      	ldr	r1, [r3, #4]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <HAL_I2C_Mem_Write+0x224>)
 8002b86:	400b      	ands	r3, r1
 8002b88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e000      	b.n	8002ba8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002ba6:	2302      	movs	r3, #2
  }
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	fe00e800 	.word	0xfe00e800

08002bb4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	817b      	strh	r3, [r7, #10]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	813b      	strh	r3, [r7, #8]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b20      	cmp	r3, #32
 8002bd8:	f040 80fd 	bne.w	8002dd6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <HAL_I2C_Mem_Read+0x34>
 8002be2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d105      	bne.n	8002bf4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0f1      	b.n	8002dd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_I2C_Mem_Read+0x4e>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e0ea      	b.n	8002dd8 <HAL_I2C_Mem_Read+0x224>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c0a:	f7ff fb97 	bl	800233c <HAL_GetTick>
 8002c0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	2319      	movs	r3, #25
 8002c16:	2201      	movs	r2, #1
 8002c18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f9af 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0d5      	b.n	8002dd8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2222      	movs	r2, #34	; 0x22
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2240      	movs	r2, #64	; 0x40
 8002c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a3a      	ldr	r2, [r7, #32]
 8002c46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c54:	88f8      	ldrh	r0, [r7, #6]
 8002c56:	893a      	ldrh	r2, [r7, #8]
 8002c58:	8979      	ldrh	r1, [r7, #10]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	9301      	str	r3, [sp, #4]
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	4603      	mov	r3, r0
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f913 	bl	8002e90 <I2C_RequestMemoryRead>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0ad      	b.n	8002dd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2bff      	cmp	r3, #255	; 0xff
 8002c84:	d90e      	bls.n	8002ca4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	22ff      	movs	r2, #255	; 0xff
 8002c8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	8979      	ldrh	r1, [r7, #10]
 8002c94:	4b52      	ldr	r3, [pc, #328]	; (8002de0 <HAL_I2C_Mem_Read+0x22c>)
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 fb17 	bl	80032d0 <I2C_TransferConfig>
 8002ca2:	e00f      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	8979      	ldrh	r1, [r7, #10]
 8002cb6:	4b4a      	ldr	r3, [pc, #296]	; (8002de0 <HAL_I2C_Mem_Read+0x22c>)
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 fb06 	bl	80032d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2104      	movs	r1, #4
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f956 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e07c      	b.n	8002dd8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d034      	beq.n	8002d84 <HAL_I2C_Mem_Read+0x1d0>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d130      	bne.n	8002d84 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2180      	movs	r1, #128	; 0x80
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 f927 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e04d      	b.n	8002dd8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2bff      	cmp	r3, #255	; 0xff
 8002d44:	d90e      	bls.n	8002d64 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	22ff      	movs	r2, #255	; 0xff
 8002d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	8979      	ldrh	r1, [r7, #10]
 8002d54:	2300      	movs	r3, #0
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fab7 	bl	80032d0 <I2C_TransferConfig>
 8002d62:	e00f      	b.n	8002d84 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	8979      	ldrh	r1, [r7, #10]
 8002d76:	2300      	movs	r3, #0
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 faa6 	bl	80032d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d19a      	bne.n	8002cc4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f974 	bl	8003080 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e01a      	b.n	8002dd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2220      	movs	r2, #32
 8002da8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <HAL_I2C_Mem_Read+0x230>)
 8002db6:	400b      	ands	r3, r1
 8002db8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e000      	b.n	8002dd8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002dd6:	2302      	movs	r3, #2
  }
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	80002400 	.word	0x80002400
 8002de4:	fe00e800 	.word	0xfe00e800

08002de8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	4608      	mov	r0, r1
 8002df2:	4611      	mov	r1, r2
 8002df4:	461a      	mov	r2, r3
 8002df6:	4603      	mov	r3, r0
 8002df8:	817b      	strh	r3, [r7, #10]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	813b      	strh	r3, [r7, #8]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	8979      	ldrh	r1, [r7, #10]
 8002e08:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <I2C_RequestMemoryWrite+0xa4>)
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 fa5d 	bl	80032d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	69b9      	ldr	r1, [r7, #24]
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f8f0 	bl	8003000 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e02c      	b.n	8002e84 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d105      	bne.n	8002e3c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e30:	893b      	ldrh	r3, [r7, #8]
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	629a      	str	r2, [r3, #40]	; 0x28
 8002e3a:	e015      	b.n	8002e68 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e3c:	893b      	ldrh	r3, [r7, #8]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	69b9      	ldr	r1, [r7, #24]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f8d6 	bl	8003000 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e012      	b.n	8002e84 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e5e:	893b      	ldrh	r3, [r7, #8]
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2180      	movs	r1, #128	; 0x80
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f884 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	80002000 	.word	0x80002000

08002e90 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	4608      	mov	r0, r1
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	817b      	strh	r3, [r7, #10]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	813b      	strh	r3, [r7, #8]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	8979      	ldrh	r1, [r7, #10]
 8002eb0:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <I2C_RequestMemoryRead+0xa4>)
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fa0a 	bl	80032d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ebc:	69fa      	ldr	r2, [r7, #28]
 8002ebe:	69b9      	ldr	r1, [r7, #24]
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 f89d 	bl	8003000 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e02c      	b.n	8002f2a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d105      	bne.n	8002ee2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ed6:	893b      	ldrh	r3, [r7, #8]
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28
 8002ee0:	e015      	b.n	8002f0e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ee2:	893b      	ldrh	r3, [r7, #8]
 8002ee4:	0a1b      	lsrs	r3, r3, #8
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	69b9      	ldr	r1, [r7, #24]
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 f883 	bl	8003000 <I2C_WaitOnTXISFlagUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e012      	b.n	8002f2a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f04:	893b      	ldrh	r3, [r7, #8]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	2200      	movs	r2, #0
 8002f16:	2140      	movs	r1, #64	; 0x40
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f831 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	80002000 	.word	0x80002000

08002f38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d103      	bne.n	8002f56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2200      	movs	r2, #0
 8002f54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d007      	beq.n	8002f74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	619a      	str	r2, [r3, #24]
  }
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f90:	e022      	b.n	8002fd8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f98:	d01e      	beq.n	8002fd8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9a:	f7ff f9cf 	bl	800233c <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d302      	bcc.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d113      	bne.n	8002fd8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb4:	f043 0220 	orr.w	r2, r3, #32
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e00f      	b.n	8002ff8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699a      	ldr	r2, [r3, #24]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d0cd      	beq.n	8002f92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800300c:	e02c      	b.n	8003068 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f870 	bl	80030f8 <I2C_IsErrorOccurred>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e02a      	b.n	8003078 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d01e      	beq.n	8003068 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302a:	f7ff f987 	bl	800233c <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	429a      	cmp	r2, r3
 8003038:	d302      	bcc.n	8003040 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d113      	bne.n	8003068 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003044:	f043 0220 	orr.w	r2, r3, #32
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e007      	b.n	8003078 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b02      	cmp	r3, #2
 8003074:	d1cb      	bne.n	800300e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800308c:	e028      	b.n	80030e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f830 	bl	80030f8 <I2C_IsErrorOccurred>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e026      	b.n	80030f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a2:	f7ff f94b 	bl	800233c <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d302      	bcc.n	80030b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d113      	bne.n	80030e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030bc:	f043 0220 	orr.w	r2, r3, #32
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e007      	b.n	80030f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	d1cf      	bne.n	800308e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08a      	sub	sp, #40	; 0x28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b00      	cmp	r3, #0
 8003122:	d075      	beq.n	8003210 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2210      	movs	r2, #16
 800312a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800312c:	e056      	b.n	80031dc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d052      	beq.n	80031dc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003136:	f7ff f901 	bl	800233c <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	429a      	cmp	r2, r3
 8003144:	d302      	bcc.n	800314c <I2C_IsErrorOccurred+0x54>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d147      	bne.n	80031dc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003156:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800315e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800316a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800316e:	d12e      	bne.n	80031ce <I2C_IsErrorOccurred+0xd6>
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003176:	d02a      	beq.n	80031ce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003178:	7cfb      	ldrb	r3, [r7, #19]
 800317a:	2b20      	cmp	r3, #32
 800317c:	d027      	beq.n	80031ce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800318c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800318e:	f7ff f8d5 	bl	800233c <HAL_GetTick>
 8003192:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003194:	e01b      	b.n	80031ce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003196:	f7ff f8d1 	bl	800233c <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b19      	cmp	r3, #25
 80031a2:	d914      	bls.n	80031ce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a8:	f043 0220 	orr.w	r2, r3, #32
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d1dc      	bne.n	8003196 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d003      	beq.n	80031f2 <I2C_IsErrorOccurred+0xfa>
 80031ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d09d      	beq.n	800312e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d103      	bne.n	8003202 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2220      	movs	r2, #32
 8003200:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	f043 0304 	orr.w	r3, r3, #4
 8003208:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00b      	beq.n	800323a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003232:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00b      	beq.n	800325c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	f043 0308 	orr.w	r3, r3, #8
 800324a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003254:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	f043 0302 	orr.w	r3, r3, #2
 800326c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003276:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800327e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003282:	2b00      	cmp	r3, #0
 8003284:	d01c      	beq.n	80032c0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f7ff fe56 	bl	8002f38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6859      	ldr	r1, [r3, #4]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <I2C_IsErrorOccurred+0x1d4>)
 8003298:	400b      	ands	r3, r1
 800329a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80032c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3728      	adds	r7, #40	; 0x28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	fe00e800 	.word	0xfe00e800

080032d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	607b      	str	r3, [r7, #4]
 80032da:	460b      	mov	r3, r1
 80032dc:	817b      	strh	r3, [r7, #10]
 80032de:	4613      	mov	r3, r2
 80032e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032e2:	897b      	ldrh	r3, [r7, #10]
 80032e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032e8:	7a7b      	ldrb	r3, [r7, #9]
 80032ea:	041b      	lsls	r3, r3, #16
 80032ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	0d5b      	lsrs	r3, r3, #21
 800330a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800330e:	4b08      	ldr	r3, [pc, #32]	; (8003330 <I2C_TransferConfig+0x60>)
 8003310:	430b      	orrs	r3, r1
 8003312:	43db      	mvns	r3, r3
 8003314:	ea02 0103 	and.w	r1, r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	03ff63ff 	.word	0x03ff63ff

08003334 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b20      	cmp	r3, #32
 8003348:	d138      	bne.n	80033bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003354:	2302      	movs	r3, #2
 8003356:	e032      	b.n	80033be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2224      	movs	r2, #36	; 0x24
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0201 	bic.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003386:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6819      	ldr	r1, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e000      	b.n	80033be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033bc:	2302      	movs	r3, #2
  }
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b085      	sub	sp, #20
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d139      	bne.n	8003454 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e033      	b.n	8003456 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2224      	movs	r2, #36	; 0x24
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800341c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	e000      	b.n	8003456 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003454:	2302      	movs	r3, #2
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <HAL_PWREx_GetVoltageRange+0x18>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40007000 	.word	0x40007000

08003480 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800348e:	d130      	bne.n	80034f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003490:	4b23      	ldr	r3, [pc, #140]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800349c:	d038      	beq.n	8003510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800349e:	4b20      	ldr	r3, [pc, #128]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034a6:	4a1e      	ldr	r2, [pc, #120]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034ae:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2232      	movs	r2, #50	; 0x32
 80034b4:	fb02 f303 	mul.w	r3, r2, r3
 80034b8:	4a1b      	ldr	r2, [pc, #108]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	0c9b      	lsrs	r3, r3, #18
 80034c0:	3301      	adds	r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034c4:	e002      	b.n	80034cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034cc:	4b14      	ldr	r3, [pc, #80]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d8:	d102      	bne.n	80034e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f2      	bne.n	80034c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034e0:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ec:	d110      	bne.n	8003510 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e00f      	b.n	8003512 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034f2:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fe:	d007      	beq.n	8003510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003500:	4b07      	ldr	r3, [pc, #28]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003508:	4a05      	ldr	r2, [pc, #20]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800350e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40007000 	.word	0x40007000
 8003524:	20000000 	.word	0x20000000
 8003528:	431bde83 	.word	0x431bde83

0800352c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d102      	bne.n	8003540 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	f000 bc02 	b.w	8003d44 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003540:	4b96      	ldr	r3, [pc, #600]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800354a:	4b94      	ldr	r3, [pc, #592]	; (800379c <HAL_RCC_OscConfig+0x270>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80e4 	beq.w	800372a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d007      	beq.n	8003578 <HAL_RCC_OscConfig+0x4c>
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b0c      	cmp	r3, #12
 800356c:	f040 808b 	bne.w	8003686 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2b01      	cmp	r3, #1
 8003574:	f040 8087 	bne.w	8003686 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003578:	4b88      	ldr	r3, [pc, #544]	; (800379c <HAL_RCC_OscConfig+0x270>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_OscConfig+0x64>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e3d9      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1a      	ldr	r2, [r3, #32]
 8003594:	4b81      	ldr	r3, [pc, #516]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d004      	beq.n	80035aa <HAL_RCC_OscConfig+0x7e>
 80035a0:	4b7e      	ldr	r3, [pc, #504]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035a8:	e005      	b.n	80035b6 <HAL_RCC_OscConfig+0x8a>
 80035aa:	4b7c      	ldr	r3, [pc, #496]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80035ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d223      	bcs.n	8003602 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fd54 	bl	800406c <RCC_SetFlashLatencyFromMSIRange>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e3ba      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035ce:	4b73      	ldr	r3, [pc, #460]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a72      	ldr	r2, [pc, #456]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80035d4:	f043 0308 	orr.w	r3, r3, #8
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	4b70      	ldr	r3, [pc, #448]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	496d      	ldr	r1, [pc, #436]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035ec:	4b6b      	ldr	r3, [pc, #428]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	021b      	lsls	r3, r3, #8
 80035fa:	4968      	ldr	r1, [pc, #416]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	604b      	str	r3, [r1, #4]
 8003600:	e025      	b.n	800364e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003602:	4b66      	ldr	r3, [pc, #408]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a65      	ldr	r2, [pc, #404]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003608:	f043 0308 	orr.w	r3, r3, #8
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b63      	ldr	r3, [pc, #396]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	4960      	ldr	r1, [pc, #384]	; (800379c <HAL_RCC_OscConfig+0x270>)
 800361c:	4313      	orrs	r3, r2
 800361e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003620:	4b5e      	ldr	r3, [pc, #376]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	495b      	ldr	r1, [pc, #364]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003630:	4313      	orrs	r3, r2
 8003632:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d109      	bne.n	800364e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fd14 	bl	800406c <RCC_SetFlashLatencyFromMSIRange>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e37a      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800364e:	f000 fc81 	bl	8003f54 <HAL_RCC_GetSysClockFreq>
 8003652:	4602      	mov	r2, r0
 8003654:	4b51      	ldr	r3, [pc, #324]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	4950      	ldr	r1, [pc, #320]	; (80037a0 <HAL_RCC_OscConfig+0x274>)
 8003660:	5ccb      	ldrb	r3, [r1, r3]
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	fa22 f303 	lsr.w	r3, r2, r3
 800366a:	4a4e      	ldr	r2, [pc, #312]	; (80037a4 <HAL_RCC_OscConfig+0x278>)
 800366c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800366e:	4b4e      	ldr	r3, [pc, #312]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe fe12 	bl	800229c <HAL_InitTick>
 8003678:	4603      	mov	r3, r0
 800367a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d052      	beq.n	8003728 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	e35e      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d032      	beq.n	80036f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800368e:	4b43      	ldr	r3, [pc, #268]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a42      	ldr	r2, [pc, #264]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800369a:	f7fe fe4f 	bl	800233c <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036a2:	f7fe fe4b 	bl	800233c <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e347      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036b4:	4b39      	ldr	r3, [pc, #228]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036c0:	4b36      	ldr	r3, [pc, #216]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a35      	ldr	r2, [pc, #212]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80036c6:	f043 0308 	orr.w	r3, r3, #8
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	4b33      	ldr	r3, [pc, #204]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	4930      	ldr	r1, [pc, #192]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036de:	4b2f      	ldr	r3, [pc, #188]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	492b      	ldr	r1, [pc, #172]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]
 80036f2:	e01a      	b.n	800372a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036f4:	4b29      	ldr	r3, [pc, #164]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a28      	ldr	r2, [pc, #160]	; (800379c <HAL_RCC_OscConfig+0x270>)
 80036fa:	f023 0301 	bic.w	r3, r3, #1
 80036fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003700:	f7fe fe1c 	bl	800233c <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003708:	f7fe fe18 	bl	800233c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e314      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800371a:	4b20      	ldr	r3, [pc, #128]	; (800379c <HAL_RCC_OscConfig+0x270>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x1dc>
 8003726:	e000      	b.n	800372a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003728:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d073      	beq.n	800381e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	2b08      	cmp	r3, #8
 800373a:	d005      	beq.n	8003748 <HAL_RCC_OscConfig+0x21c>
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2b0c      	cmp	r3, #12
 8003740:	d10e      	bne.n	8003760 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2b03      	cmp	r3, #3
 8003746:	d10b      	bne.n	8003760 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003748:	4b14      	ldr	r3, [pc, #80]	; (800379c <HAL_RCC_OscConfig+0x270>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d063      	beq.n	800381c <HAL_RCC_OscConfig+0x2f0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d15f      	bne.n	800381c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e2f1      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003768:	d106      	bne.n	8003778 <HAL_RCC_OscConfig+0x24c>
 800376a:	4b0c      	ldr	r3, [pc, #48]	; (800379c <HAL_RCC_OscConfig+0x270>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a0b      	ldr	r2, [pc, #44]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e025      	b.n	80037c4 <HAL_RCC_OscConfig+0x298>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003780:	d114      	bne.n	80037ac <HAL_RCC_OscConfig+0x280>
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a05      	ldr	r2, [pc, #20]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	4b03      	ldr	r3, [pc, #12]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a02      	ldr	r2, [pc, #8]	; (800379c <HAL_RCC_OscConfig+0x270>)
 8003794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e013      	b.n	80037c4 <HAL_RCC_OscConfig+0x298>
 800379c:	40021000 	.word	0x40021000
 80037a0:	080066ec 	.word	0x080066ec
 80037a4:	20000000 	.word	0x20000000
 80037a8:	20000004 	.word	0x20000004
 80037ac:	4ba0      	ldr	r3, [pc, #640]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a9f      	ldr	r2, [pc, #636]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80037b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	4b9d      	ldr	r3, [pc, #628]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a9c      	ldr	r2, [pc, #624]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80037be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d013      	beq.n	80037f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fe fdb6 	bl	800233c <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d4:	f7fe fdb2 	bl	800233c <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	; 0x64
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e2ae      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e6:	4b92      	ldr	r3, [pc, #584]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x2a8>
 80037f2:	e014      	b.n	800381e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fe fda2 	bl	800233c <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037fc:	f7fe fd9e 	bl	800233c <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b64      	cmp	r3, #100	; 0x64
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e29a      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800380e:	4b88      	ldr	r3, [pc, #544]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0x2d0>
 800381a:	e000      	b.n	800381e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d060      	beq.n	80038ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	2b04      	cmp	r3, #4
 800382e:	d005      	beq.n	800383c <HAL_RCC_OscConfig+0x310>
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2b0c      	cmp	r3, #12
 8003834:	d119      	bne.n	800386a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d116      	bne.n	800386a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800383c:	4b7c      	ldr	r3, [pc, #496]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_RCC_OscConfig+0x328>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e277      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003854:	4b76      	ldr	r3, [pc, #472]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	061b      	lsls	r3, r3, #24
 8003862:	4973      	ldr	r1, [pc, #460]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003868:	e040      	b.n	80038ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d023      	beq.n	80038ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003872:	4b6f      	ldr	r3, [pc, #444]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6e      	ldr	r2, [pc, #440]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387e:	f7fe fd5d 	bl	800233c <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003886:	f7fe fd59 	bl	800233c <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e255      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003898:	4b65      	ldr	r3, [pc, #404]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a4:	4b62      	ldr	r3, [pc, #392]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	061b      	lsls	r3, r3, #24
 80038b2:	495f      	ldr	r1, [pc, #380]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	604b      	str	r3, [r1, #4]
 80038b8:	e018      	b.n	80038ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ba:	4b5d      	ldr	r3, [pc, #372]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a5c      	ldr	r2, [pc, #368]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80038c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c6:	f7fe fd39 	bl	800233c <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ce:	f7fe fd35 	bl	800233c <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e231      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038e0:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1f0      	bne.n	80038ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d03c      	beq.n	8003972 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01c      	beq.n	800393a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003900:	4b4b      	ldr	r3, [pc, #300]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003906:	4a4a      	ldr	r2, [pc, #296]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003910:	f7fe fd14 	bl	800233c <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003918:	f7fe fd10 	bl	800233c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e20c      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800392a:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 800392c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0ef      	beq.n	8003918 <HAL_RCC_OscConfig+0x3ec>
 8003938:	e01b      	b.n	8003972 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800393a:	4b3d      	ldr	r3, [pc, #244]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 800393c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003940:	4a3b      	ldr	r2, [pc, #236]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003942:	f023 0301 	bic.w	r3, r3, #1
 8003946:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394a:	f7fe fcf7 	bl	800233c <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003952:	f7fe fcf3 	bl	800233c <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e1ef      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003964:	4b32      	ldr	r3, [pc, #200]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1ef      	bne.n	8003952 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 80a6 	beq.w	8003acc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003980:	2300      	movs	r3, #0
 8003982:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003984:	4b2a      	ldr	r3, [pc, #168]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10d      	bne.n	80039ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003990:	4b27      	ldr	r3, [pc, #156]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	4a26      	ldr	r2, [pc, #152]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399a:	6593      	str	r3, [r2, #88]	; 0x58
 800399c:	4b24      	ldr	r3, [pc, #144]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 800399e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a8:	2301      	movs	r3, #1
 80039aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ac:	4b21      	ldr	r3, [pc, #132]	; (8003a34 <HAL_RCC_OscConfig+0x508>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d118      	bne.n	80039ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b8:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <HAL_RCC_OscConfig+0x508>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <HAL_RCC_OscConfig+0x508>)
 80039be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c4:	f7fe fcba 	bl	800233c <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039cc:	f7fe fcb6 	bl	800233c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e1b2      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039de:	4b15      	ldr	r3, [pc, #84]	; (8003a34 <HAL_RCC_OscConfig+0x508>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d108      	bne.n	8003a04 <HAL_RCC_OscConfig+0x4d8>
 80039f2:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80039f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f8:	4a0d      	ldr	r2, [pc, #52]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a02:	e029      	b.n	8003a58 <HAL_RCC_OscConfig+0x52c>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	2b05      	cmp	r3, #5
 8003a0a:	d115      	bne.n	8003a38 <HAL_RCC_OscConfig+0x50c>
 8003a0c:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a12:	4a07      	ldr	r2, [pc, #28]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003a14:	f043 0304 	orr.w	r3, r3, #4
 8003a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a1c:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a22:	4a03      	ldr	r2, [pc, #12]	; (8003a30 <HAL_RCC_OscConfig+0x504>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a2c:	e014      	b.n	8003a58 <HAL_RCC_OscConfig+0x52c>
 8003a2e:	bf00      	nop
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40007000 	.word	0x40007000
 8003a38:	4b9a      	ldr	r3, [pc, #616]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3e:	4a99      	ldr	r2, [pc, #612]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003a40:	f023 0301 	bic.w	r3, r3, #1
 8003a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a48:	4b96      	ldr	r3, [pc, #600]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	4a95      	ldr	r2, [pc, #596]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003a50:	f023 0304 	bic.w	r3, r3, #4
 8003a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d016      	beq.n	8003a8e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7fe fc6c 	bl	800233c <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a66:	e00a      	b.n	8003a7e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a68:	f7fe fc68 	bl	800233c <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e162      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a7e:	4b89      	ldr	r3, [pc, #548]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0ed      	beq.n	8003a68 <HAL_RCC_OscConfig+0x53c>
 8003a8c:	e015      	b.n	8003aba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8e:	f7fe fc55 	bl	800233c <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a94:	e00a      	b.n	8003aac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a96:	f7fe fc51 	bl	800233c <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e14b      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aac:	4b7d      	ldr	r3, [pc, #500]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1ed      	bne.n	8003a96 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aba:	7ffb      	ldrb	r3, [r7, #31]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d105      	bne.n	8003acc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac0:	4b78      	ldr	r3, [pc, #480]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac4:	4a77      	ldr	r2, [pc, #476]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0320 	and.w	r3, r3, #32
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d03c      	beq.n	8003b52 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01c      	beq.n	8003b1a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ae0:	4b70      	ldr	r3, [pc, #448]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ae6:	4a6f      	ldr	r2, [pc, #444]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af0:	f7fe fc24 	bl	800233c <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003af8:	f7fe fc20 	bl	800233c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e11c      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b0a:	4b66      	ldr	r3, [pc, #408]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003b0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0ef      	beq.n	8003af8 <HAL_RCC_OscConfig+0x5cc>
 8003b18:	e01b      	b.n	8003b52 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b1a:	4b62      	ldr	r3, [pc, #392]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b20:	4a60      	ldr	r2, [pc, #384]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003b22:	f023 0301 	bic.w	r3, r3, #1
 8003b26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2a:	f7fe fc07 	bl	800233c <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b32:	f7fe fc03 	bl	800233c <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e0ff      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b44:	4b57      	ldr	r3, [pc, #348]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1ef      	bne.n	8003b32 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 80f3 	beq.w	8003d42 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	f040 80c9 	bne.w	8003cf8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b66:	4b4f      	ldr	r3, [pc, #316]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f003 0203 	and.w	r2, r3, #3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d12c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	3b01      	subs	r3, #1
 8003b86:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d123      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b96:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d11b      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d113      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb6:	085b      	lsrs	r3, r3, #1
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d109      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	085b      	lsrs	r3, r3, #1
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d06b      	beq.n	8003cac <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	2b0c      	cmp	r3, #12
 8003bd8:	d062      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bda:	4b32      	ldr	r3, [pc, #200]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0ac      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bea:	4b2e      	ldr	r3, [pc, #184]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a2d      	ldr	r2, [pc, #180]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003bf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bf6:	f7fe fba1 	bl	800233c <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfe:	f7fe fb9d 	bl	800233c <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e099      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c10:	4b24      	ldr	r3, [pc, #144]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1f0      	bne.n	8003bfe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c1c:	4b21      	ldr	r3, [pc, #132]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	4b21      	ldr	r3, [pc, #132]	; (8003ca8 <HAL_RCC_OscConfig+0x77c>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c2c:	3a01      	subs	r2, #1
 8003c2e:	0112      	lsls	r2, r2, #4
 8003c30:	4311      	orrs	r1, r2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c36:	0212      	lsls	r2, r2, #8
 8003c38:	4311      	orrs	r1, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c3e:	0852      	lsrs	r2, r2, #1
 8003c40:	3a01      	subs	r2, #1
 8003c42:	0552      	lsls	r2, r2, #21
 8003c44:	4311      	orrs	r1, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c4a:	0852      	lsrs	r2, r2, #1
 8003c4c:	3a01      	subs	r2, #1
 8003c4e:	0652      	lsls	r2, r2, #25
 8003c50:	4311      	orrs	r1, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c56:	06d2      	lsls	r2, r2, #27
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	4912      	ldr	r1, [pc, #72]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c60:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a0f      	ldr	r2, [pc, #60]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c6c:	4b0d      	ldr	r3, [pc, #52]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4a0c      	ldr	r2, [pc, #48]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c78:	f7fe fb60 	bl	800233c <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c80:	f7fe fb5c 	bl	800233c <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e058      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c92:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c9e:	e050      	b.n	8003d42 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e04f      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cac:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d144      	bne.n	8003d42 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cb8:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a23      	ldr	r2, [pc, #140]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cc4:	4b21      	ldr	r3, [pc, #132]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a20      	ldr	r2, [pc, #128]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cd0:	f7fe fb34 	bl	800233c <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fe fb30 	bl	800233c <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e02c      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cea:	4b18      	ldr	r3, [pc, #96]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x7ac>
 8003cf6:	e024      	b.n	8003d42 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2b0c      	cmp	r3, #12
 8003cfc:	d01f      	beq.n	8003d3e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfe:	4b13      	ldr	r3, [pc, #76]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a12      	ldr	r2, [pc, #72]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003d04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0a:	f7fe fb17 	bl	800233c <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d12:	f7fe fb13 	bl	800233c <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e00f      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d24:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1f0      	bne.n	8003d12 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003d30:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	4905      	ldr	r1, [pc, #20]	; (8003d4c <HAL_RCC_OscConfig+0x820>)
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_RCC_OscConfig+0x824>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60cb      	str	r3, [r1, #12]
 8003d3c:	e001      	b.n	8003d42 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3720      	adds	r7, #32
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	feeefffc 	.word	0xfeeefffc

08003d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0e7      	b.n	8003f38 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d68:	4b75      	ldr	r3, [pc, #468]	; (8003f40 <HAL_RCC_ClockConfig+0x1ec>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d910      	bls.n	8003d98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d76:	4b72      	ldr	r3, [pc, #456]	; (8003f40 <HAL_RCC_ClockConfig+0x1ec>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f023 0207 	bic.w	r2, r3, #7
 8003d7e:	4970      	ldr	r1, [pc, #448]	; (8003f40 <HAL_RCC_ClockConfig+0x1ec>)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d86:	4b6e      	ldr	r3, [pc, #440]	; (8003f40 <HAL_RCC_ClockConfig+0x1ec>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d001      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0cf      	b.n	8003f38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d010      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	4b66      	ldr	r3, [pc, #408]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d908      	bls.n	8003dc6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db4:	4b63      	ldr	r3, [pc, #396]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4960      	ldr	r1, [pc, #384]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d04c      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d107      	bne.n	8003dea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dda:	4b5a      	ldr	r3, [pc, #360]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d121      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e0a6      	b.n	8003f38 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003df2:	4b54      	ldr	r3, [pc, #336]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d115      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e09a      	b.n	8003f38 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d107      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e0a:	4b4e      	ldr	r3, [pc, #312]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e08e      	b.n	8003f38 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e1a:	4b4a      	ldr	r3, [pc, #296]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e086      	b.n	8003f38 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e2a:	4b46      	ldr	r3, [pc, #280]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f023 0203 	bic.w	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	4943      	ldr	r1, [pc, #268]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e3c:	f7fe fa7e 	bl	800233c <HAL_GetTick>
 8003e40:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e42:	e00a      	b.n	8003e5a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e44:	f7fe fa7a 	bl	800233c <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e06e      	b.n	8003f38 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5a:	4b3a      	ldr	r3, [pc, #232]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 020c 	and.w	r2, r3, #12
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d1eb      	bne.n	8003e44 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d010      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	4b31      	ldr	r3, [pc, #196]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d208      	bcs.n	8003e9a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e88:	4b2e      	ldr	r3, [pc, #184]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	492b      	ldr	r1, [pc, #172]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e9a:	4b29      	ldr	r3, [pc, #164]	; (8003f40 <HAL_RCC_ClockConfig+0x1ec>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d210      	bcs.n	8003eca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea8:	4b25      	ldr	r3, [pc, #148]	; (8003f40 <HAL_RCC_ClockConfig+0x1ec>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 0207 	bic.w	r2, r3, #7
 8003eb0:	4923      	ldr	r1, [pc, #140]	; (8003f40 <HAL_RCC_ClockConfig+0x1ec>)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb8:	4b21      	ldr	r3, [pc, #132]	; (8003f40 <HAL_RCC_ClockConfig+0x1ec>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d001      	beq.n	8003eca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e036      	b.n	8003f38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d008      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed6:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	4918      	ldr	r1, [pc, #96]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d009      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ef4:	4b13      	ldr	r3, [pc, #76]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	4910      	ldr	r1, [pc, #64]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f08:	f000 f824 	bl	8003f54 <HAL_RCC_GetSysClockFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <HAL_RCC_ClockConfig+0x1f0>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	091b      	lsrs	r3, r3, #4
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	490b      	ldr	r1, [pc, #44]	; (8003f48 <HAL_RCC_ClockConfig+0x1f4>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
 8003f24:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <HAL_RCC_ClockConfig+0x1f8>)
 8003f26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f28:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <HAL_RCC_ClockConfig+0x1fc>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fe f9b5 	bl	800229c <HAL_InitTick>
 8003f32:	4603      	mov	r3, r0
 8003f34:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f36:	7afb      	ldrb	r3, [r7, #11]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40022000 	.word	0x40022000
 8003f44:	40021000 	.word	0x40021000
 8003f48:	080066ec 	.word	0x080066ec
 8003f4c:	20000000 	.word	0x20000000
 8003f50:	20000004 	.word	0x20000004

08003f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b089      	sub	sp, #36	; 0x24
 8003f58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61fb      	str	r3, [r7, #28]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f62:	4b3e      	ldr	r3, [pc, #248]	; (800405c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f6c:	4b3b      	ldr	r3, [pc, #236]	; (800405c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f003 0303 	and.w	r3, r3, #3
 8003f74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0x34>
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	2b0c      	cmp	r3, #12
 8003f80:	d121      	bne.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d11e      	bne.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f88:	4b34      	ldr	r3, [pc, #208]	; (800405c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d107      	bne.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f94:	4b31      	ldr	r3, [pc, #196]	; (800405c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f9a:	0a1b      	lsrs	r3, r3, #8
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	e005      	b.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fa4:	4b2d      	ldr	r3, [pc, #180]	; (800405c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fb0:	4a2b      	ldr	r2, [pc, #172]	; (8004060 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10d      	bne.n	8003fdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fc4:	e00a      	b.n	8003fdc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d102      	bne.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fcc:	4b25      	ldr	r3, [pc, #148]	; (8004064 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fce:	61bb      	str	r3, [r7, #24]
 8003fd0:	e004      	b.n	8003fdc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d101      	bne.n	8003fdc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fd8:	4b23      	ldr	r3, [pc, #140]	; (8004068 <HAL_RCC_GetSysClockFreq+0x114>)
 8003fda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	2b0c      	cmp	r3, #12
 8003fe0:	d134      	bne.n	800404c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fe2:	4b1e      	ldr	r3, [pc, #120]	; (800405c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d003      	beq.n	8003ffa <HAL_RCC_GetSysClockFreq+0xa6>
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d003      	beq.n	8004000 <HAL_RCC_GetSysClockFreq+0xac>
 8003ff8:	e005      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ffa:	4b1a      	ldr	r3, [pc, #104]	; (8004064 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ffc:	617b      	str	r3, [r7, #20]
      break;
 8003ffe:	e005      	b.n	800400c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004000:	4b19      	ldr	r3, [pc, #100]	; (8004068 <HAL_RCC_GetSysClockFreq+0x114>)
 8004002:	617b      	str	r3, [r7, #20]
      break;
 8004004:	e002      	b.n	800400c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	617b      	str	r3, [r7, #20]
      break;
 800400a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800400c:	4b13      	ldr	r3, [pc, #76]	; (800405c <HAL_RCC_GetSysClockFreq+0x108>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	3301      	adds	r3, #1
 8004018:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800401a:	4b10      	ldr	r3, [pc, #64]	; (800405c <HAL_RCC_GetSysClockFreq+0x108>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	0a1b      	lsrs	r3, r3, #8
 8004020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	fb03 f202 	mul.w	r2, r3, r2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004030:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004032:	4b0a      	ldr	r3, [pc, #40]	; (800405c <HAL_RCC_GetSysClockFreq+0x108>)
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	0e5b      	lsrs	r3, r3, #25
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	3301      	adds	r3, #1
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	fbb2 f3f3 	udiv	r3, r2, r3
 800404a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800404c:	69bb      	ldr	r3, [r7, #24]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3724      	adds	r7, #36	; 0x24
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40021000 	.word	0x40021000
 8004060:	080066fc 	.word	0x080066fc
 8004064:	00f42400 	.word	0x00f42400
 8004068:	016e3600 	.word	0x016e3600

0800406c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004078:	4b2a      	ldr	r3, [pc, #168]	; (8004124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004084:	f7ff f9ee 	bl	8003464 <HAL_PWREx_GetVoltageRange>
 8004088:	6178      	str	r0, [r7, #20]
 800408a:	e014      	b.n	80040b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800408c:	4b25      	ldr	r3, [pc, #148]	; (8004124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800408e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004090:	4a24      	ldr	r2, [pc, #144]	; (8004124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004096:	6593      	str	r3, [r2, #88]	; 0x58
 8004098:	4b22      	ldr	r3, [pc, #136]	; (8004124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040a4:	f7ff f9de 	bl	8003464 <HAL_PWREx_GetVoltageRange>
 80040a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040aa:	4b1e      	ldr	r3, [pc, #120]	; (8004124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ae:	4a1d      	ldr	r2, [pc, #116]	; (8004124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040bc:	d10b      	bne.n	80040d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b80      	cmp	r3, #128	; 0x80
 80040c2:	d919      	bls.n	80040f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2ba0      	cmp	r3, #160	; 0xa0
 80040c8:	d902      	bls.n	80040d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040ca:	2302      	movs	r3, #2
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	e013      	b.n	80040f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040d0:	2301      	movs	r3, #1
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	e010      	b.n	80040f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b80      	cmp	r3, #128	; 0x80
 80040da:	d902      	bls.n	80040e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040dc:	2303      	movs	r3, #3
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	e00a      	b.n	80040f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b80      	cmp	r3, #128	; 0x80
 80040e6:	d102      	bne.n	80040ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040e8:	2302      	movs	r3, #2
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	e004      	b.n	80040f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b70      	cmp	r3, #112	; 0x70
 80040f2:	d101      	bne.n	80040f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040f4:	2301      	movs	r3, #1
 80040f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f023 0207 	bic.w	r2, r3, #7
 8004100:	4909      	ldr	r1, [pc, #36]	; (8004128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004108:	4b07      	ldr	r3, [pc, #28]	; (8004128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	429a      	cmp	r2, r3
 8004114:	d001      	beq.n	800411a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40021000 	.word	0x40021000
 8004128:	40022000 	.word	0x40022000

0800412c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004134:	2300      	movs	r3, #0
 8004136:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004138:	2300      	movs	r3, #0
 800413a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004144:	2b00      	cmp	r3, #0
 8004146:	d031      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004150:	d01a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004152:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004156:	d814      	bhi.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d009      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800415c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004160:	d10f      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004162:	4b5d      	ldr	r3, [pc, #372]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	4a5c      	ldr	r2, [pc, #368]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800416c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800416e:	e00c      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3304      	adds	r3, #4
 8004174:	2100      	movs	r1, #0
 8004176:	4618      	mov	r0, r3
 8004178:	f000 f9ce 	bl	8004518 <RCCEx_PLLSAI1_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004180:	e003      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	74fb      	strb	r3, [r7, #19]
      break;
 8004186:	e000      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800418a:	7cfb      	ldrb	r3, [r7, #19]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10b      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004190:	4b51      	ldr	r3, [pc, #324]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004196:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419e:	494e      	ldr	r1, [pc, #312]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041a6:	e001      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a8:	7cfb      	ldrb	r3, [r7, #19]
 80041aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 809e 	beq.w	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ba:	2300      	movs	r3, #0
 80041bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041be:	4b46      	ldr	r3, [pc, #280]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80041ce:	2300      	movs	r3, #0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00d      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d4:	4b40      	ldr	r3, [pc, #256]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d8:	4a3f      	ldr	r2, [pc, #252]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041de:	6593      	str	r3, [r2, #88]	; 0x58
 80041e0:	4b3d      	ldr	r3, [pc, #244]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ec:	2301      	movs	r3, #1
 80041ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041f0:	4b3a      	ldr	r3, [pc, #232]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a39      	ldr	r2, [pc, #228]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80041f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041fc:	f7fe f89e 	bl	800233c <HAL_GetTick>
 8004200:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004202:	e009      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004204:	f7fe f89a 	bl	800233c <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d902      	bls.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	74fb      	strb	r3, [r7, #19]
        break;
 8004216:	e005      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004218:	4b30      	ldr	r3, [pc, #192]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0ef      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004224:	7cfb      	ldrb	r3, [r7, #19]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d15a      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800422a:	4b2b      	ldr	r3, [pc, #172]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800422c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004234:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01e      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	429a      	cmp	r2, r3
 8004244:	d019      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004246:	4b24      	ldr	r3, [pc, #144]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004250:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004252:	4b21      	ldr	r3, [pc, #132]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	4a1f      	ldr	r2, [pc, #124]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800425a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004262:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004268:	4a1b      	ldr	r2, [pc, #108]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800426a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800426e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004272:	4a19      	ldr	r2, [pc, #100]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d016      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004284:	f7fe f85a 	bl	800233c <HAL_GetTick>
 8004288:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800428a:	e00b      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800428c:	f7fe f856 	bl	800233c <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f241 3288 	movw	r2, #5000	; 0x1388
 800429a:	4293      	cmp	r3, r2
 800429c:	d902      	bls.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	74fb      	strb	r3, [r7, #19]
            break;
 80042a2:	e006      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042a4:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0ec      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80042b2:	7cfb      	ldrb	r3, [r7, #19]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10b      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042b8:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c6:	4904      	ldr	r1, [pc, #16]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042ce:	e009      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042d0:	7cfb      	ldrb	r3, [r7, #19]
 80042d2:	74bb      	strb	r3, [r7, #18]
 80042d4:	e006      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
 80042dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e4:	7c7b      	ldrb	r3, [r7, #17]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d105      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ea:	4b8a      	ldr	r3, [pc, #552]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ee:	4a89      	ldr	r2, [pc, #548]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004302:	4b84      	ldr	r3, [pc, #528]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004308:	f023 0203 	bic.w	r2, r3, #3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	4980      	ldr	r1, [pc, #512]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004324:	4b7b      	ldr	r3, [pc, #492]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432a:	f023 020c 	bic.w	r2, r3, #12
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	4978      	ldr	r1, [pc, #480]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004346:	4b73      	ldr	r3, [pc, #460]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	496f      	ldr	r1, [pc, #444]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004368:	4b6a      	ldr	r3, [pc, #424]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004376:	4967      	ldr	r1, [pc, #412]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800438a:	4b62      	ldr	r3, [pc, #392]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800438c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004390:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004398:	495e      	ldr	r1, [pc, #376]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043ac:	4b59      	ldr	r3, [pc, #356]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	4956      	ldr	r1, [pc, #344]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043ce:	4b51      	ldr	r3, [pc, #324]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	494d      	ldr	r1, [pc, #308]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d028      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043f0:	4b48      	ldr	r3, [pc, #288]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	4945      	ldr	r1, [pc, #276]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800440e:	d106      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004410:	4b40      	ldr	r3, [pc, #256]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	4a3f      	ldr	r2, [pc, #252]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800441a:	60d3      	str	r3, [r2, #12]
 800441c:	e011      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004426:	d10c      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3304      	adds	r3, #4
 800442c:	2101      	movs	r1, #1
 800442e:	4618      	mov	r0, r3
 8004430:	f000 f872 	bl	8004518 <RCCEx_PLLSAI1_Config>
 8004434:	4603      	mov	r3, r0
 8004436:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004438:	7cfb      	ldrb	r3, [r7, #19]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800443e:	7cfb      	ldrb	r3, [r7, #19]
 8004440:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d028      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800444e:	4b31      	ldr	r3, [pc, #196]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004454:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445c:	492d      	ldr	r1, [pc, #180]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800446c:	d106      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800446e:	4b29      	ldr	r3, [pc, #164]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	4a28      	ldr	r2, [pc, #160]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004474:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004478:	60d3      	str	r3, [r2, #12]
 800447a:	e011      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004480:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004484:	d10c      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3304      	adds	r3, #4
 800448a:	2101      	movs	r1, #1
 800448c:	4618      	mov	r0, r3
 800448e:	f000 f843 	bl	8004518 <RCCEx_PLLSAI1_Config>
 8004492:	4603      	mov	r3, r0
 8004494:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004496:	7cfb      	ldrb	r3, [r7, #19]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800449c:	7cfb      	ldrb	r3, [r7, #19]
 800449e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01c      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044ac:	4b19      	ldr	r3, [pc, #100]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ba:	4916      	ldr	r1, [pc, #88]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044ca:	d10c      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3304      	adds	r3, #4
 80044d0:	2102      	movs	r1, #2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 f820 	bl	8004518 <RCCEx_PLLSAI1_Config>
 80044d8:	4603      	mov	r3, r0
 80044da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80044e2:	7cfb      	ldrb	r3, [r7, #19]
 80044e4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044f2:	4b08      	ldr	r3, [pc, #32]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004500:	4904      	ldr	r1, [pc, #16]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004508:	7cbb      	ldrb	r3, [r7, #18]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40021000 	.word	0x40021000

08004518 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004526:	4b74      	ldr	r3, [pc, #464]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d018      	beq.n	8004564 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004532:	4b71      	ldr	r3, [pc, #452]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f003 0203 	and.w	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d10d      	bne.n	800455e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
       ||
 8004546:	2b00      	cmp	r3, #0
 8004548:	d009      	beq.n	800455e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800454a:	4b6b      	ldr	r3, [pc, #428]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	091b      	lsrs	r3, r3, #4
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
       ||
 800455a:	429a      	cmp	r2, r3
 800455c:	d047      	beq.n	80045ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	73fb      	strb	r3, [r7, #15]
 8004562:	e044      	b.n	80045ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b03      	cmp	r3, #3
 800456a:	d018      	beq.n	800459e <RCCEx_PLLSAI1_Config+0x86>
 800456c:	2b03      	cmp	r3, #3
 800456e:	d825      	bhi.n	80045bc <RCCEx_PLLSAI1_Config+0xa4>
 8004570:	2b01      	cmp	r3, #1
 8004572:	d002      	beq.n	800457a <RCCEx_PLLSAI1_Config+0x62>
 8004574:	2b02      	cmp	r3, #2
 8004576:	d009      	beq.n	800458c <RCCEx_PLLSAI1_Config+0x74>
 8004578:	e020      	b.n	80045bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800457a:	4b5f      	ldr	r3, [pc, #380]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d11d      	bne.n	80045c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800458a:	e01a      	b.n	80045c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800458c:	4b5a      	ldr	r3, [pc, #360]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004594:	2b00      	cmp	r3, #0
 8004596:	d116      	bne.n	80045c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800459c:	e013      	b.n	80045c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800459e:	4b56      	ldr	r3, [pc, #344]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10f      	bne.n	80045ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045aa:	4b53      	ldr	r3, [pc, #332]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d109      	bne.n	80045ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045ba:	e006      	b.n	80045ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
      break;
 80045c0:	e004      	b.n	80045cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045c2:	bf00      	nop
 80045c4:	e002      	b.n	80045cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045c6:	bf00      	nop
 80045c8:	e000      	b.n	80045cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10d      	bne.n	80045ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045d2:	4b49      	ldr	r3, [pc, #292]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6819      	ldr	r1, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	430b      	orrs	r3, r1
 80045e8:	4943      	ldr	r1, [pc, #268]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d17c      	bne.n	80046ee <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045f4:	4b40      	ldr	r3, [pc, #256]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a3f      	ldr	r2, [pc, #252]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004600:	f7fd fe9c 	bl	800233c <HAL_GetTick>
 8004604:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004606:	e009      	b.n	800461c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004608:	f7fd fe98 	bl	800233c <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d902      	bls.n	800461c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	73fb      	strb	r3, [r7, #15]
        break;
 800461a:	e005      	b.n	8004628 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800461c:	4b36      	ldr	r3, [pc, #216]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1ef      	bne.n	8004608 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d15f      	bne.n	80046ee <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d110      	bne.n	8004656 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004634:	4b30      	ldr	r3, [pc, #192]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800463c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6892      	ldr	r2, [r2, #8]
 8004644:	0211      	lsls	r1, r2, #8
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68d2      	ldr	r2, [r2, #12]
 800464a:	06d2      	lsls	r2, r2, #27
 800464c:	430a      	orrs	r2, r1
 800464e:	492a      	ldr	r1, [pc, #168]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004650:	4313      	orrs	r3, r2
 8004652:	610b      	str	r3, [r1, #16]
 8004654:	e027      	b.n	80046a6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d112      	bne.n	8004682 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800465c:	4b26      	ldr	r3, [pc, #152]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004664:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6892      	ldr	r2, [r2, #8]
 800466c:	0211      	lsls	r1, r2, #8
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6912      	ldr	r2, [r2, #16]
 8004672:	0852      	lsrs	r2, r2, #1
 8004674:	3a01      	subs	r2, #1
 8004676:	0552      	lsls	r2, r2, #21
 8004678:	430a      	orrs	r2, r1
 800467a:	491f      	ldr	r1, [pc, #124]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800467c:	4313      	orrs	r3, r2
 800467e:	610b      	str	r3, [r1, #16]
 8004680:	e011      	b.n	80046a6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004682:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800468a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6892      	ldr	r2, [r2, #8]
 8004692:	0211      	lsls	r1, r2, #8
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6952      	ldr	r2, [r2, #20]
 8004698:	0852      	lsrs	r2, r2, #1
 800469a:	3a01      	subs	r2, #1
 800469c:	0652      	lsls	r2, r2, #25
 800469e:	430a      	orrs	r2, r1
 80046a0:	4915      	ldr	r1, [pc, #84]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046a6:	4b14      	ldr	r3, [pc, #80]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a13      	ldr	r2, [pc, #76]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b2:	f7fd fe43 	bl	800233c <HAL_GetTick>
 80046b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046b8:	e009      	b.n	80046ce <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046ba:	f7fd fe3f 	bl	800233c <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d902      	bls.n	80046ce <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	73fb      	strb	r3, [r7, #15]
          break;
 80046cc:	e005      	b.n	80046da <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046ce:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0ef      	beq.n	80046ba <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d106      	bne.n	80046ee <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	4903      	ldr	r1, [pc, #12]	; (80046f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40021000 	.word	0x40021000

080046fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e095      	b.n	800483a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	2b00      	cmp	r3, #0
 8004714:	d108      	bne.n	8004728 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800471e:	d009      	beq.n	8004734 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	61da      	str	r2, [r3, #28]
 8004726:	e005      	b.n	8004734 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fd fb94 	bl	8001e7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004774:	d902      	bls.n	800477c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	e002      	b.n	8004782 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800477c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004780:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800478a:	d007      	beq.n	800479c <HAL_SPI_Init+0xa0>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004794:	d002      	beq.n	800479c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047de:	ea42 0103 	orr.w	r1, r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	0c1b      	lsrs	r3, r3, #16
 80047f8:	f003 0204 	and.w	r2, r3, #4
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004818:	ea42 0103 	orr.w	r1, r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b082      	sub	sp, #8
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e049      	b.n	80048e8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d106      	bne.n	800486e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7fd fc7d 	bl	8002168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2202      	movs	r2, #2
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3304      	adds	r3, #4
 800487e:	4619      	mov	r1, r3
 8004880:	4610      	mov	r0, r2
 8004882:	f000 fb53 	bl	8004f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e049      	b.n	8004996 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f841 	bl	800499e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3304      	adds	r3, #4
 800492c:	4619      	mov	r1, r3
 800492e:	4610      	mov	r0, r2
 8004930:	f000 fafc 	bl	8004f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
	...

080049b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d109      	bne.n	80049d8 <HAL_TIM_PWM_Start+0x24>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	bf14      	ite	ne
 80049d0:	2301      	movne	r3, #1
 80049d2:	2300      	moveq	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	e03c      	b.n	8004a52 <HAL_TIM_PWM_Start+0x9e>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d109      	bne.n	80049f2 <HAL_TIM_PWM_Start+0x3e>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	bf14      	ite	ne
 80049ea:	2301      	movne	r3, #1
 80049ec:	2300      	moveq	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	e02f      	b.n	8004a52 <HAL_TIM_PWM_Start+0x9e>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d109      	bne.n	8004a0c <HAL_TIM_PWM_Start+0x58>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	bf14      	ite	ne
 8004a04:	2301      	movne	r3, #1
 8004a06:	2300      	moveq	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	e022      	b.n	8004a52 <HAL_TIM_PWM_Start+0x9e>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b0c      	cmp	r3, #12
 8004a10:	d109      	bne.n	8004a26 <HAL_TIM_PWM_Start+0x72>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	bf14      	ite	ne
 8004a1e:	2301      	movne	r3, #1
 8004a20:	2300      	moveq	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	e015      	b.n	8004a52 <HAL_TIM_PWM_Start+0x9e>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b10      	cmp	r3, #16
 8004a2a:	d109      	bne.n	8004a40 <HAL_TIM_PWM_Start+0x8c>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	bf14      	ite	ne
 8004a38:	2301      	movne	r3, #1
 8004a3a:	2300      	moveq	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	e008      	b.n	8004a52 <HAL_TIM_PWM_Start+0x9e>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	bf14      	ite	ne
 8004a4c:	2301      	movne	r3, #1
 8004a4e:	2300      	moveq	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e07e      	b.n	8004b58 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d104      	bne.n	8004a6a <HAL_TIM_PWM_Start+0xb6>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a68:	e023      	b.n	8004ab2 <HAL_TIM_PWM_Start+0xfe>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d104      	bne.n	8004a7a <HAL_TIM_PWM_Start+0xc6>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a78:	e01b      	b.n	8004ab2 <HAL_TIM_PWM_Start+0xfe>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d104      	bne.n	8004a8a <HAL_TIM_PWM_Start+0xd6>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a88:	e013      	b.n	8004ab2 <HAL_TIM_PWM_Start+0xfe>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b0c      	cmp	r3, #12
 8004a8e:	d104      	bne.n	8004a9a <HAL_TIM_PWM_Start+0xe6>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a98:	e00b      	b.n	8004ab2 <HAL_TIM_PWM_Start+0xfe>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b10      	cmp	r3, #16
 8004a9e:	d104      	bne.n	8004aaa <HAL_TIM_PWM_Start+0xf6>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aa8:	e003      	b.n	8004ab2 <HAL_TIM_PWM_Start+0xfe>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2202      	movs	r2, #2
 8004aae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	6839      	ldr	r1, [r7, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fdb2 	bl	8005624 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a26      	ldr	r2, [pc, #152]	; (8004b60 <HAL_TIM_PWM_Start+0x1ac>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d009      	beq.n	8004ade <HAL_TIM_PWM_Start+0x12a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a25      	ldr	r2, [pc, #148]	; (8004b64 <HAL_TIM_PWM_Start+0x1b0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d004      	beq.n	8004ade <HAL_TIM_PWM_Start+0x12a>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a23      	ldr	r2, [pc, #140]	; (8004b68 <HAL_TIM_PWM_Start+0x1b4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d101      	bne.n	8004ae2 <HAL_TIM_PWM_Start+0x12e>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <HAL_TIM_PWM_Start+0x130>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d007      	beq.n	8004af8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004af6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a18      	ldr	r2, [pc, #96]	; (8004b60 <HAL_TIM_PWM_Start+0x1ac>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d009      	beq.n	8004b16 <HAL_TIM_PWM_Start+0x162>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0a:	d004      	beq.n	8004b16 <HAL_TIM_PWM_Start+0x162>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a14      	ldr	r2, [pc, #80]	; (8004b64 <HAL_TIM_PWM_Start+0x1b0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d115      	bne.n	8004b42 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <HAL_TIM_PWM_Start+0x1b8>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b06      	cmp	r3, #6
 8004b26:	d015      	beq.n	8004b54 <HAL_TIM_PWM_Start+0x1a0>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b2e:	d011      	beq.n	8004b54 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b40:	e008      	b.n	8004b54 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0201 	orr.w	r2, r2, #1
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	e000      	b.n	8004b56 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40012c00 	.word	0x40012c00
 8004b64:	40014000 	.word	0x40014000
 8004b68:	40014400 	.word	0x40014400
 8004b6c:	00010007 	.word	0x00010007

08004b70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e0ff      	b.n	8004d8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b14      	cmp	r3, #20
 8004b9a:	f200 80f0 	bhi.w	8004d7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba4:	08004bf9 	.word	0x08004bf9
 8004ba8:	08004d7f 	.word	0x08004d7f
 8004bac:	08004d7f 	.word	0x08004d7f
 8004bb0:	08004d7f 	.word	0x08004d7f
 8004bb4:	08004c39 	.word	0x08004c39
 8004bb8:	08004d7f 	.word	0x08004d7f
 8004bbc:	08004d7f 	.word	0x08004d7f
 8004bc0:	08004d7f 	.word	0x08004d7f
 8004bc4:	08004c7b 	.word	0x08004c7b
 8004bc8:	08004d7f 	.word	0x08004d7f
 8004bcc:	08004d7f 	.word	0x08004d7f
 8004bd0:	08004d7f 	.word	0x08004d7f
 8004bd4:	08004cbb 	.word	0x08004cbb
 8004bd8:	08004d7f 	.word	0x08004d7f
 8004bdc:	08004d7f 	.word	0x08004d7f
 8004be0:	08004d7f 	.word	0x08004d7f
 8004be4:	08004cfd 	.word	0x08004cfd
 8004be8:	08004d7f 	.word	0x08004d7f
 8004bec:	08004d7f 	.word	0x08004d7f
 8004bf0:	08004d7f 	.word	0x08004d7f
 8004bf4:	08004d3d 	.word	0x08004d3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 f9f8 	bl	8004ff4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0208 	orr.w	r2, r2, #8
 8004c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699a      	ldr	r2, [r3, #24]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0204 	bic.w	r2, r2, #4
 8004c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6999      	ldr	r1, [r3, #24]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	691a      	ldr	r2, [r3, #16]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	619a      	str	r2, [r3, #24]
      break;
 8004c36:	e0a5      	b.n	8004d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fa54 	bl	80050ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699a      	ldr	r2, [r3, #24]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6999      	ldr	r1, [r3, #24]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	021a      	lsls	r2, r3, #8
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	619a      	str	r2, [r3, #24]
      break;
 8004c78:	e084      	b.n	8004d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 faad 	bl	80051e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69da      	ldr	r2, [r3, #28]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0208 	orr.w	r2, r2, #8
 8004c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69da      	ldr	r2, [r3, #28]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0204 	bic.w	r2, r2, #4
 8004ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69d9      	ldr	r1, [r3, #28]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	61da      	str	r2, [r3, #28]
      break;
 8004cb8:	e064      	b.n	8004d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68b9      	ldr	r1, [r7, #8]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fb05 	bl	80052d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69da      	ldr	r2, [r3, #28]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69d9      	ldr	r1, [r3, #28]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	021a      	lsls	r2, r3, #8
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	61da      	str	r2, [r3, #28]
      break;
 8004cfa:	e043      	b.n	8004d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fb42 	bl	800538c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0208 	orr.w	r2, r2, #8
 8004d16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0204 	bic.w	r2, r2, #4
 8004d26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	691a      	ldr	r2, [r3, #16]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d3a:	e023      	b.n	8004d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fb7a 	bl	800543c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	021a      	lsls	r2, r3, #8
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d7c:	e002      	b.n	8004d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	75fb      	strb	r3, [r7, #23]
      break;
 8004d82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop

08004d98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_TIM_ConfigClockSource+0x1c>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e0b6      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x18a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df0:	d03e      	beq.n	8004e70 <HAL_TIM_ConfigClockSource+0xd8>
 8004df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df6:	f200 8087 	bhi.w	8004f08 <HAL_TIM_ConfigClockSource+0x170>
 8004dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfe:	f000 8086 	beq.w	8004f0e <HAL_TIM_ConfigClockSource+0x176>
 8004e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e06:	d87f      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x170>
 8004e08:	2b70      	cmp	r3, #112	; 0x70
 8004e0a:	d01a      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0xaa>
 8004e0c:	2b70      	cmp	r3, #112	; 0x70
 8004e0e:	d87b      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x170>
 8004e10:	2b60      	cmp	r3, #96	; 0x60
 8004e12:	d050      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x11e>
 8004e14:	2b60      	cmp	r3, #96	; 0x60
 8004e16:	d877      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x170>
 8004e18:	2b50      	cmp	r3, #80	; 0x50
 8004e1a:	d03c      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0xfe>
 8004e1c:	2b50      	cmp	r3, #80	; 0x50
 8004e1e:	d873      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x170>
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	d058      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x13e>
 8004e24:	2b40      	cmp	r3, #64	; 0x40
 8004e26:	d86f      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x170>
 8004e28:	2b30      	cmp	r3, #48	; 0x30
 8004e2a:	d064      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x15e>
 8004e2c:	2b30      	cmp	r3, #48	; 0x30
 8004e2e:	d86b      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x170>
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d060      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x15e>
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	d867      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x170>
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d05c      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x15e>
 8004e3c:	2b10      	cmp	r3, #16
 8004e3e:	d05a      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x15e>
 8004e40:	e062      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6818      	ldr	r0, [r3, #0]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6899      	ldr	r1, [r3, #8]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f000 fbc7 	bl	80055e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	609a      	str	r2, [r3, #8]
      break;
 8004e6e:	e04f      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6818      	ldr	r0, [r3, #0]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	6899      	ldr	r1, [r3, #8]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f000 fbb0 	bl	80055e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e92:	609a      	str	r2, [r3, #8]
      break;
 8004e94:	e03c      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6859      	ldr	r1, [r3, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f000 fb24 	bl	80054f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2150      	movs	r1, #80	; 0x50
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fb7d 	bl	80055ae <TIM_ITRx_SetConfig>
      break;
 8004eb4:	e02c      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6859      	ldr	r1, [r3, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f000 fb43 	bl	800554e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2160      	movs	r1, #96	; 0x60
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fb6d 	bl	80055ae <TIM_ITRx_SetConfig>
      break;
 8004ed4:	e01c      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	6859      	ldr	r1, [r3, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f000 fb04 	bl	80054f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2140      	movs	r1, #64	; 0x40
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fb5d 	bl	80055ae <TIM_ITRx_SetConfig>
      break;
 8004ef4:	e00c      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4619      	mov	r1, r3
 8004f00:	4610      	mov	r0, r2
 8004f02:	f000 fb54 	bl	80055ae <TIM_ITRx_SetConfig>
      break;
 8004f06:	e003      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f0c:	e000      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a2a      	ldr	r2, [pc, #168]	; (8004fe8 <TIM_Base_SetConfig+0xbc>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_Base_SetConfig+0x20>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4a:	d108      	bne.n	8004f5e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a21      	ldr	r2, [pc, #132]	; (8004fe8 <TIM_Base_SetConfig+0xbc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00b      	beq.n	8004f7e <TIM_Base_SetConfig+0x52>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6c:	d007      	beq.n	8004f7e <TIM_Base_SetConfig+0x52>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a1e      	ldr	r2, [pc, #120]	; (8004fec <TIM_Base_SetConfig+0xc0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d003      	beq.n	8004f7e <TIM_Base_SetConfig+0x52>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a1d      	ldr	r2, [pc, #116]	; (8004ff0 <TIM_Base_SetConfig+0xc4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d108      	bne.n	8004f90 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a0c      	ldr	r2, [pc, #48]	; (8004fe8 <TIM_Base_SetConfig+0xbc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d007      	beq.n	8004fcc <TIM_Base_SetConfig+0xa0>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a0b      	ldr	r2, [pc, #44]	; (8004fec <TIM_Base_SetConfig+0xc0>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d003      	beq.n	8004fcc <TIM_Base_SetConfig+0xa0>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a0a      	ldr	r2, [pc, #40]	; (8004ff0 <TIM_Base_SetConfig+0xc4>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d103      	bne.n	8004fd4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	691a      	ldr	r2, [r3, #16]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	615a      	str	r2, [r3, #20]
}
 8004fda:	bf00      	nop
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40012c00 	.word	0x40012c00
 8004fec:	40014000 	.word	0x40014000
 8004ff0:	40014400 	.word	0x40014400

08004ff4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	f023 0201 	bic.w	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0303 	bic.w	r3, r3, #3
 800502e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f023 0302 	bic.w	r3, r3, #2
 8005040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a24      	ldr	r2, [pc, #144]	; (80050e0 <TIM_OC1_SetConfig+0xec>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d007      	beq.n	8005064 <TIM_OC1_SetConfig+0x70>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a23      	ldr	r2, [pc, #140]	; (80050e4 <TIM_OC1_SetConfig+0xf0>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d003      	beq.n	8005064 <TIM_OC1_SetConfig+0x70>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a22      	ldr	r2, [pc, #136]	; (80050e8 <TIM_OC1_SetConfig+0xf4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d10c      	bne.n	800507e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f023 0308 	bic.w	r3, r3, #8
 800506a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f023 0304 	bic.w	r3, r3, #4
 800507c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a17      	ldr	r2, [pc, #92]	; (80050e0 <TIM_OC1_SetConfig+0xec>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d007      	beq.n	8005096 <TIM_OC1_SetConfig+0xa2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a16      	ldr	r2, [pc, #88]	; (80050e4 <TIM_OC1_SetConfig+0xf0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d003      	beq.n	8005096 <TIM_OC1_SetConfig+0xa2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a15      	ldr	r2, [pc, #84]	; (80050e8 <TIM_OC1_SetConfig+0xf4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d111      	bne.n	80050ba <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800509c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	621a      	str	r2, [r3, #32]
}
 80050d4:	bf00      	nop
 80050d6:	371c      	adds	r7, #28
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	40014000 	.word	0x40014000
 80050e8:	40014400 	.word	0x40014400

080050ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	f023 0210 	bic.w	r2, r3, #16
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800511a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800511e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f023 0320 	bic.w	r3, r3, #32
 800513a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a22      	ldr	r2, [pc, #136]	; (80051d4 <TIM_OC2_SetConfig+0xe8>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d10d      	bne.n	800516c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800516a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a19      	ldr	r2, [pc, #100]	; (80051d4 <TIM_OC2_SetConfig+0xe8>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d007      	beq.n	8005184 <TIM_OC2_SetConfig+0x98>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a18      	ldr	r2, [pc, #96]	; (80051d8 <TIM_OC2_SetConfig+0xec>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d003      	beq.n	8005184 <TIM_OC2_SetConfig+0x98>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a17      	ldr	r2, [pc, #92]	; (80051dc <TIM_OC2_SetConfig+0xf0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d113      	bne.n	80051ac <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800518a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005192:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	621a      	str	r2, [r3, #32]
}
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40012c00 	.word	0x40012c00
 80051d8:	40014000 	.word	0x40014000
 80051dc:	40014400 	.word	0x40014400

080051e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800520e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0303 	bic.w	r3, r3, #3
 800521a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800522c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	4313      	orrs	r3, r2
 8005238:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a21      	ldr	r2, [pc, #132]	; (80052c4 <TIM_OC3_SetConfig+0xe4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d10d      	bne.n	800525e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	021b      	lsls	r3, r3, #8
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800525c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a18      	ldr	r2, [pc, #96]	; (80052c4 <TIM_OC3_SetConfig+0xe4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d007      	beq.n	8005276 <TIM_OC3_SetConfig+0x96>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a17      	ldr	r2, [pc, #92]	; (80052c8 <TIM_OC3_SetConfig+0xe8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d003      	beq.n	8005276 <TIM_OC3_SetConfig+0x96>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a16      	ldr	r2, [pc, #88]	; (80052cc <TIM_OC3_SetConfig+0xec>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d113      	bne.n	800529e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800527c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	621a      	str	r2, [r3, #32]
}
 80052b8:	bf00      	nop
 80052ba:	371c      	adds	r7, #28
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	40012c00 	.word	0x40012c00
 80052c8:	40014000 	.word	0x40014000
 80052cc:	40014400 	.word	0x40014400

080052d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800530a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	021b      	lsls	r3, r3, #8
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4313      	orrs	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800531e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	031b      	lsls	r3, r3, #12
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a14      	ldr	r2, [pc, #80]	; (8005380 <TIM_OC4_SetConfig+0xb0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d007      	beq.n	8005344 <TIM_OC4_SetConfig+0x74>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a13      	ldr	r2, [pc, #76]	; (8005384 <TIM_OC4_SetConfig+0xb4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d003      	beq.n	8005344 <TIM_OC4_SetConfig+0x74>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a12      	ldr	r2, [pc, #72]	; (8005388 <TIM_OC4_SetConfig+0xb8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d109      	bne.n	8005358 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800534a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	019b      	lsls	r3, r3, #6
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	621a      	str	r2, [r3, #32]
}
 8005372:	bf00      	nop
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40012c00 	.word	0x40012c00
 8005384:	40014000 	.word	0x40014000
 8005388:	40014400 	.word	0x40014400

0800538c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80053d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	041b      	lsls	r3, r3, #16
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a13      	ldr	r2, [pc, #76]	; (8005430 <TIM_OC5_SetConfig+0xa4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d007      	beq.n	80053f6 <TIM_OC5_SetConfig+0x6a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a12      	ldr	r2, [pc, #72]	; (8005434 <TIM_OC5_SetConfig+0xa8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d003      	beq.n	80053f6 <TIM_OC5_SetConfig+0x6a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a11      	ldr	r2, [pc, #68]	; (8005438 <TIM_OC5_SetConfig+0xac>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d109      	bne.n	800540a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	021b      	lsls	r3, r3, #8
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	621a      	str	r2, [r3, #32]
}
 8005424:	bf00      	nop
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	40012c00 	.word	0x40012c00
 8005434:	40014000 	.word	0x40014000
 8005438:	40014400 	.word	0x40014400

0800543c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800546a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005482:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	051b      	lsls	r3, r3, #20
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a14      	ldr	r2, [pc, #80]	; (80054e4 <TIM_OC6_SetConfig+0xa8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d007      	beq.n	80054a8 <TIM_OC6_SetConfig+0x6c>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a13      	ldr	r2, [pc, #76]	; (80054e8 <TIM_OC6_SetConfig+0xac>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_OC6_SetConfig+0x6c>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a12      	ldr	r2, [pc, #72]	; (80054ec <TIM_OC6_SetConfig+0xb0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d109      	bne.n	80054bc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	029b      	lsls	r3, r3, #10
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	621a      	str	r2, [r3, #32]
}
 80054d6:	bf00      	nop
 80054d8:	371c      	adds	r7, #28
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	40012c00 	.word	0x40012c00
 80054e8:	40014000 	.word	0x40014000
 80054ec:	40014400 	.word	0x40014400

080054f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f023 0201 	bic.w	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800551a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f023 030a 	bic.w	r3, r3, #10
 800552c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800554e:	b480      	push	{r7}
 8005550:	b087      	sub	sp, #28
 8005552:	af00      	add	r7, sp, #0
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f023 0210 	bic.w	r2, r3, #16
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005578:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	031b      	lsls	r3, r3, #12
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800558a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	621a      	str	r2, [r3, #32]
}
 80055a2:	bf00      	nop
 80055a4:	371c      	adds	r7, #28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b085      	sub	sp, #20
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f043 0307 	orr.w	r3, r3, #7
 80055d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	609a      	str	r2, [r3, #8]
}
 80055d8:	bf00      	nop
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	021a      	lsls	r2, r3, #8
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	431a      	orrs	r2, r3
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4313      	orrs	r3, r2
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	609a      	str	r2, [r3, #8]
}
 8005618:	bf00      	nop
 800561a:	371c      	adds	r7, #28
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f003 031f 	and.w	r3, r3, #31
 8005636:	2201      	movs	r2, #1
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a1a      	ldr	r2, [r3, #32]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	43db      	mvns	r3, r3
 8005646:	401a      	ands	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a1a      	ldr	r2, [r3, #32]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f003 031f 	and.w	r3, r3, #31
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	fa01 f303 	lsl.w	r3, r1, r3
 800565c:	431a      	orrs	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	621a      	str	r2, [r3, #32]
}
 8005662:	bf00      	nop
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
	...

08005670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005684:	2302      	movs	r3, #2
 8005686:	e04f      	b.n	8005728 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a21      	ldr	r2, [pc, #132]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d108      	bne.n	80056c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80056b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a14      	ldr	r2, [pc, #80]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d009      	beq.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f0:	d004      	beq.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a10      	ldr	r2, [pc, #64]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d10c      	bne.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005702:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	4313      	orrs	r3, r2
 800570c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	40012c00 	.word	0x40012c00
 8005738:	40014000 	.word	0x40014000

0800573c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005750:	2b01      	cmp	r3, #1
 8005752:	d101      	bne.n	8005758 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005754:	2302      	movs	r3, #2
 8005756:	e060      	b.n	800581a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	4313      	orrs	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	4313      	orrs	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	041b      	lsls	r3, r3, #16
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a14      	ldr	r2, [pc, #80]	; (8005828 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d115      	bne.n	8005808 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	051b      	lsls	r3, r3, #20
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	4313      	orrs	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	40012c00 	.word	0x40012c00

0800582c <__errno>:
 800582c:	4b01      	ldr	r3, [pc, #4]	; (8005834 <__errno+0x8>)
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	2000000c 	.word	0x2000000c

08005838 <__libc_init_array>:
 8005838:	b570      	push	{r4, r5, r6, lr}
 800583a:	4d0d      	ldr	r5, [pc, #52]	; (8005870 <__libc_init_array+0x38>)
 800583c:	4c0d      	ldr	r4, [pc, #52]	; (8005874 <__libc_init_array+0x3c>)
 800583e:	1b64      	subs	r4, r4, r5
 8005840:	10a4      	asrs	r4, r4, #2
 8005842:	2600      	movs	r6, #0
 8005844:	42a6      	cmp	r6, r4
 8005846:	d109      	bne.n	800585c <__libc_init_array+0x24>
 8005848:	4d0b      	ldr	r5, [pc, #44]	; (8005878 <__libc_init_array+0x40>)
 800584a:	4c0c      	ldr	r4, [pc, #48]	; (800587c <__libc_init_array+0x44>)
 800584c:	f000 ff3a 	bl	80066c4 <_init>
 8005850:	1b64      	subs	r4, r4, r5
 8005852:	10a4      	asrs	r4, r4, #2
 8005854:	2600      	movs	r6, #0
 8005856:	42a6      	cmp	r6, r4
 8005858:	d105      	bne.n	8005866 <__libc_init_array+0x2e>
 800585a:	bd70      	pop	{r4, r5, r6, pc}
 800585c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005860:	4798      	blx	r3
 8005862:	3601      	adds	r6, #1
 8005864:	e7ee      	b.n	8005844 <__libc_init_array+0xc>
 8005866:	f855 3b04 	ldr.w	r3, [r5], #4
 800586a:	4798      	blx	r3
 800586c:	3601      	adds	r6, #1
 800586e:	e7f2      	b.n	8005856 <__libc_init_array+0x1e>
 8005870:	08006760 	.word	0x08006760
 8005874:	08006760 	.word	0x08006760
 8005878:	08006760 	.word	0x08006760
 800587c:	08006764 	.word	0x08006764

08005880 <memset>:
 8005880:	4402      	add	r2, r0
 8005882:	4603      	mov	r3, r0
 8005884:	4293      	cmp	r3, r2
 8005886:	d100      	bne.n	800588a <memset+0xa>
 8005888:	4770      	bx	lr
 800588a:	f803 1b01 	strb.w	r1, [r3], #1
 800588e:	e7f9      	b.n	8005884 <memset+0x4>

08005890 <pow>:
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	ed2d 8b02 	vpush	{d8}
 8005896:	eeb0 8a40 	vmov.f32	s16, s0
 800589a:	eef0 8a60 	vmov.f32	s17, s1
 800589e:	ec55 4b11 	vmov	r4, r5, d1
 80058a2:	f000 f865 	bl	8005970 <__ieee754_pow>
 80058a6:	4622      	mov	r2, r4
 80058a8:	462b      	mov	r3, r5
 80058aa:	4620      	mov	r0, r4
 80058ac:	4629      	mov	r1, r5
 80058ae:	ec57 6b10 	vmov	r6, r7, d0
 80058b2:	f7fb f8e3 	bl	8000a7c <__aeabi_dcmpun>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d13b      	bne.n	8005932 <pow+0xa2>
 80058ba:	ec51 0b18 	vmov	r0, r1, d8
 80058be:	2200      	movs	r2, #0
 80058c0:	2300      	movs	r3, #0
 80058c2:	f7fb f8a9 	bl	8000a18 <__aeabi_dcmpeq>
 80058c6:	b1b8      	cbz	r0, 80058f8 <pow+0x68>
 80058c8:	2200      	movs	r2, #0
 80058ca:	2300      	movs	r3, #0
 80058cc:	4620      	mov	r0, r4
 80058ce:	4629      	mov	r1, r5
 80058d0:	f7fb f8a2 	bl	8000a18 <__aeabi_dcmpeq>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d146      	bne.n	8005966 <pow+0xd6>
 80058d8:	ec45 4b10 	vmov	d0, r4, r5
 80058dc:	f000 fe61 	bl	80065a2 <finite>
 80058e0:	b338      	cbz	r0, 8005932 <pow+0xa2>
 80058e2:	2200      	movs	r2, #0
 80058e4:	2300      	movs	r3, #0
 80058e6:	4620      	mov	r0, r4
 80058e8:	4629      	mov	r1, r5
 80058ea:	f7fb f89f 	bl	8000a2c <__aeabi_dcmplt>
 80058ee:	b300      	cbz	r0, 8005932 <pow+0xa2>
 80058f0:	f7ff ff9c 	bl	800582c <__errno>
 80058f4:	2322      	movs	r3, #34	; 0x22
 80058f6:	e01b      	b.n	8005930 <pow+0xa0>
 80058f8:	ec47 6b10 	vmov	d0, r6, r7
 80058fc:	f000 fe51 	bl	80065a2 <finite>
 8005900:	b9e0      	cbnz	r0, 800593c <pow+0xac>
 8005902:	eeb0 0a48 	vmov.f32	s0, s16
 8005906:	eef0 0a68 	vmov.f32	s1, s17
 800590a:	f000 fe4a 	bl	80065a2 <finite>
 800590e:	b1a8      	cbz	r0, 800593c <pow+0xac>
 8005910:	ec45 4b10 	vmov	d0, r4, r5
 8005914:	f000 fe45 	bl	80065a2 <finite>
 8005918:	b180      	cbz	r0, 800593c <pow+0xac>
 800591a:	4632      	mov	r2, r6
 800591c:	463b      	mov	r3, r7
 800591e:	4630      	mov	r0, r6
 8005920:	4639      	mov	r1, r7
 8005922:	f7fb f8ab 	bl	8000a7c <__aeabi_dcmpun>
 8005926:	2800      	cmp	r0, #0
 8005928:	d0e2      	beq.n	80058f0 <pow+0x60>
 800592a:	f7ff ff7f 	bl	800582c <__errno>
 800592e:	2321      	movs	r3, #33	; 0x21
 8005930:	6003      	str	r3, [r0, #0]
 8005932:	ecbd 8b02 	vpop	{d8}
 8005936:	ec47 6b10 	vmov	d0, r6, r7
 800593a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800593c:	2200      	movs	r2, #0
 800593e:	2300      	movs	r3, #0
 8005940:	4630      	mov	r0, r6
 8005942:	4639      	mov	r1, r7
 8005944:	f7fb f868 	bl	8000a18 <__aeabi_dcmpeq>
 8005948:	2800      	cmp	r0, #0
 800594a:	d0f2      	beq.n	8005932 <pow+0xa2>
 800594c:	eeb0 0a48 	vmov.f32	s0, s16
 8005950:	eef0 0a68 	vmov.f32	s1, s17
 8005954:	f000 fe25 	bl	80065a2 <finite>
 8005958:	2800      	cmp	r0, #0
 800595a:	d0ea      	beq.n	8005932 <pow+0xa2>
 800595c:	ec45 4b10 	vmov	d0, r4, r5
 8005960:	f000 fe1f 	bl	80065a2 <finite>
 8005964:	e7c3      	b.n	80058ee <pow+0x5e>
 8005966:	4f01      	ldr	r7, [pc, #4]	; (800596c <pow+0xdc>)
 8005968:	2600      	movs	r6, #0
 800596a:	e7e2      	b.n	8005932 <pow+0xa2>
 800596c:	3ff00000 	.word	0x3ff00000

08005970 <__ieee754_pow>:
 8005970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005974:	ed2d 8b06 	vpush	{d8-d10}
 8005978:	b089      	sub	sp, #36	; 0x24
 800597a:	ed8d 1b00 	vstr	d1, [sp]
 800597e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005982:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005986:	ea58 0102 	orrs.w	r1, r8, r2
 800598a:	ec57 6b10 	vmov	r6, r7, d0
 800598e:	d115      	bne.n	80059bc <__ieee754_pow+0x4c>
 8005990:	19b3      	adds	r3, r6, r6
 8005992:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005996:	4152      	adcs	r2, r2
 8005998:	4299      	cmp	r1, r3
 800599a:	4b89      	ldr	r3, [pc, #548]	; (8005bc0 <__ieee754_pow+0x250>)
 800599c:	4193      	sbcs	r3, r2
 800599e:	f080 84d2 	bcs.w	8006346 <__ieee754_pow+0x9d6>
 80059a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059a6:	4630      	mov	r0, r6
 80059a8:	4639      	mov	r1, r7
 80059aa:	f7fa fc17 	bl	80001dc <__adddf3>
 80059ae:	ec41 0b10 	vmov	d0, r0, r1
 80059b2:	b009      	add	sp, #36	; 0x24
 80059b4:	ecbd 8b06 	vpop	{d8-d10}
 80059b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059bc:	4b81      	ldr	r3, [pc, #516]	; (8005bc4 <__ieee754_pow+0x254>)
 80059be:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80059c2:	429c      	cmp	r4, r3
 80059c4:	ee10 aa10 	vmov	sl, s0
 80059c8:	463d      	mov	r5, r7
 80059ca:	dc06      	bgt.n	80059da <__ieee754_pow+0x6a>
 80059cc:	d101      	bne.n	80059d2 <__ieee754_pow+0x62>
 80059ce:	2e00      	cmp	r6, #0
 80059d0:	d1e7      	bne.n	80059a2 <__ieee754_pow+0x32>
 80059d2:	4598      	cmp	r8, r3
 80059d4:	dc01      	bgt.n	80059da <__ieee754_pow+0x6a>
 80059d6:	d10f      	bne.n	80059f8 <__ieee754_pow+0x88>
 80059d8:	b172      	cbz	r2, 80059f8 <__ieee754_pow+0x88>
 80059da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80059de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80059e2:	ea55 050a 	orrs.w	r5, r5, sl
 80059e6:	d1dc      	bne.n	80059a2 <__ieee754_pow+0x32>
 80059e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80059ec:	18db      	adds	r3, r3, r3
 80059ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80059f2:	4152      	adcs	r2, r2
 80059f4:	429d      	cmp	r5, r3
 80059f6:	e7d0      	b.n	800599a <__ieee754_pow+0x2a>
 80059f8:	2d00      	cmp	r5, #0
 80059fa:	da3b      	bge.n	8005a74 <__ieee754_pow+0x104>
 80059fc:	4b72      	ldr	r3, [pc, #456]	; (8005bc8 <__ieee754_pow+0x258>)
 80059fe:	4598      	cmp	r8, r3
 8005a00:	dc51      	bgt.n	8005aa6 <__ieee754_pow+0x136>
 8005a02:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005a06:	4598      	cmp	r8, r3
 8005a08:	f340 84ac 	ble.w	8006364 <__ieee754_pow+0x9f4>
 8005a0c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005a10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005a14:	2b14      	cmp	r3, #20
 8005a16:	dd0f      	ble.n	8005a38 <__ieee754_pow+0xc8>
 8005a18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005a1c:	fa22 f103 	lsr.w	r1, r2, r3
 8005a20:	fa01 f303 	lsl.w	r3, r1, r3
 8005a24:	4293      	cmp	r3, r2
 8005a26:	f040 849d 	bne.w	8006364 <__ieee754_pow+0x9f4>
 8005a2a:	f001 0101 	and.w	r1, r1, #1
 8005a2e:	f1c1 0302 	rsb	r3, r1, #2
 8005a32:	9304      	str	r3, [sp, #16]
 8005a34:	b182      	cbz	r2, 8005a58 <__ieee754_pow+0xe8>
 8005a36:	e05f      	b.n	8005af8 <__ieee754_pow+0x188>
 8005a38:	2a00      	cmp	r2, #0
 8005a3a:	d15b      	bne.n	8005af4 <__ieee754_pow+0x184>
 8005a3c:	f1c3 0314 	rsb	r3, r3, #20
 8005a40:	fa48 f103 	asr.w	r1, r8, r3
 8005a44:	fa01 f303 	lsl.w	r3, r1, r3
 8005a48:	4543      	cmp	r3, r8
 8005a4a:	f040 8488 	bne.w	800635e <__ieee754_pow+0x9ee>
 8005a4e:	f001 0101 	and.w	r1, r1, #1
 8005a52:	f1c1 0302 	rsb	r3, r1, #2
 8005a56:	9304      	str	r3, [sp, #16]
 8005a58:	4b5c      	ldr	r3, [pc, #368]	; (8005bcc <__ieee754_pow+0x25c>)
 8005a5a:	4598      	cmp	r8, r3
 8005a5c:	d132      	bne.n	8005ac4 <__ieee754_pow+0x154>
 8005a5e:	f1b9 0f00 	cmp.w	r9, #0
 8005a62:	f280 8478 	bge.w	8006356 <__ieee754_pow+0x9e6>
 8005a66:	4959      	ldr	r1, [pc, #356]	; (8005bcc <__ieee754_pow+0x25c>)
 8005a68:	4632      	mov	r2, r6
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	f7fa fe95 	bl	800079c <__aeabi_ddiv>
 8005a72:	e79c      	b.n	80059ae <__ieee754_pow+0x3e>
 8005a74:	2300      	movs	r3, #0
 8005a76:	9304      	str	r3, [sp, #16]
 8005a78:	2a00      	cmp	r2, #0
 8005a7a:	d13d      	bne.n	8005af8 <__ieee754_pow+0x188>
 8005a7c:	4b51      	ldr	r3, [pc, #324]	; (8005bc4 <__ieee754_pow+0x254>)
 8005a7e:	4598      	cmp	r8, r3
 8005a80:	d1ea      	bne.n	8005a58 <__ieee754_pow+0xe8>
 8005a82:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005a86:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005a8a:	ea53 030a 	orrs.w	r3, r3, sl
 8005a8e:	f000 845a 	beq.w	8006346 <__ieee754_pow+0x9d6>
 8005a92:	4b4f      	ldr	r3, [pc, #316]	; (8005bd0 <__ieee754_pow+0x260>)
 8005a94:	429c      	cmp	r4, r3
 8005a96:	dd08      	ble.n	8005aaa <__ieee754_pow+0x13a>
 8005a98:	f1b9 0f00 	cmp.w	r9, #0
 8005a9c:	f2c0 8457 	blt.w	800634e <__ieee754_pow+0x9de>
 8005aa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005aa4:	e783      	b.n	80059ae <__ieee754_pow+0x3e>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e7e5      	b.n	8005a76 <__ieee754_pow+0x106>
 8005aaa:	f1b9 0f00 	cmp.w	r9, #0
 8005aae:	f04f 0000 	mov.w	r0, #0
 8005ab2:	f04f 0100 	mov.w	r1, #0
 8005ab6:	f6bf af7a 	bge.w	80059ae <__ieee754_pow+0x3e>
 8005aba:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005abe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005ac2:	e774      	b.n	80059ae <__ieee754_pow+0x3e>
 8005ac4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005ac8:	d106      	bne.n	8005ad8 <__ieee754_pow+0x168>
 8005aca:	4632      	mov	r2, r6
 8005acc:	463b      	mov	r3, r7
 8005ace:	4630      	mov	r0, r6
 8005ad0:	4639      	mov	r1, r7
 8005ad2:	f7fa fd39 	bl	8000548 <__aeabi_dmul>
 8005ad6:	e76a      	b.n	80059ae <__ieee754_pow+0x3e>
 8005ad8:	4b3e      	ldr	r3, [pc, #248]	; (8005bd4 <__ieee754_pow+0x264>)
 8005ada:	4599      	cmp	r9, r3
 8005adc:	d10c      	bne.n	8005af8 <__ieee754_pow+0x188>
 8005ade:	2d00      	cmp	r5, #0
 8005ae0:	db0a      	blt.n	8005af8 <__ieee754_pow+0x188>
 8005ae2:	ec47 6b10 	vmov	d0, r6, r7
 8005ae6:	b009      	add	sp, #36	; 0x24
 8005ae8:	ecbd 8b06 	vpop	{d8-d10}
 8005aec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af0:	f000 bc6c 	b.w	80063cc <__ieee754_sqrt>
 8005af4:	2300      	movs	r3, #0
 8005af6:	9304      	str	r3, [sp, #16]
 8005af8:	ec47 6b10 	vmov	d0, r6, r7
 8005afc:	f000 fd48 	bl	8006590 <fabs>
 8005b00:	ec51 0b10 	vmov	r0, r1, d0
 8005b04:	f1ba 0f00 	cmp.w	sl, #0
 8005b08:	d129      	bne.n	8005b5e <__ieee754_pow+0x1ee>
 8005b0a:	b124      	cbz	r4, 8005b16 <__ieee754_pow+0x1a6>
 8005b0c:	4b2f      	ldr	r3, [pc, #188]	; (8005bcc <__ieee754_pow+0x25c>)
 8005b0e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d123      	bne.n	8005b5e <__ieee754_pow+0x1ee>
 8005b16:	f1b9 0f00 	cmp.w	r9, #0
 8005b1a:	da05      	bge.n	8005b28 <__ieee754_pow+0x1b8>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	2000      	movs	r0, #0
 8005b22:	492a      	ldr	r1, [pc, #168]	; (8005bcc <__ieee754_pow+0x25c>)
 8005b24:	f7fa fe3a 	bl	800079c <__aeabi_ddiv>
 8005b28:	2d00      	cmp	r5, #0
 8005b2a:	f6bf af40 	bge.w	80059ae <__ieee754_pow+0x3e>
 8005b2e:	9b04      	ldr	r3, [sp, #16]
 8005b30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005b34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005b38:	4323      	orrs	r3, r4
 8005b3a:	d108      	bne.n	8005b4e <__ieee754_pow+0x1de>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4610      	mov	r0, r2
 8005b42:	4619      	mov	r1, r3
 8005b44:	f7fa fb48 	bl	80001d8 <__aeabi_dsub>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	e78f      	b.n	8005a6e <__ieee754_pow+0xfe>
 8005b4e:	9b04      	ldr	r3, [sp, #16]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	f47f af2c 	bne.w	80059ae <__ieee754_pow+0x3e>
 8005b56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	e727      	b.n	80059ae <__ieee754_pow+0x3e>
 8005b5e:	0feb      	lsrs	r3, r5, #31
 8005b60:	3b01      	subs	r3, #1
 8005b62:	9306      	str	r3, [sp, #24]
 8005b64:	9a06      	ldr	r2, [sp, #24]
 8005b66:	9b04      	ldr	r3, [sp, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	d102      	bne.n	8005b72 <__ieee754_pow+0x202>
 8005b6c:	4632      	mov	r2, r6
 8005b6e:	463b      	mov	r3, r7
 8005b70:	e7e6      	b.n	8005b40 <__ieee754_pow+0x1d0>
 8005b72:	4b19      	ldr	r3, [pc, #100]	; (8005bd8 <__ieee754_pow+0x268>)
 8005b74:	4598      	cmp	r8, r3
 8005b76:	f340 80fb 	ble.w	8005d70 <__ieee754_pow+0x400>
 8005b7a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005b7e:	4598      	cmp	r8, r3
 8005b80:	4b13      	ldr	r3, [pc, #76]	; (8005bd0 <__ieee754_pow+0x260>)
 8005b82:	dd0c      	ble.n	8005b9e <__ieee754_pow+0x22e>
 8005b84:	429c      	cmp	r4, r3
 8005b86:	dc0f      	bgt.n	8005ba8 <__ieee754_pow+0x238>
 8005b88:	f1b9 0f00 	cmp.w	r9, #0
 8005b8c:	da0f      	bge.n	8005bae <__ieee754_pow+0x23e>
 8005b8e:	2000      	movs	r0, #0
 8005b90:	b009      	add	sp, #36	; 0x24
 8005b92:	ecbd 8b06 	vpop	{d8-d10}
 8005b96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9a:	f000 bcf0 	b.w	800657e <__math_oflow>
 8005b9e:	429c      	cmp	r4, r3
 8005ba0:	dbf2      	blt.n	8005b88 <__ieee754_pow+0x218>
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <__ieee754_pow+0x25c>)
 8005ba4:	429c      	cmp	r4, r3
 8005ba6:	dd19      	ble.n	8005bdc <__ieee754_pow+0x26c>
 8005ba8:	f1b9 0f00 	cmp.w	r9, #0
 8005bac:	dcef      	bgt.n	8005b8e <__ieee754_pow+0x21e>
 8005bae:	2000      	movs	r0, #0
 8005bb0:	b009      	add	sp, #36	; 0x24
 8005bb2:	ecbd 8b06 	vpop	{d8-d10}
 8005bb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bba:	f000 bcd7 	b.w	800656c <__math_uflow>
 8005bbe:	bf00      	nop
 8005bc0:	fff00000 	.word	0xfff00000
 8005bc4:	7ff00000 	.word	0x7ff00000
 8005bc8:	433fffff 	.word	0x433fffff
 8005bcc:	3ff00000 	.word	0x3ff00000
 8005bd0:	3fefffff 	.word	0x3fefffff
 8005bd4:	3fe00000 	.word	0x3fe00000
 8005bd8:	41e00000 	.word	0x41e00000
 8005bdc:	4b60      	ldr	r3, [pc, #384]	; (8005d60 <__ieee754_pow+0x3f0>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	f7fa fafa 	bl	80001d8 <__aeabi_dsub>
 8005be4:	a354      	add	r3, pc, #336	; (adr r3, 8005d38 <__ieee754_pow+0x3c8>)
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	4604      	mov	r4, r0
 8005bec:	460d      	mov	r5, r1
 8005bee:	f7fa fcab 	bl	8000548 <__aeabi_dmul>
 8005bf2:	a353      	add	r3, pc, #332	; (adr r3, 8005d40 <__ieee754_pow+0x3d0>)
 8005bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf8:	4606      	mov	r6, r0
 8005bfa:	460f      	mov	r7, r1
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	4629      	mov	r1, r5
 8005c00:	f7fa fca2 	bl	8000548 <__aeabi_dmul>
 8005c04:	4b57      	ldr	r3, [pc, #348]	; (8005d64 <__ieee754_pow+0x3f4>)
 8005c06:	4682      	mov	sl, r0
 8005c08:	468b      	mov	fp, r1
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	4629      	mov	r1, r5
 8005c10:	f7fa fc9a 	bl	8000548 <__aeabi_dmul>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	a14b      	add	r1, pc, #300	; (adr r1, 8005d48 <__ieee754_pow+0x3d8>)
 8005c1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c1e:	f7fa fadb 	bl	80001d8 <__aeabi_dsub>
 8005c22:	4622      	mov	r2, r4
 8005c24:	462b      	mov	r3, r5
 8005c26:	f7fa fc8f 	bl	8000548 <__aeabi_dmul>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	2000      	movs	r0, #0
 8005c30:	494d      	ldr	r1, [pc, #308]	; (8005d68 <__ieee754_pow+0x3f8>)
 8005c32:	f7fa fad1 	bl	80001d8 <__aeabi_dsub>
 8005c36:	4622      	mov	r2, r4
 8005c38:	4680      	mov	r8, r0
 8005c3a:	4689      	mov	r9, r1
 8005c3c:	462b      	mov	r3, r5
 8005c3e:	4620      	mov	r0, r4
 8005c40:	4629      	mov	r1, r5
 8005c42:	f7fa fc81 	bl	8000548 <__aeabi_dmul>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	f7fa fc7b 	bl	8000548 <__aeabi_dmul>
 8005c52:	a33f      	add	r3, pc, #252	; (adr r3, 8005d50 <__ieee754_pow+0x3e0>)
 8005c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c58:	f7fa fc76 	bl	8000548 <__aeabi_dmul>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4650      	mov	r0, sl
 8005c62:	4659      	mov	r1, fp
 8005c64:	f7fa fab8 	bl	80001d8 <__aeabi_dsub>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4680      	mov	r8, r0
 8005c6e:	4689      	mov	r9, r1
 8005c70:	4630      	mov	r0, r6
 8005c72:	4639      	mov	r1, r7
 8005c74:	f7fa fab2 	bl	80001dc <__adddf3>
 8005c78:	2000      	movs	r0, #0
 8005c7a:	4632      	mov	r2, r6
 8005c7c:	463b      	mov	r3, r7
 8005c7e:	4604      	mov	r4, r0
 8005c80:	460d      	mov	r5, r1
 8005c82:	f7fa faa9 	bl	80001d8 <__aeabi_dsub>
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4640      	mov	r0, r8
 8005c8c:	4649      	mov	r1, r9
 8005c8e:	f7fa faa3 	bl	80001d8 <__aeabi_dsub>
 8005c92:	9b04      	ldr	r3, [sp, #16]
 8005c94:	9a06      	ldr	r2, [sp, #24]
 8005c96:	3b01      	subs	r3, #1
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	4682      	mov	sl, r0
 8005c9c:	468b      	mov	fp, r1
 8005c9e:	f040 81e7 	bne.w	8006070 <__ieee754_pow+0x700>
 8005ca2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005d58 <__ieee754_pow+0x3e8>
 8005ca6:	eeb0 8a47 	vmov.f32	s16, s14
 8005caa:	eef0 8a67 	vmov.f32	s17, s15
 8005cae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005cb2:	2600      	movs	r6, #0
 8005cb4:	4632      	mov	r2, r6
 8005cb6:	463b      	mov	r3, r7
 8005cb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cbc:	f7fa fa8c 	bl	80001d8 <__aeabi_dsub>
 8005cc0:	4622      	mov	r2, r4
 8005cc2:	462b      	mov	r3, r5
 8005cc4:	f7fa fc40 	bl	8000548 <__aeabi_dmul>
 8005cc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ccc:	4680      	mov	r8, r0
 8005cce:	4689      	mov	r9, r1
 8005cd0:	4650      	mov	r0, sl
 8005cd2:	4659      	mov	r1, fp
 8005cd4:	f7fa fc38 	bl	8000548 <__aeabi_dmul>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4640      	mov	r0, r8
 8005cde:	4649      	mov	r1, r9
 8005ce0:	f7fa fa7c 	bl	80001dc <__adddf3>
 8005ce4:	4632      	mov	r2, r6
 8005ce6:	463b      	mov	r3, r7
 8005ce8:	4680      	mov	r8, r0
 8005cea:	4689      	mov	r9, r1
 8005cec:	4620      	mov	r0, r4
 8005cee:	4629      	mov	r1, r5
 8005cf0:	f7fa fc2a 	bl	8000548 <__aeabi_dmul>
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	460d      	mov	r5, r1
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	4649      	mov	r1, r9
 8005cfe:	4640      	mov	r0, r8
 8005d00:	f7fa fa6c 	bl	80001dc <__adddf3>
 8005d04:	4b19      	ldr	r3, [pc, #100]	; (8005d6c <__ieee754_pow+0x3fc>)
 8005d06:	4299      	cmp	r1, r3
 8005d08:	ec45 4b19 	vmov	d9, r4, r5
 8005d0c:	4606      	mov	r6, r0
 8005d0e:	460f      	mov	r7, r1
 8005d10:	468b      	mov	fp, r1
 8005d12:	f340 82f1 	ble.w	80062f8 <__ieee754_pow+0x988>
 8005d16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005d1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005d1e:	4303      	orrs	r3, r0
 8005d20:	f000 81e4 	beq.w	80060ec <__ieee754_pow+0x77c>
 8005d24:	ec51 0b18 	vmov	r0, r1, d8
 8005d28:	2200      	movs	r2, #0
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	f7fa fe7e 	bl	8000a2c <__aeabi_dcmplt>
 8005d30:	3800      	subs	r0, #0
 8005d32:	bf18      	it	ne
 8005d34:	2001      	movne	r0, #1
 8005d36:	e72b      	b.n	8005b90 <__ieee754_pow+0x220>
 8005d38:	60000000 	.word	0x60000000
 8005d3c:	3ff71547 	.word	0x3ff71547
 8005d40:	f85ddf44 	.word	0xf85ddf44
 8005d44:	3e54ae0b 	.word	0x3e54ae0b
 8005d48:	55555555 	.word	0x55555555
 8005d4c:	3fd55555 	.word	0x3fd55555
 8005d50:	652b82fe 	.word	0x652b82fe
 8005d54:	3ff71547 	.word	0x3ff71547
 8005d58:	00000000 	.word	0x00000000
 8005d5c:	bff00000 	.word	0xbff00000
 8005d60:	3ff00000 	.word	0x3ff00000
 8005d64:	3fd00000 	.word	0x3fd00000
 8005d68:	3fe00000 	.word	0x3fe00000
 8005d6c:	408fffff 	.word	0x408fffff
 8005d70:	4bd5      	ldr	r3, [pc, #852]	; (80060c8 <__ieee754_pow+0x758>)
 8005d72:	402b      	ands	r3, r5
 8005d74:	2200      	movs	r2, #0
 8005d76:	b92b      	cbnz	r3, 8005d84 <__ieee754_pow+0x414>
 8005d78:	4bd4      	ldr	r3, [pc, #848]	; (80060cc <__ieee754_pow+0x75c>)
 8005d7a:	f7fa fbe5 	bl	8000548 <__aeabi_dmul>
 8005d7e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005d82:	460c      	mov	r4, r1
 8005d84:	1523      	asrs	r3, r4, #20
 8005d86:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005d8a:	4413      	add	r3, r2
 8005d8c:	9305      	str	r3, [sp, #20]
 8005d8e:	4bd0      	ldr	r3, [pc, #832]	; (80060d0 <__ieee754_pow+0x760>)
 8005d90:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005d94:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005d98:	429c      	cmp	r4, r3
 8005d9a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005d9e:	dd08      	ble.n	8005db2 <__ieee754_pow+0x442>
 8005da0:	4bcc      	ldr	r3, [pc, #816]	; (80060d4 <__ieee754_pow+0x764>)
 8005da2:	429c      	cmp	r4, r3
 8005da4:	f340 8162 	ble.w	800606c <__ieee754_pow+0x6fc>
 8005da8:	9b05      	ldr	r3, [sp, #20]
 8005daa:	3301      	adds	r3, #1
 8005dac:	9305      	str	r3, [sp, #20]
 8005dae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005db2:	2400      	movs	r4, #0
 8005db4:	00e3      	lsls	r3, r4, #3
 8005db6:	9307      	str	r3, [sp, #28]
 8005db8:	4bc7      	ldr	r3, [pc, #796]	; (80060d8 <__ieee754_pow+0x768>)
 8005dba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005dbe:	ed93 7b00 	vldr	d7, [r3]
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	ec53 2b17 	vmov	r2, r3, d7
 8005dc8:	eeb0 9a47 	vmov.f32	s18, s14
 8005dcc:	eef0 9a67 	vmov.f32	s19, s15
 8005dd0:	4682      	mov	sl, r0
 8005dd2:	f7fa fa01 	bl	80001d8 <__aeabi_dsub>
 8005dd6:	4652      	mov	r2, sl
 8005dd8:	4606      	mov	r6, r0
 8005dda:	460f      	mov	r7, r1
 8005ddc:	462b      	mov	r3, r5
 8005dde:	ec51 0b19 	vmov	r0, r1, d9
 8005de2:	f7fa f9fb 	bl	80001dc <__adddf3>
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	2000      	movs	r0, #0
 8005dec:	49bb      	ldr	r1, [pc, #748]	; (80060dc <__ieee754_pow+0x76c>)
 8005dee:	f7fa fcd5 	bl	800079c <__aeabi_ddiv>
 8005df2:	ec41 0b1a 	vmov	d10, r0, r1
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	4639      	mov	r1, r7
 8005dfe:	f7fa fba3 	bl	8000548 <__aeabi_dmul>
 8005e02:	2300      	movs	r3, #0
 8005e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e08:	9302      	str	r3, [sp, #8]
 8005e0a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005e0e:	46ab      	mov	fp, r5
 8005e10:	106d      	asrs	r5, r5, #1
 8005e12:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005e16:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005e1a:	ec41 0b18 	vmov	d8, r0, r1
 8005e1e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005e22:	2200      	movs	r2, #0
 8005e24:	4640      	mov	r0, r8
 8005e26:	4649      	mov	r1, r9
 8005e28:	4614      	mov	r4, r2
 8005e2a:	461d      	mov	r5, r3
 8005e2c:	f7fa fb8c 	bl	8000548 <__aeabi_dmul>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4630      	mov	r0, r6
 8005e36:	4639      	mov	r1, r7
 8005e38:	f7fa f9ce 	bl	80001d8 <__aeabi_dsub>
 8005e3c:	ec53 2b19 	vmov	r2, r3, d9
 8005e40:	4606      	mov	r6, r0
 8005e42:	460f      	mov	r7, r1
 8005e44:	4620      	mov	r0, r4
 8005e46:	4629      	mov	r1, r5
 8005e48:	f7fa f9c6 	bl	80001d8 <__aeabi_dsub>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4650      	mov	r0, sl
 8005e52:	4659      	mov	r1, fp
 8005e54:	f7fa f9c0 	bl	80001d8 <__aeabi_dsub>
 8005e58:	4642      	mov	r2, r8
 8005e5a:	464b      	mov	r3, r9
 8005e5c:	f7fa fb74 	bl	8000548 <__aeabi_dmul>
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4630      	mov	r0, r6
 8005e66:	4639      	mov	r1, r7
 8005e68:	f7fa f9b6 	bl	80001d8 <__aeabi_dsub>
 8005e6c:	ec53 2b1a 	vmov	r2, r3, d10
 8005e70:	f7fa fb6a 	bl	8000548 <__aeabi_dmul>
 8005e74:	ec53 2b18 	vmov	r2, r3, d8
 8005e78:	ec41 0b19 	vmov	d9, r0, r1
 8005e7c:	ec51 0b18 	vmov	r0, r1, d8
 8005e80:	f7fa fb62 	bl	8000548 <__aeabi_dmul>
 8005e84:	a37c      	add	r3, pc, #496	; (adr r3, 8006078 <__ieee754_pow+0x708>)
 8005e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	460d      	mov	r5, r1
 8005e8e:	f7fa fb5b 	bl	8000548 <__aeabi_dmul>
 8005e92:	a37b      	add	r3, pc, #492	; (adr r3, 8006080 <__ieee754_pow+0x710>)
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f7fa f9a0 	bl	80001dc <__adddf3>
 8005e9c:	4622      	mov	r2, r4
 8005e9e:	462b      	mov	r3, r5
 8005ea0:	f7fa fb52 	bl	8000548 <__aeabi_dmul>
 8005ea4:	a378      	add	r3, pc, #480	; (adr r3, 8006088 <__ieee754_pow+0x718>)
 8005ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eaa:	f7fa f997 	bl	80001dc <__adddf3>
 8005eae:	4622      	mov	r2, r4
 8005eb0:	462b      	mov	r3, r5
 8005eb2:	f7fa fb49 	bl	8000548 <__aeabi_dmul>
 8005eb6:	a376      	add	r3, pc, #472	; (adr r3, 8006090 <__ieee754_pow+0x720>)
 8005eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebc:	f7fa f98e 	bl	80001dc <__adddf3>
 8005ec0:	4622      	mov	r2, r4
 8005ec2:	462b      	mov	r3, r5
 8005ec4:	f7fa fb40 	bl	8000548 <__aeabi_dmul>
 8005ec8:	a373      	add	r3, pc, #460	; (adr r3, 8006098 <__ieee754_pow+0x728>)
 8005eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ece:	f7fa f985 	bl	80001dc <__adddf3>
 8005ed2:	4622      	mov	r2, r4
 8005ed4:	462b      	mov	r3, r5
 8005ed6:	f7fa fb37 	bl	8000548 <__aeabi_dmul>
 8005eda:	a371      	add	r3, pc, #452	; (adr r3, 80060a0 <__ieee754_pow+0x730>)
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	f7fa f97c 	bl	80001dc <__adddf3>
 8005ee4:	4622      	mov	r2, r4
 8005ee6:	4606      	mov	r6, r0
 8005ee8:	460f      	mov	r7, r1
 8005eea:	462b      	mov	r3, r5
 8005eec:	4620      	mov	r0, r4
 8005eee:	4629      	mov	r1, r5
 8005ef0:	f7fa fb2a 	bl	8000548 <__aeabi_dmul>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4630      	mov	r0, r6
 8005efa:	4639      	mov	r1, r7
 8005efc:	f7fa fb24 	bl	8000548 <__aeabi_dmul>
 8005f00:	4642      	mov	r2, r8
 8005f02:	4604      	mov	r4, r0
 8005f04:	460d      	mov	r5, r1
 8005f06:	464b      	mov	r3, r9
 8005f08:	ec51 0b18 	vmov	r0, r1, d8
 8005f0c:	f7fa f966 	bl	80001dc <__adddf3>
 8005f10:	ec53 2b19 	vmov	r2, r3, d9
 8005f14:	f7fa fb18 	bl	8000548 <__aeabi_dmul>
 8005f18:	4622      	mov	r2, r4
 8005f1a:	462b      	mov	r3, r5
 8005f1c:	f7fa f95e 	bl	80001dc <__adddf3>
 8005f20:	4642      	mov	r2, r8
 8005f22:	4682      	mov	sl, r0
 8005f24:	468b      	mov	fp, r1
 8005f26:	464b      	mov	r3, r9
 8005f28:	4640      	mov	r0, r8
 8005f2a:	4649      	mov	r1, r9
 8005f2c:	f7fa fb0c 	bl	8000548 <__aeabi_dmul>
 8005f30:	4b6b      	ldr	r3, [pc, #428]	; (80060e0 <__ieee754_pow+0x770>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	4606      	mov	r6, r0
 8005f36:	460f      	mov	r7, r1
 8005f38:	f7fa f950 	bl	80001dc <__adddf3>
 8005f3c:	4652      	mov	r2, sl
 8005f3e:	465b      	mov	r3, fp
 8005f40:	f7fa f94c 	bl	80001dc <__adddf3>
 8005f44:	2000      	movs	r0, #0
 8005f46:	4604      	mov	r4, r0
 8005f48:	460d      	mov	r5, r1
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4640      	mov	r0, r8
 8005f50:	4649      	mov	r1, r9
 8005f52:	f7fa faf9 	bl	8000548 <__aeabi_dmul>
 8005f56:	4b62      	ldr	r3, [pc, #392]	; (80060e0 <__ieee754_pow+0x770>)
 8005f58:	4680      	mov	r8, r0
 8005f5a:	4689      	mov	r9, r1
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	4620      	mov	r0, r4
 8005f60:	4629      	mov	r1, r5
 8005f62:	f7fa f939 	bl	80001d8 <__aeabi_dsub>
 8005f66:	4632      	mov	r2, r6
 8005f68:	463b      	mov	r3, r7
 8005f6a:	f7fa f935 	bl	80001d8 <__aeabi_dsub>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	4650      	mov	r0, sl
 8005f74:	4659      	mov	r1, fp
 8005f76:	f7fa f92f 	bl	80001d8 <__aeabi_dsub>
 8005f7a:	ec53 2b18 	vmov	r2, r3, d8
 8005f7e:	f7fa fae3 	bl	8000548 <__aeabi_dmul>
 8005f82:	4622      	mov	r2, r4
 8005f84:	4606      	mov	r6, r0
 8005f86:	460f      	mov	r7, r1
 8005f88:	462b      	mov	r3, r5
 8005f8a:	ec51 0b19 	vmov	r0, r1, d9
 8005f8e:	f7fa fadb 	bl	8000548 <__aeabi_dmul>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4630      	mov	r0, r6
 8005f98:	4639      	mov	r1, r7
 8005f9a:	f7fa f91f 	bl	80001dc <__adddf3>
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	460f      	mov	r7, r1
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	4649      	mov	r1, r9
 8005faa:	f7fa f917 	bl	80001dc <__adddf3>
 8005fae:	a33e      	add	r3, pc, #248	; (adr r3, 80060a8 <__ieee754_pow+0x738>)
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	460d      	mov	r5, r1
 8005fba:	f7fa fac5 	bl	8000548 <__aeabi_dmul>
 8005fbe:	4642      	mov	r2, r8
 8005fc0:	ec41 0b18 	vmov	d8, r0, r1
 8005fc4:	464b      	mov	r3, r9
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	4629      	mov	r1, r5
 8005fca:	f7fa f905 	bl	80001d8 <__aeabi_dsub>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	4639      	mov	r1, r7
 8005fd6:	f7fa f8ff 	bl	80001d8 <__aeabi_dsub>
 8005fda:	a335      	add	r3, pc, #212	; (adr r3, 80060b0 <__ieee754_pow+0x740>)
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	f7fa fab2 	bl	8000548 <__aeabi_dmul>
 8005fe4:	a334      	add	r3, pc, #208	; (adr r3, 80060b8 <__ieee754_pow+0x748>)
 8005fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fea:	4606      	mov	r6, r0
 8005fec:	460f      	mov	r7, r1
 8005fee:	4620      	mov	r0, r4
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	f7fa faa9 	bl	8000548 <__aeabi_dmul>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	4639      	mov	r1, r7
 8005ffe:	f7fa f8ed 	bl	80001dc <__adddf3>
 8006002:	9a07      	ldr	r2, [sp, #28]
 8006004:	4b37      	ldr	r3, [pc, #220]	; (80060e4 <__ieee754_pow+0x774>)
 8006006:	4413      	add	r3, r2
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	f7fa f8e6 	bl	80001dc <__adddf3>
 8006010:	4682      	mov	sl, r0
 8006012:	9805      	ldr	r0, [sp, #20]
 8006014:	468b      	mov	fp, r1
 8006016:	f7fa fa2d 	bl	8000474 <__aeabi_i2d>
 800601a:	9a07      	ldr	r2, [sp, #28]
 800601c:	4b32      	ldr	r3, [pc, #200]	; (80060e8 <__ieee754_pow+0x778>)
 800601e:	4413      	add	r3, r2
 8006020:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006024:	4606      	mov	r6, r0
 8006026:	460f      	mov	r7, r1
 8006028:	4652      	mov	r2, sl
 800602a:	465b      	mov	r3, fp
 800602c:	ec51 0b18 	vmov	r0, r1, d8
 8006030:	f7fa f8d4 	bl	80001dc <__adddf3>
 8006034:	4642      	mov	r2, r8
 8006036:	464b      	mov	r3, r9
 8006038:	f7fa f8d0 	bl	80001dc <__adddf3>
 800603c:	4632      	mov	r2, r6
 800603e:	463b      	mov	r3, r7
 8006040:	f7fa f8cc 	bl	80001dc <__adddf3>
 8006044:	2000      	movs	r0, #0
 8006046:	4632      	mov	r2, r6
 8006048:	463b      	mov	r3, r7
 800604a:	4604      	mov	r4, r0
 800604c:	460d      	mov	r5, r1
 800604e:	f7fa f8c3 	bl	80001d8 <__aeabi_dsub>
 8006052:	4642      	mov	r2, r8
 8006054:	464b      	mov	r3, r9
 8006056:	f7fa f8bf 	bl	80001d8 <__aeabi_dsub>
 800605a:	ec53 2b18 	vmov	r2, r3, d8
 800605e:	f7fa f8bb 	bl	80001d8 <__aeabi_dsub>
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	4650      	mov	r0, sl
 8006068:	4659      	mov	r1, fp
 800606a:	e610      	b.n	8005c8e <__ieee754_pow+0x31e>
 800606c:	2401      	movs	r4, #1
 800606e:	e6a1      	b.n	8005db4 <__ieee754_pow+0x444>
 8006070:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80060c0 <__ieee754_pow+0x750>
 8006074:	e617      	b.n	8005ca6 <__ieee754_pow+0x336>
 8006076:	bf00      	nop
 8006078:	4a454eef 	.word	0x4a454eef
 800607c:	3fca7e28 	.word	0x3fca7e28
 8006080:	93c9db65 	.word	0x93c9db65
 8006084:	3fcd864a 	.word	0x3fcd864a
 8006088:	a91d4101 	.word	0xa91d4101
 800608c:	3fd17460 	.word	0x3fd17460
 8006090:	518f264d 	.word	0x518f264d
 8006094:	3fd55555 	.word	0x3fd55555
 8006098:	db6fabff 	.word	0xdb6fabff
 800609c:	3fdb6db6 	.word	0x3fdb6db6
 80060a0:	33333303 	.word	0x33333303
 80060a4:	3fe33333 	.word	0x3fe33333
 80060a8:	e0000000 	.word	0xe0000000
 80060ac:	3feec709 	.word	0x3feec709
 80060b0:	dc3a03fd 	.word	0xdc3a03fd
 80060b4:	3feec709 	.word	0x3feec709
 80060b8:	145b01f5 	.word	0x145b01f5
 80060bc:	be3e2fe0 	.word	0xbe3e2fe0
 80060c0:	00000000 	.word	0x00000000
 80060c4:	3ff00000 	.word	0x3ff00000
 80060c8:	7ff00000 	.word	0x7ff00000
 80060cc:	43400000 	.word	0x43400000
 80060d0:	0003988e 	.word	0x0003988e
 80060d4:	000bb679 	.word	0x000bb679
 80060d8:	08006730 	.word	0x08006730
 80060dc:	3ff00000 	.word	0x3ff00000
 80060e0:	40080000 	.word	0x40080000
 80060e4:	08006750 	.word	0x08006750
 80060e8:	08006740 	.word	0x08006740
 80060ec:	a3b5      	add	r3, pc, #724	; (adr r3, 80063c4 <__ieee754_pow+0xa54>)
 80060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f2:	4640      	mov	r0, r8
 80060f4:	4649      	mov	r1, r9
 80060f6:	f7fa f871 	bl	80001dc <__adddf3>
 80060fa:	4622      	mov	r2, r4
 80060fc:	ec41 0b1a 	vmov	d10, r0, r1
 8006100:	462b      	mov	r3, r5
 8006102:	4630      	mov	r0, r6
 8006104:	4639      	mov	r1, r7
 8006106:	f7fa f867 	bl	80001d8 <__aeabi_dsub>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	ec51 0b1a 	vmov	r0, r1, d10
 8006112:	f7fa fca9 	bl	8000a68 <__aeabi_dcmpgt>
 8006116:	2800      	cmp	r0, #0
 8006118:	f47f ae04 	bne.w	8005d24 <__ieee754_pow+0x3b4>
 800611c:	4aa4      	ldr	r2, [pc, #656]	; (80063b0 <__ieee754_pow+0xa40>)
 800611e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006122:	4293      	cmp	r3, r2
 8006124:	f340 8108 	ble.w	8006338 <__ieee754_pow+0x9c8>
 8006128:	151b      	asrs	r3, r3, #20
 800612a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800612e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006132:	fa4a f303 	asr.w	r3, sl, r3
 8006136:	445b      	add	r3, fp
 8006138:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800613c:	4e9d      	ldr	r6, [pc, #628]	; (80063b4 <__ieee754_pow+0xa44>)
 800613e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006142:	4116      	asrs	r6, r2
 8006144:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006148:	2000      	movs	r0, #0
 800614a:	ea23 0106 	bic.w	r1, r3, r6
 800614e:	f1c2 0214 	rsb	r2, r2, #20
 8006152:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006156:	fa4a fa02 	asr.w	sl, sl, r2
 800615a:	f1bb 0f00 	cmp.w	fp, #0
 800615e:	4602      	mov	r2, r0
 8006160:	460b      	mov	r3, r1
 8006162:	4620      	mov	r0, r4
 8006164:	4629      	mov	r1, r5
 8006166:	bfb8      	it	lt
 8006168:	f1ca 0a00 	rsblt	sl, sl, #0
 800616c:	f7fa f834 	bl	80001d8 <__aeabi_dsub>
 8006170:	ec41 0b19 	vmov	d9, r0, r1
 8006174:	4642      	mov	r2, r8
 8006176:	464b      	mov	r3, r9
 8006178:	ec51 0b19 	vmov	r0, r1, d9
 800617c:	f7fa f82e 	bl	80001dc <__adddf3>
 8006180:	a37b      	add	r3, pc, #492	; (adr r3, 8006370 <__ieee754_pow+0xa00>)
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	2000      	movs	r0, #0
 8006188:	4604      	mov	r4, r0
 800618a:	460d      	mov	r5, r1
 800618c:	f7fa f9dc 	bl	8000548 <__aeabi_dmul>
 8006190:	ec53 2b19 	vmov	r2, r3, d9
 8006194:	4606      	mov	r6, r0
 8006196:	460f      	mov	r7, r1
 8006198:	4620      	mov	r0, r4
 800619a:	4629      	mov	r1, r5
 800619c:	f7fa f81c 	bl	80001d8 <__aeabi_dsub>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4640      	mov	r0, r8
 80061a6:	4649      	mov	r1, r9
 80061a8:	f7fa f816 	bl	80001d8 <__aeabi_dsub>
 80061ac:	a372      	add	r3, pc, #456	; (adr r3, 8006378 <__ieee754_pow+0xa08>)
 80061ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b2:	f7fa f9c9 	bl	8000548 <__aeabi_dmul>
 80061b6:	a372      	add	r3, pc, #456	; (adr r3, 8006380 <__ieee754_pow+0xa10>)
 80061b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061bc:	4680      	mov	r8, r0
 80061be:	4689      	mov	r9, r1
 80061c0:	4620      	mov	r0, r4
 80061c2:	4629      	mov	r1, r5
 80061c4:	f7fa f9c0 	bl	8000548 <__aeabi_dmul>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	4640      	mov	r0, r8
 80061ce:	4649      	mov	r1, r9
 80061d0:	f7fa f804 	bl	80001dc <__adddf3>
 80061d4:	4604      	mov	r4, r0
 80061d6:	460d      	mov	r5, r1
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4630      	mov	r0, r6
 80061de:	4639      	mov	r1, r7
 80061e0:	f7f9 fffc 	bl	80001dc <__adddf3>
 80061e4:	4632      	mov	r2, r6
 80061e6:	463b      	mov	r3, r7
 80061e8:	4680      	mov	r8, r0
 80061ea:	4689      	mov	r9, r1
 80061ec:	f7f9 fff4 	bl	80001d8 <__aeabi_dsub>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4620      	mov	r0, r4
 80061f6:	4629      	mov	r1, r5
 80061f8:	f7f9 ffee 	bl	80001d8 <__aeabi_dsub>
 80061fc:	4642      	mov	r2, r8
 80061fe:	4606      	mov	r6, r0
 8006200:	460f      	mov	r7, r1
 8006202:	464b      	mov	r3, r9
 8006204:	4640      	mov	r0, r8
 8006206:	4649      	mov	r1, r9
 8006208:	f7fa f99e 	bl	8000548 <__aeabi_dmul>
 800620c:	a35e      	add	r3, pc, #376	; (adr r3, 8006388 <__ieee754_pow+0xa18>)
 800620e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006212:	4604      	mov	r4, r0
 8006214:	460d      	mov	r5, r1
 8006216:	f7fa f997 	bl	8000548 <__aeabi_dmul>
 800621a:	a35d      	add	r3, pc, #372	; (adr r3, 8006390 <__ieee754_pow+0xa20>)
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	f7f9 ffda 	bl	80001d8 <__aeabi_dsub>
 8006224:	4622      	mov	r2, r4
 8006226:	462b      	mov	r3, r5
 8006228:	f7fa f98e 	bl	8000548 <__aeabi_dmul>
 800622c:	a35a      	add	r3, pc, #360	; (adr r3, 8006398 <__ieee754_pow+0xa28>)
 800622e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006232:	f7f9 ffd3 	bl	80001dc <__adddf3>
 8006236:	4622      	mov	r2, r4
 8006238:	462b      	mov	r3, r5
 800623a:	f7fa f985 	bl	8000548 <__aeabi_dmul>
 800623e:	a358      	add	r3, pc, #352	; (adr r3, 80063a0 <__ieee754_pow+0xa30>)
 8006240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006244:	f7f9 ffc8 	bl	80001d8 <__aeabi_dsub>
 8006248:	4622      	mov	r2, r4
 800624a:	462b      	mov	r3, r5
 800624c:	f7fa f97c 	bl	8000548 <__aeabi_dmul>
 8006250:	a355      	add	r3, pc, #340	; (adr r3, 80063a8 <__ieee754_pow+0xa38>)
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	f7f9 ffc1 	bl	80001dc <__adddf3>
 800625a:	4622      	mov	r2, r4
 800625c:	462b      	mov	r3, r5
 800625e:	f7fa f973 	bl	8000548 <__aeabi_dmul>
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	4640      	mov	r0, r8
 8006268:	4649      	mov	r1, r9
 800626a:	f7f9 ffb5 	bl	80001d8 <__aeabi_dsub>
 800626e:	4604      	mov	r4, r0
 8006270:	460d      	mov	r5, r1
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4640      	mov	r0, r8
 8006278:	4649      	mov	r1, r9
 800627a:	f7fa f965 	bl	8000548 <__aeabi_dmul>
 800627e:	2200      	movs	r2, #0
 8006280:	ec41 0b19 	vmov	d9, r0, r1
 8006284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006288:	4620      	mov	r0, r4
 800628a:	4629      	mov	r1, r5
 800628c:	f7f9 ffa4 	bl	80001d8 <__aeabi_dsub>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	ec51 0b19 	vmov	r0, r1, d9
 8006298:	f7fa fa80 	bl	800079c <__aeabi_ddiv>
 800629c:	4632      	mov	r2, r6
 800629e:	4604      	mov	r4, r0
 80062a0:	460d      	mov	r5, r1
 80062a2:	463b      	mov	r3, r7
 80062a4:	4640      	mov	r0, r8
 80062a6:	4649      	mov	r1, r9
 80062a8:	f7fa f94e 	bl	8000548 <__aeabi_dmul>
 80062ac:	4632      	mov	r2, r6
 80062ae:	463b      	mov	r3, r7
 80062b0:	f7f9 ff94 	bl	80001dc <__adddf3>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4620      	mov	r0, r4
 80062ba:	4629      	mov	r1, r5
 80062bc:	f7f9 ff8c 	bl	80001d8 <__aeabi_dsub>
 80062c0:	4642      	mov	r2, r8
 80062c2:	464b      	mov	r3, r9
 80062c4:	f7f9 ff88 	bl	80001d8 <__aeabi_dsub>
 80062c8:	460b      	mov	r3, r1
 80062ca:	4602      	mov	r2, r0
 80062cc:	493a      	ldr	r1, [pc, #232]	; (80063b8 <__ieee754_pow+0xa48>)
 80062ce:	2000      	movs	r0, #0
 80062d0:	f7f9 ff82 	bl	80001d8 <__aeabi_dsub>
 80062d4:	ec41 0b10 	vmov	d0, r0, r1
 80062d8:	ee10 3a90 	vmov	r3, s1
 80062dc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80062e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062e4:	da2b      	bge.n	800633e <__ieee754_pow+0x9ce>
 80062e6:	4650      	mov	r0, sl
 80062e8:	f000 f966 	bl	80065b8 <scalbn>
 80062ec:	ec51 0b10 	vmov	r0, r1, d0
 80062f0:	ec53 2b18 	vmov	r2, r3, d8
 80062f4:	f7ff bbed 	b.w	8005ad2 <__ieee754_pow+0x162>
 80062f8:	4b30      	ldr	r3, [pc, #192]	; (80063bc <__ieee754_pow+0xa4c>)
 80062fa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80062fe:	429e      	cmp	r6, r3
 8006300:	f77f af0c 	ble.w	800611c <__ieee754_pow+0x7ac>
 8006304:	4b2e      	ldr	r3, [pc, #184]	; (80063c0 <__ieee754_pow+0xa50>)
 8006306:	440b      	add	r3, r1
 8006308:	4303      	orrs	r3, r0
 800630a:	d009      	beq.n	8006320 <__ieee754_pow+0x9b0>
 800630c:	ec51 0b18 	vmov	r0, r1, d8
 8006310:	2200      	movs	r2, #0
 8006312:	2300      	movs	r3, #0
 8006314:	f7fa fb8a 	bl	8000a2c <__aeabi_dcmplt>
 8006318:	3800      	subs	r0, #0
 800631a:	bf18      	it	ne
 800631c:	2001      	movne	r0, #1
 800631e:	e447      	b.n	8005bb0 <__ieee754_pow+0x240>
 8006320:	4622      	mov	r2, r4
 8006322:	462b      	mov	r3, r5
 8006324:	f7f9 ff58 	bl	80001d8 <__aeabi_dsub>
 8006328:	4642      	mov	r2, r8
 800632a:	464b      	mov	r3, r9
 800632c:	f7fa fb92 	bl	8000a54 <__aeabi_dcmpge>
 8006330:	2800      	cmp	r0, #0
 8006332:	f43f aef3 	beq.w	800611c <__ieee754_pow+0x7ac>
 8006336:	e7e9      	b.n	800630c <__ieee754_pow+0x99c>
 8006338:	f04f 0a00 	mov.w	sl, #0
 800633c:	e71a      	b.n	8006174 <__ieee754_pow+0x804>
 800633e:	ec51 0b10 	vmov	r0, r1, d0
 8006342:	4619      	mov	r1, r3
 8006344:	e7d4      	b.n	80062f0 <__ieee754_pow+0x980>
 8006346:	491c      	ldr	r1, [pc, #112]	; (80063b8 <__ieee754_pow+0xa48>)
 8006348:	2000      	movs	r0, #0
 800634a:	f7ff bb30 	b.w	80059ae <__ieee754_pow+0x3e>
 800634e:	2000      	movs	r0, #0
 8006350:	2100      	movs	r1, #0
 8006352:	f7ff bb2c 	b.w	80059ae <__ieee754_pow+0x3e>
 8006356:	4630      	mov	r0, r6
 8006358:	4639      	mov	r1, r7
 800635a:	f7ff bb28 	b.w	80059ae <__ieee754_pow+0x3e>
 800635e:	9204      	str	r2, [sp, #16]
 8006360:	f7ff bb7a 	b.w	8005a58 <__ieee754_pow+0xe8>
 8006364:	2300      	movs	r3, #0
 8006366:	f7ff bb64 	b.w	8005a32 <__ieee754_pow+0xc2>
 800636a:	bf00      	nop
 800636c:	f3af 8000 	nop.w
 8006370:	00000000 	.word	0x00000000
 8006374:	3fe62e43 	.word	0x3fe62e43
 8006378:	fefa39ef 	.word	0xfefa39ef
 800637c:	3fe62e42 	.word	0x3fe62e42
 8006380:	0ca86c39 	.word	0x0ca86c39
 8006384:	be205c61 	.word	0xbe205c61
 8006388:	72bea4d0 	.word	0x72bea4d0
 800638c:	3e663769 	.word	0x3e663769
 8006390:	c5d26bf1 	.word	0xc5d26bf1
 8006394:	3ebbbd41 	.word	0x3ebbbd41
 8006398:	af25de2c 	.word	0xaf25de2c
 800639c:	3f11566a 	.word	0x3f11566a
 80063a0:	16bebd93 	.word	0x16bebd93
 80063a4:	3f66c16c 	.word	0x3f66c16c
 80063a8:	5555553e 	.word	0x5555553e
 80063ac:	3fc55555 	.word	0x3fc55555
 80063b0:	3fe00000 	.word	0x3fe00000
 80063b4:	000fffff 	.word	0x000fffff
 80063b8:	3ff00000 	.word	0x3ff00000
 80063bc:	4090cbff 	.word	0x4090cbff
 80063c0:	3f6f3400 	.word	0x3f6f3400
 80063c4:	652b82fe 	.word	0x652b82fe
 80063c8:	3c971547 	.word	0x3c971547

080063cc <__ieee754_sqrt>:
 80063cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d0:	ec55 4b10 	vmov	r4, r5, d0
 80063d4:	4e55      	ldr	r6, [pc, #340]	; (800652c <__ieee754_sqrt+0x160>)
 80063d6:	43ae      	bics	r6, r5
 80063d8:	ee10 0a10 	vmov	r0, s0
 80063dc:	ee10 3a10 	vmov	r3, s0
 80063e0:	462a      	mov	r2, r5
 80063e2:	4629      	mov	r1, r5
 80063e4:	d110      	bne.n	8006408 <__ieee754_sqrt+0x3c>
 80063e6:	ee10 2a10 	vmov	r2, s0
 80063ea:	462b      	mov	r3, r5
 80063ec:	f7fa f8ac 	bl	8000548 <__aeabi_dmul>
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	4620      	mov	r0, r4
 80063f6:	4629      	mov	r1, r5
 80063f8:	f7f9 fef0 	bl	80001dc <__adddf3>
 80063fc:	4604      	mov	r4, r0
 80063fe:	460d      	mov	r5, r1
 8006400:	ec45 4b10 	vmov	d0, r4, r5
 8006404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006408:	2d00      	cmp	r5, #0
 800640a:	dc10      	bgt.n	800642e <__ieee754_sqrt+0x62>
 800640c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006410:	4330      	orrs	r0, r6
 8006412:	d0f5      	beq.n	8006400 <__ieee754_sqrt+0x34>
 8006414:	b15d      	cbz	r5, 800642e <__ieee754_sqrt+0x62>
 8006416:	ee10 2a10 	vmov	r2, s0
 800641a:	462b      	mov	r3, r5
 800641c:	ee10 0a10 	vmov	r0, s0
 8006420:	f7f9 feda 	bl	80001d8 <__aeabi_dsub>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	f7fa f9b8 	bl	800079c <__aeabi_ddiv>
 800642c:	e7e6      	b.n	80063fc <__ieee754_sqrt+0x30>
 800642e:	1512      	asrs	r2, r2, #20
 8006430:	d074      	beq.n	800651c <__ieee754_sqrt+0x150>
 8006432:	07d4      	lsls	r4, r2, #31
 8006434:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006438:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800643c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006440:	bf5e      	ittt	pl
 8006442:	0fda      	lsrpl	r2, r3, #31
 8006444:	005b      	lslpl	r3, r3, #1
 8006446:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800644a:	2400      	movs	r4, #0
 800644c:	0fda      	lsrs	r2, r3, #31
 800644e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006452:	107f      	asrs	r7, r7, #1
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	2516      	movs	r5, #22
 8006458:	4620      	mov	r0, r4
 800645a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800645e:	1886      	adds	r6, r0, r2
 8006460:	428e      	cmp	r6, r1
 8006462:	bfde      	ittt	le
 8006464:	1b89      	suble	r1, r1, r6
 8006466:	18b0      	addle	r0, r6, r2
 8006468:	18a4      	addle	r4, r4, r2
 800646a:	0049      	lsls	r1, r1, #1
 800646c:	3d01      	subs	r5, #1
 800646e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006472:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006476:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800647a:	d1f0      	bne.n	800645e <__ieee754_sqrt+0x92>
 800647c:	462a      	mov	r2, r5
 800647e:	f04f 0e20 	mov.w	lr, #32
 8006482:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006486:	4281      	cmp	r1, r0
 8006488:	eb06 0c05 	add.w	ip, r6, r5
 800648c:	dc02      	bgt.n	8006494 <__ieee754_sqrt+0xc8>
 800648e:	d113      	bne.n	80064b8 <__ieee754_sqrt+0xec>
 8006490:	459c      	cmp	ip, r3
 8006492:	d811      	bhi.n	80064b8 <__ieee754_sqrt+0xec>
 8006494:	f1bc 0f00 	cmp.w	ip, #0
 8006498:	eb0c 0506 	add.w	r5, ip, r6
 800649c:	da43      	bge.n	8006526 <__ieee754_sqrt+0x15a>
 800649e:	2d00      	cmp	r5, #0
 80064a0:	db41      	blt.n	8006526 <__ieee754_sqrt+0x15a>
 80064a2:	f100 0801 	add.w	r8, r0, #1
 80064a6:	1a09      	subs	r1, r1, r0
 80064a8:	459c      	cmp	ip, r3
 80064aa:	bf88      	it	hi
 80064ac:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80064b0:	eba3 030c 	sub.w	r3, r3, ip
 80064b4:	4432      	add	r2, r6
 80064b6:	4640      	mov	r0, r8
 80064b8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80064bc:	f1be 0e01 	subs.w	lr, lr, #1
 80064c0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80064c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80064c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80064cc:	d1db      	bne.n	8006486 <__ieee754_sqrt+0xba>
 80064ce:	430b      	orrs	r3, r1
 80064d0:	d006      	beq.n	80064e0 <__ieee754_sqrt+0x114>
 80064d2:	1c50      	adds	r0, r2, #1
 80064d4:	bf13      	iteet	ne
 80064d6:	3201      	addne	r2, #1
 80064d8:	3401      	addeq	r4, #1
 80064da:	4672      	moveq	r2, lr
 80064dc:	f022 0201 	bicne.w	r2, r2, #1
 80064e0:	1063      	asrs	r3, r4, #1
 80064e2:	0852      	lsrs	r2, r2, #1
 80064e4:	07e1      	lsls	r1, r4, #31
 80064e6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80064ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80064ee:	bf48      	it	mi
 80064f0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80064f4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80064f8:	4614      	mov	r4, r2
 80064fa:	e781      	b.n	8006400 <__ieee754_sqrt+0x34>
 80064fc:	0ad9      	lsrs	r1, r3, #11
 80064fe:	3815      	subs	r0, #21
 8006500:	055b      	lsls	r3, r3, #21
 8006502:	2900      	cmp	r1, #0
 8006504:	d0fa      	beq.n	80064fc <__ieee754_sqrt+0x130>
 8006506:	02cd      	lsls	r5, r1, #11
 8006508:	d50a      	bpl.n	8006520 <__ieee754_sqrt+0x154>
 800650a:	f1c2 0420 	rsb	r4, r2, #32
 800650e:	fa23 f404 	lsr.w	r4, r3, r4
 8006512:	1e55      	subs	r5, r2, #1
 8006514:	4093      	lsls	r3, r2
 8006516:	4321      	orrs	r1, r4
 8006518:	1b42      	subs	r2, r0, r5
 800651a:	e78a      	b.n	8006432 <__ieee754_sqrt+0x66>
 800651c:	4610      	mov	r0, r2
 800651e:	e7f0      	b.n	8006502 <__ieee754_sqrt+0x136>
 8006520:	0049      	lsls	r1, r1, #1
 8006522:	3201      	adds	r2, #1
 8006524:	e7ef      	b.n	8006506 <__ieee754_sqrt+0x13a>
 8006526:	4680      	mov	r8, r0
 8006528:	e7bd      	b.n	80064a6 <__ieee754_sqrt+0xda>
 800652a:	bf00      	nop
 800652c:	7ff00000 	.word	0x7ff00000

08006530 <with_errno>:
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	4604      	mov	r4, r0
 8006534:	460d      	mov	r5, r1
 8006536:	4616      	mov	r6, r2
 8006538:	f7ff f978 	bl	800582c <__errno>
 800653c:	4629      	mov	r1, r5
 800653e:	6006      	str	r6, [r0, #0]
 8006540:	4620      	mov	r0, r4
 8006542:	bd70      	pop	{r4, r5, r6, pc}

08006544 <xflow>:
 8006544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006546:	4614      	mov	r4, r2
 8006548:	461d      	mov	r5, r3
 800654a:	b108      	cbz	r0, 8006550 <xflow+0xc>
 800654c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006550:	e9cd 2300 	strd	r2, r3, [sp]
 8006554:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006558:	4620      	mov	r0, r4
 800655a:	4629      	mov	r1, r5
 800655c:	f7f9 fff4 	bl	8000548 <__aeabi_dmul>
 8006560:	2222      	movs	r2, #34	; 0x22
 8006562:	b003      	add	sp, #12
 8006564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006568:	f7ff bfe2 	b.w	8006530 <with_errno>

0800656c <__math_uflow>:
 800656c:	b508      	push	{r3, lr}
 800656e:	2200      	movs	r2, #0
 8006570:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006574:	f7ff ffe6 	bl	8006544 <xflow>
 8006578:	ec41 0b10 	vmov	d0, r0, r1
 800657c:	bd08      	pop	{r3, pc}

0800657e <__math_oflow>:
 800657e:	b508      	push	{r3, lr}
 8006580:	2200      	movs	r2, #0
 8006582:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006586:	f7ff ffdd 	bl	8006544 <xflow>
 800658a:	ec41 0b10 	vmov	d0, r0, r1
 800658e:	bd08      	pop	{r3, pc}

08006590 <fabs>:
 8006590:	ec51 0b10 	vmov	r0, r1, d0
 8006594:	ee10 2a10 	vmov	r2, s0
 8006598:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800659c:	ec43 2b10 	vmov	d0, r2, r3
 80065a0:	4770      	bx	lr

080065a2 <finite>:
 80065a2:	b082      	sub	sp, #8
 80065a4:	ed8d 0b00 	vstr	d0, [sp]
 80065a8:	9801      	ldr	r0, [sp, #4]
 80065aa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80065ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80065b2:	0fc0      	lsrs	r0, r0, #31
 80065b4:	b002      	add	sp, #8
 80065b6:	4770      	bx	lr

080065b8 <scalbn>:
 80065b8:	b570      	push	{r4, r5, r6, lr}
 80065ba:	ec55 4b10 	vmov	r4, r5, d0
 80065be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80065c2:	4606      	mov	r6, r0
 80065c4:	462b      	mov	r3, r5
 80065c6:	b99a      	cbnz	r2, 80065f0 <scalbn+0x38>
 80065c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80065cc:	4323      	orrs	r3, r4
 80065ce:	d036      	beq.n	800663e <scalbn+0x86>
 80065d0:	4b39      	ldr	r3, [pc, #228]	; (80066b8 <scalbn+0x100>)
 80065d2:	4629      	mov	r1, r5
 80065d4:	ee10 0a10 	vmov	r0, s0
 80065d8:	2200      	movs	r2, #0
 80065da:	f7f9 ffb5 	bl	8000548 <__aeabi_dmul>
 80065de:	4b37      	ldr	r3, [pc, #220]	; (80066bc <scalbn+0x104>)
 80065e0:	429e      	cmp	r6, r3
 80065e2:	4604      	mov	r4, r0
 80065e4:	460d      	mov	r5, r1
 80065e6:	da10      	bge.n	800660a <scalbn+0x52>
 80065e8:	a32b      	add	r3, pc, #172	; (adr r3, 8006698 <scalbn+0xe0>)
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	e03a      	b.n	8006666 <scalbn+0xae>
 80065f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80065f4:	428a      	cmp	r2, r1
 80065f6:	d10c      	bne.n	8006612 <scalbn+0x5a>
 80065f8:	ee10 2a10 	vmov	r2, s0
 80065fc:	4620      	mov	r0, r4
 80065fe:	4629      	mov	r1, r5
 8006600:	f7f9 fdec 	bl	80001dc <__adddf3>
 8006604:	4604      	mov	r4, r0
 8006606:	460d      	mov	r5, r1
 8006608:	e019      	b.n	800663e <scalbn+0x86>
 800660a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800660e:	460b      	mov	r3, r1
 8006610:	3a36      	subs	r2, #54	; 0x36
 8006612:	4432      	add	r2, r6
 8006614:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006618:	428a      	cmp	r2, r1
 800661a:	dd08      	ble.n	800662e <scalbn+0x76>
 800661c:	2d00      	cmp	r5, #0
 800661e:	a120      	add	r1, pc, #128	; (adr r1, 80066a0 <scalbn+0xe8>)
 8006620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006624:	da1c      	bge.n	8006660 <scalbn+0xa8>
 8006626:	a120      	add	r1, pc, #128	; (adr r1, 80066a8 <scalbn+0xf0>)
 8006628:	e9d1 0100 	ldrd	r0, r1, [r1]
 800662c:	e018      	b.n	8006660 <scalbn+0xa8>
 800662e:	2a00      	cmp	r2, #0
 8006630:	dd08      	ble.n	8006644 <scalbn+0x8c>
 8006632:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006636:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800663a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800663e:	ec45 4b10 	vmov	d0, r4, r5
 8006642:	bd70      	pop	{r4, r5, r6, pc}
 8006644:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006648:	da19      	bge.n	800667e <scalbn+0xc6>
 800664a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800664e:	429e      	cmp	r6, r3
 8006650:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006654:	dd0a      	ble.n	800666c <scalbn+0xb4>
 8006656:	a112      	add	r1, pc, #72	; (adr r1, 80066a0 <scalbn+0xe8>)
 8006658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e2      	bne.n	8006626 <scalbn+0x6e>
 8006660:	a30f      	add	r3, pc, #60	; (adr r3, 80066a0 <scalbn+0xe8>)
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	f7f9 ff6f 	bl	8000548 <__aeabi_dmul>
 800666a:	e7cb      	b.n	8006604 <scalbn+0x4c>
 800666c:	a10a      	add	r1, pc, #40	; (adr r1, 8006698 <scalbn+0xe0>)
 800666e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d0b8      	beq.n	80065e8 <scalbn+0x30>
 8006676:	a10e      	add	r1, pc, #56	; (adr r1, 80066b0 <scalbn+0xf8>)
 8006678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800667c:	e7b4      	b.n	80065e8 <scalbn+0x30>
 800667e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006682:	3236      	adds	r2, #54	; 0x36
 8006684:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006688:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800668c:	4620      	mov	r0, r4
 800668e:	4b0c      	ldr	r3, [pc, #48]	; (80066c0 <scalbn+0x108>)
 8006690:	2200      	movs	r2, #0
 8006692:	e7e8      	b.n	8006666 <scalbn+0xae>
 8006694:	f3af 8000 	nop.w
 8006698:	c2f8f359 	.word	0xc2f8f359
 800669c:	01a56e1f 	.word	0x01a56e1f
 80066a0:	8800759c 	.word	0x8800759c
 80066a4:	7e37e43c 	.word	0x7e37e43c
 80066a8:	8800759c 	.word	0x8800759c
 80066ac:	fe37e43c 	.word	0xfe37e43c
 80066b0:	c2f8f359 	.word	0xc2f8f359
 80066b4:	81a56e1f 	.word	0x81a56e1f
 80066b8:	43500000 	.word	0x43500000
 80066bc:	ffff3cb0 	.word	0xffff3cb0
 80066c0:	3c900000 	.word	0x3c900000

080066c4 <_init>:
 80066c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c6:	bf00      	nop
 80066c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ca:	bc08      	pop	{r3}
 80066cc:	469e      	mov	lr, r3
 80066ce:	4770      	bx	lr

080066d0 <_fini>:
 80066d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d2:	bf00      	nop
 80066d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066d6:	bc08      	pop	{r3}
 80066d8:	469e      	mov	lr, r3
 80066da:	4770      	bx	lr
