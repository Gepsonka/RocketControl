
RocketControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009524  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080096b8  080096b8  000196b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009748  08009748  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009748  08009748  00019748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009750  08009750  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009750  08009750  00019750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009754  08009754  00019754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000070  080097c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200003b8  080097c8  000203b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001802e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ce  00000000  00000000  000380ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0003b7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  0003cd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024756  00000000  00000000  0003e198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bce6  00000000  00000000  000628ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cce11  00000000  00000000  0007e5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b3e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f94  00000000  00000000  0014b438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800969c 	.word	0x0800969c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800969c 	.word	0x0800969c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b6c:	f000 b974 	b.w	8000e58 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	468e      	mov	lr, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14d      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4694      	mov	ip, r2
 8000b9a:	d969      	bls.n	8000c70 <__udivmoddi4+0xe8>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b152      	cbz	r2, 8000bb8 <__udivmoddi4+0x30>
 8000ba2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba6:	f1c2 0120 	rsb	r1, r2, #32
 8000baa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bb6:	4094      	lsls	r4, r2
 8000bb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bbc:	0c21      	lsrs	r1, r4, #16
 8000bbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000bc2:	fa1f f78c 	uxth.w	r7, ip
 8000bc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bce:	fb06 f107 	mul.w	r1, r6, r7
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bde:	f080 811f 	bcs.w	8000e20 <__udivmoddi4+0x298>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 811c 	bls.w	8000e20 <__udivmoddi4+0x298>
 8000be8:	3e02      	subs	r6, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a5b      	subs	r3, r3, r1
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bfc:	fb00 f707 	mul.w	r7, r0, r7
 8000c00:	42a7      	cmp	r7, r4
 8000c02:	d90a      	bls.n	8000c1a <__udivmoddi4+0x92>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c0c:	f080 810a 	bcs.w	8000e24 <__udivmoddi4+0x29c>
 8000c10:	42a7      	cmp	r7, r4
 8000c12:	f240 8107 	bls.w	8000e24 <__udivmoddi4+0x29c>
 8000c16:	4464      	add	r4, ip
 8000c18:	3802      	subs	r0, #2
 8000c1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1e:	1be4      	subs	r4, r4, r7
 8000c20:	2600      	movs	r6, #0
 8000c22:	b11d      	cbz	r5, 8000c2c <__udivmoddi4+0xa4>
 8000c24:	40d4      	lsrs	r4, r2
 8000c26:	2300      	movs	r3, #0
 8000c28:	e9c5 4300 	strd	r4, r3, [r5]
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0xc2>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80ef 	beq.w	8000e1a <__udivmoddi4+0x292>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x160>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xd4>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80f9 	bhi.w	8000e4e <__udivmoddi4+0x2c6>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	469e      	mov	lr, r3
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e0      	beq.n	8000c2c <__udivmoddi4+0xa4>
 8000c6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c6e:	e7dd      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000c70:	b902      	cbnz	r2, 8000c74 <__udivmoddi4+0xec>
 8000c72:	deff      	udf	#255	; 0xff
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f040 8092 	bne.w	8000da2 <__udivmoddi4+0x21a>
 8000c7e:	eba1 010c 	sub.w	r1, r1, ip
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	2601      	movs	r6, #1
 8000c8c:	0c20      	lsrs	r0, r4, #16
 8000c8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c92:	fb07 1113 	mls	r1, r7, r3, r1
 8000c96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9a:	fb0e f003 	mul.w	r0, lr, r3
 8000c9e:	4288      	cmp	r0, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x12c>
 8000ca2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x12a>
 8000cac:	4288      	cmp	r0, r1
 8000cae:	f200 80cb 	bhi.w	8000e48 <__udivmoddi4+0x2c0>
 8000cb2:	4643      	mov	r3, r8
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x156>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x154>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f200 80bb 	bhi.w	8000e52 <__udivmoddi4+0x2ca>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ce6:	e79c      	b.n	8000c22 <__udivmoddi4+0x9a>
 8000ce8:	f1c6 0720 	rsb	r7, r6, #32
 8000cec:	40b3      	lsls	r3, r6
 8000cee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	431c      	orrs	r4, r3
 8000d00:	40f9      	lsrs	r1, r7
 8000d02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d06:	fa00 f306 	lsl.w	r3, r0, r6
 8000d0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d0e:	0c20      	lsrs	r0, r4, #16
 8000d10:	fa1f fe8c 	uxth.w	lr, ip
 8000d14:	fb09 1118 	mls	r1, r9, r8, r1
 8000d18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d20:	4288      	cmp	r0, r1
 8000d22:	fa02 f206 	lsl.w	r2, r2, r6
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x1b8>
 8000d28:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d30:	f080 8088 	bcs.w	8000e44 <__udivmoddi4+0x2bc>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f240 8085 	bls.w	8000e44 <__udivmoddi4+0x2bc>
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	1a09      	subs	r1, r1, r0
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d48:	fb09 1110 	mls	r1, r9, r0, r1
 8000d4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d54:	458e      	cmp	lr, r1
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1e2>
 8000d58:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d60:	d26c      	bcs.n	8000e3c <__udivmoddi4+0x2b4>
 8000d62:	458e      	cmp	lr, r1
 8000d64:	d96a      	bls.n	8000e3c <__udivmoddi4+0x2b4>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4461      	add	r1, ip
 8000d6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d72:	eba1 010e 	sub.w	r1, r1, lr
 8000d76:	42a1      	cmp	r1, r4
 8000d78:	46c8      	mov	r8, r9
 8000d7a:	46a6      	mov	lr, r4
 8000d7c:	d356      	bcc.n	8000e2c <__udivmoddi4+0x2a4>
 8000d7e:	d053      	beq.n	8000e28 <__udivmoddi4+0x2a0>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x212>
 8000d82:	ebb3 0208 	subs.w	r2, r3, r8
 8000d86:	eb61 010e 	sbc.w	r1, r1, lr
 8000d8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d92:	40f1      	lsrs	r1, r6
 8000d94:	431f      	orrs	r7, r3
 8000d96:	e9c5 7100 	strd	r7, r1, [r5]
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	f1c2 0320 	rsb	r3, r2, #32
 8000da6:	40d8      	lsrs	r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa21 f303 	lsr.w	r3, r1, r3
 8000db0:	4091      	lsls	r1, r2
 8000db2:	4301      	orrs	r1, r0
 8000db4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db8:	fa1f fe8c 	uxth.w	lr, ip
 8000dbc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dc0:	fb07 3610 	mls	r6, r7, r0, r3
 8000dc4:	0c0b      	lsrs	r3, r1, #16
 8000dc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dca:	fb00 f60e 	mul.w	r6, r0, lr
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x260>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dde:	d22f      	bcs.n	8000e40 <__udivmoddi4+0x2b8>
 8000de0:	429e      	cmp	r6, r3
 8000de2:	d92d      	bls.n	8000e40 <__udivmoddi4+0x2b8>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	b289      	uxth	r1, r1
 8000dec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000df0:	fb07 3316 	mls	r3, r7, r6, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x28a>
 8000e00:	eb1c 0101 	adds.w	r1, ip, r1
 8000e04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e08:	d216      	bcs.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d914      	bls.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0e:	3e02      	subs	r6, #2
 8000e10:	4461      	add	r1, ip
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e18:	e738      	b.n	8000c8c <__udivmoddi4+0x104>
 8000e1a:	462e      	mov	r6, r5
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	e705      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000e20:	4606      	mov	r6, r0
 8000e22:	e6e3      	b.n	8000bec <__udivmoddi4+0x64>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6f8      	b.n	8000c1a <__udivmoddi4+0x92>
 8000e28:	454b      	cmp	r3, r9
 8000e2a:	d2a9      	bcs.n	8000d80 <__udivmoddi4+0x1f8>
 8000e2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e34:	3801      	subs	r0, #1
 8000e36:	e7a3      	b.n	8000d80 <__udivmoddi4+0x1f8>
 8000e38:	4646      	mov	r6, r8
 8000e3a:	e7ea      	b.n	8000e12 <__udivmoddi4+0x28a>
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	e794      	b.n	8000d6a <__udivmoddi4+0x1e2>
 8000e40:	4640      	mov	r0, r8
 8000e42:	e7d1      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e44:	46d0      	mov	r8, sl
 8000e46:	e77b      	b.n	8000d40 <__udivmoddi4+0x1b8>
 8000e48:	3b02      	subs	r3, #2
 8000e4a:	4461      	add	r1, ip
 8000e4c:	e732      	b.n	8000cb4 <__udivmoddi4+0x12c>
 8000e4e:	4630      	mov	r0, r6
 8000e50:	e709      	b.n	8000c66 <__udivmoddi4+0xde>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e742      	b.n	8000cde <__udivmoddi4+0x156>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <IMUwriteByte>:

HAL_StatusTypeDef status; // for testing purposes


void IMUwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af04      	add	r7, sp, #16
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
 8000e66:	460b      	mov	r3, r1
 8000e68:	71bb      	strb	r3, [r7, #6]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	717b      	strb	r3, [r7, #5]
	status = HAL_I2C_Mem_Write(&hi2c1, address, subAddress, 1, (uint8_t*)data, 1, HAL_MAX_DELAY);
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	b299      	uxth	r1, r3
 8000e72:	79bb      	ldrb	r3, [r7, #6]
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	797b      	ldrb	r3, [r7, #5]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e7e:	9302      	str	r3, [sp, #8]
 8000e80:	2301      	movs	r3, #1
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	9000      	str	r0, [sp, #0]
 8000e86:	2301      	movs	r3, #1
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <IMUwriteByte+0x44>)
 8000e8a:	f003 fb9f 	bl	80045cc <HAL_I2C_Mem_Write>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <IMUwriteByte+0x48>)
 8000e94:	701a      	strb	r2, [r3, #0]
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000180 	.word	0x20000180
 8000ea4:	200000d8 	.word	0x200000d8

08000ea8 <IMUreadByte>:

uint8_t IMUreadByte(uint8_t address, uint8_t subAddress)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af04      	add	r7, sp, #16
 8000eae:	4603      	mov	r3, r0
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	71bb      	strb	r3, [r7, #6]
	uint8_t dest;
	status = HAL_I2C_Mem_Read(&hi2c1, address, subAddress, 1, &dest, 1, HAL_MAX_DELAY);
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	b299      	uxth	r1, r3
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec4:	9302      	str	r3, [sp, #8]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	9301      	str	r3, [sp, #4]
 8000eca:	f107 030f 	add.w	r3, r7, #15
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	4806      	ldr	r0, [pc, #24]	; (8000eec <IMUreadByte+0x44>)
 8000ed4:	f003 fc8e 	bl	80047f4 <HAL_I2C_Mem_Read>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <IMUreadByte+0x48>)
 8000ede:	701a      	strb	r2, [r3, #0]
	return dest;
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000180 	.word	0x20000180
 8000ef0:	200000d8 	.word	0x200000d8

08000ef4 <IMUreadBytes>:

static void IMUreadBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af04      	add	r7, sp, #16
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	460b      	mov	r3, r1
 8000f02:	71bb      	strb	r3, [r7, #6]
 8000f04:	4613      	mov	r3, r2
 8000f06:	717b      	strb	r3, [r7, #5]
	status = HAL_I2C_Mem_Read(&hi2c1, address, subAddress, 1, dest, count, HAL_MAX_DELAY);
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	b299      	uxth	r1, r3
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	797b      	ldrb	r3, [r7, #5]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f18:	9002      	str	r0, [sp, #8]
 8000f1a:	9301      	str	r3, [sp, #4]
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2301      	movs	r3, #1
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <IMUreadBytes+0x44>)
 8000f24:	f003 fc66 	bl	80047f4 <HAL_I2C_Mem_Read>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <IMUreadBytes+0x48>)
 8000f2e:	701a      	strb	r2, [r3, #0]
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000180 	.word	0x20000180
 8000f3c:	200000d8 	.word	0x200000d8

08000f40 <MinitAK8963Slave>:
  IMUwriteByte(AK8963_ADDRESS, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
  delay(10);
}

void MinitAK8963Slave(uint8_t Mscale, uint8_t Mmode, float * magCalibration)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	603a      	str	r2, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	71bb      	strb	r3, [r7, #6]
   // First extract the factory calibration for each magnetometer axis
   uint8_t rawData[3];  // x/y/z gyro calibration data stored here

   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_ADDR, AK8963_ADDRESS);           // Set the I2C slave address of AK8963 and set for write.
 8000f50:	2218      	movs	r2, #24
 8000f52:	2125      	movs	r1, #37	; 0x25
 8000f54:	20d0      	movs	r0, #208	; 0xd0
 8000f56:	f7ff ff81 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_REG, AK8963_CNTL);              // I2C slave 0 register address from where to begin data transfer
 8000f5a:	220a      	movs	r2, #10
 8000f5c:	2126      	movs	r1, #38	; 0x26
 8000f5e:	20d0      	movs	r0, #208	; 0xd0
 8000f60:	f7ff ff7c 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_DO, 0x01);                       // Reset AK8963
 8000f64:	2201      	movs	r2, #1
 8000f66:	2163      	movs	r1, #99	; 0x63
 8000f68:	20d0      	movs	r0, #208	; 0xd0
 8000f6a:	f7ff ff77 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_CTRL, 0x81);                     // Enable I2C and write 1 byte
 8000f6e:	2281      	movs	r2, #129	; 0x81
 8000f70:	2127      	movs	r1, #39	; 0x27
 8000f72:	20d0      	movs	r0, #208	; 0xd0
 8000f74:	f7ff ff72 	bl	8000e5c <IMUwriteByte>
   delay(50);
 8000f78:	2032      	movs	r0, #50	; 0x32
 8000f7a:	f002 fdcf 	bl	8003b1c <HAL_Delay>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_ADDR, AK8963_ADDRESS);           // Set the I2C slave address of AK8963 and set for write.
 8000f7e:	2218      	movs	r2, #24
 8000f80:	2125      	movs	r1, #37	; 0x25
 8000f82:	20d0      	movs	r0, #208	; 0xd0
 8000f84:	f7ff ff6a 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_REG, AK8963_CNTL);               // I2C slave 0 register address from where to begin data transfer
 8000f88:	220a      	movs	r2, #10
 8000f8a:	2126      	movs	r1, #38	; 0x26
 8000f8c:	20d0      	movs	r0, #208	; 0xd0
 8000f8e:	f7ff ff65 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_DO, 0x00);                       // Power down magnetometer
 8000f92:	2200      	movs	r2, #0
 8000f94:	2163      	movs	r1, #99	; 0x63
 8000f96:	20d0      	movs	r0, #208	; 0xd0
 8000f98:	f7ff ff60 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_CTRL, 0x81);                     // Enable I2C and write 1 byte
 8000f9c:	2281      	movs	r2, #129	; 0x81
 8000f9e:	2127      	movs	r1, #39	; 0x27
 8000fa0:	20d0      	movs	r0, #208	; 0xd0
 8000fa2:	f7ff ff5b 	bl	8000e5c <IMUwriteByte>
   delay(50);
 8000fa6:	2032      	movs	r0, #50	; 0x32
 8000fa8:	f002 fdb8 	bl	8003b1c <HAL_Delay>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_ADDR, AK8963_ADDRESS);           // Set the I2C slave address of AK8963 and set for write.
 8000fac:	2218      	movs	r2, #24
 8000fae:	2125      	movs	r1, #37	; 0x25
 8000fb0:	20d0      	movs	r0, #208	; 0xd0
 8000fb2:	f7ff ff53 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_REG, AK8963_CNTL);               // I2C slave 0 register address from where to begin data transfer
 8000fb6:	220a      	movs	r2, #10
 8000fb8:	2126      	movs	r1, #38	; 0x26
 8000fba:	20d0      	movs	r0, #208	; 0xd0
 8000fbc:	f7ff ff4e 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_DO, 0x0F);                       // Enter fuze mode
 8000fc0:	220f      	movs	r2, #15
 8000fc2:	2163      	movs	r1, #99	; 0x63
 8000fc4:	20d0      	movs	r0, #208	; 0xd0
 8000fc6:	f7ff ff49 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_CTRL, 0x81);                     // Enable I2C and write 1 byte
 8000fca:	2281      	movs	r2, #129	; 0x81
 8000fcc:	2127      	movs	r1, #39	; 0x27
 8000fce:	20d0      	movs	r0, #208	; 0xd0
 8000fd0:	f7ff ff44 	bl	8000e5c <IMUwriteByte>
   delay(50);
 8000fd4:	2032      	movs	r0, #50	; 0x32
 8000fd6:	f002 fda1 	bl	8003b1c <HAL_Delay>

   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_ADDR, AK8963_ADDRESS | 0x80);    // Set the I2C slave address of AK8963 and set for read.
 8000fda:	2298      	movs	r2, #152	; 0x98
 8000fdc:	2125      	movs	r1, #37	; 0x25
 8000fde:	20d0      	movs	r0, #208	; 0xd0
 8000fe0:	f7ff ff3c 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_REG, AK8963_ASAX);               // I2C slave 0 register address from where to begin data transfer
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	2126      	movs	r1, #38	; 0x26
 8000fe8:	20d0      	movs	r0, #208	; 0xd0
 8000fea:	f7ff ff37 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_CTRL, 0x83);                     // Enable I2C and read 3 bytes
 8000fee:	2283      	movs	r2, #131	; 0x83
 8000ff0:	2127      	movs	r1, #39	; 0x27
 8000ff2:	20d0      	movs	r0, #208	; 0xd0
 8000ff4:	f7ff ff32 	bl	8000e5c <IMUwriteByte>
   delay(50);
 8000ff8:	2032      	movs	r0, #50	; 0x32
 8000ffa:	f002 fd8f 	bl	8003b1c <HAL_Delay>
   IMUreadBytes(MPU9250_ADDRESS, EXT_SENS_DATA_00, 3, &rawData[0]);        // Read the x-, y-, and z-axis calibration values
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	2203      	movs	r2, #3
 8001004:	2149      	movs	r1, #73	; 0x49
 8001006:	20d0      	movs	r0, #208	; 0xd0
 8001008:	f7ff ff74 	bl	8000ef4 <IMUreadBytes>
   magCalibration[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;        // Return x-axis sensitivity adjustment values, etc.
 800100c:	7b3b      	ldrb	r3, [r7, #12]
 800100e:	3b80      	subs	r3, #128	; 0x80
 8001010:	ee07 3a90 	vmov	s15, r3
 8001014:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001018:	eddf 6a44 	vldr	s13, [pc, #272]	; 800112c <MinitAK8963Slave+0x1ec>
 800101c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001020:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001024:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	edc3 7a00 	vstr	s15, [r3]
   magCalibration[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 800102e:	7b7b      	ldrb	r3, [r7, #13]
 8001030:	3b80      	subs	r3, #128	; 0x80
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800103a:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800112c <MinitAK8963Slave+0x1ec>
 800103e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	3304      	adds	r3, #4
 8001046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800104a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800104e:	edc3 7a00 	vstr	s15, [r3]
   magCalibration[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	3b80      	subs	r3, #128	; 0x80
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800105e:	eddf 6a33 	vldr	s13, [pc, #204]	; 800112c <MinitAK8963Slave+0x1ec>
 8001062:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	3308      	adds	r3, #8
 800106a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800106e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001072:	edc3 7a00 	vstr	s15, [r3]
   _magCalibration[0] = magCalibration[0];
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a2d      	ldr	r2, [pc, #180]	; (8001130 <MinitAK8963Slave+0x1f0>)
 800107c:	6013      	str	r3, [r2, #0]
   _magCalibration[1] = magCalibration[1];
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	4a2b      	ldr	r2, [pc, #172]	; (8001130 <MinitAK8963Slave+0x1f0>)
 8001084:	6053      	str	r3, [r2, #4]
   _magCalibration[2] = magCalibration[2];
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	4a29      	ldr	r2, [pc, #164]	; (8001130 <MinitAK8963Slave+0x1f0>)
 800108c:	6093      	str	r3, [r2, #8]
   _Mmode = Mmode;
 800108e:	4a29      	ldr	r2, [pc, #164]	; (8001134 <MinitAK8963Slave+0x1f4>)
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	7013      	strb	r3, [r2, #0]

   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_ADDR, AK8963_ADDRESS);           // Set the I2C slave address of AK8963 and set for write.
 8001094:	2218      	movs	r2, #24
 8001096:	2125      	movs	r1, #37	; 0x25
 8001098:	20d0      	movs	r0, #208	; 0xd0
 800109a:	f7ff fedf 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_REG, AK8963_CNTL);               // I2C slave 0 register address from where to begin data transfer
 800109e:	220a      	movs	r2, #10
 80010a0:	2126      	movs	r1, #38	; 0x26
 80010a2:	20d0      	movs	r0, #208	; 0xd0
 80010a4:	f7ff feda 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_DO, 0x00);                       // Power down magnetometer
 80010a8:	2200      	movs	r2, #0
 80010aa:	2163      	movs	r1, #99	; 0x63
 80010ac:	20d0      	movs	r0, #208	; 0xd0
 80010ae:	f7ff fed5 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_CTRL, 0x81);                     // Enable I2C and transfer 1 byte
 80010b2:	2281      	movs	r2, #129	; 0x81
 80010b4:	2127      	movs	r1, #39	; 0x27
 80010b6:	20d0      	movs	r0, #208	; 0xd0
 80010b8:	f7ff fed0 	bl	8000e5c <IMUwriteByte>
   delay(50);
 80010bc:	2032      	movs	r0, #50	; 0x32
 80010be:	f002 fd2d 	bl	8003b1c <HAL_Delay>

   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_ADDR, AK8963_ADDRESS);           // Set the I2C slave address of AK8963 and set for write.
 80010c2:	2218      	movs	r2, #24
 80010c4:	2125      	movs	r1, #37	; 0x25
 80010c6:	20d0      	movs	r0, #208	; 0xd0
 80010c8:	f7ff fec8 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_REG, AK8963_CNTL);               // I2C slave 0 register address from where to begin data transfer
 80010cc:	220a      	movs	r2, #10
 80010ce:	2126      	movs	r1, #38	; 0x26
 80010d0:	20d0      	movs	r0, #208	; 0xd0
 80010d2:	f7ff fec3 	bl	8000e5c <IMUwriteByte>
   // Configure the magnetometer for continuous read and highest resolution
   // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
   // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_DO, Mscale << 4 | Mmode);        // Set magnetometer data resolution and sample ODR
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	b25a      	sxtb	r2, r3
 80010dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b25b      	sxtb	r3, r3
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	461a      	mov	r2, r3
 80010e8:	2163      	movs	r1, #99	; 0x63
 80010ea:	20d0      	movs	r0, #208	; 0xd0
 80010ec:	f7ff feb6 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_CTRL, 0x81);                     // Enable I2C and transfer 1 byte
 80010f0:	2281      	movs	r2, #129	; 0x81
 80010f2:	2127      	movs	r1, #39	; 0x27
 80010f4:	20d0      	movs	r0, #208	; 0xd0
 80010f6:	f7ff feb1 	bl	8000e5c <IMUwriteByte>
   delay(50);
 80010fa:	2032      	movs	r0, #50	; 0x32
 80010fc:	f002 fd0e 	bl	8003b1c <HAL_Delay>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_ADDR, AK8963_ADDRESS | 0x80);    // Set the I2C slave address of AK8963 and set for read.
 8001100:	2298      	movs	r2, #152	; 0x98
 8001102:	2125      	movs	r1, #37	; 0x25
 8001104:	20d0      	movs	r0, #208	; 0xd0
 8001106:	f7ff fea9 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_REG, AK8963_CNTL);               // I2C slave 0 register address from where to begin data transfer
 800110a:	220a      	movs	r2, #10
 800110c:	2126      	movs	r1, #38	; 0x26
 800110e:	20d0      	movs	r0, #208	; 0xd0
 8001110:	f7ff fea4 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, I2C_SLV0_CTRL, 0x81);                     // Enable I2C and transfer 1 byte
 8001114:	2281      	movs	r2, #129	; 0x81
 8001116:	2127      	movs	r1, #39	; 0x27
 8001118:	20d0      	movs	r0, #208	; 0xd0
 800111a:	f7ff fe9f 	bl	8000e5c <IMUwriteByte>
   delay(50);
 800111e:	2032      	movs	r0, #50	; 0x32
 8001120:	f002 fcfc 	bl	8003b1c <HAL_Delay>
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	43800000 	.word	0x43800000
 8001130:	20000090 	.word	0x20000090
 8001134:	2000008c 	.word	0x2000008c

08001138 <initMPU9250>:


void initMPU9250(uint8_t Ascale, uint8_t Gscale, uint8_t sampleRate)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
 8001142:	460b      	mov	r3, r1
 8001144:	71bb      	strb	r3, [r7, #6]
 8001146:	4613      	mov	r3, r2
 8001148:	717b      	strb	r3, [r7, #5]
 // wake up device
  IMUwriteByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 800114a:	2200      	movs	r2, #0
 800114c:	216b      	movs	r1, #107	; 0x6b
 800114e:	20d0      	movs	r0, #208	; 0xd0
 8001150:	f7ff fe84 	bl	8000e5c <IMUwriteByte>
  delay(100); // Wait for all registers to reset
 8001154:	2064      	movs	r0, #100	; 0x64
 8001156:	f002 fce1 	bl	8003b1c <HAL_Delay>

 // get stable time source
  IMUwriteByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 800115a:	2201      	movs	r2, #1
 800115c:	216b      	movs	r1, #107	; 0x6b
 800115e:	20d0      	movs	r0, #208	; 0xd0
 8001160:	f7ff fe7c 	bl	8000e5c <IMUwriteByte>
  delay(200);
 8001164:	20c8      	movs	r0, #200	; 0xc8
 8001166:	f002 fcd9 	bl	8003b1c <HAL_Delay>
 // Disable FSYNC and set thermometer and gyro bandwidth to 41 and 42 Hz, respectively;
 // minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
 // be higher than 1 / 0.0059 = 170 Hz
 // DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
 // With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
  IMUwriteByte(MPU9250_ADDRESS, CONFIG, 0x03);
 800116a:	2203      	movs	r2, #3
 800116c:	211a      	movs	r1, #26
 800116e:	20d0      	movs	r0, #208	; 0xd0
 8001170:	f7ff fe74 	bl	8000e5c <IMUwriteByte>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  IMUwriteByte(MPU9250_ADDRESS, SMPLRT_DIV, sampleRate);  // Use a 200 Hz rate; a rate consistent with the filter update rate
 8001174:	797b      	ldrb	r3, [r7, #5]
 8001176:	461a      	mov	r2, r3
 8001178:	2119      	movs	r1, #25
 800117a:	20d0      	movs	r0, #208	; 0xd0
 800117c:	f7ff fe6e 	bl	8000e5c <IMUwriteByte>
                                                       // determined inset in CONFIG above

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c = IMUreadByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 8001180:	211b      	movs	r1, #27
 8001182:	20d0      	movs	r0, #208	; 0xd0
 8001184:	f7ff fe90 	bl	8000ea8 <IMUreadByte>
 8001188:	4603      	mov	r3, r0
 800118a:	73fb      	strb	r3, [r7, #15]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	f023 0302 	bic.w	r3, r3, #2
 8001192:	73fb      	strb	r3, [r7, #15]
  c = c & ~0x18; // Clear AFS bits [4:3]
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	f023 0318 	bic.w	r3, r3, #24
 800119a:	73fb      	strb	r3, [r7, #15]
  c = c | Gscale << 3; // Set full scale range for the gyro
 800119c:	79bb      	ldrb	r3, [r7, #6]
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	b25a      	sxtb	r2, r3
 80011a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	73fb      	strb	r3, [r7, #15]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
  IMUwriteByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	461a      	mov	r2, r3
 80011b0:	211b      	movs	r1, #27
 80011b2:	20d0      	movs	r0, #208	; 0xd0
 80011b4:	f7ff fe52 	bl	8000e5c <IMUwriteByte>

  c = 0b10000000;
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	73fb      	strb	r3, [r7, #15]

  IMUwriteByte(MPU9250_ADDRESS, CONFIG, c); // setting gyro sampling rate to 8kHz
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	461a      	mov	r2, r3
 80011c0:	211a      	movs	r1, #26
 80011c2:	20d0      	movs	r0, #208	; 0xd0
 80011c4:	f7ff fe4a 	bl	8000e5c <IMUwriteByte>

 // Set accelerometer full-scale range configuration
  c = IMUreadByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 80011c8:	211c      	movs	r1, #28
 80011ca:	20d0      	movs	r0, #208	; 0xd0
 80011cc:	f7ff fe6c 	bl	8000ea8 <IMUreadByte>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	f023 0318 	bic.w	r3, r3, #24
 80011da:	73fb      	strb	r3, [r7, #15]
  c = c | Ascale << 3; // Set full scale range for the accelerometer
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	b25a      	sxtb	r2, r3
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b25b      	sxtb	r3, r3
 80011ea:	73fb      	strb	r3, [r7, #15]
  IMUwriteByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	461a      	mov	r2, r3
 80011f0:	211c      	movs	r1, #28
 80011f2:	20d0      	movs	r0, #208	; 0xd0
 80011f4:	f7ff fe32 	bl	8000e5c <IMUwriteByte>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = IMUreadByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 80011f8:	211d      	movs	r1, #29
 80011fa:	20d0      	movs	r0, #208	; 0xd0
 80011fc:	f7ff fe54 	bl	8000ea8 <IMUreadByte>
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	f023 030f 	bic.w	r3, r3, #15
 800120a:	73fb      	strb	r3, [r7, #15]
  IMUwriteByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	461a      	mov	r2, r3
 8001210:	211d      	movs	r1, #29
 8001212:	20d0      	movs	r0, #208	; 0xd0
 8001214:	f7ff fe22 	bl	8000e5c <IMUwriteByte>

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
  // clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
   IMUwriteByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x10);  // INT is 50 microsecond pulse and any read to clear
 8001218:	2210      	movs	r2, #16
 800121a:	2137      	movs	r1, #55	; 0x37
 800121c:	20d0      	movs	r0, #208	; 0xd0
 800121e:	f7ff fe1d 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8001222:	2201      	movs	r2, #1
 8001224:	2138      	movs	r1, #56	; 0x38
 8001226:	20d0      	movs	r0, #208	; 0xd0
 8001228:	f7ff fe18 	bl	8000e5c <IMUwriteByte>
   delay(100);
 800122c:	2064      	movs	r0, #100	; 0x64
 800122e:	f002 fc75 	bl	8003b1c <HAL_Delay>

  IMUwriteByte(MPU9250_ADDRESS, USER_CTRL, 0x20);          // Enable I2C Master mode
 8001232:	2220      	movs	r2, #32
 8001234:	216a      	movs	r1, #106	; 0x6a
 8001236:	20d0      	movs	r0, #208	; 0xd0
 8001238:	f7ff fe10 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x1D);       // I2C configuration STOP after each transaction, master I2C bus at 400 KHz
 800123c:	221d      	movs	r2, #29
 800123e:	2124      	movs	r1, #36	; 0x24
 8001240:	20d0      	movs	r0, #208	; 0xd0
 8001242:	f7ff fe0b 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, I2C_MST_DELAY_CTRL, 0x81); // Use blocking data retreival and enable delay for mag sample rate mismatch
 8001246:	2281      	movs	r2, #129	; 0x81
 8001248:	2167      	movs	r1, #103	; 0x67
 800124a:	20d0      	movs	r0, #208	; 0xd0
 800124c:	f7ff fe06 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, I2C_SLV4_CTRL, 0x01);      // Delay mag data retrieval to once every other accel/gyro data sample
 8001250:	2201      	movs	r2, #1
 8001252:	2134      	movs	r1, #52	; 0x34
 8001254:	20d0      	movs	r0, #208	; 0xd0
 8001256:	f7ff fe01 	bl	8000e5c <IMUwriteByte>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <calibrateMPU9250>:
}

// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(float * dest1, float * dest2)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b098      	sub	sp, #96	; 0x60
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 800126e:	2300      	movs	r3, #0
 8001270:	63bb      	str	r3, [r7, #56]	; 0x38
 8001272:	2300      	movs	r3, #0
 8001274:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001276:	2300      	movs	r3, #0
 8001278:	643b      	str	r3, [r7, #64]	; 0x40
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800127e:	2300      	movs	r3, #0
 8001280:	633b      	str	r3, [r7, #48]	; 0x30
 8001282:	2300      	movs	r3, #0
 8001284:	637b      	str	r3, [r7, #52]	; 0x34

 // reset device
  IMUwriteByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001286:	2280      	movs	r2, #128	; 0x80
 8001288:	216b      	movs	r1, #107	; 0x6b
 800128a:	20d0      	movs	r0, #208	; 0xd0
 800128c:	f7ff fde6 	bl	8000e5c <IMUwriteByte>
  delay(100);
 8001290:	2064      	movs	r0, #100	; 0x64
 8001292:	f002 fc43 	bl	8003b1c <HAL_Delay>

 // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
 // else use the internal oscillator, bits 2:0 = 001
  IMUwriteByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8001296:	2201      	movs	r2, #1
 8001298:	216b      	movs	r1, #107	; 0x6b
 800129a:	20d0      	movs	r0, #208	; 0xd0
 800129c:	f7ff fdde 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 80012a0:	2200      	movs	r2, #0
 80012a2:	216c      	movs	r1, #108	; 0x6c
 80012a4:	20d0      	movs	r0, #208	; 0xd0
 80012a6:	f7ff fdd9 	bl	8000e5c <IMUwriteByte>
  delay(200);
 80012aa:	20c8      	movs	r0, #200	; 0xc8
 80012ac:	f002 fc36 	bl	8003b1c <HAL_Delay>

// Configure device for bias calculation
  IMUwriteByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 80012b0:	2200      	movs	r2, #0
 80012b2:	2138      	movs	r1, #56	; 0x38
 80012b4:	20d0      	movs	r0, #208	; 0xd0
 80012b6:	f7ff fdd1 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 80012ba:	2200      	movs	r2, #0
 80012bc:	2123      	movs	r1, #35	; 0x23
 80012be:	20d0      	movs	r0, #208	; 0xd0
 80012c0:	f7ff fdcc 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 80012c4:	2200      	movs	r2, #0
 80012c6:	216b      	movs	r1, #107	; 0x6b
 80012c8:	20d0      	movs	r0, #208	; 0xd0
 80012ca:	f7ff fdc7 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 80012ce:	2200      	movs	r2, #0
 80012d0:	2124      	movs	r1, #36	; 0x24
 80012d2:	20d0      	movs	r0, #208	; 0xd0
 80012d4:	f7ff fdc2 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 80012d8:	2200      	movs	r2, #0
 80012da:	216a      	movs	r1, #106	; 0x6a
 80012dc:	20d0      	movs	r0, #208	; 0xd0
 80012de:	f7ff fdbd 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 80012e2:	220c      	movs	r2, #12
 80012e4:	216a      	movs	r1, #106	; 0x6a
 80012e6:	20d0      	movs	r0, #208	; 0xd0
 80012e8:	f7ff fdb8 	bl	8000e5c <IMUwriteByte>
  delay(15);
 80012ec:	200f      	movs	r0, #15
 80012ee:	f002 fc15 	bl	8003b1c <HAL_Delay>

// Configure MPU6050 gyro and accelerometer for bias calculation
  IMUwriteByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 80012f2:	2201      	movs	r2, #1
 80012f4:	211a      	movs	r1, #26
 80012f6:	20d0      	movs	r0, #208	; 0xd0
 80012f8:	f7ff fdb0 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 80012fc:	2200      	movs	r2, #0
 80012fe:	2119      	movs	r1, #25
 8001300:	20d0      	movs	r0, #208	; 0xd0
 8001302:	f7ff fdab 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001306:	2200      	movs	r2, #0
 8001308:	211b      	movs	r1, #27
 800130a:	20d0      	movs	r0, #208	; 0xd0
 800130c:	f7ff fda6 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001310:	2200      	movs	r2, #0
 8001312:	211c      	movs	r1, #28
 8001314:	20d0      	movs	r0, #208	; 0xd0
 8001316:	f7ff fda1 	bl	8000e5c <IMUwriteByte>

  uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 800131a:	2383      	movs	r3, #131	; 0x83
 800131c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8001320:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001324:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
  IMUwriteByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 8001328:	2240      	movs	r2, #64	; 0x40
 800132a:	216a      	movs	r1, #106	; 0x6a
 800132c:	20d0      	movs	r0, #208	; 0xd0
 800132e:	f7ff fd95 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8001332:	2278      	movs	r2, #120	; 0x78
 8001334:	2123      	movs	r1, #35	; 0x23
 8001336:	20d0      	movs	r0, #208	; 0xd0
 8001338:	f7ff fd90 	bl	8000e5c <IMUwriteByte>
  delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 800133c:	2028      	movs	r0, #40	; 0x28
 800133e:	f002 fbed 	bl	8003b1c <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  IMUwriteByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8001342:	2200      	movs	r2, #0
 8001344:	2123      	movs	r1, #35	; 0x23
 8001346:	20d0      	movs	r0, #208	; 0xd0
 8001348:	f7ff fd88 	bl	8000e5c <IMUwriteByte>
  IMUreadBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 800134c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001350:	2202      	movs	r2, #2
 8001352:	2172      	movs	r1, #114	; 0x72
 8001354:	20d0      	movs	r0, #208	; 0xd0
 8001356:	f7ff fdcd 	bl	8000ef4 <IMUreadBytes>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 800135a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	b21a      	sxth	r2, r3
 8001362:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001366:	b21b      	sxth	r3, r3
 8001368:	4313      	orrs	r3, r2
 800136a:	b21b      	sxth	r3, r3
 800136c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8001370:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001374:	4ac3      	ldr	r2, [pc, #780]	; (8001684 <calibrateMPU9250+0x420>)
 8001376:	fba2 2303 	umull	r2, r3, r2, r3
 800137a:	08db      	lsrs	r3, r3, #3
 800137c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

  for (ii = 0; ii < packet_count; ii++) {
 8001380:	2300      	movs	r3, #0
 8001382:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001386:	e071      	b.n	800146c <calibrateMPU9250+0x208>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8001388:	2300      	movs	r3, #0
 800138a:	82bb      	strh	r3, [r7, #20]
 800138c:	2300      	movs	r3, #0
 800138e:	82fb      	strh	r3, [r7, #22]
 8001390:	2300      	movs	r3, #0
 8001392:	833b      	strh	r3, [r7, #24]
 8001394:	2300      	movs	r3, #0
 8001396:	81bb      	strh	r3, [r7, #12]
 8001398:	2300      	movs	r3, #0
 800139a:	81fb      	strh	r3, [r7, #14]
 800139c:	2300      	movs	r3, #0
 800139e:	823b      	strh	r3, [r7, #16]
    IMUreadBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 80013a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013a4:	220c      	movs	r2, #12
 80013a6:	2174      	movs	r1, #116	; 0x74
 80013a8:	20d0      	movs	r0, #208	; 0xd0
 80013aa:	f7ff fda3 	bl	8000ef4 <IMUreadBytes>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 80013ae:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	4313      	orrs	r3, r2
 80013be:	b21b      	sxth	r3, r3
 80013c0:	82bb      	strh	r3, [r7, #20]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 80013c2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	82fb      	strh	r3, [r7, #22]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 80013d6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	b21a      	sxth	r2, r3
 80013de:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	4313      	orrs	r3, r2
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	833b      	strh	r3, [r7, #24]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 80013ea:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	81bb      	strh	r3, [r7, #12]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 80013fe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	b21a      	sxth	r2, r3
 8001406:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800140a:	b21b      	sxth	r3, r3
 800140c:	4313      	orrs	r3, r2
 800140e:	b21b      	sxth	r3, r3
 8001410:	81fb      	strh	r3, [r7, #14]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001412:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	b21a      	sxth	r2, r3
 800141a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800141e:	b21b      	sxth	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	b21b      	sxth	r3, r3
 8001424:	823b      	strh	r3, [r7, #16]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001428:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800142c:	4413      	add	r3, r2
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] += (int32_t) accel_temp[1];
 8001430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001432:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001436:	4413      	add	r3, r2
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] += (int32_t) accel_temp[2];
 800143a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001440:	4413      	add	r3, r2
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 8001444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001446:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 800144e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001450:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001454:	4413      	add	r3, r2
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8001458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800145a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800145e:	4413      	add	r3, r2
 8001460:	643b      	str	r3, [r7, #64]	; 0x40
  for (ii = 0; ii < packet_count; ii++) {
 8001462:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001466:	3301      	adds	r3, #1
 8001468:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800146c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001470:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001474:	429a      	cmp	r2, r3
 8001476:	d387      	bcc.n	8001388 <calibrateMPU9250+0x124>

}
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8001478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800147a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800147e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] /= (int32_t) packet_count;
 8001484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001486:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800148a:	fb92 f3f3 	sdiv	r3, r2, r3
 800148e:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] /= (int32_t) packet_count;
 8001490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001492:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001496:	fb92 f3f3 	sdiv	r3, r2, r3
 800149a:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  /= (int32_t) packet_count;
 800149c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800149e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80014a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80014a6:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  /= (int32_t) packet_count;
 80014a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80014ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80014b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  /= (int32_t) packet_count;
 80014b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80014ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80014be:	643b      	str	r3, [r7, #64]	; 0x40

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 80014c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	dd05      	ble.n	80014d2 <calibrateMPU9250+0x26e>
 80014c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014c8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
 80014d0:	e004      	b.n	80014dc <calibrateMPU9250+0x278>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 80014d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014d4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80014d8:	4413      	add	r3, r2
 80014da:	637b      	str	r3, [r7, #52]	; 0x34

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80014dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014de:	425b      	negs	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	da00      	bge.n	80014e6 <calibrateMPU9250+0x282>
 80014e4:	3303      	adds	r3, #3
 80014e6:	109b      	asrs	r3, r3, #2
 80014e8:	121b      	asrs	r3, r3, #8
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 80014f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014f2:	425b      	negs	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	da00      	bge.n	80014fa <calibrateMPU9250+0x296>
 80014f8:	3303      	adds	r3, #3
 80014fa:	109b      	asrs	r3, r3, #2
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8001502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001504:	425b      	negs	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	da00      	bge.n	800150c <calibrateMPU9250+0x2a8>
 800150a:	3303      	adds	r3, #3
 800150c:	109b      	asrs	r3, r3, #2
 800150e:	121b      	asrs	r3, r3, #8
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 8001516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001518:	425b      	negs	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	da00      	bge.n	8001520 <calibrateMPU9250+0x2bc>
 800151e:	3303      	adds	r3, #3
 8001520:	109b      	asrs	r3, r3, #2
 8001522:	b2db      	uxtb	r3, r3
 8001524:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8001528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800152a:	425b      	negs	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	da00      	bge.n	8001532 <calibrateMPU9250+0x2ce>
 8001530:	3303      	adds	r3, #3
 8001532:	109b      	asrs	r3, r3, #2
 8001534:	121b      	asrs	r3, r3, #8
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 800153c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800153e:	425b      	negs	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	da00      	bge.n	8001546 <calibrateMPU9250+0x2e2>
 8001544:	3303      	adds	r3, #3
 8001546:	109b      	asrs	r3, r3, #2
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

// Push gyro biases to hardware registers
  IMUwriteByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 800154e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001552:	461a      	mov	r2, r3
 8001554:	2113      	movs	r1, #19
 8001556:	20d0      	movs	r0, #208	; 0xd0
 8001558:	f7ff fc80 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 800155c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001560:	461a      	mov	r2, r3
 8001562:	2114      	movs	r1, #20
 8001564:	20d0      	movs	r0, #208	; 0xd0
 8001566:	f7ff fc79 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 800156a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800156e:	461a      	mov	r2, r3
 8001570:	2115      	movs	r1, #21
 8001572:	20d0      	movs	r0, #208	; 0xd0
 8001574:	f7ff fc72 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 8001578:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800157c:	461a      	mov	r2, r3
 800157e:	2116      	movs	r1, #22
 8001580:	20d0      	movs	r0, #208	; 0xd0
 8001582:	f7ff fc6b 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 8001586:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800158a:	461a      	mov	r2, r3
 800158c:	2117      	movs	r1, #23
 800158e:	20d0      	movs	r0, #208	; 0xd0
 8001590:	f7ff fc64 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 8001594:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001598:	461a      	mov	r2, r3
 800159a:	2118      	movs	r1, #24
 800159c:	20d0      	movs	r0, #208	; 0xd0
 800159e:	f7ff fc5d 	bl	8000e5c <IMUwriteByte>

// Output scaled gyro biases for display in the main program
  dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 80015a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015ac:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80015b0:	ee07 3a90 	vmov	s15, r3
 80015b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	edc3 7a00 	vstr	s15, [r3]
  dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 80015c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015cc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3304      	adds	r3, #4
 80015dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015e0:	edc3 7a00 	vstr	s15, [r3]
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 80015e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015ee:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80015f2:	ee07 3a90 	vmov	s15, r3
 80015f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3308      	adds	r3, #8
 80015fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001602:	edc3 7a00 	vstr	s15, [r3]
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
 800160e:	2300      	movs	r3, #0
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  IMUreadBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 8001612:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001616:	2202      	movs	r2, #2
 8001618:	2177      	movs	r1, #119	; 0x77
 800161a:	20d0      	movs	r0, #208	; 0xd0
 800161c:	f7ff fc6a 	bl	8000ef4 <IMUreadBytes>
  accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 8001620:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800162a:	4313      	orrs	r3, r2
 800162c:	623b      	str	r3, [r7, #32]
  IMUreadBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 800162e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001632:	2202      	movs	r2, #2
 8001634:	217a      	movs	r1, #122	; 0x7a
 8001636:	20d0      	movs	r0, #208	; 0xd0
 8001638:	f7ff fc5c 	bl	8000ef4 <IMUreadBytes>
  accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 800163c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001646:	4313      	orrs	r3, r2
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  IMUreadBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 800164a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800164e:	2202      	movs	r2, #2
 8001650:	217d      	movs	r1, #125	; 0x7d
 8001652:	20d0      	movs	r0, #208	; 0xd0
 8001654:	f7ff fc4e 	bl	8000ef4 <IMUreadBytes>
  accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 8001658:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001662:	4313      	orrs	r3, r2
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8001666:	2301      	movs	r3, #1
 8001668:	653b      	str	r3, [r7, #80]	; 0x50
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 800166a:	4a07      	ldr	r2, [pc, #28]	; (8001688 <calibrateMPU9250+0x424>)
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	4611      	mov	r1, r2
 8001674:	8019      	strh	r1, [r3, #0]
 8001676:	3302      	adds	r3, #2
 8001678:	0c12      	lsrs	r2, r2, #16
 800167a:	701a      	strb	r2, [r3, #0]

  for(ii = 0; ii < 3; ii++) {
 800167c:	2300      	movs	r3, #0
 800167e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001682:	e01b      	b.n	80016bc <calibrateMPU9250+0x458>
 8001684:	aaaaaaab 	.word	0xaaaaaaab
 8001688:	080096c8 	.word	0x080096c8
    if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 800168c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	3360      	adds	r3, #96	; 0x60
 8001694:	443b      	add	r3, r7
 8001696:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800169a:	461a      	mov	r2, r3
 800169c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800169e:	4013      	ands	r3, r2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d006      	beq.n	80016b2 <calibrateMPU9250+0x44e>
 80016a4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80016a8:	3360      	adds	r3, #96	; 0x60
 80016aa:	443b      	add	r3, r7
 80016ac:	2201      	movs	r2, #1
 80016ae:	f803 2c44 	strb.w	r2, [r3, #-68]
  for(ii = 0; ii < 3; ii++) {
 80016b2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80016b6:	3301      	adds	r3, #1
 80016b8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80016bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d9e3      	bls.n	800168c <calibrateMPU9250+0x428>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80016c4:	6a3a      	ldr	r2, [r7, #32]
 80016c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	da00      	bge.n	80016ce <calibrateMPU9250+0x46a>
 80016cc:	3307      	adds	r3, #7
 80016ce:	10db      	asrs	r3, r3, #3
 80016d0:	425b      	negs	r3, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	623b      	str	r3, [r7, #32]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 80016d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016da:	2b00      	cmp	r3, #0
 80016dc:	da00      	bge.n	80016e0 <calibrateMPU9250+0x47c>
 80016de:	3307      	adds	r3, #7
 80016e0:	10db      	asrs	r3, r3, #3
 80016e2:	425b      	negs	r3, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  accel_bias_reg[2] -= (accel_bias[2]/8);
 80016e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	da00      	bge.n	80016f2 <calibrateMPU9250+0x48e>
 80016f0:	3307      	adds	r3, #7
 80016f2:	10db      	asrs	r3, r3, #3
 80016f4:	425b      	negs	r3, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	121b      	asrs	r3, r3, #8
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[1] = (accel_bias_reg[0])      & 0xFF;
 8001704:	6a3b      	ldr	r3, [r7, #32]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 800170c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001710:	7f3b      	ldrb	r3, [r7, #28]
 8001712:	4313      	orrs	r3, r2
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	121b      	asrs	r3, r3, #8
 800171e:	b2db      	uxtb	r3, r3
 8001720:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data[3] = (accel_bias_reg[1])      & 0xFF;
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 800172c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001730:	7f7b      	ldrb	r3, [r7, #29]
 8001732:	4313      	orrs	r3, r2
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 800173a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173c:	121b      	asrs	r3, r3, #8
 800173e:	b2db      	uxtb	r3, r3
 8001740:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  data[5] = (accel_bias_reg[2])      & 0xFF;
 8001744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 800174c:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8001750:	7fbb      	ldrb	r3, [r7, #30]
 8001752:	4313      	orrs	r3, r2
 8001754:	b2db      	uxtb	r3, r3
 8001756:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
//  writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
//  writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
//  writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);

// Output scaled accelerometer biases for display in the main program
   dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
 800175a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001764:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001768:	ee07 3a90 	vmov	s15, r3
 800176c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	edc3 7a00 	vstr	s15, [r3]
   dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 800177a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001784:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001788:	ee07 3a90 	vmov	s15, r3
 800178c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	3304      	adds	r3, #4
 8001794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001798:	edc3 7a00 	vstr	s15, [r3]
   dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 800179c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017a6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	3308      	adds	r3, #8
 80017b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ba:	edc3 7a00 	vstr	s15, [r3]
}
 80017be:	bf00      	nop
 80017c0:	3760      	adds	r7, #96	; 0x60
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop

080017c8 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b09e      	sub	sp, #120	; 0x78
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
   uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
 80017d0:	4aa1      	ldr	r2, [pc, #644]	; (8001a58 <MPU9250SelfTest+0x290>)
 80017d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017da:	6018      	str	r0, [r3, #0]
 80017dc:	3304      	adds	r3, #4
 80017de:	8019      	strh	r1, [r3, #0]
   uint8_t selfTest[6];
   int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 80017e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
   float factoryTrim[6];
   uint8_t FS = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

  IMUwriteByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);    // Set gyro sample rate to 1 kHz
 8001816:	2200      	movs	r2, #0
 8001818:	2119      	movs	r1, #25
 800181a:	20d0      	movs	r0, #208	; 0xd0
 800181c:	f7ff fb1e 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, CONFIG, 0x02);        // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8001820:	2202      	movs	r2, #2
 8001822:	211a      	movs	r1, #26
 8001824:	20d0      	movs	r0, #208	; 0xd0
 8001826:	f7ff fb19 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, GYRO_CONFIG, 1<<FS);  // Set full scale range for the gyro to 250 dps
 800182a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800182e:	2201      	movs	r2, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	b2db      	uxtb	r3, r3
 8001836:	461a      	mov	r2, r3
 8001838:	211b      	movs	r1, #27
 800183a:	20d0      	movs	r0, #208	; 0xd0
 800183c:	f7ff fb0e 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8001840:	2202      	movs	r2, #2
 8001842:	211d      	movs	r1, #29
 8001844:	20d0      	movs	r0, #208	; 0xd0
 8001846:	f7ff fb09 	bl	8000e5c <IMUwriteByte>
  IMUwriteByte(MPU9250_ADDRESS, ACCEL_CONFIG, 1<<FS); // Set full scale range for the accelerometer to 2 g
 800184a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800184e:	2201      	movs	r2, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	b2db      	uxtb	r3, r3
 8001856:	461a      	mov	r2, r3
 8001858:	211c      	movs	r1, #28
 800185a:	20d0      	movs	r0, #208	; 0xd0
 800185c:	f7ff fafe 	bl	8000e5c <IMUwriteByte>

  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
 8001860:	2300      	movs	r3, #0
 8001862:	677b      	str	r3, [r7, #116]	; 0x74
 8001864:	e058      	b.n	8001918 <MPU9250SelfTest+0x150>

  IMUreadBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);        // Read the six raw data registers into data array
 8001866:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800186a:	2206      	movs	r2, #6
 800186c:	213b      	movs	r1, #59	; 0x3b
 800186e:	20d0      	movs	r0, #208	; 0xd0
 8001870:	f7ff fb40 	bl	8000ef4 <IMUreadBytes>
  aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8001874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001876:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800187a:	0212      	lsls	r2, r2, #8
 800187c:	b211      	sxth	r1, r2
 800187e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8001882:	b212      	sxth	r2, r2
 8001884:	430a      	orrs	r2, r1
 8001886:	b212      	sxth	r2, r2
 8001888:	4413      	add	r3, r2
 800188a:	63fb      	str	r3, [r7, #60]	; 0x3c
  aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 800188c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800188e:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001892:	0212      	lsls	r2, r2, #8
 8001894:	b211      	sxth	r1, r2
 8001896:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800189a:	b212      	sxth	r2, r2
 800189c:	430a      	orrs	r2, r1
 800189e:	b212      	sxth	r2, r2
 80018a0:	4413      	add	r3, r2
 80018a2:	643b      	str	r3, [r7, #64]	; 0x40
  aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 80018a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018a6:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80018aa:	0212      	lsls	r2, r2, #8
 80018ac:	b211      	sxth	r1, r2
 80018ae:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80018b2:	b212      	sxth	r2, r2
 80018b4:	430a      	orrs	r2, r1
 80018b6:	b212      	sxth	r2, r2
 80018b8:	4413      	add	r3, r2
 80018ba:	647b      	str	r3, [r7, #68]	; 0x44

    IMUreadBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);       // Read the six raw data registers sequentially into data array
 80018bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018c0:	2206      	movs	r2, #6
 80018c2:	2143      	movs	r1, #67	; 0x43
 80018c4:	20d0      	movs	r0, #208	; 0xd0
 80018c6:	f7ff fb15 	bl	8000ef4 <IMUreadBytes>
  gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80018ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018cc:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80018d0:	0212      	lsls	r2, r2, #8
 80018d2:	b211      	sxth	r1, r2
 80018d4:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80018d8:	b212      	sxth	r2, r2
 80018da:	430a      	orrs	r2, r1
 80018dc:	b212      	sxth	r2, r2
 80018de:	4413      	add	r3, r2
 80018e0:	64bb      	str	r3, [r7, #72]	; 0x48
  gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 80018e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018e4:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80018e8:	0212      	lsls	r2, r2, #8
 80018ea:	b211      	sxth	r1, r2
 80018ec:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80018f0:	b212      	sxth	r2, r2
 80018f2:	430a      	orrs	r2, r1
 80018f4:	b212      	sxth	r2, r2
 80018f6:	4413      	add	r3, r2
 80018f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 80018fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018fc:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001900:	0212      	lsls	r2, r2, #8
 8001902:	b211      	sxth	r1, r2
 8001904:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8001908:	b212      	sxth	r2, r2
 800190a:	430a      	orrs	r2, r1
 800190c:	b212      	sxth	r2, r2
 800190e:	4413      	add	r3, r2
 8001910:	653b      	str	r3, [r7, #80]	; 0x50
  for( int ii = 0; ii < 200; ii++) {  // get average current values of gyro and acclerometer
 8001912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001914:	3301      	adds	r3, #1
 8001916:	677b      	str	r3, [r7, #116]	; 0x74
 8001918:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800191a:	2bc7      	cmp	r3, #199	; 0xc7
 800191c:	dda3      	ble.n	8001866 <MPU9250SelfTest+0x9e>
  }

  for (int ii =0; ii < 3; ii++) {  // Get average of 200 values and store as average current readings
 800191e:	2300      	movs	r3, #0
 8001920:	673b      	str	r3, [r7, #112]	; 0x70
 8001922:	e026      	b.n	8001972 <MPU9250SelfTest+0x1aa>
  aAvg[ii] /= 200;
 8001924:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	3378      	adds	r3, #120	; 0x78
 800192a:	443b      	add	r3, r7
 800192c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001930:	4a4a      	ldr	r2, [pc, #296]	; (8001a5c <MPU9250SelfTest+0x294>)
 8001932:	fb82 1203 	smull	r1, r2, r2, r3
 8001936:	1192      	asrs	r2, r2, #6
 8001938:	17db      	asrs	r3, r3, #31
 800193a:	1ad2      	subs	r2, r2, r3
 800193c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	3378      	adds	r3, #120	; 0x78
 8001942:	443b      	add	r3, r7
 8001944:	f843 2c3c 	str.w	r2, [r3, #-60]
  gAvg[ii] /= 200;
 8001948:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	3378      	adds	r3, #120	; 0x78
 800194e:	443b      	add	r3, r7
 8001950:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001954:	4a41      	ldr	r2, [pc, #260]	; (8001a5c <MPU9250SelfTest+0x294>)
 8001956:	fb82 1203 	smull	r1, r2, r2, r3
 800195a:	1192      	asrs	r2, r2, #6
 800195c:	17db      	asrs	r3, r3, #31
 800195e:	1ad2      	subs	r2, r2, r3
 8001960:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	3378      	adds	r3, #120	; 0x78
 8001966:	443b      	add	r3, r7
 8001968:	f843 2c30 	str.w	r2, [r3, #-48]
  for (int ii =0; ii < 3; ii++) {  // Get average of 200 values and store as average current readings
 800196c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800196e:	3301      	adds	r3, #1
 8001970:	673b      	str	r3, [r7, #112]	; 0x70
 8001972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001974:	2b02      	cmp	r3, #2
 8001976:	ddd5      	ble.n	8001924 <MPU9250SelfTest+0x15c>
  }

// Configure the accelerometer for self-test
   IMUwriteByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 8001978:	22e0      	movs	r2, #224	; 0xe0
 800197a:	211c      	movs	r1, #28
 800197c:	20d0      	movs	r0, #208	; 0xd0
 800197e:	f7ff fa6d 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8001982:	22e0      	movs	r2, #224	; 0xe0
 8001984:	211b      	movs	r1, #27
 8001986:	20d0      	movs	r0, #208	; 0xd0
 8001988:	f7ff fa68 	bl	8000e5c <IMUwriteByte>
   delay(25);  // Delay a while to let the device stabilize
 800198c:	2019      	movs	r0, #25
 800198e:	f002 f8c5 	bl	8003b1c <HAL_Delay>

  for( int ii = 0; ii < 200; ii++) {  // get average self-test values of gyro and acclerometer
 8001992:	2300      	movs	r3, #0
 8001994:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001996:	e058      	b.n	8001a4a <MPU9250SelfTest+0x282>

  IMUreadBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
 8001998:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800199c:	2206      	movs	r2, #6
 800199e:	213b      	movs	r1, #59	; 0x3b
 80019a0:	20d0      	movs	r0, #208	; 0xd0
 80019a2:	f7ff faa7 	bl	8000ef4 <IMUreadBytes>
  aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80019a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a8:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80019ac:	0212      	lsls	r2, r2, #8
 80019ae:	b211      	sxth	r1, r2
 80019b0:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80019b4:	b212      	sxth	r2, r2
 80019b6:	430a      	orrs	r2, r1
 80019b8:	b212      	sxth	r2, r2
 80019ba:	4413      	add	r3, r2
 80019bc:	633b      	str	r3, [r7, #48]	; 0x30
  aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 80019be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c0:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80019c4:	0212      	lsls	r2, r2, #8
 80019c6:	b211      	sxth	r1, r2
 80019c8:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80019cc:	b212      	sxth	r2, r2
 80019ce:	430a      	orrs	r2, r1
 80019d0:	b212      	sxth	r2, r2
 80019d2:	4413      	add	r3, r2
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
  aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 80019d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80019dc:	0212      	lsls	r2, r2, #8
 80019de:	b211      	sxth	r1, r2
 80019e0:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80019e4:	b212      	sxth	r2, r2
 80019e6:	430a      	orrs	r2, r1
 80019e8:	b212      	sxth	r2, r2
 80019ea:	4413      	add	r3, r2
 80019ec:	63bb      	str	r3, [r7, #56]	; 0x38

    IMUreadBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 80019ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019f2:	2206      	movs	r2, #6
 80019f4:	2143      	movs	r1, #67	; 0x43
 80019f6:	20d0      	movs	r0, #208	; 0xd0
 80019f8:	f7ff fa7c 	bl	8000ef4 <IMUreadBytes>
  gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001a02:	0212      	lsls	r2, r2, #8
 8001a04:	b211      	sxth	r1, r2
 8001a06:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8001a0a:	b212      	sxth	r2, r2
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	b212      	sxth	r2, r2
 8001a10:	4413      	add	r3, r2
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8001a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a16:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001a1a:	0212      	lsls	r2, r2, #8
 8001a1c:	b211      	sxth	r1, r2
 8001a1e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001a22:	b212      	sxth	r2, r2
 8001a24:	430a      	orrs	r2, r1
 8001a26:	b212      	sxth	r2, r2
 8001a28:	4413      	add	r3, r2
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8001a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001a32:	0212      	lsls	r2, r2, #8
 8001a34:	b211      	sxth	r1, r2
 8001a36:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8001a3a:	b212      	sxth	r2, r2
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	b212      	sxth	r2, r2
 8001a40:	4413      	add	r3, r2
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  for( int ii = 0; ii < 200; ii++) {  // get average self-test values of gyro and acclerometer
 8001a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a46:	3301      	adds	r3, #1
 8001a48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a4c:	2bc7      	cmp	r3, #199	; 0xc7
 8001a4e:	dda3      	ble.n	8001998 <MPU9250SelfTest+0x1d0>
  }

  for (int ii =0; ii < 3; ii++) {  // Get average of 200 values and store as average self-test readings
 8001a50:	2300      	movs	r3, #0
 8001a52:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a54:	e02b      	b.n	8001aae <MPU9250SelfTest+0x2e6>
 8001a56:	bf00      	nop
 8001a58:	080096cc 	.word	0x080096cc
 8001a5c:	51eb851f 	.word	0x51eb851f
  aSTAvg[ii] /= 200;
 8001a60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	3378      	adds	r3, #120	; 0x78
 8001a66:	443b      	add	r3, r7
 8001a68:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001a6c:	4adc      	ldr	r2, [pc, #880]	; (8001de0 <MPU9250SelfTest+0x618>)
 8001a6e:	fb82 1203 	smull	r1, r2, r2, r3
 8001a72:	1192      	asrs	r2, r2, #6
 8001a74:	17db      	asrs	r3, r3, #31
 8001a76:	1ad2      	subs	r2, r2, r3
 8001a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	3378      	adds	r3, #120	; 0x78
 8001a7e:	443b      	add	r3, r7
 8001a80:	f843 2c48 	str.w	r2, [r3, #-72]
  gSTAvg[ii] /= 200;
 8001a84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	3378      	adds	r3, #120	; 0x78
 8001a8a:	443b      	add	r3, r7
 8001a8c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001a90:	4ad3      	ldr	r2, [pc, #844]	; (8001de0 <MPU9250SelfTest+0x618>)
 8001a92:	fb82 1203 	smull	r1, r2, r2, r3
 8001a96:	1192      	asrs	r2, r2, #6
 8001a98:	17db      	asrs	r3, r3, #31
 8001a9a:	1ad2      	subs	r2, r2, r3
 8001a9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	3378      	adds	r3, #120	; 0x78
 8001aa2:	443b      	add	r3, r7
 8001aa4:	f843 2c54 	str.w	r2, [r3, #-84]
  for (int ii =0; ii < 3; ii++) {  // Get average of 200 values and store as average self-test readings
 8001aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001aaa:	3301      	adds	r3, #1
 8001aac:	66bb      	str	r3, [r7, #104]	; 0x68
 8001aae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	ddd5      	ble.n	8001a60 <MPU9250SelfTest+0x298>
  }

 // Configure the gyro and accelerometer for normal operation
   IMUwriteByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	211c      	movs	r1, #28
 8001ab8:	20d0      	movs	r0, #208	; 0xd0
 8001aba:	f7ff f9cf 	bl	8000e5c <IMUwriteByte>
   IMUwriteByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	211b      	movs	r1, #27
 8001ac2:	20d0      	movs	r0, #208	; 0xd0
 8001ac4:	f7ff f9ca 	bl	8000e5c <IMUwriteByte>
   delay(25);  // Delay a while to let the device stabilize
 8001ac8:	2019      	movs	r0, #25
 8001aca:	f002 f827 	bl	8003b1c <HAL_Delay>

   // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
   selfTest[0] = IMUreadByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
 8001ace:	210d      	movs	r1, #13
 8001ad0:	20d0      	movs	r0, #208	; 0xd0
 8001ad2:	f7ff f9e9 	bl	8000ea8 <IMUreadByte>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
   selfTest[1] = IMUreadByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
 8001adc:	210e      	movs	r1, #14
 8001ade:	20d0      	movs	r0, #208	; 0xd0
 8001ae0:	f7ff f9e2 	bl	8000ea8 <IMUreadByte>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
   selfTest[2] = IMUreadByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
 8001aea:	210f      	movs	r1, #15
 8001aec:	20d0      	movs	r0, #208	; 0xd0
 8001aee:	f7ff f9db 	bl	8000ea8 <IMUreadByte>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
   selfTest[3] = IMUreadByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
 8001af8:	2100      	movs	r1, #0
 8001afa:	20d0      	movs	r0, #208	; 0xd0
 8001afc:	f7ff f9d4 	bl	8000ea8 <IMUreadByte>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
   selfTest[4] = IMUreadByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
 8001b06:	2101      	movs	r1, #1
 8001b08:	20d0      	movs	r0, #208	; 0xd0
 8001b0a:	f7ff f9cd 	bl	8000ea8 <IMUreadByte>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
   selfTest[5] = IMUreadByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
 8001b14:	2102      	movs	r1, #2
 8001b16:	20d0      	movs	r0, #208	; 0xd0
 8001b18:	f7ff f9c6 	bl	8000ea8 <IMUreadByte>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

  // Retrieve factory self-test value from self-test code reads
   factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8001b22:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001b26:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	ee07 3a90 	vmov	s15, r3
 8001b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b36:	ee17 0a90 	vmov	r0, s15
 8001b3a:	f7fe fcb5 	bl	80004a8 <__aeabi_f2d>
 8001b3e:	4604      	mov	r4, r0
 8001b40:	460d      	mov	r5, r1
 8001b42:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b4e:	ee17 0a90 	vmov	r0, s15
 8001b52:	f7fe fca9 	bl	80004a8 <__aeabi_f2d>
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	4ba2      	ldr	r3, [pc, #648]	; (8001de4 <MPU9250SelfTest+0x61c>)
 8001b5c:	f7fe fb44 	bl	80001e8 <__aeabi_dsub>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	ec43 2b17 	vmov	d7, r2, r3
 8001b68:	eeb0 1a47 	vmov.f32	s2, s14
 8001b6c:	eef0 1a67 	vmov.f32	s3, s15
 8001b70:	ed9f 0b99 	vldr	d0, [pc, #612]	; 8001dd8 <MPU9250SelfTest+0x610>
 8001b74:	f006 fe78 	bl	8008868 <pow>
 8001b78:	ec53 2b10 	vmov	r2, r3, d0
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	4629      	mov	r1, r5
 8001b80:	f7fe fcea 	bl	8000558 <__aeabi_dmul>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f7fe ff94 	bl	8000ab8 <__aeabi_d2f>
 8001b90:	4603      	mov	r3, r0
 8001b92:	60fb      	str	r3, [r7, #12]
   factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8001b94:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001b98:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	ee07 3a90 	vmov	s15, r3
 8001ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba8:	ee17 0a90 	vmov	r0, s15
 8001bac:	f7fe fc7c 	bl	80004a8 <__aeabi_f2d>
 8001bb0:	4604      	mov	r4, r0
 8001bb2:	460d      	mov	r5, r1
 8001bb4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001bb8:	ee07 3a90 	vmov	s15, r3
 8001bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc0:	ee17 0a90 	vmov	r0, s15
 8001bc4:	f7fe fc70 	bl	80004a8 <__aeabi_f2d>
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4b85      	ldr	r3, [pc, #532]	; (8001de4 <MPU9250SelfTest+0x61c>)
 8001bce:	f7fe fb0b 	bl	80001e8 <__aeabi_dsub>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	ec43 2b17 	vmov	d7, r2, r3
 8001bda:	eeb0 1a47 	vmov.f32	s2, s14
 8001bde:	eef0 1a67 	vmov.f32	s3, s15
 8001be2:	ed9f 0b7d 	vldr	d0, [pc, #500]	; 8001dd8 <MPU9250SelfTest+0x610>
 8001be6:	f006 fe3f 	bl	8008868 <pow>
 8001bea:	ec53 2b10 	vmov	r2, r3, d0
 8001bee:	4620      	mov	r0, r4
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	f7fe fcb1 	bl	8000558 <__aeabi_dmul>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f7fe ff5b 	bl	8000ab8 <__aeabi_d2f>
 8001c02:	4603      	mov	r3, r0
 8001c04:	613b      	str	r3, [r7, #16]
   factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8001c06:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001c0a:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	ee07 3a90 	vmov	s15, r3
 8001c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1a:	ee17 0a90 	vmov	r0, s15
 8001c1e:	f7fe fc43 	bl	80004a8 <__aeabi_f2d>
 8001c22:	4604      	mov	r4, r0
 8001c24:	460d      	mov	r5, r1
 8001c26:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001c2a:	ee07 3a90 	vmov	s15, r3
 8001c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c32:	ee17 0a90 	vmov	r0, s15
 8001c36:	f7fe fc37 	bl	80004a8 <__aeabi_f2d>
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	4b69      	ldr	r3, [pc, #420]	; (8001de4 <MPU9250SelfTest+0x61c>)
 8001c40:	f7fe fad2 	bl	80001e8 <__aeabi_dsub>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	ec43 2b17 	vmov	d7, r2, r3
 8001c4c:	eeb0 1a47 	vmov.f32	s2, s14
 8001c50:	eef0 1a67 	vmov.f32	s3, s15
 8001c54:	ed9f 0b60 	vldr	d0, [pc, #384]	; 8001dd8 <MPU9250SelfTest+0x610>
 8001c58:	f006 fe06 	bl	8008868 <pow>
 8001c5c:	ec53 2b10 	vmov	r2, r3, d0
 8001c60:	4620      	mov	r0, r4
 8001c62:	4629      	mov	r1, r5
 8001c64:	f7fe fc78 	bl	8000558 <__aeabi_dmul>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f7fe ff22 	bl	8000ab8 <__aeabi_d2f>
 8001c74:	4603      	mov	r3, r0
 8001c76:	617b      	str	r3, [r7, #20]
   factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 8001c78:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001c7c:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8c:	ee17 0a90 	vmov	r0, s15
 8001c90:	f7fe fc0a 	bl	80004a8 <__aeabi_f2d>
 8001c94:	4604      	mov	r4, r0
 8001c96:	460d      	mov	r5, r1
 8001c98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c9c:	ee07 3a90 	vmov	s15, r3
 8001ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ca4:	ee17 0a90 	vmov	r0, s15
 8001ca8:	f7fe fbfe 	bl	80004a8 <__aeabi_f2d>
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	4b4c      	ldr	r3, [pc, #304]	; (8001de4 <MPU9250SelfTest+0x61c>)
 8001cb2:	f7fe fa99 	bl	80001e8 <__aeabi_dsub>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	ec43 2b17 	vmov	d7, r2, r3
 8001cbe:	eeb0 1a47 	vmov.f32	s2, s14
 8001cc2:	eef0 1a67 	vmov.f32	s3, s15
 8001cc6:	ed9f 0b44 	vldr	d0, [pc, #272]	; 8001dd8 <MPU9250SelfTest+0x610>
 8001cca:	f006 fdcd 	bl	8008868 <pow>
 8001cce:	ec53 2b10 	vmov	r2, r3, d0
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	f7fe fc3f 	bl	8000558 <__aeabi_dmul>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f7fe fee9 	bl	8000ab8 <__aeabi_d2f>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	61bb      	str	r3, [r7, #24]
   factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8001cea:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001cee:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	ee07 3a90 	vmov	s15, r3
 8001cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfe:	ee17 0a90 	vmov	r0, s15
 8001d02:	f7fe fbd1 	bl	80004a8 <__aeabi_f2d>
 8001d06:	4604      	mov	r4, r0
 8001d08:	460d      	mov	r5, r1
 8001d0a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d16:	ee17 0a90 	vmov	r0, s15
 8001d1a:	f7fe fbc5 	bl	80004a8 <__aeabi_f2d>
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <MPU9250SelfTest+0x61c>)
 8001d24:	f7fe fa60 	bl	80001e8 <__aeabi_dsub>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	ec43 2b17 	vmov	d7, r2, r3
 8001d30:	eeb0 1a47 	vmov.f32	s2, s14
 8001d34:	eef0 1a67 	vmov.f32	s3, s15
 8001d38:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8001dd8 <MPU9250SelfTest+0x610>
 8001d3c:	f006 fd94 	bl	8008868 <pow>
 8001d40:	ec53 2b10 	vmov	r2, r3, d0
 8001d44:	4620      	mov	r0, r4
 8001d46:	4629      	mov	r1, r5
 8001d48:	f7fe fc06 	bl	8000558 <__aeabi_dmul>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	f7fe feb0 	bl	8000ab8 <__aeabi_d2f>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	61fb      	str	r3, [r7, #28]
   factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 8001d5c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001d60:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	ee07 3a90 	vmov	s15, r3
 8001d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d70:	ee17 0a90 	vmov	r0, s15
 8001d74:	f7fe fb98 	bl	80004a8 <__aeabi_f2d>
 8001d78:	4604      	mov	r4, r0
 8001d7a:	460d      	mov	r5, r1
 8001d7c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001d80:	ee07 3a90 	vmov	s15, r3
 8001d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d88:	ee17 0a90 	vmov	r0, s15
 8001d8c:	f7fe fb8c 	bl	80004a8 <__aeabi_f2d>
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <MPU9250SelfTest+0x61c>)
 8001d96:	f7fe fa27 	bl	80001e8 <__aeabi_dsub>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	ec43 2b17 	vmov	d7, r2, r3
 8001da2:	eeb0 1a47 	vmov.f32	s2, s14
 8001da6:	eef0 1a67 	vmov.f32	s3, s15
 8001daa:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8001dd8 <MPU9250SelfTest+0x610>
 8001dae:	f006 fd5b 	bl	8008868 <pow>
 8001db2:	ec53 2b10 	vmov	r2, r3, d0
 8001db6:	4620      	mov	r0, r4
 8001db8:	4629      	mov	r1, r5
 8001dba:	f7fe fbcd 	bl	8000558 <__aeabi_dmul>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f7fe fe77 	bl	8000ab8 <__aeabi_d2f>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	623b      	str	r3, [r7, #32]

 // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
 // To get percent, must multiply by 100
   for (int i = 0; i < 3; i++) {
 8001dce:	2300      	movs	r3, #0
 8001dd0:	667b      	str	r3, [r7, #100]	; 0x64
 8001dd2:	e060      	b.n	8001e96 <MPU9250SelfTest+0x6ce>
 8001dd4:	f3af 8000 	nop.w
 8001dd8:	c28f5c29 	.word	0xc28f5c29
 8001ddc:	3ff028f5 	.word	0x3ff028f5
 8001de0:	51eb851f 	.word	0x51eb851f
 8001de4:	3ff00000 	.word	0x3ff00000
 8001de8:	42c80000 	.word	0x42c80000
     destination[i]   = 100.0f*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.0f;   // Report percent differences
 8001dec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	3378      	adds	r3, #120	; 0x78
 8001df2:	443b      	add	r3, r7
 8001df4:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8001df8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	3378      	adds	r3, #120	; 0x78
 8001dfe:	443b      	add	r3, r7
 8001e00:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	ee07 3a90 	vmov	s15, r3
 8001e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e0e:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8001de8 <MPU9250SelfTest+0x620>
 8001e12:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001e16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	3378      	adds	r3, #120	; 0x78
 8001e1c:	443b      	add	r3, r7
 8001e1e:	3b6c      	subs	r3, #108	; 0x6c
 8001e20:	ed93 7a00 	vldr	s14, [r3]
 8001e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	4413      	add	r3, r2
 8001e30:	ed1f 7a13 	vldr	s14, [pc, #-76]	; 8001de8 <MPU9250SelfTest+0x620>
 8001e34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e38:	edc3 7a00 	vstr	s15, [r3]
     destination[i+3] = 100.0f*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.0f; // Report percent differences
 8001e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	3378      	adds	r3, #120	; 0x78
 8001e42:	443b      	add	r3, r7
 8001e44:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	3378      	adds	r3, #120	; 0x78
 8001e4e:	443b      	add	r3, r7
 8001e50:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5e:	ed1f 7a1e 	vldr	s14, [pc, #-120]	; 8001de8 <MPU9250SelfTest+0x620>
 8001e62:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001e66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e68:	3303      	adds	r3, #3
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	3378      	adds	r3, #120	; 0x78
 8001e6e:	443b      	add	r3, r7
 8001e70:	3b6c      	subs	r3, #108	; 0x6c
 8001e72:	ed93 7a00 	vldr	s14, [r3]
 8001e76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e7c:	3303      	adds	r3, #3
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	ed1f 7a28 	vldr	s14, [pc, #-160]	; 8001de8 <MPU9250SelfTest+0x620>
 8001e88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e8c:	edc3 7a00 	vstr	s15, [r3]
   for (int i = 0; i < 3; i++) {
 8001e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e92:	3301      	adds	r3, #1
 8001e94:	667b      	str	r3, [r7, #100]	; 0x64
 8001e96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	dda7      	ble.n	8001dec <MPU9250SelfTest+0x624>
   }

}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3778      	adds	r7, #120	; 0x78
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea6:	bf00      	nop

08001ea8 <LoRa_Receive_interrupt_Handler>:

// Higher level abstractions

// LoRa data receive operations

void LoRa_Receive_interrupt_Handler(lora_sx1276 *lora){
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <Set_LoRa_Connecting>:

/*
 * Emit till handshake with ground unit (IT driven)
 * Set global flag.
 */
void Set_LoRa_Connecting(lora_sx1276 *lora){
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	lora->lora_status = LORA_CONNECTING;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	779a      	strb	r2, [r3, #30]
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <Set_LoRa_Broadcast_FLight_Info>:

void Set_LoRa_Connected(lora_sx1276 *lora){
	lora->lora_status = LORA_CONNCETED;
}

void Set_LoRa_Broadcast_FLight_Info(lora_sx1276 *lora){
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
	lora->lora_status = LORA_BROADCASTING_FLIGHT_DATA;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	779a      	strb	r2, [r3, #30]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LoRa_Connecting_Handler>:
}

// LoRa handlers

// Broadcasting connection message
static void LoRa_Connecting_Handler(lora_sx1276 *lora){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b0a4      	sub	sp, #144	; 0x90
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	uint8_t payload[LORA_MAX_PACKET_SIZE];
	payload[0] = LORA_DEVICE_ADDRESS; // device address
 8001ef8:	2310      	movs	r3, #16
 8001efa:	733b      	strb	r3, [r7, #12]
	payload[1] = 0xFF; // command id (request handshake)
 8001efc:	23ff      	movs	r3, #255	; 0xff
 8001efe:	737b      	strb	r3, [r7, #13]
	uint8_t res = lora_send_packet(lora, payload, 2);
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	2202      	movs	r2, #2
 8001f06:	4619      	mov	r1, r3
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 fbba 	bl	8002682 <lora_send_packet>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	lora_mode_receive_continuous(lora);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f9bb 	bl	8002290 <lora_mode_receive_continuous>
}
 8001f1a:	bf00      	nop
 8001f1c:	3790      	adds	r7, #144	; 0x90
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <LoRa_Connected_Handler>:

/**
 * Connected handler.
 * Executes when handshake between the devices happens
 */
static void LoRa_Connected_Handler(lora_sx1276 *lora){
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
	Set_LoRa_Broadcast_FLight_Info(lora);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ffd3 	bl	8001ed6 <Set_LoRa_Broadcast_FLight_Info>
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <LoRa_Disconnected_Handler>:

/**
 * Disconnected handler.
 * Executes in case of connection is lost with the devices.
 */
static void LoRa_Disconnected_Handler(lora_sx1276 *lora){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	Set_LoRa_Connecting(lora);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ffbb 	bl	8001ebc <Set_LoRa_Connecting>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <LoRa_Broadcast_Flight_Data_Handler>:


/**
 * Broadcasting flight data to the ground unit
 */
static void LoRa_Broadcast_Flight_Data_Handler(lora_sx1276 *lora, void* flight_data){ // later change the void*
 8001f4e:	b480      	push	{r7}
 8001f50:	b085      	sub	sp, #20
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
	uint8_t cs = 9;
 8001f58:	2309      	movs	r3, #9
 8001f5a:	73fb      	strb	r3, [r7, #15]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LoRa_Error_Transmit_Handler>:


/**
 * device error state with message, broadcasted and displayed on the LCD.
 */
static void LoRa_Error_Transmit_Handler(lora_sx1276 *lora){
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b0a5      	sub	sp, #148	; 0x94
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	uint8_t payload[LORA_MAX_PACKET_SIZE];
	payload[0] = LORA_DEVICE_ADDRESS;
 8001f70:	2310      	movs	r3, #16
 8001f72:	733b      	strb	r3, [r7, #12]
	payload[1] = LORA_ERROR_CMD;
 8001f74:	2300      	movs	r3, #0
 8001f76:	737b      	strb	r3, [r7, #13]
	memcpy(&payload[2], lora->error_msg, strlen(lora->error_msg));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f103 041f 	add.w	r4, r3, #31
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	331f      	adds	r3, #31
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe f924 	bl	80001d0 <strlen>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	f107 030c 	add.w	r3, r7, #12
 8001f8e:	3302      	adds	r3, #2
 8001f90:	4621      	mov	r1, r4
 8001f92:	4618      	mov	r0, r3
 8001f94:	f006 fc52 	bl	800883c <memcpy>
	uint8_t res = lora_send_packet(lora, payload, strlen(lora->error_msg) + 2);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	331f      	adds	r3, #31
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe f917 	bl	80001d0 <strlen>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	f107 030c 	add.w	r3, r7, #12
 8001fae:	4619      	mov	r1, r3
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 fb66 	bl	8002682 <lora_send_packet>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	lora_mode_receive_continuous(lora);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f967 	bl	8002290 <lora_mode_receive_continuous>
}
 8001fc2:	bf00      	nop
 8001fc4:	3794      	adds	r7, #148	; 0x94
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd90      	pop	{r4, r7, pc}
	...

08001fcc <LoRa_Timer_Interrupt_Handler>:

/**
 * Here happens everything which is related to sending data.
 * Each operating state triggers different handlers.
 */
void LoRa_Timer_Interrupt_Handler(lora_sx1276 *lora){
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	switch(lora->lora_status){
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	7f9b      	ldrb	r3, [r3, #30]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d821      	bhi.n	8002022 <LoRa_Timer_Interrupt_Handler+0x56>
 8001fde:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <LoRa_Timer_Interrupt_Handler+0x18>)
 8001fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe4:	08002013 	.word	0x08002013
 8001fe8:	08002001 	.word	0x08002001
 8001fec:	08001ff9 	.word	0x08001ff9
 8001ff0:	08002009 	.word	0x08002009
 8001ff4:	0800201b 	.word	0x0800201b
	case LORA_CONNECTING:
		LoRa_Connecting_Handler(lora);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff79 	bl	8001ef0 <LoRa_Connecting_Handler>
		break;
 8001ffe:	e010      	b.n	8002022 <LoRa_Timer_Interrupt_Handler+0x56>
	case LORA_CONNCETED:
		LoRa_Connected_Handler(lora);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ff8e 	bl	8001f22 <LoRa_Connected_Handler>
		break;
 8002006:	e00c      	b.n	8002022 <LoRa_Timer_Interrupt_Handler+0x56>
	case LORA_BROADCASTING_FLIGHT_DATA:
		LoRa_Broadcast_Flight_Data_Handler(lora, (uint8_t*)12);
 8002008:	210c      	movs	r1, #12
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff9f 	bl	8001f4e <LoRa_Broadcast_Flight_Data_Handler>
		break;
 8002010:	e007      	b.n	8002022 <LoRa_Timer_Interrupt_Handler+0x56>
	case LORA_DISCONNECTED:
		LoRa_Disconnected_Handler(lora);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ff90 	bl	8001f38 <LoRa_Disconnected_Handler>
		break;
 8002018:	e003      	b.n	8002022 <LoRa_Timer_Interrupt_Handler+0x56>
	case LORA_ROCKET_ERROR_TRANSMIT:
		LoRa_Error_Transmit_Handler(lora);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ffa4 	bl	8001f68 <LoRa_Error_Transmit_Handler>
		break;
 8002020:	bf00      	nop
	}
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop

0800202c <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002042:	b2db      	uxtb	r3, r3
 8002044:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6858      	ldr	r0, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	8adb      	ldrh	r3, [r3, #22]
 800204e:	2200      	movs	r2, #0
 8002050:	4619      	mov	r1, r3
 8002052:	f002 f9fb 	bl	800444c <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	1cf9      	adds	r1, r7, #3
 8002060:	2201      	movs	r2, #1
 8002062:	f004 fb16 	bl	8006692 <HAL_SPI_Transmit>
 8002066:	4603      	mov	r3, r0
 8002068:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f107 010f 	add.w	r1, r7, #15
 8002076:	2201      	movs	r2, #1
 8002078:	f004 fc79 	bl	800696e <HAL_SPI_Receive>
 800207c:	4603      	mov	r3, r0
 800207e:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6858      	ldr	r0, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	8adb      	ldrh	r3, [r3, #22]
 8002088:	2201      	movs	r2, #1
 800208a:	4619      	mov	r1, r3
 800208c:	f002 f9de 	bl	800444c <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	70fb      	strb	r3, [r7, #3]
 80020a6:	4613      	mov	r3, r2
 80020a8:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020b0:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 80020b2:	78bb      	ldrb	r3, [r7, #2]
 80020b4:	021b      	lsls	r3, r3, #8
 80020b6:	b21a      	sxth	r2, r3
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b21b      	sxth	r3, r3
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6858      	ldr	r0, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	8adb      	ldrh	r3, [r3, #22]
 80020cc:	2200      	movs	r2, #0
 80020ce:	4619      	mov	r1, r3
 80020d0:	f002 f9bc 	bl	800444c <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f107 010a 	add.w	r1, r7, #10
 80020e0:	2202      	movs	r2, #2
 80020e2:	f004 fad6 	bl	8006692 <HAL_SPI_Transmit>
 80020e6:	4603      	mov	r3, r0
 80020e8:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6858      	ldr	r0, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	8adb      	ldrh	r3, [r3, #22]
 80020f2:	2201      	movs	r2, #1
 80020f4:	4619      	mov	r1, r3
 80020f6:	f002 f9a9 	bl	800444c <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b088      	sub	sp, #32
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	4611      	mov	r1, r2
 800210e:	461a      	mov	r2, r3
 8002110:	460b      	mov	r3, r1
 8002112:	71fb      	strb	r3, [r7, #7]
 8002114:	4613      	mov	r3, r2
 8002116:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6858      	ldr	r0, [r3, #4]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8adb      	ldrh	r3, [r3, #22]
 8002124:	2200      	movs	r2, #0
 8002126:	4619      	mov	r1, r3
 8002128:	f002 f990 	bl	800444c <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f107 0117 	add.w	r1, r7, #23
 8002138:	2201      	movs	r2, #1
 800213a:	f004 faaa 	bl	8006692 <HAL_SPI_Transmit>
 800213e:	4603      	mov	r3, r0
 8002140:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8002142:	79bb      	ldrb	r3, [r7, #6]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d108      	bne.n	800215a <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	79fa      	ldrb	r2, [r7, #7]
 800214e:	b292      	uxth	r2, r2
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	4618      	mov	r0, r3
 8002154:	f004 ff4e 	bl	8006ff4 <HAL_SPI_Transmit_DMA>
 8002158:	e012      	b.n	8002180 <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	f004 fa93 	bl	8006692 <HAL_SPI_Transmit>
 800216c:	4603      	mov	r3, r0
 800216e:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6858      	ldr	r0, [r3, #4]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8adb      	ldrh	r3, [r3, #22]
 8002178:	2201      	movs	r2, #1
 800217a:	4619      	mov	r1, r3
 800217c:	f002 f966 	bl	800444c <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8002180:	3720      	adds	r7, #32
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	460b      	mov	r3, r1
 8002190:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	2101      	movs	r1, #1
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ff7b 	bl	800209a <write_register>
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	2b2c      	cmp	r3, #44	; 0x2c
 80021bc:	d801      	bhi.n	80021c2 <set_OCP+0x16>
    imax = 45;
 80021be:	232d      	movs	r3, #45	; 0x2d
 80021c0:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	2bf0      	cmp	r3, #240	; 0xf0
 80021c6:	d901      	bls.n	80021cc <set_OCP+0x20>
    imax = 240;
 80021c8:	23f0      	movs	r3, #240	; 0xf0
 80021ca:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	2b81      	cmp	r3, #129	; 0x81
 80021d0:	d809      	bhi.n	80021e6 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	3b2d      	subs	r3, #45	; 0x2d
 80021d6:	4a0f      	ldr	r2, [pc, #60]	; (8002214 <set_OCP+0x68>)
 80021d8:	fb82 1203 	smull	r1, r2, r2, r3
 80021dc:	1052      	asrs	r2, r2, #1
 80021de:	17db      	asrs	r3, r3, #31
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	e008      	b.n	80021f8 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	331e      	adds	r3, #30
 80021ea:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <set_OCP+0x68>)
 80021ec:	fb82 1203 	smull	r1, r2, r2, r3
 80021f0:	1092      	asrs	r2, r2, #2
 80021f2:	17db      	asrs	r3, r3, #31
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	f043 0320 	orr.w	r3, r3, #32
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	210b      	movs	r1, #11
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff48 	bl	800209a <write_register>
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	66666667 	.word	0x66666667

08002218 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8002218:	b5b0      	push	{r4, r5, r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8002220:	211d      	movs	r1, #29
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff ff02 	bl	800202c <read_register>
 8002228:	4603      	mov	r3, r0
 800222a:	091b      	lsrs	r3, r3, #4
 800222c:	b2db      	uxtb	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2200      	movs	r2, #0
 8002232:	461c      	mov	r4, r3
 8002234:	4615      	mov	r5, r2
 8002236:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 800223a:	211e      	movs	r1, #30
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff fef5 	bl	800202c <read_register>
 8002242:	4603      	mov	r3, r0
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8002248:	2304      	movs	r3, #4
 800224a:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	2b0a      	cmp	r3, #10
 8002250:	d908      	bls.n	8002264 <set_low_data_rate_optimization+0x4c>
 8002252:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002256:	1fd1      	subs	r1, r2, #7
 8002258:	430b      	orrs	r3, r1
 800225a:	d103      	bne.n	8002264 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 800225c:	7ffb      	ldrb	r3, [r7, #31]
 800225e:	f043 0308 	orr.w	r3, r3, #8
 8002262:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8002264:	7ffb      	ldrb	r3, [r7, #31]
 8002266:	461a      	mov	r2, r3
 8002268:	2126      	movs	r1, #38	; 0x26
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff ff15 	bl	800209a <write_register>
}
 8002270:	bf00      	nop
 8002272:	3720      	adds	r7, #32
 8002274:	46bd      	mov	sp, r7
 8002276:	bdb0      	pop	{r4, r5, r7, pc}

08002278 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8002280:	2100      	movs	r1, #0
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff ff7f 	bl	8002186 <set_mode>
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <lora_mode_receive_continuous>:

void lora_mode_receive_continuous(lora_sx1276 *lora)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	7d5b      	ldrb	r3, [r3, #21]
 800229c:	461a      	mov	r2, r3
 800229e:	210f      	movs	r1, #15
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff fefa 	bl	800209a <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 80022a6:	22f0      	movs	r2, #240	; 0xf0
 80022a8:	2112      	movs	r1, #18
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff fef5 	bl	800209a <write_register>

  set_mode(lora, OPMODE_RX_CONTINUOUS);
 80022b0:	2105      	movs	r1, #5
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ff67 	bl	8002186 <set_mode>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 80022c8:	2101      	movs	r1, #1
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ff5b 	bl	8002186 <set_mode>
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80022e0:	211d      	movs	r1, #29
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff fea2 	bl	800202c <read_register>
 80022e8:	4603      	mov	r3, r0
 80022ea:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	461a      	mov	r2, r3
 80022f8:	211d      	movs	r1, #29
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff fecd 	bl	800209a <write_register>
}
 8002300:	bf00      	nop
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10e      	bne.n	800233a <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	2b0f      	cmp	r3, #15
 8002320:	d901      	bls.n	8002326 <lora_set_tx_power+0x1e>
      level = 15;
 8002322:	230f      	movs	r3, #15
 8002324:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800232c:	b2db      	uxtb	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	2109      	movs	r1, #9
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff feb1 	bl	800209a <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8002338:	e02e      	b.n	8002398 <lora_set_tx_power+0x90>
    if (level > 20) {
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	2b14      	cmp	r3, #20
 800233e:	d901      	bls.n	8002344 <lora_set_tx_power+0x3c>
      level = 20;
 8002340:	2314      	movs	r3, #20
 8002342:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d801      	bhi.n	800234e <lora_set_tx_power+0x46>
      level = 2;
 800234a:	2302      	movs	r3, #2
 800234c:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 800234e:	78fb      	ldrb	r3, [r7, #3]
 8002350:	2b11      	cmp	r3, #17
 8002352:	d90c      	bls.n	800236e <lora_set_tx_power+0x66>
      level -= 3;
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	3b03      	subs	r3, #3
 8002358:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 800235a:	2287      	movs	r2, #135	; 0x87
 800235c:	214d      	movs	r1, #77	; 0x4d
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff fe9b 	bl	800209a <write_register>
      set_OCP(lora, 140);
 8002364:	218c      	movs	r1, #140	; 0x8c
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ff20 	bl	80021ac <set_OCP>
 800236c:	e008      	b.n	8002380 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800236e:	2284      	movs	r2, #132	; 0x84
 8002370:	214d      	movs	r1, #77	; 0x4d
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff fe91 	bl	800209a <write_register>
      set_OCP(lora, 97);
 8002378:	2161      	movs	r1, #97	; 0x61
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff ff16 	bl	80021ac <set_OCP>
    level -= 2;
 8002380:	78fb      	ldrb	r3, [r7, #3]
 8002382:	3b02      	subs	r3, #2
 8002384:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800238c:	b2db      	uxtb	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	2109      	movs	r1, #9
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff fe81 	bl	800209a <write_register>
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 80023ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023b0:	f04f 0000 	mov.w	r0, #0
 80023b4:	f04f 0100 	mov.w	r1, #0
 80023b8:	04d9      	lsls	r1, r3, #19
 80023ba:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80023be:	04d0      	lsls	r0, r2, #19
 80023c0:	4a19      	ldr	r2, [pc, #100]	; (8002428 <lora_set_frequency+0x88>)
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	f7fe fbc7 	bl	8000b58 <__aeabi_uldivmod>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 80023d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	0c02      	lsrs	r2, r0, #16
 80023e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80023e4:	0c0b      	lsrs	r3, r1, #16
 80023e6:	b2d3      	uxtb	r3, r2
 80023e8:	461a      	mov	r2, r3
 80023ea:	2106      	movs	r1, #6
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f7ff fe54 	bl	800209a <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 80023f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	0a02      	lsrs	r2, r0, #8
 8002400:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002404:	0a0b      	lsrs	r3, r1, #8
 8002406:	b2d3      	uxtb	r3, r2
 8002408:	461a      	mov	r2, r3
 800240a:	2107      	movs	r1, #7
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f7ff fe44 	bl	800209a <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 8002412:	7c3b      	ldrb	r3, [r7, #16]
 8002414:	461a      	mov	r2, r3
 8002416:	2108      	movs	r1, #8
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f7ff fe3e 	bl	800209a <write_register>
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	01e84800 	.word	0x01e84800

0800242c <lora_set_signal_bandwidth>:

  return snr / 5;
}

void lora_set_signal_bandwidth(lora_sx1276 *lora, uint64_t bw)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora && bw < LORA_BW_LAST);

  // REG_MODEM_CONFIG_1 has 2 more parameters:
  // Coding rate / Header mode, so read them before set bandwidth
  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8002438:	211d      	movs	r1, #29
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f7ff fdf6 	bl	800202c <read_register>
 8002440:	4603      	mov	r3, r0
 8002442:	75fb      	strb	r3, [r7, #23]
  // Signal bandwidth uses 4-7 bits of config
  mc1 = (mc1 & 0x0F) | bw << 4;
 8002444:	7dfb      	ldrb	r3, [r7, #23]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	b2da      	uxtb	r2, r3
 800244c:	783b      	ldrb	r3, [r7, #0]
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	b2db      	uxtb	r3, r3
 8002452:	4313      	orrs	r3, r2
 8002454:	75fb      	strb	r3, [r7, #23]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8002456:	7dfb      	ldrb	r3, [r7, #23]
 8002458:	461a      	mov	r2, r3
 800245a:	211d      	movs	r1, #29
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f7ff fe1c 	bl	800209a <write_register>

  set_low_data_rate_optimization(lora);
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f7ff fed8 	bl	8002218 <set_low_data_rate_optimization>
}
 8002468:	bf00      	nop
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <lora_set_spreading_factor>:

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	2b05      	cmp	r3, #5
 8002480:	d802      	bhi.n	8002488 <lora_set_spreading_factor+0x18>
    sf = 6;
 8002482:	2306      	movs	r3, #6
 8002484:	70fb      	strb	r3, [r7, #3]
 8002486:	e004      	b.n	8002492 <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	2b0c      	cmp	r3, #12
 800248c:	d901      	bls.n	8002492 <lora_set_spreading_factor+0x22>
    sf = 12;
 800248e:	230c      	movs	r3, #12
 8002490:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	2b06      	cmp	r3, #6
 8002496:	d10a      	bne.n	80024ae <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8002498:	22c5      	movs	r2, #197	; 0xc5
 800249a:	2131      	movs	r1, #49	; 0x31
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff fdfc 	bl	800209a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 80024a2:	220c      	movs	r2, #12
 80024a4:	2137      	movs	r1, #55	; 0x37
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fdf7 	bl	800209a <write_register>
 80024ac:	e009      	b.n	80024c2 <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 80024ae:	22c3      	movs	r2, #195	; 0xc3
 80024b0:	2131      	movs	r1, #49	; 0x31
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff fdf1 	bl	800209a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 80024b8:	220a      	movs	r2, #10
 80024ba:	2137      	movs	r1, #55	; 0x37
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff fdec 	bl	800209a <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 80024c2:	211e      	movs	r1, #30
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff fdb1 	bl	800202c <read_register>
 80024ca:	4603      	mov	r3, r0
 80024cc:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 80024ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	b25a      	sxtb	r2, r3
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	b25b      	sxtb	r3, r3
 80024de:	4313      	orrs	r3, r2
 80024e0:	b25b      	sxtb	r3, r3
 80024e2:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	461a      	mov	r2, r3
 80024e8:	211e      	movs	r1, #30
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff fdd5 	bl	800209a <write_register>

  set_low_data_rate_optimization(lora);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff fe91 	bl	8002218 <set_low_data_rate_optimization>
}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <lora_set_crc>:

void lora_set_crc(lora_sx1276 *lora, uint8_t enable)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b084      	sub	sp, #16
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	460b      	mov	r3, r1
 8002508:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800250a:	211e      	movs	r1, #30
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff fd8d 	bl	800202c <read_register>
 8002512:	4603      	mov	r3, r0
 8002514:	73fb      	strb	r3, [r7, #15]

  if (enable) {
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d004      	beq.n	8002526 <lora_set_crc+0x28>
    mc2 |= MC2_CRC_ON;
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	f043 0304 	orr.w	r3, r3, #4
 8002522:	73fb      	strb	r3, [r7, #15]
 8002524:	e003      	b.n	800252e <lora_set_crc+0x30>
  } else {
    mc2 &= ~MC2_CRC_ON;
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	f023 0304 	bic.w	r3, r3, #4
 800252c:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	461a      	mov	r2, r3
 8002532:	211e      	movs	r1, #30
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff fdb0 	bl	800209a <write_register>
}
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <lora_set_coding_rate>:

void lora_set_coding_rate(lora_sx1276 *lora, uint8_t rate)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	460b      	mov	r3, r1
 800254c:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 800254e:	211d      	movs	r1, #29
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff fd6b 	bl	800202c <read_register>
 8002556:	4603      	mov	r3, r0
 8002558:	73fb      	strb	r3, [r7, #15]

  // coding rate bits are 1-3 in modem config 1 register
  mc1 |= rate << 1;
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	b25a      	sxtb	r2, r3
 8002560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002564:	4313      	orrs	r3, r2
 8002566:	b25b      	sxtb	r3, r3
 8002568:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	461a      	mov	r2, r3
 800256e:	211d      	movs	r1, #29
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff fd92 	bl	800209a <write_register>
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <lora_set_preamble_length>:

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	460b      	mov	r3, r1
 8002588:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 800258a:	887b      	ldrh	r3, [r7, #2]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	b29b      	uxth	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	2120      	movs	r1, #32
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff fd7f 	bl	800209a <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 800259c:	887b      	ldrh	r3, [r7, #2]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	2121      	movs	r1, #33	; 0x21
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff fd75 	bl	800209a <write_register>
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 80025c0:	2142      	movs	r1, #66	; 0x42
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff fd32 	bl	800202c <read_register>
 80025c8:	4603      	mov	r3, r0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b084      	sub	sp, #16
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 80025da:	2101      	movs	r1, #1
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff fd25 	bl	800202c <read_register>
 80025e2:	4603      	mov	r3, r0
 80025e4:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d101      	bne.n	80025f4 <lora_is_transmitting+0x22>
 80025f0:	2305      	movs	r3, #5
 80025f2:	e000      	b.n	80025f6 <lora_is_transmitting+0x24>
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	4611      	mov	r1, r2
 800260a:	461a      	mov	r2, r3
 800260c:	460b      	mov	r3, r1
 800260e:	71fb      	strb	r3, [r7, #7]
 8002610:	4613      	mov	r3, r2
 8002612:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f7ff ffdc 	bl	80025d2 <lora_is_transmitting>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8002620:	2305      	movs	r3, #5
 8002622:	e02a      	b.n	800267a <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8002624:	2101      	movs	r1, #1
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f7ff fdad 	bl	8002186 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f854 	bl	80026da <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	7d1b      	ldrb	r3, [r3, #20]
 8002636:	461a      	mov	r2, r3
 8002638:	210d      	movs	r1, #13
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f7ff fd2d 	bl	800209a <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	7d1b      	ldrb	r3, [r3, #20]
 8002644:	461a      	mov	r2, r3
 8002646:	210e      	movs	r1, #14
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f7ff fd26 	bl	800209a <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	461a      	mov	r2, r3
 8002652:	2122      	movs	r1, #34	; 0x22
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f7ff fd20 	bl	800209a <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 800265a:	79bb      	ldrb	r3, [r7, #6]
 800265c:	79fa      	ldrb	r2, [r7, #7]
 800265e:	68b9      	ldr	r1, [r7, #8]
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f7ff fd4e 	bl	8002102 <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 8002666:	79bb      	ldrb	r3, [r7, #6]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <lora_send_packet_base+0x72>
    return LORA_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	e004      	b.n	800267a <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8002670:	2103      	movs	r1, #3
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f7ff fd87 	bl	8002186 <set_mode>
  return LORA_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	4613      	mov	r3, r2
 800268e:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8002690:	79fa      	ldrb	r2, [r7, #7]
 8002692:	2302      	movs	r3, #2
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f7ff ffb1 	bl	80025fe <lora_send_packet_base>
 800269c:	4603      	mov	r3, r0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <lora_enable_interrupt_rx_done>:

  return lora_receive_packet(lora, buffer, buffer_len, error);
}

void lora_enable_interrupt_rx_done(lora_sx1276 *lora)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  // Table 63 DIO Mapping LoRaTM Mode:
  // 00 -> (DIO0 rx_done)
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x00);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2140      	movs	r1, #64	; 0x40
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff fcf1 	bl	800209a <write_register>
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <lora_enable_interrupt_tx_done>:

void lora_enable_interrupt_tx_done(lora_sx1276 *lora)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  // Table 63 DIO Mapping LoRaTM Mode:
  // 01 -> (DIO0 tx_done)
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
 80026c8:	2240      	movs	r2, #64	; 0x40
 80026ca:	2140      	movs	r1, #64	; 0x40
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff fce4 	bl	800209a <write_register>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <lora_clear_interrupt_tx_done>:

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 80026e2:	2208      	movs	r2, #8
 80026e4:	2112      	movs	r1, #18
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff fcd7 	bl	800209a <write_register>
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <lora_init>:
	HAL_Delay(100);
}

uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, GPIO_TypeDef *reset_port, uint16_t reset_pin,  uint64_t freq)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	887a      	ldrh	r2, [r7, #2]
 8002712:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8002714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002732:	609a      	str	r2, [r3, #8]

  lora->reset_port = reset_port;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a3a      	ldr	r2, [r7, #32]
 8002738:	619a      	str	r2, [r3, #24]
  lora->reset_pin = reset_pin;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800273e:	839a      	strh	r2, [r3, #28]

  // Check version
  uint8_t ver = lora_version(lora);
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f7ff ff39 	bl	80025b8 <lora_version>
 8002746:	4603      	mov	r3, r0
 8002748:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 800274a:	7dfb      	ldrb	r3, [r7, #23]
 800274c:	2b12      	cmp	r3, #18
 800274e:	d001      	beq.n	8002754 <lora_init+0x60>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8002750:	2304      	movs	r3, #4
 8002752:	e031      	b.n	80027b8 <lora_init+0xc4>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f7ff fd8f 	bl	8002278 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f7ff fd8c 	bl	8002278 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8002760:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f7ff fe1b 	bl	80023a0 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 800276a:	2107      	movs	r1, #7
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f7ff fe7f 	bl	8002470 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8002772:	210a      	movs	r1, #10
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f7ff ff02 	bl	800257e <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f7ff fdac 	bl	80022d8 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8002780:	210c      	movs	r1, #12
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f7ff fc52 	bl	800202c <read_register>
 8002788:	4603      	mov	r3, r0
 800278a:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 800278c:	7dbb      	ldrb	r3, [r7, #22]
 800278e:	f043 0303 	orr.w	r3, r3, #3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	210c      	movs	r1, #12
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f7ff fc7e 	bl	800209a <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 800279e:	2204      	movs	r2, #4
 80027a0:	2126      	movs	r1, #38	; 0x26
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f7ff fc79 	bl	800209a <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 80027a8:	2111      	movs	r1, #17
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f7ff fdac 	bl	8002308 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7ff fd85 	bl	80022c0 <lora_mode_standby>

  return LORA_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <bmp280_init_default_params>:

BMP280_HandleTypedef bmp280;

Altimeter_Data altimeter_data;

void bmp280_init_default_params(bmp280_params_t *params) {
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2203      	movs	r2, #3
 80027cc:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2203      	movs	r2, #3
 80027d8:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2203      	movs	r2, #3
 80027de:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2203      	movs	r2, #3
 80027e4:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2203      	movs	r2, #3
 80027ea:	715a      	strb	r2, [r3, #5]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	; 0x28
 80027fc:	af04      	add	r7, sp, #16
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	460b      	mov	r3, r1
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002812:	7afb      	ldrb	r3, [r7, #11]
 8002814:	b29a      	uxth	r2, r3
 8002816:	8af9      	ldrh	r1, [r7, #22]
 8002818:	f241 3388 	movw	r3, #5000	; 0x1388
 800281c:	9302      	str	r3, [sp, #8]
 800281e:	2302      	movs	r3, #2
 8002820:	9301      	str	r3, [sp, #4]
 8002822:	f107 0314 	add.w	r3, r7, #20
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2301      	movs	r3, #1
 800282a:	f001 ffe3 	bl	80047f4 <HAL_I2C_Mem_Read>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10b      	bne.n	800284c <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8002834:	7d7b      	ldrb	r3, [r7, #21]
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	b21a      	sxth	r2, r3
 800283a:	7d3b      	ldrb	r3, [r7, #20]
 800283c:	b21b      	sxth	r3, r3
 800283e:	4313      	orrs	r3, r2
 8002840:	b21b      	sxth	r3, r3
 8002842:	b29a      	uxth	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	801a      	strh	r2, [r3, #0]
		return true;
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <read_register16+0x56>
	} else
		return false;
 800284c:	2300      	movs	r3, #0

}
 800284e:	4618      	mov	r0, r3
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8002856:	b590      	push	{r4, r7, lr}
 8002858:	b08b      	sub	sp, #44	; 0x2c
 800285a:	af04      	add	r7, sp, #16
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	461a      	mov	r2, r3
 8002862:	460b      	mov	r3, r1
 8002864:	72fb      	strb	r3, [r7, #11]
 8002866:	4613      	mov	r3, r2
 8002868:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002876:	7afb      	ldrb	r3, [r7, #11]
 8002878:	b29a      	uxth	r2, r3
 800287a:	7abb      	ldrb	r3, [r7, #10]
 800287c:	b29b      	uxth	r3, r3
 800287e:	8af9      	ldrh	r1, [r7, #22]
 8002880:	f241 3488 	movw	r4, #5000	; 0x1388
 8002884:	9402      	str	r4, [sp, #8]
 8002886:	9301      	str	r3, [sp, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	2301      	movs	r3, #1
 800288e:	f001 ffb1 	bl	80047f4 <HAL_I2C_Mem_Read>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <read_data+0x46>
		return 0;
 8002898:	2300      	movs	r3, #0
 800289a:	e000      	b.n	800289e <read_data+0x48>
	else
		return 1;
 800289c:	2301      	movs	r3, #1

}
 800289e:	4618      	mov	r0, r3
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd90      	pop	{r4, r7, pc}

080028a6 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	461a      	mov	r2, r3
 80028b2:	2188      	movs	r1, #136	; 0x88
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ff9f 	bl	80027f8 <read_register16>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d06f      	beq.n	80029a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3302      	adds	r3, #2
 80028c4:	461a      	mov	r2, r3
 80028c6:	218a      	movs	r1, #138	; 0x8a
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff ff95 	bl	80027f8 <read_register16>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d065      	beq.n	80029a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3304      	adds	r3, #4
 80028d8:	461a      	mov	r2, r3
 80028da:	218c      	movs	r1, #140	; 0x8c
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff ff8b 	bl	80027f8 <read_register16>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d05b      	beq.n	80029a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3306      	adds	r3, #6
 80028ec:	461a      	mov	r2, r3
 80028ee:	218e      	movs	r1, #142	; 0x8e
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff ff81 	bl	80027f8 <read_register16>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d051      	beq.n	80029a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3308      	adds	r3, #8
 8002900:	461a      	mov	r2, r3
 8002902:	2190      	movs	r1, #144	; 0x90
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff77 	bl	80027f8 <read_register16>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d047      	beq.n	80029a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	330a      	adds	r3, #10
 8002914:	461a      	mov	r2, r3
 8002916:	2192      	movs	r1, #146	; 0x92
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ff6d 	bl	80027f8 <read_register16>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d03d      	beq.n	80029a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	330c      	adds	r3, #12
 8002928:	461a      	mov	r2, r3
 800292a:	2194      	movs	r1, #148	; 0x94
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff ff63 	bl	80027f8 <read_register16>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d033      	beq.n	80029a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	330e      	adds	r3, #14
 800293c:	461a      	mov	r2, r3
 800293e:	2196      	movs	r1, #150	; 0x96
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff ff59 	bl	80027f8 <read_register16>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d029      	beq.n	80029a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3310      	adds	r3, #16
 8002950:	461a      	mov	r2, r3
 8002952:	2198      	movs	r1, #152	; 0x98
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff ff4f 	bl	80027f8 <read_register16>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d01f      	beq.n	80029a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3312      	adds	r3, #18
 8002964:	461a      	mov	r2, r3
 8002966:	219a      	movs	r1, #154	; 0x9a
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ff45 	bl	80027f8 <read_register16>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d015      	beq.n	80029a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3314      	adds	r3, #20
 8002978:	461a      	mov	r2, r3
 800297a:	219c      	movs	r1, #156	; 0x9c
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ff3b 	bl	80027f8 <read_register16>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00b      	beq.n	80029a0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 800298c:	461a      	mov	r2, r3
 800298e:	219e      	movs	r1, #158	; 0x9e
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff ff31 	bl	80027f8 <read_register16>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <read_calibration_data+0xfa>

		return true;
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <read_calibration_data+0xfc>
	}

	return false;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b084      	sub	sp, #16
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f103 0218 	add.w	r2, r3, #24
 80029b8:	2301      	movs	r3, #1
 80029ba:	21a1      	movs	r1, #161	; 0xa1
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ff4a 	bl	8002856 <read_data>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d14b      	bne.n	8002a60 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	331a      	adds	r3, #26
 80029cc:	461a      	mov	r2, r3
 80029ce:	21e1      	movs	r1, #225	; 0xe1
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff ff11 	bl	80027f8 <read_register16>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d041      	beq.n	8002a60 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f103 021c 	add.w	r2, r3, #28
 80029e2:	2301      	movs	r3, #1
 80029e4:	21e3      	movs	r1, #227	; 0xe3
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff ff35 	bl	8002856 <read_data>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d136      	bne.n	8002a60 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80029f2:	f107 030e 	add.w	r3, r7, #14
 80029f6:	461a      	mov	r2, r3
 80029f8:	21e4      	movs	r1, #228	; 0xe4
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff fefc 	bl	80027f8 <read_register16>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d02c      	beq.n	8002a60 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8002a06:	f107 030c 	add.w	r3, r7, #12
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	21e5      	movs	r1, #229	; 0xe5
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff fef2 	bl	80027f8 <read_register16>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d022      	beq.n	8002a60 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8002a20:	2301      	movs	r3, #1
 8002a22:	21e7      	movs	r1, #231	; 0xe7
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff ff16 	bl	8002856 <read_data>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d117      	bne.n	8002a60 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8002a30:	89fb      	ldrh	r3, [r7, #14]
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	b21b      	sxth	r3, r3
 8002a36:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8002a3a:	b21a      	sxth	r2, r3
 8002a3c:	89fb      	ldrh	r3, [r7, #14]
 8002a3e:	121b      	asrs	r3, r3, #8
 8002a40:	b21b      	sxth	r3, r3
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	b21b      	sxth	r3, r3
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	b21a      	sxth	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8002a50:	89bb      	ldrh	r3, [r7, #12]
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	b21a      	sxth	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	841a      	strh	r2, [r3, #32]

		return true;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <read_hum_calibration_data+0xb8>
	}

	return false;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b088      	sub	sp, #32
 8002a6e:	af04      	add	r7, sp, #16
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	460b      	mov	r3, r1
 8002a74:	70fb      	strb	r3, [r7, #3]
 8002a76:	4613      	mov	r3, r2
 8002a78:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	89f9      	ldrh	r1, [r7, #14]
 8002a8c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002a90:	9302      	str	r3, [sp, #8]
 8002a92:	2301      	movs	r3, #1
 8002a94:	9301      	str	r3, [sp, #4]
 8002a96:	1cbb      	adds	r3, r7, #2
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f001 fd96 	bl	80045cc <HAL_I2C_Mem_Write>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <write_register8+0x40>
		return false;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e000      	b.n	8002aac <write_register8+0x42>
	else
		return true;
 8002aaa:	2301      	movs	r3, #1
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002ac2:	2b76      	cmp	r3, #118	; 0x76
 8002ac4:	d005      	beq.n	8002ad2 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002aca:	2b77      	cmp	r3, #119	; 0x77
 8002acc:	d001      	beq.n	8002ad2 <bmp280_init+0x1e>

		return false;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e099      	b.n	8002c06 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ad8:	2301      	movs	r3, #1
 8002ada:	21d0      	movs	r1, #208	; 0xd0
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff feba 	bl	8002856 <read_data>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <bmp280_init+0x38>
		return false;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e08c      	b.n	8002c06 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002af2:	2b58      	cmp	r3, #88	; 0x58
 8002af4:	d006      	beq.n	8002b04 <bmp280_init+0x50>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002afc:	2b60      	cmp	r3, #96	; 0x60
 8002afe:	d001      	beq.n	8002b04 <bmp280_init+0x50>

		return false;
 8002b00:	2300      	movs	r3, #0
 8002b02:	e080      	b.n	8002c06 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8002b04:	22b6      	movs	r2, #182	; 0xb6
 8002b06:	21e0      	movs	r1, #224	; 0xe0
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff ffae 	bl	8002a6a <write_register8>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <bmp280_init+0x64>
		return false;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e076      	b.n	8002c06 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8002b18:	f107 020c 	add.w	r2, r7, #12
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	21f3      	movs	r1, #243	; 0xf3
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff fe98 	bl	8002856 <read_data>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f5      	bne.n	8002b18 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8002b2c:	7b3b      	ldrb	r3, [r7, #12]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff feb5 	bl	80028a6 <read_calibration_data>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f083 0301 	eor.w	r3, r3, #1
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d100      	bne.n	8002b4a <bmp280_init+0x96>
 8002b48:	e001      	b.n	8002b4e <bmp280_init+0x9a>
		return false;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e05b      	b.n	8002c06 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002b54:	2b60      	cmp	r3, #96	; 0x60
 8002b56:	d10a      	bne.n	8002b6e <bmp280_init+0xba>
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff ff26 	bl	80029aa <read_hum_calibration_data>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f083 0301 	eor.w	r3, r3, #1
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <bmp280_init+0xba>
		return false;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	e04b      	b.n	8002c06 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	795b      	ldrb	r3, [r3, #5]
 8002b72:	015b      	lsls	r3, r3, #5
 8002b74:	b25a      	sxtb	r2, r3
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	785b      	ldrb	r3, [r3, #1]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	b25b      	sxtb	r3, r3
 8002b82:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	461a      	mov	r2, r3
 8002b88:	21f5      	movs	r1, #245	; 0xf5
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ff6d 	bl	8002a6a <write_register8>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <bmp280_init+0xe6>
		return false;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e035      	b.n	8002c06 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d102      	bne.n	8002ba8 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	78db      	ldrb	r3, [r3, #3]
 8002bac:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8002bae:	b25a      	sxtb	r2, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	789b      	ldrb	r3, [r3, #2]
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	b25b      	sxtb	r3, r3
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	b25a      	sxtb	r2, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	b25b      	sxtb	r3, r3
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8002bc6:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002bce:	2b60      	cmp	r3, #96	; 0x60
 8002bd0:	d10d      	bne.n	8002bee <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	791b      	ldrb	r3, [r3, #4]
 8002bd6:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8002bd8:	7b7b      	ldrb	r3, [r7, #13]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	21f2      	movs	r1, #242	; 0xf2
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff ff43 	bl	8002a6a <write_register8>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <bmp280_init+0x13a>
			return false;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e00b      	b.n	8002c06 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8002bee:	7bbb      	ldrb	r3, [r7, #14]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	21f4      	movs	r1, #244	; 0xf4
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ff38 	bl	8002a6a <write_register8>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <bmp280_init+0x150>
		return false;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e000      	b.n	8002c06 <bmp280_init+0x152>
	}

	return true;
 8002c04:	2301      	movs	r3, #1
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c16:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <MX_DMA_Init+0x48>)
 8002c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c1a:	4a0f      	ldr	r2, [pc, #60]	; (8002c58 <MX_DMA_Init+0x48>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6493      	str	r3, [r2, #72]	; 0x48
 8002c22:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <MX_DMA_Init+0x48>)
 8002c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2100      	movs	r1, #0
 8002c32:	200c      	movs	r0, #12
 8002c34:	f001 f871 	bl	8003d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002c38:	200c      	movs	r0, #12
 8002c3a:	f001 f88a 	bl	8003d52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2100      	movs	r1, #0
 8002c42:	200d      	movs	r0, #13
 8002c44:	f001 f869 	bl	8003d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002c48:	200d      	movs	r0, #13
 8002c4a:	f001 f882 	bl	8003d52 <HAL_NVIC_EnableIRQ>

}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40021000 	.word	0x40021000

08002c5c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15 (JTDI)   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c62:	f107 030c 	add.w	r3, r7, #12
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	605a      	str	r2, [r3, #4]
 8002c6c:	609a      	str	r2, [r3, #8]
 8002c6e:	60da      	str	r2, [r3, #12]
 8002c70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c72:	4b3e      	ldr	r3, [pc, #248]	; (8002d6c <MX_GPIO_Init+0x110>)
 8002c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c76:	4a3d      	ldr	r2, [pc, #244]	; (8002d6c <MX_GPIO_Init+0x110>)
 8002c78:	f043 0304 	orr.w	r3, r3, #4
 8002c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c7e:	4b3b      	ldr	r3, [pc, #236]	; (8002d6c <MX_GPIO_Init+0x110>)
 8002c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8a:	4b38      	ldr	r3, [pc, #224]	; (8002d6c <MX_GPIO_Init+0x110>)
 8002c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8e:	4a37      	ldr	r2, [pc, #220]	; (8002d6c <MX_GPIO_Init+0x110>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c96:	4b35      	ldr	r3, [pc, #212]	; (8002d6c <MX_GPIO_Init+0x110>)
 8002c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	607b      	str	r3, [r7, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca2:	4b32      	ldr	r3, [pc, #200]	; (8002d6c <MX_GPIO_Init+0x110>)
 8002ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca6:	4a31      	ldr	r2, [pc, #196]	; (8002d6c <MX_GPIO_Init+0x110>)
 8002ca8:	f043 0302 	orr.w	r3, r3, #2
 8002cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cae:	4b2f      	ldr	r3, [pc, #188]	; (8002d6c <MX_GPIO_Init+0x110>)
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_SET);
 8002cba:	2201      	movs	r2, #1
 8002cbc:	2110      	movs	r1, #16
 8002cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cc2:	f001 fbc3 	bl	800444c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2108      	movs	r1, #8
 8002cca:	4829      	ldr	r0, [pc, #164]	; (8002d70 <MX_GPIO_Init+0x114>)
 8002ccc:	f001 fbbe 	bl	800444c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LoRa_Reset_GPIO_Port, LoRa_Reset_Pin, GPIO_PIN_SET);
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	2120      	movs	r1, #32
 8002cd4:	4826      	ldr	r0, [pc, #152]	; (8002d70 <MX_GPIO_Init+0x114>)
 8002cd6:	f001 fbb9 	bl	800444c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LoRa_Interrupt_Pin;
 8002cda:	2308      	movs	r3, #8
 8002cdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LoRa_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8002ce8:	f107 030c 	add.w	r3, r7, #12
 8002cec:	4619      	mov	r1, r3
 8002cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cf2:	f001 fa41 	bl	8004178 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LoRa_NSS_Pin;
 8002cf6:	2310      	movs	r3, #16
 8002cf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LoRa_NSS_GPIO_Port, &GPIO_InitStruct);
 8002d06:	f107 030c 	add.w	r3, r7, #12
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d10:	f001 fa32 	bl	8004178 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002d14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d22:	2303      	movs	r3, #3
 8002d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002d26:	2303      	movs	r3, #3
 8002d28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002d2a:	f107 030c 	add.w	r3, r7, #12
 8002d2e:	4619      	mov	r1, r3
 8002d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d34:	f001 fa20 	bl	8004178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LoRa_Reset_Pin;
 8002d38:	2328      	movs	r3, #40	; 0x28
 8002d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d48:	f107 030c 	add.w	r3, r7, #12
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4808      	ldr	r0, [pc, #32]	; (8002d70 <MX_GPIO_Init+0x114>)
 8002d50:	f001 fa12 	bl	8004178 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002d54:	2200      	movs	r2, #0
 8002d56:	2100      	movs	r1, #0
 8002d58:	2009      	movs	r0, #9
 8002d5a:	f000 ffde 	bl	8003d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002d5e:	2009      	movs	r0, #9
 8002d60:	f000 fff7 	bl	8003d52 <HAL_NVIC_EnableIRQ>

}
 8002d64:	bf00      	nop
 8002d66:	3720      	adds	r7, #32
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	48000400 	.word	0x48000400

08002d74 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d78:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <MX_I2C1_Init+0x74>)
 8002d7a:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <MX_I2C1_Init+0x78>)
 8002d7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B02989;
 8002d7e:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <MX_I2C1_Init+0x74>)
 8002d80:	4a1b      	ldr	r2, [pc, #108]	; (8002df0 <MX_I2C1_Init+0x7c>)
 8002d82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002d84:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <MX_I2C1_Init+0x74>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d8a:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <MX_I2C1_Init+0x74>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d90:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <MX_I2C1_Init+0x74>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002d96:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <MX_I2C1_Init+0x74>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d9c:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <MX_I2C1_Init+0x74>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <MX_I2C1_Init+0x74>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <MX_I2C1_Init+0x74>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002dae:	480e      	ldr	r0, [pc, #56]	; (8002de8 <MX_I2C1_Init+0x74>)
 8002db0:	f001 fb7c 	bl	80044ac <HAL_I2C_Init>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002dba:	f000 f9b9 	bl	8003130 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4809      	ldr	r0, [pc, #36]	; (8002de8 <MX_I2C1_Init+0x74>)
 8002dc2:	f002 f9df 	bl	8005184 <HAL_I2CEx_ConfigAnalogFilter>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002dcc:	f000 f9b0 	bl	8003130 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4805      	ldr	r0, [pc, #20]	; (8002de8 <MX_I2C1_Init+0x74>)
 8002dd4:	f002 fa21 	bl	800521a <HAL_I2CEx_ConfigDigitalFilter>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002dde:	f000 f9a7 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000180 	.word	0x20000180
 8002dec:	40005400 	.word	0x40005400
 8002df0:	00b02989 	.word	0x00b02989

08002df4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002df8:	4b1b      	ldr	r3, [pc, #108]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002dfa:	4a1c      	ldr	r2, [pc, #112]	; (8002e6c <MX_I2C3_Init+0x78>)
 8002dfc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e00:	4a1b      	ldr	r2, [pc, #108]	; (8002e70 <MX_I2C3_Init+0x7c>)
 8002e02:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002e04:	4b18      	ldr	r3, [pc, #96]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e0a:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e10:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002e16:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e1c:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e28:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002e2e:	480e      	ldr	r0, [pc, #56]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e30:	f001 fb3c 	bl	80044ac <HAL_I2C_Init>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002e3a:	f000 f979 	bl	8003130 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4809      	ldr	r0, [pc, #36]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e42:	f002 f99f 	bl	8005184 <HAL_I2CEx_ConfigAnalogFilter>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002e4c:	f000 f970 	bl	8003130 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002e50:	2100      	movs	r1, #0
 8002e52:	4805      	ldr	r0, [pc, #20]	; (8002e68 <MX_I2C3_Init+0x74>)
 8002e54:	f002 f9e1 	bl	800521a <HAL_I2CEx_ConfigDigitalFilter>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002e5e:	f000 f967 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200001d4 	.word	0x200001d4
 8002e6c:	40005c00 	.word	0x40005c00
 8002e70:	10909cec 	.word	0x10909cec

08002e74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b0a2      	sub	sp, #136	; 0x88
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e7c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	60da      	str	r2, [r3, #12]
 8002e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e8c:	f107 0320 	add.w	r3, r7, #32
 8002e90:	2254      	movs	r2, #84	; 0x54
 8002e92:	2100      	movs	r1, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f005 fcdf 	bl	8008858 <memset>
  if(i2cHandle->Instance==I2C1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a4e      	ldr	r2, [pc, #312]	; (8002fd8 <HAL_I2C_MspInit+0x164>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d138      	bne.n	8002f16 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ea4:	2340      	movs	r3, #64	; 0x40
 8002ea6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eac:	f107 0320 	add.w	r3, r7, #32
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f003 f863 	bl	8005f7c <HAL_RCCEx_PeriphCLKConfig>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002ebc:	f000 f938 	bl	8003130 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec0:	4b46      	ldr	r3, [pc, #280]	; (8002fdc <HAL_I2C_MspInit+0x168>)
 8002ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec4:	4a45      	ldr	r2, [pc, #276]	; (8002fdc <HAL_I2C_MspInit+0x168>)
 8002ec6:	f043 0302 	orr.w	r3, r3, #2
 8002eca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ecc:	4b43      	ldr	r3, [pc, #268]	; (8002fdc <HAL_I2C_MspInit+0x168>)
 8002ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ed8:	23c0      	movs	r3, #192	; 0xc0
 8002eda:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002edc:	2312      	movs	r3, #18
 8002ede:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002eea:	2304      	movs	r3, #4
 8002eec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	483a      	ldr	r0, [pc, #232]	; (8002fe0 <HAL_I2C_MspInit+0x16c>)
 8002ef8:	f001 f93e 	bl	8004178 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002efc:	4b37      	ldr	r3, [pc, #220]	; (8002fdc <HAL_I2C_MspInit+0x168>)
 8002efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f00:	4a36      	ldr	r2, [pc, #216]	; (8002fdc <HAL_I2C_MspInit+0x168>)
 8002f02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f06:	6593      	str	r3, [r2, #88]	; 0x58
 8002f08:	4b34      	ldr	r3, [pc, #208]	; (8002fdc <HAL_I2C_MspInit+0x168>)
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002f14:	e05c      	b.n	8002fd0 <HAL_I2C_MspInit+0x15c>
  else if(i2cHandle->Instance==I2C3)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a32      	ldr	r2, [pc, #200]	; (8002fe4 <HAL_I2C_MspInit+0x170>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d157      	bne.n	8002fd0 <HAL_I2C_MspInit+0x15c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f24:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002f26:	2300      	movs	r3, #0
 8002f28:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f2a:	f107 0320 	add.w	r3, r7, #32
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f003 f824 	bl	8005f7c <HAL_RCCEx_PeriphCLKConfig>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_I2C_MspInit+0xca>
      Error_Handler();
 8002f3a:	f000 f8f9 	bl	8003130 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3e:	4b27      	ldr	r3, [pc, #156]	; (8002fdc <HAL_I2C_MspInit+0x168>)
 8002f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f42:	4a26      	ldr	r2, [pc, #152]	; (8002fdc <HAL_I2C_MspInit+0x168>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f4a:	4b24      	ldr	r3, [pc, #144]	; (8002fdc <HAL_I2C_MspInit+0x168>)
 8002f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f56:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <HAL_I2C_MspInit+0x168>)
 8002f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5a:	4a20      	ldr	r2, [pc, #128]	; (8002fdc <HAL_I2C_MspInit+0x168>)
 8002f5c:	f043 0302 	orr.w	r3, r3, #2
 8002f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f62:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <HAL_I2C_MspInit+0x168>)
 8002f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f72:	2312      	movs	r3, #18
 8002f74:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f80:	2304      	movs	r3, #4
 8002f82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f86:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f90:	f001 f8f2 	bl	8004178 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f94:	2310      	movs	r3, #16
 8002f96:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f98:	2312      	movs	r3, #18
 8002f9a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	480b      	ldr	r0, [pc, #44]	; (8002fe0 <HAL_I2C_MspInit+0x16c>)
 8002fb4:	f001 f8e0 	bl	8004178 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002fb8:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <HAL_I2C_MspInit+0x168>)
 8002fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbc:	4a07      	ldr	r2, [pc, #28]	; (8002fdc <HAL_I2C_MspInit+0x168>)
 8002fbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_I2C_MspInit+0x168>)
 8002fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	68fb      	ldr	r3, [r7, #12]
}
 8002fd0:	bf00      	nop
 8002fd2:	3788      	adds	r7, #136	; 0x88
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40005400 	.word	0x40005400
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	48000400 	.word	0x48000400
 8002fe4:	40005c00 	.word	0x40005c00

08002fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fec:	f000 fd21 	bl	8003a32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ff0:	f000 f826 	bl	8003040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ff4:	f7ff fe32 	bl	8002c5c <MX_GPIO_Init>
  MX_DMA_Init();
 8002ff8:	f7ff fe0a 	bl	8002c10 <MX_DMA_Init>
  MX_I2C1_Init();
 8002ffc:	f7ff feba 	bl	8002d74 <MX_I2C1_Init>
  MX_TIM1_Init();
 8003000:	f000 fb7c 	bl	80036fc <MX_TIM1_Init>
  MX_SPI1_Init();
 8003004:	f000 f8f0 	bl	80031e8 <MX_SPI1_Init>
  MX_I2C3_Init();
 8003008:	f7ff fef4 	bl	8002df4 <MX_I2C3_Init>
  MX_TIM16_Init();
 800300c:	f000 fc48 	bl	80038a0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  //Servo_Init();

  Check_Peripherals();
 8003010:	f000 fa3e 	bl	8003490 <Check_Peripherals>
  Init_Peripherals();
 8003014:	f000 fa64 	bl	80034e0 <Init_Peripherals>

  Set_LoRa_Connecting(&LoRa);
 8003018:	4805      	ldr	r0, [pc, #20]	; (8003030 <main+0x48>)
 800301a:	f7fe ff4f 	bl	8001ebc <Set_LoRa_Connecting>
  calibrateMPU9250(gyroBias, accelBias);
 800301e:	4905      	ldr	r1, [pc, #20]	; (8003034 <main+0x4c>)
 8003020:	4805      	ldr	r0, [pc, #20]	; (8003038 <main+0x50>)
 8003022:	f7fe f91f 	bl	8001264 <calibrateMPU9250>
  HAL_TIM_Base_Start_IT(&htim16); // start interrupts after device initialization
 8003026:	4805      	ldr	r0, [pc, #20]	; (800303c <main+0x54>)
 8003028:	f004 fb8c 	bl	8007744 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800302c:	e7fe      	b.n	800302c <main+0x44>
 800302e:	bf00      	nop
 8003030:	200000dc 	.word	0x200000dc
 8003034:	200000b4 	.word	0x200000b4
 8003038:	200000a8 	.word	0x200000a8
 800303c:	20000368 	.word	0x20000368

08003040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b096      	sub	sp, #88	; 0x58
 8003044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003046:	f107 0314 	add.w	r3, r7, #20
 800304a:	2244      	movs	r2, #68	; 0x44
 800304c:	2100      	movs	r1, #0
 800304e:	4618      	mov	r0, r3
 8003050:	f005 fc02 	bl	8008858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003054:	463b      	mov	r3, r7
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	609a      	str	r2, [r3, #8]
 800305e:	60da      	str	r2, [r3, #12]
 8003060:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003062:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003066:	f002 f933 	bl	80052d0 <HAL_PWREx_ControlVoltageScaling>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003070:	f000 f85e 	bl	8003130 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003074:	2302      	movs	r3, #2
 8003076:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800307c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800307e:	2310      	movs	r3, #16
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003082:	2302      	movs	r3, #2
 8003084:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003086:	2302      	movs	r3, #2
 8003088:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800308a:	2301      	movs	r3, #1
 800308c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800308e:	230a      	movs	r3, #10
 8003090:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003092:	2307      	movs	r3, #7
 8003094:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003096:	2302      	movs	r3, #2
 8003098:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800309a:	2302      	movs	r3, #2
 800309c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800309e:	f107 0314 	add.w	r3, r7, #20
 80030a2:	4618      	mov	r0, r3
 80030a4:	f002 f96a 	bl	800537c <HAL_RCC_OscConfig>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80030ae:	f000 f83f 	bl	8003130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030b2:	230f      	movs	r3, #15
 80030b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030b6:	2303      	movs	r3, #3
 80030b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80030c6:	463b      	mov	r3, r7
 80030c8:	2104      	movs	r1, #4
 80030ca:	4618      	mov	r0, r3
 80030cc:	f002 fd6a 	bl	8005ba4 <HAL_RCC_ClockConfig>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80030d6:	f000 f82b 	bl	8003130 <Error_Handler>
  }
}
 80030da:	bf00      	nop
 80030dc:	3758      	adds	r7, #88	; 0x58
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t pin){
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	80fb      	strh	r3, [r7, #6]
	if (pin == LoRa_Interrupt_Pin){
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d102      	bne.n	80030fa <HAL_GPIO_EXTI_Callback+0x16>
		LoRa_Receive_interrupt_Handler(&LoRa);
 80030f4:	4803      	ldr	r0, [pc, #12]	; (8003104 <HAL_GPIO_EXTI_Callback+0x20>)
 80030f6:	f7fe fed7 	bl	8001ea8 <LoRa_Receive_interrupt_Handler>
	}
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	200000dc 	.word	0x200000dc

08003108 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
	if (htim == &htim16){
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a05      	ldr	r2, [pc, #20]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d102      	bne.n	800311e <HAL_TIM_PeriodElapsedCallback+0x16>
		LoRa_Timer_Interrupt_Handler(&LoRa);
 8003118:	4804      	ldr	r0, [pc, #16]	; (800312c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800311a:	f7fe ff57 	bl	8001fcc <LoRa_Timer_Interrupt_Handler>
	}
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000368 	.word	0x20000368
 800312c:	200000dc 	.word	0x200000dc

08003130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003134:	b672      	cpsid	i
}
 8003136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8003138:	2201      	movs	r2, #1
 800313a:	2110      	movs	r1, #16
 800313c:	4808      	ldr	r0, [pc, #32]	; (8003160 <Error_Handler+0x30>)
 800313e:	f001 f985 	bl	800444c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8003142:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003146:	f000 fce9 	bl	8003b1c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800314a:	2200      	movs	r2, #0
 800314c:	2110      	movs	r1, #16
 800314e:	4804      	ldr	r0, [pc, #16]	; (8003160 <Error_Handler+0x30>)
 8003150:	f001 f97c 	bl	800444c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8003154:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003158:	f000 fce0 	bl	8003b1c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800315c:	e7ec      	b.n	8003138 <Error_Handler+0x8>
 800315e:	bf00      	nop
 8003160:	48000400 	.word	0x48000400

08003164 <__Test_Servos>:


/*
 * For testing purposes!
 */
void __Test_Servos(){
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
	TIM1->CCR1 = INLINE_DUTY_CYCLE;
 8003168:	4b1e      	ldr	r3, [pc, #120]	; (80031e4 <__Test_Servos+0x80>)
 800316a:	2296      	movs	r2, #150	; 0x96
 800316c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = INLINE_DUTY_CYCLE;
 800316e:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <__Test_Servos+0x80>)
 8003170:	2296      	movs	r2, #150	; 0x96
 8003172:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = INLINE_DUTY_CYCLE;
 8003174:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <__Test_Servos+0x80>)
 8003176:	2296      	movs	r2, #150	; 0x96
 8003178:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = INLINE_DUTY_CYCLE;
 800317a:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <__Test_Servos+0x80>)
 800317c:	2296      	movs	r2, #150	; 0x96
 800317e:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_Delay(2000);
 8003180:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003184:	f000 fcca 	bl	8003b1c <HAL_Delay>


	TIM1->CCR1 = LOWEST_ENABLED_PITCH_DUTY_CYCLE;
 8003188:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <__Test_Servos+0x80>)
 800318a:	227d      	movs	r2, #125	; 0x7d
 800318c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = LOWEST_ENABLED_PITCH_DUTY_CYCLE;
 800318e:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <__Test_Servos+0x80>)
 8003190:	227d      	movs	r2, #125	; 0x7d
 8003192:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = LOWEST_ENABLED_PITCH_DUTY_CYCLE;
 8003194:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <__Test_Servos+0x80>)
 8003196:	227d      	movs	r2, #125	; 0x7d
 8003198:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = LOWEST_ENABLED_PITCH_DUTY_CYCLE;
 800319a:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <__Test_Servos+0x80>)
 800319c:	227d      	movs	r2, #125	; 0x7d
 800319e:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_Delay(2000);
 80031a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80031a4:	f000 fcba 	bl	8003b1c <HAL_Delay>


	TIM1->CCR1 = HIGHEST_ENABLED_PICH_DUTY_CYCLE;
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <__Test_Servos+0x80>)
 80031aa:	22af      	movs	r2, #175	; 0xaf
 80031ac:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = HIGHEST_ENABLED_PICH_DUTY_CYCLE;
 80031ae:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <__Test_Servos+0x80>)
 80031b0:	22af      	movs	r2, #175	; 0xaf
 80031b2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = HIGHEST_ENABLED_PICH_DUTY_CYCLE;
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <__Test_Servos+0x80>)
 80031b6:	22af      	movs	r2, #175	; 0xaf
 80031b8:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = HIGHEST_ENABLED_PICH_DUTY_CYCLE;
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <__Test_Servos+0x80>)
 80031bc:	22af      	movs	r2, #175	; 0xaf
 80031be:	641a      	str	r2, [r3, #64]	; 0x40


	HAL_Delay(2000);
 80031c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80031c4:	f000 fcaa 	bl	8003b1c <HAL_Delay>

	TIM1->CCR1 = INLINE_DUTY_CYCLE;
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <__Test_Servos+0x80>)
 80031ca:	2296      	movs	r2, #150	; 0x96
 80031cc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = INLINE_DUTY_CYCLE;
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <__Test_Servos+0x80>)
 80031d0:	2296      	movs	r2, #150	; 0x96
 80031d2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = INLINE_DUTY_CYCLE;
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <__Test_Servos+0x80>)
 80031d6:	2296      	movs	r2, #150	; 0x96
 80031d8:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = INLINE_DUTY_CYCLE;
 80031da:	4b02      	ldr	r3, [pc, #8]	; (80031e4 <__Test_Servos+0x80>)
 80031dc:	2296      	movs	r2, #150	; 0x96
 80031de:	641a      	str	r2, [r3, #64]	; 0x40
}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40012c00 	.word	0x40012c00

080031e8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80031ec:	4b1b      	ldr	r3, [pc, #108]	; (800325c <MX_SPI1_Init+0x74>)
 80031ee:	4a1c      	ldr	r2, [pc, #112]	; (8003260 <MX_SPI1_Init+0x78>)
 80031f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031f2:	4b1a      	ldr	r3, [pc, #104]	; (800325c <MX_SPI1_Init+0x74>)
 80031f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031fa:	4b18      	ldr	r3, [pc, #96]	; (800325c <MX_SPI1_Init+0x74>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003200:	4b16      	ldr	r3, [pc, #88]	; (800325c <MX_SPI1_Init+0x74>)
 8003202:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003206:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003208:	4b14      	ldr	r3, [pc, #80]	; (800325c <MX_SPI1_Init+0x74>)
 800320a:	2200      	movs	r2, #0
 800320c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800320e:	4b13      	ldr	r3, [pc, #76]	; (800325c <MX_SPI1_Init+0x74>)
 8003210:	2200      	movs	r2, #0
 8003212:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003214:	4b11      	ldr	r3, [pc, #68]	; (800325c <MX_SPI1_Init+0x74>)
 8003216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800321a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800321c:	4b0f      	ldr	r3, [pc, #60]	; (800325c <MX_SPI1_Init+0x74>)
 800321e:	2218      	movs	r2, #24
 8003220:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003222:	4b0e      	ldr	r3, [pc, #56]	; (800325c <MX_SPI1_Init+0x74>)
 8003224:	2200      	movs	r2, #0
 8003226:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <MX_SPI1_Init+0x74>)
 800322a:	2200      	movs	r2, #0
 800322c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <MX_SPI1_Init+0x74>)
 8003230:	2200      	movs	r2, #0
 8003232:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003234:	4b09      	ldr	r3, [pc, #36]	; (800325c <MX_SPI1_Init+0x74>)
 8003236:	2207      	movs	r2, #7
 8003238:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800323a:	4b08      	ldr	r3, [pc, #32]	; (800325c <MX_SPI1_Init+0x74>)
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <MX_SPI1_Init+0x74>)
 8003242:	2200      	movs	r2, #0
 8003244:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003246:	4805      	ldr	r0, [pc, #20]	; (800325c <MX_SPI1_Init+0x74>)
 8003248:	f003 f980 	bl	800654c <HAL_SPI_Init>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003252:	f7ff ff6d 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003256:	bf00      	nop
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20000228 	.word	0x20000228
 8003260:	40013000 	.word	0x40013000

08003264 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08a      	sub	sp, #40	; 0x28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800326c:	f107 0314 	add.w	r3, r7, #20
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a41      	ldr	r2, [pc, #260]	; (8003388 <HAL_SPI_MspInit+0x124>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d17b      	bne.n	800337e <HAL_SPI_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003286:	4b41      	ldr	r3, [pc, #260]	; (800338c <HAL_SPI_MspInit+0x128>)
 8003288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328a:	4a40      	ldr	r2, [pc, #256]	; (800338c <HAL_SPI_MspInit+0x128>)
 800328c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003290:	6613      	str	r3, [r2, #96]	; 0x60
 8003292:	4b3e      	ldr	r3, [pc, #248]	; (800338c <HAL_SPI_MspInit+0x128>)
 8003294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800329e:	4b3b      	ldr	r3, [pc, #236]	; (800338c <HAL_SPI_MspInit+0x128>)
 80032a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a2:	4a3a      	ldr	r2, [pc, #232]	; (800338c <HAL_SPI_MspInit+0x128>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032aa:	4b38      	ldr	r3, [pc, #224]	; (800338c <HAL_SPI_MspInit+0x128>)
 80032ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_12;
 80032b6:	f241 0342 	movw	r3, #4162	; 0x1042
 80032ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032bc:	2302      	movs	r3, #2
 80032be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c4:	2303      	movs	r3, #3
 80032c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032c8:	2305      	movs	r3, #5
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032cc:	f107 0314 	add.w	r3, r7, #20
 80032d0:	4619      	mov	r1, r3
 80032d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032d6:	f000 ff4f 	bl	8004178 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80032da:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_SPI_MspInit+0x12c>)
 80032dc:	4a2d      	ldr	r2, [pc, #180]	; (8003394 <HAL_SPI_MspInit+0x130>)
 80032de:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 80032e0:	4b2b      	ldr	r3, [pc, #172]	; (8003390 <HAL_SPI_MspInit+0x12c>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032e6:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <HAL_SPI_MspInit+0x12c>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032ec:	4b28      	ldr	r3, [pc, #160]	; (8003390 <HAL_SPI_MspInit+0x12c>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032f2:	4b27      	ldr	r3, [pc, #156]	; (8003390 <HAL_SPI_MspInit+0x12c>)
 80032f4:	2280      	movs	r2, #128	; 0x80
 80032f6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032f8:	4b25      	ldr	r3, [pc, #148]	; (8003390 <HAL_SPI_MspInit+0x12c>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032fe:	4b24      	ldr	r3, [pc, #144]	; (8003390 <HAL_SPI_MspInit+0x12c>)
 8003300:	2200      	movs	r2, #0
 8003302:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003304:	4b22      	ldr	r3, [pc, #136]	; (8003390 <HAL_SPI_MspInit+0x12c>)
 8003306:	2200      	movs	r2, #0
 8003308:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800330a:	4b21      	ldr	r3, [pc, #132]	; (8003390 <HAL_SPI_MspInit+0x12c>)
 800330c:	2200      	movs	r2, #0
 800330e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003310:	481f      	ldr	r0, [pc, #124]	; (8003390 <HAL_SPI_MspInit+0x12c>)
 8003312:	f000 fd39 	bl	8003d88 <HAL_DMA_Init>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 800331c:	f7ff ff08 	bl	8003130 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a1b      	ldr	r2, [pc, #108]	; (8003390 <HAL_SPI_MspInit+0x12c>)
 8003324:	659a      	str	r2, [r3, #88]	; 0x58
 8003326:	4a1a      	ldr	r2, [pc, #104]	; (8003390 <HAL_SPI_MspInit+0x12c>)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800332c:	4b1a      	ldr	r3, [pc, #104]	; (8003398 <HAL_SPI_MspInit+0x134>)
 800332e:	4a1b      	ldr	r2, [pc, #108]	; (800339c <HAL_SPI_MspInit+0x138>)
 8003330:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8003332:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_SPI_MspInit+0x134>)
 8003334:	2201      	movs	r2, #1
 8003336:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003338:	4b17      	ldr	r3, [pc, #92]	; (8003398 <HAL_SPI_MspInit+0x134>)
 800333a:	2210      	movs	r2, #16
 800333c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800333e:	4b16      	ldr	r3, [pc, #88]	; (8003398 <HAL_SPI_MspInit+0x134>)
 8003340:	2200      	movs	r2, #0
 8003342:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003344:	4b14      	ldr	r3, [pc, #80]	; (8003398 <HAL_SPI_MspInit+0x134>)
 8003346:	2280      	movs	r2, #128	; 0x80
 8003348:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800334a:	4b13      	ldr	r3, [pc, #76]	; (8003398 <HAL_SPI_MspInit+0x134>)
 800334c:	2200      	movs	r2, #0
 800334e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003350:	4b11      	ldr	r3, [pc, #68]	; (8003398 <HAL_SPI_MspInit+0x134>)
 8003352:	2200      	movs	r2, #0
 8003354:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003356:	4b10      	ldr	r3, [pc, #64]	; (8003398 <HAL_SPI_MspInit+0x134>)
 8003358:	2200      	movs	r2, #0
 800335a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800335c:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <HAL_SPI_MspInit+0x134>)
 800335e:	2200      	movs	r2, #0
 8003360:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003362:	480d      	ldr	r0, [pc, #52]	; (8003398 <HAL_SPI_MspInit+0x134>)
 8003364:	f000 fd10 	bl	8003d88 <HAL_DMA_Init>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 800336e:	f7ff fedf 	bl	8003130 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a08      	ldr	r2, [pc, #32]	; (8003398 <HAL_SPI_MspInit+0x134>)
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
 8003378:	4a07      	ldr	r2, [pc, #28]	; (8003398 <HAL_SPI_MspInit+0x134>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800337e:	bf00      	nop
 8003380:	3728      	adds	r7, #40	; 0x28
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40013000 	.word	0x40013000
 800338c:	40021000 	.word	0x40021000
 8003390:	2000028c 	.word	0x2000028c
 8003394:	4002001c 	.word	0x4002001c
 8003398:	200002d4 	.word	0x200002d4
 800339c:	40020030 	.word	0x40020030

080033a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a6:	4b0f      	ldr	r3, [pc, #60]	; (80033e4 <HAL_MspInit+0x44>)
 80033a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033aa:	4a0e      	ldr	r2, [pc, #56]	; (80033e4 <HAL_MspInit+0x44>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	6613      	str	r3, [r2, #96]	; 0x60
 80033b2:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <HAL_MspInit+0x44>)
 80033b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	607b      	str	r3, [r7, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033be:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <HAL_MspInit+0x44>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	4a08      	ldr	r2, [pc, #32]	; (80033e4 <HAL_MspInit+0x44>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c8:	6593      	str	r3, [r2, #88]	; 0x58
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_MspInit+0x44>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000

080033e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033ec:	e7fe      	b.n	80033ec <NMI_Handler+0x4>

080033ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033f2:	e7fe      	b.n	80033f2 <HardFault_Handler+0x4>

080033f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033f8:	e7fe      	b.n	80033f8 <MemManage_Handler+0x4>

080033fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033fa:	b480      	push	{r7}
 80033fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033fe:	e7fe      	b.n	80033fe <BusFault_Handler+0x4>

08003400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003404:	e7fe      	b.n	8003404 <UsageFault_Handler+0x4>

08003406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003406:	b480      	push	{r7}
 8003408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003418:	bf00      	nop
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003422:	b480      	push	{r7}
 8003424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003434:	f000 fb52 	bl	8003adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003438:	bf00      	nop
 800343a:	bd80      	pop	{r7, pc}

0800343c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LoRa_Interrupt_Pin);
 8003440:	2008      	movs	r0, #8
 8003442:	f001 f81b 	bl	800447c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003450:	4802      	ldr	r0, [pc, #8]	; (800345c <DMA1_Channel2_IRQHandler+0x10>)
 8003452:	f000 fdb1 	bl	8003fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	2000028c 	.word	0x2000028c

08003460 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <DMA1_Channel3_IRQHandler+0x10>)
 8003466:	f000 fda7 	bl	8003fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	200002d4 	.word	0x200002d4

08003474 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003478:	4803      	ldr	r0, [pc, #12]	; (8003488 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800347a:	f004 fa18 	bl	80078ae <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800347e:	4803      	ldr	r0, [pc, #12]	; (800348c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003480:	f004 fa15 	bl	80078ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003484:	bf00      	nop
 8003486:	bd80      	pop	{r7, pc}
 8003488:	2000031c 	.word	0x2000031c
 800348c:	20000368 	.word	0x20000368

08003490 <Check_Peripherals>:
 * 		- LoRa
 * 		- Altimeter
 * 		- Servos
 * 	(all of the peripherals are essential pretty much)
 */
void Check_Peripherals(){
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
	if (!Is_BMP280_Available()){ // not putting all check into one if
 8003494:	f000 f82e 	bl	80034f4 <Is_BMP280_Available>
 8003498:	4603      	mov	r3, r0
 800349a:	f083 0301 	eor.w	r3, r3, #1
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <Check_Peripherals+0x18>
		Error_Handler();		 // bc this way it is easier to debug
 80034a4:	f7ff fe44 	bl	8003130 <Error_Handler>
	}

	if (!Is_IMU_Available()){
 80034a8:	f000 f83c 	bl	8003524 <Is_IMU_Available>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f083 0301 	eor.w	r3, r3, #1
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <Check_Peripherals+0x2c>
		Error_Handler();
 80034b8:	f7ff fe3a 	bl	8003130 <Error_Handler>
	}

	if (!Is_LoRa_Available()){
 80034bc:	f000 f84a 	bl	8003554 <Is_LoRa_Available>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f083 0301 	eor.w	r3, r3, #1
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <Check_Peripherals+0x40>
		Error_Handler();
 80034cc:	f7ff fe30 	bl	8003130 <Error_Handler>
	}

	// Manual testing (look at the rocket canards)
	Are_Servos_Available();
 80034d0:	f7ff fe48 	bl	8003164 <__Test_Servos>
	HAL_Delay(2000);
 80034d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80034d8:	f000 fb20 	bl	8003b1c <HAL_Delay>
}
 80034dc:	bf00      	nop
 80034de:	bd80      	pop	{r7, pc}

080034e0 <Init_Peripherals>:

void Init_Peripherals(){
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
	Init_LoRa();
 80034e4:	f000 f868 	bl	80035b8 <Init_LoRa>
	Init_BMP280();
 80034e8:	f000 f8ac 	bl	8003644 <Init_BMP280>
	Init_IMU();
 80034ec:	f000 f8cc 	bl	8003688 <Init_IMU>
}
 80034f0:	bf00      	nop
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <Is_BMP280_Available>:


/**
 * Checking if altimeter is available.
 */
bool Is_BMP280_Available(){
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c3, BMP280_I2C_ADDRESS_0 << 1, 10, 10);
 80034fa:	230a      	movs	r3, #10
 80034fc:	220a      	movs	r2, #10
 80034fe:	21ec      	movs	r1, #236	; 0xec
 8003500:	4807      	ldr	r0, [pc, #28]	; (8003520 <Is_BMP280_Available+0x2c>)
 8003502:	f001 fa91 	bl	8004a28 <HAL_I2C_IsDeviceReady>
 8003506:	4603      	mov	r3, r0
 8003508:	71fb      	strb	r3, [r7, #7]
	if (status == HAL_OK){
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <Is_BMP280_Available+0x20>
		return 1;
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <Is_BMP280_Available+0x22>
	}

	return 0;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	200001d4 	.word	0x200001d4

08003524 <Is_IMU_Available>:


bool Is_IMU_Available(){
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, MPU9250_ADDRESS, 10, 10);
 800352a:	230a      	movs	r3, #10
 800352c:	220a      	movs	r2, #10
 800352e:	21d0      	movs	r1, #208	; 0xd0
 8003530:	4807      	ldr	r0, [pc, #28]	; (8003550 <Is_IMU_Available+0x2c>)
 8003532:	f001 fa79 	bl	8004a28 <HAL_I2C_IsDeviceReady>
 8003536:	4603      	mov	r3, r0
 8003538:	71fb      	strb	r3, [r7, #7]
	if (status == HAL_OK){
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <Is_IMU_Available+0x20>
		return 1;
 8003540:	2301      	movs	r3, #1
 8003542:	e000      	b.n	8003546 <Is_IMU_Available+0x22>
	}

	return 0;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000180 	.word	0x20000180

08003554 <Is_LoRa_Available>:


bool Is_LoRa_Available(){
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
	uint32_t res;
	uint8_t address = 0x0D;
 800355a:	230d      	movs	r3, #13
 800355c:	71fb      	strb	r3, [r7, #7]
	for (int i=0;i<50;i++){
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	e01c      	b.n	800359e <Is_LoRa_Available+0x4a>
		HAL_GPIO_WritePin(GPIOA, LoRa_NSS_Pin, GPIO_PIN_RESET);
 8003564:	2200      	movs	r2, #0
 8003566:	2110      	movs	r1, #16
 8003568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800356c:	f000 ff6e 	bl	800444c <HAL_GPIO_WritePin>
		res = HAL_SPI_Transmit(&hspi1, &address, 1, 500);
 8003570:	1df9      	adds	r1, r7, #7
 8003572:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003576:	2201      	movs	r2, #1
 8003578:	480d      	ldr	r0, [pc, #52]	; (80035b0 <Is_LoRa_Available+0x5c>)
 800357a:	f003 f88a 	bl	8006692 <HAL_SPI_Transmit>
 800357e:	4603      	mov	r3, r0
 8003580:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_WritePin(GPIOA, LoRa_NSS_Pin, GPIO_PIN_SET);
 8003582:	2201      	movs	r2, #1
 8003584:	2110      	movs	r1, #16
 8003586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800358a:	f000 ff5f 	bl	800444c <HAL_GPIO_WritePin>

		if (res == HAL_OK){
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <Is_LoRa_Available+0x44>
			return 1;
 8003594:	2301      	movs	r3, #1
 8003596:	e006      	b.n	80035a6 <Is_LoRa_Available+0x52>
	for (int i=0;i<50;i++){
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	3301      	adds	r3, #1
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2b31      	cmp	r3, #49	; 0x31
 80035a2:	dddf      	ble.n	8003564 <Is_LoRa_Available+0x10>
		}
	}

	return 0;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000228 	.word	0x20000228
 80035b4:	00000000 	.word	0x00000000

080035b8 <Init_LoRa>:


void Init_LoRa(){
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af04      	add	r7, sp, #16
	lora_init(&LoRa, &hspi1, LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, LoRa_Reset_GPIO_Port, LoRa_Reset_Pin, LORA_BASE_FREQUENCY_EU);
 80035be:	a31f      	add	r3, pc, #124	; (adr r3, 800363c <Init_LoRa+0x84>)
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035c8:	2320      	movs	r3, #32
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	4b18      	ldr	r3, [pc, #96]	; (8003630 <Init_LoRa+0x78>)
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	2310      	movs	r3, #16
 80035d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80035d6:	4917      	ldr	r1, [pc, #92]	; (8003634 <Init_LoRa+0x7c>)
 80035d8:	4817      	ldr	r0, [pc, #92]	; (8003638 <Init_LoRa+0x80>)
 80035da:	f7ff f88b 	bl	80026f4 <lora_init>
	lora_set_tx_power(&LoRa, 17);
 80035de:	2111      	movs	r1, #17
 80035e0:	4815      	ldr	r0, [pc, #84]	; (8003638 <Init_LoRa+0x80>)
 80035e2:	f7fe fe91 	bl	8002308 <lora_set_tx_power>
	lora_set_signal_bandwidth(&LoRa, LORA_BANDWIDTH_7_8_KHZ);
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	4812      	ldr	r0, [pc, #72]	; (8003638 <Init_LoRa+0x80>)
 80035f0:	f7fe ff1c 	bl	800242c <lora_set_signal_bandwidth>
	lora_set_spreading_factor(&LoRa, 12);
 80035f4:	210c      	movs	r1, #12
 80035f6:	4810      	ldr	r0, [pc, #64]	; (8003638 <Init_LoRa+0x80>)
 80035f8:	f7fe ff3a 	bl	8002470 <lora_set_spreading_factor>
	lora_set_coding_rate(&LoRa, LORA_CODING_RATE_4_8);
 80035fc:	2120      	movs	r1, #32
 80035fe:	480e      	ldr	r0, [pc, #56]	; (8003638 <Init_LoRa+0x80>)
 8003600:	f7fe ff9f 	bl	8002542 <lora_set_coding_rate>
	lora_set_crc(&LoRa, 3);
 8003604:	2103      	movs	r1, #3
 8003606:	480c      	ldr	r0, [pc, #48]	; (8003638 <Init_LoRa+0x80>)
 8003608:	f7fe ff79 	bl	80024fe <lora_set_crc>
	lora_set_preamble_length(&LoRa, 12);
 800360c:	210c      	movs	r1, #12
 800360e:	480a      	ldr	r0, [pc, #40]	; (8003638 <Init_LoRa+0x80>)
 8003610:	f7fe ffb5 	bl	800257e <lora_set_preamble_length>
	lora_set_explicit_header_mode(&LoRa);
 8003614:	4808      	ldr	r0, [pc, #32]	; (8003638 <Init_LoRa+0x80>)
 8003616:	f7fe fe5f 	bl	80022d8 <lora_set_explicit_header_mode>
	lora_enable_interrupt_rx_done(&LoRa);
 800361a:	4807      	ldr	r0, [pc, #28]	; (8003638 <Init_LoRa+0x80>)
 800361c:	f7ff f843 	bl	80026a6 <lora_enable_interrupt_rx_done>
	lora_enable_interrupt_tx_done(&LoRa);
 8003620:	4805      	ldr	r0, [pc, #20]	; (8003638 <Init_LoRa+0x80>)
 8003622:	f7ff f84d 	bl	80026c0 <lora_enable_interrupt_tx_done>
}
 8003626:	bf00      	nop
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	f3af 8000 	nop.w
 8003630:	48000400 	.word	0x48000400
 8003634:	20000228 	.word	0x20000228
 8003638:	200000dc 	.word	0x200000dc
 800363c:	33bca100 	.word	0x33bca100
 8003640:	00000000 	.word	0x00000000

08003644 <Init_BMP280>:

void Init_BMP280(){
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
	  bmp280_init_default_params(&bmp280.params);
 800364a:	480c      	ldr	r0, [pc, #48]	; (800367c <Init_BMP280+0x38>)
 800364c:	f7ff f8b8 	bl	80027c0 <bmp280_init_default_params>
	  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8003650:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <Init_BMP280+0x3c>)
 8003652:	2276      	movs	r2, #118	; 0x76
 8003654:	849a      	strh	r2, [r3, #36]	; 0x24
	  bmp280.i2c = &hi2c3;
 8003656:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <Init_BMP280+0x3c>)
 8003658:	4a0a      	ldr	r2, [pc, #40]	; (8003684 <Init_BMP280+0x40>)
 800365a:	629a      	str	r2, [r3, #40]	; 0x28
	  bool bme280p = bmp280.id == BME280_CHIP_ID;
 800365c:	4b08      	ldr	r3, [pc, #32]	; (8003680 <Init_BMP280+0x3c>)
 800365e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003662:	2b60      	cmp	r3, #96	; 0x60
 8003664:	bf0c      	ite	eq
 8003666:	2301      	moveq	r3, #1
 8003668:	2300      	movne	r3, #0
 800366a:	71fb      	strb	r3, [r7, #7]
	  bmp280_init(&bmp280, &bmp280.params);
 800366c:	4903      	ldr	r1, [pc, #12]	; (800367c <Init_BMP280+0x38>)
 800366e:	4804      	ldr	r0, [pc, #16]	; (8003680 <Init_BMP280+0x3c>)
 8003670:	f7ff fa20 	bl	8002ab4 <bmp280_init>
}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	20000178 	.word	0x20000178
 8003680:	2000014c 	.word	0x2000014c
 8003684:	200001d4 	.word	0x200001d4

08003688 <Init_IMU>:


void Init_IMU(){
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
	if (IMUreadByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250) != 0x70){
 800368e:	2175      	movs	r1, #117	; 0x75
 8003690:	20d0      	movs	r0, #208	; 0xd0
 8003692:	f7fd fc09 	bl	8000ea8 <IMUreadByte>
 8003696:	4603      	mov	r3, r0
 8003698:	2b70      	cmp	r3, #112	; 0x70
 800369a:	d007      	beq.n	80036ac <Init_IMU+0x24>
		uint8_t res = IMUreadByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
 800369c:	2175      	movs	r1, #117	; 0x75
 800369e:	20d0      	movs	r0, #208	; 0xd0
 80036a0:	f7fd fc02 	bl	8000ea8 <IMUreadByte>
 80036a4:	4603      	mov	r3, r0
 80036a6:	71fb      	strb	r3, [r7, #7]
		Error_Handler();
 80036a8:	f7ff fd42 	bl	8003130 <Error_Handler>
	}

	MPU9250SelfTest(SelfTest);
 80036ac:	4808      	ldr	r0, [pc, #32]	; (80036d0 <Init_IMU+0x48>)
 80036ae:	f7fe f88b 	bl	80017c8 <MPU9250SelfTest>

	initMPU9250(AFS_8G, GFS_250DPS, 7); // sample rate  SAMPLE_RATE = Internal_Sample_Rate / (1 + 7) = 1kHz
 80036b2:	2207      	movs	r2, #7
 80036b4:	2100      	movs	r1, #0
 80036b6:	2002      	movs	r0, #2
 80036b8:	f7fd fd3e 	bl	8001138 <initMPU9250>
	MinitAK8963Slave(MFS_16BITS, 6, magCalibration);
 80036bc:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <Init_IMU+0x4c>)
 80036be:	2106      	movs	r1, #6
 80036c0:	2001      	movs	r0, #1
 80036c2:	f7fd fc3d 	bl	8000f40 <MinitAK8963Slave>

}
 80036c6:	bf00      	nop
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	200000c0 	.word	0x200000c0
 80036d4:	2000009c 	.word	0x2000009c

080036d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <SystemInit+0x20>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e2:	4a05      	ldr	r2, [pc, #20]	; (80036f8 <SystemInit+0x20>)
 80036e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80036ec:	bf00      	nop
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	e000ed00 	.word	0xe000ed00

080036fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b09a      	sub	sp, #104	; 0x68
 8003700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003702:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	609a      	str	r2, [r3, #8]
 800370e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003710:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800371c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	60da      	str	r2, [r3, #12]
 800372a:	611a      	str	r2, [r3, #16]
 800372c:	615a      	str	r2, [r3, #20]
 800372e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003730:	1d3b      	adds	r3, r7, #4
 8003732:	222c      	movs	r2, #44	; 0x2c
 8003734:	2100      	movs	r1, #0
 8003736:	4618      	mov	r0, r3
 8003738:	f005 f88e 	bl	8008858 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800373c:	4b56      	ldr	r3, [pc, #344]	; (8003898 <MX_TIM1_Init+0x19c>)
 800373e:	4a57      	ldr	r2, [pc, #348]	; (800389c <MX_TIM1_Init+0x1a0>)
 8003740:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 800-1;
 8003742:	4b55      	ldr	r3, [pc, #340]	; (8003898 <MX_TIM1_Init+0x19c>)
 8003744:	f240 321f 	movw	r2, #799	; 0x31f
 8003748:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800374a:	4b53      	ldr	r3, [pc, #332]	; (8003898 <MX_TIM1_Init+0x19c>)
 800374c:	2200      	movs	r2, #0
 800374e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8003750:	4b51      	ldr	r3, [pc, #324]	; (8003898 <MX_TIM1_Init+0x19c>)
 8003752:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003756:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003758:	4b4f      	ldr	r3, [pc, #316]	; (8003898 <MX_TIM1_Init+0x19c>)
 800375a:	2200      	movs	r2, #0
 800375c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800375e:	4b4e      	ldr	r3, [pc, #312]	; (8003898 <MX_TIM1_Init+0x19c>)
 8003760:	2200      	movs	r2, #0
 8003762:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003764:	4b4c      	ldr	r3, [pc, #304]	; (8003898 <MX_TIM1_Init+0x19c>)
 8003766:	2200      	movs	r2, #0
 8003768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800376a:	484b      	ldr	r0, [pc, #300]	; (8003898 <MX_TIM1_Init+0x19c>)
 800376c:	f003 ff92 	bl	8007694 <HAL_TIM_Base_Init>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8003776:	f7ff fcdb 	bl	8003130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800377a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800377e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003780:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003784:	4619      	mov	r1, r3
 8003786:	4844      	ldr	r0, [pc, #272]	; (8003898 <MX_TIM1_Init+0x19c>)
 8003788:	f004 fac4 	bl	8007d14 <HAL_TIM_ConfigClockSource>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8003792:	f7ff fccd 	bl	8003130 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003796:	4840      	ldr	r0, [pc, #256]	; (8003898 <MX_TIM1_Init+0x19c>)
 8003798:	f004 f828 	bl	80077ec <HAL_TIM_PWM_Init>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80037a2:	f7ff fcc5 	bl	8003130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037a6:	2300      	movs	r3, #0
 80037a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80037aa:	2300      	movs	r3, #0
 80037ac:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037ae:	2300      	movs	r3, #0
 80037b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037b6:	4619      	mov	r1, r3
 80037b8:	4837      	ldr	r0, [pc, #220]	; (8003898 <MX_TIM1_Init+0x19c>)
 80037ba:	f004 ff19 	bl	80085f0 <HAL_TIMEx_MasterConfigSynchronization>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80037c4:	f7ff fcb4 	bl	8003130 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037c8:	2360      	movs	r3, #96	; 0x60
 80037ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037d0:	2300      	movs	r3, #0
 80037d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037d4:	2300      	movs	r3, #0
 80037d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037d8:	2300      	movs	r3, #0
 80037da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037dc:	2300      	movs	r3, #0
 80037de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037e0:	2300      	movs	r3, #0
 80037e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037e8:	2200      	movs	r2, #0
 80037ea:	4619      	mov	r1, r3
 80037ec:	482a      	ldr	r0, [pc, #168]	; (8003898 <MX_TIM1_Init+0x19c>)
 80037ee:	f004 f97d 	bl	8007aec <HAL_TIM_PWM_ConfigChannel>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80037f8:	f7ff fc9a 	bl	8003130 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003800:	2204      	movs	r2, #4
 8003802:	4619      	mov	r1, r3
 8003804:	4824      	ldr	r0, [pc, #144]	; (8003898 <MX_TIM1_Init+0x19c>)
 8003806:	f004 f971 	bl	8007aec <HAL_TIM_PWM_ConfigChannel>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8003810:	f7ff fc8e 	bl	8003130 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003814:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003818:	2208      	movs	r2, #8
 800381a:	4619      	mov	r1, r3
 800381c:	481e      	ldr	r0, [pc, #120]	; (8003898 <MX_TIM1_Init+0x19c>)
 800381e:	f004 f965 	bl	8007aec <HAL_TIM_PWM_ConfigChannel>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8003828:	f7ff fc82 	bl	8003130 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800382c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003830:	220c      	movs	r2, #12
 8003832:	4619      	mov	r1, r3
 8003834:	4818      	ldr	r0, [pc, #96]	; (8003898 <MX_TIM1_Init+0x19c>)
 8003836:	f004 f959 	bl	8007aec <HAL_TIM_PWM_ConfigChannel>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8003840:	f7ff fc76 	bl	8003130 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003844:	2300      	movs	r3, #0
 8003846:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003848:	2300      	movs	r3, #0
 800384a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800385c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800385e:	2300      	movs	r3, #0
 8003860:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003862:	2300      	movs	r3, #0
 8003864:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003870:	2300      	movs	r3, #0
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003874:	1d3b      	adds	r3, r7, #4
 8003876:	4619      	mov	r1, r3
 8003878:	4807      	ldr	r0, [pc, #28]	; (8003898 <MX_TIM1_Init+0x19c>)
 800387a:	f004 ff1f 	bl	80086bc <HAL_TIMEx_ConfigBreakDeadTime>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8003884:	f7ff fc54 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003888:	4803      	ldr	r0, [pc, #12]	; (8003898 <MX_TIM1_Init+0x19c>)
 800388a:	f000 f871 	bl	8003970 <HAL_TIM_MspPostInit>

}
 800388e:	bf00      	nop
 8003890:	3768      	adds	r7, #104	; 0x68
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	2000031c 	.word	0x2000031c
 800389c:	40012c00 	.word	0x40012c00

080038a0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80038a4:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <MX_TIM16_Init+0x44>)
 80038a6:	4a10      	ldr	r2, [pc, #64]	; (80038e8 <MX_TIM16_Init+0x48>)
 80038a8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <MX_TIM16_Init+0x44>)
 80038ac:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80038b0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b2:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <MX_TIM16_Init+0x44>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100-1;
 80038b8:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <MX_TIM16_Init+0x44>)
 80038ba:	2263      	movs	r2, #99	; 0x63
 80038bc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <MX_TIM16_Init+0x44>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80038c4:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <MX_TIM16_Init+0x44>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038ca:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <MX_TIM16_Init+0x44>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80038d0:	4804      	ldr	r0, [pc, #16]	; (80038e4 <MX_TIM16_Init+0x44>)
 80038d2:	f003 fedf 	bl	8007694 <HAL_TIM_Base_Init>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80038dc:	f7ff fc28 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80038e0:	bf00      	nop
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20000368 	.word	0x20000368
 80038e8:	40014400 	.word	0x40014400

080038ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1a      	ldr	r2, [pc, #104]	; (8003964 <HAL_TIM_Base_MspInit+0x78>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d114      	bne.n	8003928 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038fe:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <HAL_TIM_Base_MspInit+0x7c>)
 8003900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003902:	4a19      	ldr	r2, [pc, #100]	; (8003968 <HAL_TIM_Base_MspInit+0x7c>)
 8003904:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003908:	6613      	str	r3, [r2, #96]	; 0x60
 800390a:	4b17      	ldr	r3, [pc, #92]	; (8003968 <HAL_TIM_Base_MspInit+0x7c>)
 800390c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003916:	2200      	movs	r2, #0
 8003918:	2100      	movs	r1, #0
 800391a:	2019      	movs	r0, #25
 800391c:	f000 f9fd 	bl	8003d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003920:	2019      	movs	r0, #25
 8003922:	f000 fa16 	bl	8003d52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8003926:	e018      	b.n	800395a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM16)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a0f      	ldr	r2, [pc, #60]	; (800396c <HAL_TIM_Base_MspInit+0x80>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d113      	bne.n	800395a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003932:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <HAL_TIM_Base_MspInit+0x7c>)
 8003934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003936:	4a0c      	ldr	r2, [pc, #48]	; (8003968 <HAL_TIM_Base_MspInit+0x7c>)
 8003938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800393c:	6613      	str	r3, [r2, #96]	; 0x60
 800393e:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <HAL_TIM_Base_MspInit+0x7c>)
 8003940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800394a:	2200      	movs	r2, #0
 800394c:	2100      	movs	r1, #0
 800394e:	2019      	movs	r0, #25
 8003950:	f000 f9e3 	bl	8003d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003954:	2019      	movs	r0, #25
 8003956:	f000 f9fc 	bl	8003d52 <HAL_NVIC_EnableIRQ>
}
 800395a:	bf00      	nop
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40012c00 	.word	0x40012c00
 8003968:	40021000 	.word	0x40021000
 800396c:	40014400 	.word	0x40014400

08003970 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003978:	f107 030c 	add.w	r3, r7, #12
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	60da      	str	r2, [r3, #12]
 8003986:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a12      	ldr	r2, [pc, #72]	; (80039d8 <HAL_TIM_MspPostInit+0x68>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d11d      	bne.n	80039ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003992:	4b12      	ldr	r3, [pc, #72]	; (80039dc <HAL_TIM_MspPostInit+0x6c>)
 8003994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003996:	4a11      	ldr	r2, [pc, #68]	; (80039dc <HAL_TIM_MspPostInit+0x6c>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800399e:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <HAL_TIM_MspPostInit+0x6c>)
 80039a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80039aa:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80039ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b0:	2302      	movs	r3, #2
 80039b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80039bc:	2301      	movs	r3, #1
 80039be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c0:	f107 030c 	add.w	r3, r7, #12
 80039c4:	4619      	mov	r1, r3
 80039c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039ca:	f000 fbd5 	bl	8004178 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80039ce:	bf00      	nop
 80039d0:	3720      	adds	r7, #32
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40012c00 	.word	0x40012c00
 80039dc:	40021000 	.word	0x40021000

080039e0 <Reset_Handler>:
 80039e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a18 <LoopForever+0x2>
 80039e4:	f7ff fe78 	bl	80036d8 <SystemInit>
 80039e8:	480c      	ldr	r0, [pc, #48]	; (8003a1c <LoopForever+0x6>)
 80039ea:	490d      	ldr	r1, [pc, #52]	; (8003a20 <LoopForever+0xa>)
 80039ec:	4a0d      	ldr	r2, [pc, #52]	; (8003a24 <LoopForever+0xe>)
 80039ee:	2300      	movs	r3, #0
 80039f0:	e002      	b.n	80039f8 <LoopCopyDataInit>

080039f2 <CopyDataInit>:
 80039f2:	58d4      	ldr	r4, [r2, r3]
 80039f4:	50c4      	str	r4, [r0, r3]
 80039f6:	3304      	adds	r3, #4

080039f8 <LoopCopyDataInit>:
 80039f8:	18c4      	adds	r4, r0, r3
 80039fa:	428c      	cmp	r4, r1
 80039fc:	d3f9      	bcc.n	80039f2 <CopyDataInit>
 80039fe:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <LoopForever+0x12>)
 8003a00:	4c0a      	ldr	r4, [pc, #40]	; (8003a2c <LoopForever+0x16>)
 8003a02:	2300      	movs	r3, #0
 8003a04:	e001      	b.n	8003a0a <LoopFillZerobss>

08003a06 <FillZerobss>:
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	3204      	adds	r2, #4

08003a0a <LoopFillZerobss>:
 8003a0a:	42a2      	cmp	r2, r4
 8003a0c:	d3fb      	bcc.n	8003a06 <FillZerobss>
 8003a0e:	f004 fef1 	bl	80087f4 <__libc_init_array>
 8003a12:	f7ff fae9 	bl	8002fe8 <main>

08003a16 <LoopForever>:
 8003a16:	e7fe      	b.n	8003a16 <LoopForever>
 8003a18:	20010000 	.word	0x20010000
 8003a1c:	20000000 	.word	0x20000000
 8003a20:	20000070 	.word	0x20000070
 8003a24:	08009758 	.word	0x08009758
 8003a28:	20000070 	.word	0x20000070
 8003a2c:	200003b8 	.word	0x200003b8

08003a30 <ADC1_IRQHandler>:
 8003a30:	e7fe      	b.n	8003a30 <ADC1_IRQHandler>

08003a32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a3c:	2003      	movs	r0, #3
 8003a3e:	f000 f961 	bl	8003d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a42:	2000      	movs	r0, #0
 8003a44:	f000 f80e 	bl	8003a64 <HAL_InitTick>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	71fb      	strb	r3, [r7, #7]
 8003a52:	e001      	b.n	8003a58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a54:	f7ff fca4 	bl	80033a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a58:	79fb      	ldrb	r3, [r7, #7]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003a70:	4b17      	ldr	r3, [pc, #92]	; (8003ad0 <HAL_InitTick+0x6c>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d023      	beq.n	8003ac0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003a78:	4b16      	ldr	r3, [pc, #88]	; (8003ad4 <HAL_InitTick+0x70>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	4b14      	ldr	r3, [pc, #80]	; (8003ad0 <HAL_InitTick+0x6c>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	4619      	mov	r1, r3
 8003a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f96d 	bl	8003d6e <HAL_SYSTICK_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10f      	bne.n	8003aba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b0f      	cmp	r3, #15
 8003a9e:	d809      	bhi.n	8003ab4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003aa8:	f000 f937 	bl	8003d1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003aac:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <HAL_InitTick+0x74>)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e007      	b.n	8003ac4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
 8003ab8:	e004      	b.n	8003ac4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
 8003abe:	e001      	b.n	8003ac4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20000008 	.word	0x20000008
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	20000004 	.word	0x20000004

08003adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ae0:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_IncTick+0x20>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <HAL_IncTick+0x24>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4413      	add	r3, r2
 8003aec:	4a04      	ldr	r2, [pc, #16]	; (8003b00 <HAL_IncTick+0x24>)
 8003aee:	6013      	str	r3, [r2, #0]
}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	20000008 	.word	0x20000008
 8003b00:	200003b4 	.word	0x200003b4

08003b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  return uwTick;
 8003b08:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <HAL_GetTick+0x14>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	200003b4 	.word	0x200003b4

08003b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b24:	f7ff ffee 	bl	8003b04 <HAL_GetTick>
 8003b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b34:	d005      	beq.n	8003b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003b36:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <HAL_Delay+0x44>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4413      	add	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b42:	bf00      	nop
 8003b44:	f7ff ffde 	bl	8003b04 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d8f7      	bhi.n	8003b44 <HAL_Delay+0x28>
  {
  }
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000008 	.word	0x20000008

08003b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b74:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b80:	4013      	ands	r3, r2
 8003b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b96:	4a04      	ldr	r2, [pc, #16]	; (8003ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	60d3      	str	r3, [r2, #12]
}
 8003b9c:	bf00      	nop
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	e000ed00 	.word	0xe000ed00

08003bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bb0:	4b04      	ldr	r3, [pc, #16]	; (8003bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	0a1b      	lsrs	r3, r3, #8
 8003bb6:	f003 0307 	and.w	r3, r3, #7
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	e000ed00 	.word	0xe000ed00

08003bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	db0b      	blt.n	8003bf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	f003 021f 	and.w	r2, r3, #31
 8003be0:	4907      	ldr	r1, [pc, #28]	; (8003c00 <__NVIC_EnableIRQ+0x38>)
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	2001      	movs	r0, #1
 8003bea:	fa00 f202 	lsl.w	r2, r0, r2
 8003bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	e000e100 	.word	0xe000e100

08003c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	6039      	str	r1, [r7, #0]
 8003c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	db0a      	blt.n	8003c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	490c      	ldr	r1, [pc, #48]	; (8003c50 <__NVIC_SetPriority+0x4c>)
 8003c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c22:	0112      	lsls	r2, r2, #4
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	440b      	add	r3, r1
 8003c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c2c:	e00a      	b.n	8003c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	4908      	ldr	r1, [pc, #32]	; (8003c54 <__NVIC_SetPriority+0x50>)
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	3b04      	subs	r3, #4
 8003c3c:	0112      	lsls	r2, r2, #4
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	440b      	add	r3, r1
 8003c42:	761a      	strb	r2, [r3, #24]
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	e000e100 	.word	0xe000e100
 8003c54:	e000ed00 	.word	0xe000ed00

08003c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b089      	sub	sp, #36	; 0x24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f1c3 0307 	rsb	r3, r3, #7
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	bf28      	it	cs
 8003c76:	2304      	movcs	r3, #4
 8003c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	2b06      	cmp	r3, #6
 8003c80:	d902      	bls.n	8003c88 <NVIC_EncodePriority+0x30>
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	3b03      	subs	r3, #3
 8003c86:	e000      	b.n	8003c8a <NVIC_EncodePriority+0x32>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43da      	mvns	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	401a      	ands	r2, r3
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ca0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8003caa:	43d9      	mvns	r1, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb0:	4313      	orrs	r3, r2
         );
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3724      	adds	r7, #36	; 0x24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cd0:	d301      	bcc.n	8003cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e00f      	b.n	8003cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cd6:	4a0a      	ldr	r2, [pc, #40]	; (8003d00 <SysTick_Config+0x40>)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cde:	210f      	movs	r1, #15
 8003ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ce4:	f7ff ff8e 	bl	8003c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ce8:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <SysTick_Config+0x40>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cee:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <SysTick_Config+0x40>)
 8003cf0:	2207      	movs	r2, #7
 8003cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	e000e010 	.word	0xe000e010

08003d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff ff29 	bl	8003b64 <__NVIC_SetPriorityGrouping>
}
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b086      	sub	sp, #24
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	4603      	mov	r3, r0
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d2c:	f7ff ff3e 	bl	8003bac <__NVIC_GetPriorityGrouping>
 8003d30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	6978      	ldr	r0, [r7, #20]
 8003d38:	f7ff ff8e 	bl	8003c58 <NVIC_EncodePriority>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff ff5d 	bl	8003c04 <__NVIC_SetPriority>
}
 8003d4a:	bf00      	nop
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b082      	sub	sp, #8
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	4603      	mov	r3, r0
 8003d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff ff31 	bl	8003bc8 <__NVIC_EnableIRQ>
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7ff ffa2 	bl	8003cc0 <SysTick_Config>
 8003d7c:	4603      	mov	r3, r0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e098      	b.n	8003ecc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4b4d      	ldr	r3, [pc, #308]	; (8003ed8 <HAL_DMA_Init+0x150>)
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d80f      	bhi.n	8003dc6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	4b4b      	ldr	r3, [pc, #300]	; (8003edc <HAL_DMA_Init+0x154>)
 8003dae:	4413      	add	r3, r2
 8003db0:	4a4b      	ldr	r2, [pc, #300]	; (8003ee0 <HAL_DMA_Init+0x158>)
 8003db2:	fba2 2303 	umull	r2, r3, r2, r3
 8003db6:	091b      	lsrs	r3, r3, #4
 8003db8:	009a      	lsls	r2, r3, #2
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a48      	ldr	r2, [pc, #288]	; (8003ee4 <HAL_DMA_Init+0x15c>)
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40
 8003dc4:	e00e      	b.n	8003de4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	4b46      	ldr	r3, [pc, #280]	; (8003ee8 <HAL_DMA_Init+0x160>)
 8003dce:	4413      	add	r3, r2
 8003dd0:	4a43      	ldr	r2, [pc, #268]	; (8003ee0 <HAL_DMA_Init+0x158>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	091b      	lsrs	r3, r3, #4
 8003dd8:	009a      	lsls	r2, r3, #2
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a42      	ldr	r2, [pc, #264]	; (8003eec <HAL_DMA_Init+0x164>)
 8003de2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e3e:	d039      	beq.n	8003eb4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	4a27      	ldr	r2, [pc, #156]	; (8003ee4 <HAL_DMA_Init+0x15c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d11a      	bne.n	8003e80 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003e4a:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <HAL_DMA_Init+0x168>)
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	f003 031c 	and.w	r3, r3, #28
 8003e56:	210f      	movs	r1, #15
 8003e58:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	4924      	ldr	r1, [pc, #144]	; (8003ef0 <HAL_DMA_Init+0x168>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003e64:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <HAL_DMA_Init+0x168>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e70:	f003 031c 	and.w	r3, r3, #28
 8003e74:	fa01 f303 	lsl.w	r3, r1, r3
 8003e78:	491d      	ldr	r1, [pc, #116]	; (8003ef0 <HAL_DMA_Init+0x168>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]
 8003e7e:	e019      	b.n	8003eb4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003e80:	4b1c      	ldr	r3, [pc, #112]	; (8003ef4 <HAL_DMA_Init+0x16c>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e88:	f003 031c 	and.w	r3, r3, #28
 8003e8c:	210f      	movs	r1, #15
 8003e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e92:	43db      	mvns	r3, r3
 8003e94:	4917      	ldr	r1, [pc, #92]	; (8003ef4 <HAL_DMA_Init+0x16c>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003e9a:	4b16      	ldr	r3, [pc, #88]	; (8003ef4 <HAL_DMA_Init+0x16c>)
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6859      	ldr	r1, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	f003 031c 	and.w	r3, r3, #28
 8003eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003eae:	4911      	ldr	r1, [pc, #68]	; (8003ef4 <HAL_DMA_Init+0x16c>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	40020407 	.word	0x40020407
 8003edc:	bffdfff8 	.word	0xbffdfff8
 8003ee0:	cccccccd 	.word	0xcccccccd
 8003ee4:	40020000 	.word	0x40020000
 8003ee8:	bffdfbf8 	.word	0xbffdfbf8
 8003eec:	40020400 	.word	0x40020400
 8003ef0:	400200a8 	.word	0x400200a8
 8003ef4:	400204a8 	.word	0x400204a8

08003ef8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_DMA_Start_IT+0x20>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e04b      	b.n	8003fb0 <HAL_DMA_Start_IT+0xb8>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d13a      	bne.n	8003fa2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0201 	bic.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f8e0 	bl	8004116 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d008      	beq.n	8003f70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f042 020e 	orr.w	r2, r2, #14
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	e00f      	b.n	8003f90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0204 	bic.w	r2, r2, #4
 8003f7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 020a 	orr.w	r2, r2, #10
 8003f8e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	e005      	b.n	8003fae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003faa:	2302      	movs	r3, #2
 8003fac:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd4:	f003 031c 	and.w	r3, r3, #28
 8003fd8:	2204      	movs	r2, #4
 8003fda:	409a      	lsls	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d026      	beq.n	8004032 <HAL_DMA_IRQHandler+0x7a>
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d021      	beq.n	8004032 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0320 	and.w	r3, r3, #32
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d107      	bne.n	800400c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0204 	bic.w	r2, r2, #4
 800400a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004010:	f003 021c 	and.w	r2, r3, #28
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	2104      	movs	r1, #4
 800401a:	fa01 f202 	lsl.w	r2, r1, r2
 800401e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004024:	2b00      	cmp	r3, #0
 8004026:	d071      	beq.n	800410c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004030:	e06c      	b.n	800410c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	f003 031c 	and.w	r3, r3, #28
 800403a:	2202      	movs	r2, #2
 800403c:	409a      	lsls	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4013      	ands	r3, r2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d02e      	beq.n	80040a4 <HAL_DMA_IRQHandler+0xec>
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d029      	beq.n	80040a4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10b      	bne.n	8004076 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 020a 	bic.w	r2, r2, #10
 800406c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	f003 021c 	and.w	r2, r3, #28
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	2102      	movs	r1, #2
 8004084:	fa01 f202 	lsl.w	r2, r1, r2
 8004088:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d038      	beq.n	800410c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80040a2:	e033      	b.n	800410c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	f003 031c 	and.w	r3, r3, #28
 80040ac:	2208      	movs	r2, #8
 80040ae:	409a      	lsls	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d02a      	beq.n	800410e <HAL_DMA_IRQHandler+0x156>
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d025      	beq.n	800410e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 020e 	bic.w	r2, r2, #14
 80040d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	f003 021c 	and.w	r2, r3, #28
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	2101      	movs	r1, #1
 80040e0:	fa01 f202 	lsl.w	r2, r1, r2
 80040e4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004100:	2b00      	cmp	r3, #0
 8004102:	d004      	beq.n	800410e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800410c:	bf00      	nop
 800410e:	bf00      	nop
}
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004116:	b480      	push	{r7}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
 8004122:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004128:	f003 021c 	and.w	r2, r3, #28
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	2101      	movs	r1, #1
 8004132:	fa01 f202 	lsl.w	r2, r1, r2
 8004136:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2b10      	cmp	r3, #16
 8004146:	d108      	bne.n	800415a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004158:	e007      	b.n	800416a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	60da      	str	r2, [r3, #12]
}
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
	...

08004178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004182:	2300      	movs	r3, #0
 8004184:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004186:	e148      	b.n	800441a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	2101      	movs	r1, #1
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	fa01 f303 	lsl.w	r3, r1, r3
 8004194:	4013      	ands	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 813a 	beq.w	8004414 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d005      	beq.n	80041b8 <HAL_GPIO_Init+0x40>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d130      	bne.n	800421a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	2203      	movs	r2, #3
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	43db      	mvns	r3, r3
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4013      	ands	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041ee:	2201      	movs	r2, #1
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4013      	ands	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	091b      	lsrs	r3, r3, #4
 8004204:	f003 0201 	and.w	r2, r3, #1
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b03      	cmp	r3, #3
 8004224:	d017      	beq.n	8004256 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	2203      	movs	r2, #3
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43db      	mvns	r3, r3
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4013      	ands	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d123      	bne.n	80042aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	08da      	lsrs	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3208      	adds	r2, #8
 800426a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800426e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	220f      	movs	r2, #15
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43db      	mvns	r3, r3
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4013      	ands	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	08da      	lsrs	r2, r3, #3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3208      	adds	r2, #8
 80042a4:	6939      	ldr	r1, [r7, #16]
 80042a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	2203      	movs	r2, #3
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	43db      	mvns	r3, r3
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4013      	ands	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 0203 	and.w	r2, r3, #3
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 8094 	beq.w	8004414 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ec:	4b52      	ldr	r3, [pc, #328]	; (8004438 <HAL_GPIO_Init+0x2c0>)
 80042ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f0:	4a51      	ldr	r2, [pc, #324]	; (8004438 <HAL_GPIO_Init+0x2c0>)
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	6613      	str	r3, [r2, #96]	; 0x60
 80042f8:	4b4f      	ldr	r3, [pc, #316]	; (8004438 <HAL_GPIO_Init+0x2c0>)
 80042fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004304:	4a4d      	ldr	r2, [pc, #308]	; (800443c <HAL_GPIO_Init+0x2c4>)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	089b      	lsrs	r3, r3, #2
 800430a:	3302      	adds	r3, #2
 800430c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004310:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	220f      	movs	r2, #15
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4013      	ands	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800432e:	d00d      	beq.n	800434c <HAL_GPIO_Init+0x1d4>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a43      	ldr	r2, [pc, #268]	; (8004440 <HAL_GPIO_Init+0x2c8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d007      	beq.n	8004348 <HAL_GPIO_Init+0x1d0>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a42      	ldr	r2, [pc, #264]	; (8004444 <HAL_GPIO_Init+0x2cc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d101      	bne.n	8004344 <HAL_GPIO_Init+0x1cc>
 8004340:	2302      	movs	r3, #2
 8004342:	e004      	b.n	800434e <HAL_GPIO_Init+0x1d6>
 8004344:	2307      	movs	r3, #7
 8004346:	e002      	b.n	800434e <HAL_GPIO_Init+0x1d6>
 8004348:	2301      	movs	r3, #1
 800434a:	e000      	b.n	800434e <HAL_GPIO_Init+0x1d6>
 800434c:	2300      	movs	r3, #0
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	f002 0203 	and.w	r2, r2, #3
 8004354:	0092      	lsls	r2, r2, #2
 8004356:	4093      	lsls	r3, r2
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800435e:	4937      	ldr	r1, [pc, #220]	; (800443c <HAL_GPIO_Init+0x2c4>)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	089b      	lsrs	r3, r3, #2
 8004364:	3302      	adds	r3, #2
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800436c:	4b36      	ldr	r3, [pc, #216]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	43db      	mvns	r3, r3
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4013      	ands	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004390:	4a2d      	ldr	r2, [pc, #180]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004396:	4b2c      	ldr	r3, [pc, #176]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	43db      	mvns	r3, r3
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4013      	ands	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043ba:	4a23      	ldr	r2, [pc, #140]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80043c0:	4b21      	ldr	r3, [pc, #132]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	43db      	mvns	r3, r3
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4013      	ands	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043e4:	4a18      	ldr	r2, [pc, #96]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80043ea:	4b17      	ldr	r3, [pc, #92]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	43db      	mvns	r3, r3
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4013      	ands	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800440e:	4a0e      	ldr	r2, [pc, #56]	; (8004448 <HAL_GPIO_Init+0x2d0>)
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	3301      	adds	r3, #1
 8004418:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	f47f aeaf 	bne.w	8004188 <HAL_GPIO_Init+0x10>
  }
}
 800442a:	bf00      	nop
 800442c:	bf00      	nop
 800442e:	371c      	adds	r7, #28
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	40021000 	.word	0x40021000
 800443c:	40010000 	.word	0x40010000
 8004440:	48000400 	.word	0x48000400
 8004444:	48000800 	.word	0x48000800
 8004448:	40010400 	.word	0x40010400

0800444c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	807b      	strh	r3, [r7, #2]
 8004458:	4613      	mov	r3, r2
 800445a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800445c:	787b      	ldrb	r3, [r7, #1]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004462:	887a      	ldrh	r2, [r7, #2]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004468:	e002      	b.n	8004470 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800446a:	887a      	ldrh	r2, [r7, #2]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	4013      	ands	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d006      	beq.n	80044a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004492:	4a05      	ldr	r2, [pc, #20]	; (80044a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004494:	88fb      	ldrh	r3, [r7, #6]
 8004496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe fe22 	bl	80030e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40010400 	.word	0x40010400

080044ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e081      	b.n	80045c2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fe fcce 	bl	8002e74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2224      	movs	r2, #36	; 0x24
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0201 	bic.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800450c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d107      	bne.n	8004526 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004522:	609a      	str	r2, [r3, #8]
 8004524:	e006      	b.n	8004534 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004532:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d104      	bne.n	8004546 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004544:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004558:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004568:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69d9      	ldr	r1, [r3, #28]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1a      	ldr	r2, [r3, #32]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	4608      	mov	r0, r1
 80045d6:	4611      	mov	r1, r2
 80045d8:	461a      	mov	r2, r3
 80045da:	4603      	mov	r3, r0
 80045dc:	817b      	strh	r3, [r7, #10]
 80045de:	460b      	mov	r3, r1
 80045e0:	813b      	strh	r3, [r7, #8]
 80045e2:	4613      	mov	r3, r2
 80045e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	f040 80f9 	bne.w	80047e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <HAL_I2C_Mem_Write+0x34>
 80045fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d105      	bne.n	800460c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004606:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e0ed      	b.n	80047e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_I2C_Mem_Write+0x4e>
 8004616:	2302      	movs	r3, #2
 8004618:	e0e6      	b.n	80047e8 <HAL_I2C_Mem_Write+0x21c>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004622:	f7ff fa6f 	bl	8003b04 <HAL_GetTick>
 8004626:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	2319      	movs	r3, #25
 800462e:	2201      	movs	r2, #1
 8004630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 fbcb 	bl	8004dd0 <I2C_WaitOnFlagUntilTimeout>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0d1      	b.n	80047e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2221      	movs	r2, #33	; 0x21
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2240      	movs	r2, #64	; 0x40
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a3a      	ldr	r2, [r7, #32]
 800465e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004664:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800466c:	88f8      	ldrh	r0, [r7, #6]
 800466e:	893a      	ldrh	r2, [r7, #8]
 8004670:	8979      	ldrh	r1, [r7, #10]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	9301      	str	r3, [sp, #4]
 8004676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	4603      	mov	r3, r0
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 fadb 	bl	8004c38 <I2C_RequestMemoryWrite>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e0a9      	b.n	80047e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	2bff      	cmp	r3, #255	; 0xff
 800469c:	d90e      	bls.n	80046bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	22ff      	movs	r2, #255	; 0xff
 80046a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	8979      	ldrh	r1, [r7, #10]
 80046ac:	2300      	movs	r3, #0
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 fd33 	bl	8005120 <I2C_TransferConfig>
 80046ba:	e00f      	b.n	80046dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	8979      	ldrh	r1, [r7, #10]
 80046ce:	2300      	movs	r3, #0
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 fd22 	bl	8005120 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 fbb5 	bl	8004e50 <I2C_WaitOnTXISFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e07b      	b.n	80047e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	781a      	ldrb	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d034      	beq.n	8004794 <HAL_I2C_Mem_Write+0x1c8>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472e:	2b00      	cmp	r3, #0
 8004730:	d130      	bne.n	8004794 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004738:	2200      	movs	r2, #0
 800473a:	2180      	movs	r1, #128	; 0x80
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fb47 	bl	8004dd0 <I2C_WaitOnFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e04d      	b.n	80047e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	2bff      	cmp	r3, #255	; 0xff
 8004754:	d90e      	bls.n	8004774 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	22ff      	movs	r2, #255	; 0xff
 800475a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004760:	b2da      	uxtb	r2, r3
 8004762:	8979      	ldrh	r1, [r7, #10]
 8004764:	2300      	movs	r3, #0
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 fcd7 	bl	8005120 <I2C_TransferConfig>
 8004772:	e00f      	b.n	8004794 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004782:	b2da      	uxtb	r2, r3
 8004784:	8979      	ldrh	r1, [r7, #10]
 8004786:	2300      	movs	r3, #0
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 fcc6 	bl	8005120 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d19e      	bne.n	80046dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 fb94 	bl	8004ed0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e01a      	b.n	80047e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2220      	movs	r2, #32
 80047b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6859      	ldr	r1, [r3, #4]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <HAL_I2C_Mem_Write+0x224>)
 80047c6:	400b      	ands	r3, r1
 80047c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	e000      	b.n	80047e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80047e6:	2302      	movs	r3, #2
  }
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	fe00e800 	.word	0xfe00e800

080047f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	4608      	mov	r0, r1
 80047fe:	4611      	mov	r1, r2
 8004800:	461a      	mov	r2, r3
 8004802:	4603      	mov	r3, r0
 8004804:	817b      	strh	r3, [r7, #10]
 8004806:	460b      	mov	r3, r1
 8004808:	813b      	strh	r3, [r7, #8]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b20      	cmp	r3, #32
 8004818:	f040 80fd 	bne.w	8004a16 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <HAL_I2C_Mem_Read+0x34>
 8004822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004824:	2b00      	cmp	r3, #0
 8004826:	d105      	bne.n	8004834 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800482e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0f1      	b.n	8004a18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_I2C_Mem_Read+0x4e>
 800483e:	2302      	movs	r3, #2
 8004840:	e0ea      	b.n	8004a18 <HAL_I2C_Mem_Read+0x224>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800484a:	f7ff f95b 	bl	8003b04 <HAL_GetTick>
 800484e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	2319      	movs	r3, #25
 8004856:	2201      	movs	r2, #1
 8004858:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 fab7 	bl	8004dd0 <I2C_WaitOnFlagUntilTimeout>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e0d5      	b.n	8004a18 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2222      	movs	r2, #34	; 0x22
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2240      	movs	r2, #64	; 0x40
 8004878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a3a      	ldr	r2, [r7, #32]
 8004886:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800488c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004894:	88f8      	ldrh	r0, [r7, #6]
 8004896:	893a      	ldrh	r2, [r7, #8]
 8004898:	8979      	ldrh	r1, [r7, #10]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	4603      	mov	r3, r0
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 fa1b 	bl	8004ce0 <I2C_RequestMemoryRead>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0ad      	b.n	8004a18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2bff      	cmp	r3, #255	; 0xff
 80048c4:	d90e      	bls.n	80048e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	22ff      	movs	r2, #255	; 0xff
 80048ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	8979      	ldrh	r1, [r7, #10]
 80048d4:	4b52      	ldr	r3, [pc, #328]	; (8004a20 <HAL_I2C_Mem_Read+0x22c>)
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 fc1f 	bl	8005120 <I2C_TransferConfig>
 80048e2:	e00f      	b.n	8004904 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	8979      	ldrh	r1, [r7, #10]
 80048f6:	4b4a      	ldr	r3, [pc, #296]	; (8004a20 <HAL_I2C_Mem_Read+0x22c>)
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 fc0e 	bl	8005120 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	2200      	movs	r2, #0
 800490c:	2104      	movs	r1, #4
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 fa5e 	bl	8004dd0 <I2C_WaitOnFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e07c      	b.n	8004a18 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493a:	3b01      	subs	r3, #1
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d034      	beq.n	80049c4 <HAL_I2C_Mem_Read+0x1d0>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495e:	2b00      	cmp	r3, #0
 8004960:	d130      	bne.n	80049c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	2200      	movs	r2, #0
 800496a:	2180      	movs	r1, #128	; 0x80
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 fa2f 	bl	8004dd0 <I2C_WaitOnFlagUntilTimeout>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e04d      	b.n	8004a18 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004980:	b29b      	uxth	r3, r3
 8004982:	2bff      	cmp	r3, #255	; 0xff
 8004984:	d90e      	bls.n	80049a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	22ff      	movs	r2, #255	; 0xff
 800498a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004990:	b2da      	uxtb	r2, r3
 8004992:	8979      	ldrh	r1, [r7, #10]
 8004994:	2300      	movs	r3, #0
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 fbbf 	bl	8005120 <I2C_TransferConfig>
 80049a2:	e00f      	b.n	80049c4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	8979      	ldrh	r1, [r7, #10]
 80049b6:	2300      	movs	r3, #0
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 fbae 	bl	8005120 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d19a      	bne.n	8004904 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 fa7c 	bl	8004ed0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e01a      	b.n	8004a18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2220      	movs	r2, #32
 80049e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6859      	ldr	r1, [r3, #4]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <HAL_I2C_Mem_Read+0x230>)
 80049f6:	400b      	ands	r3, r1
 80049f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	e000      	b.n	8004a18 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004a16:	2302      	movs	r3, #2
  }
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	80002400 	.word	0x80002400
 8004a24:	fe00e800 	.word	0xfe00e800

08004a28 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08a      	sub	sp, #40	; 0x28
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	607a      	str	r2, [r7, #4]
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	460b      	mov	r3, r1
 8004a36:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	f040 80f1 	bne.w	8004c2c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a58:	d101      	bne.n	8004a5e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e0e7      	b.n	8004c2e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_I2C_IsDeviceReady+0x44>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e0e0      	b.n	8004c2e <HAL_I2C_IsDeviceReady+0x206>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2224      	movs	r2, #36	; 0x24
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d107      	bne.n	8004a9a <HAL_I2C_IsDeviceReady+0x72>
 8004a8a:	897b      	ldrh	r3, [r7, #10]
 8004a8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a98:	e004      	b.n	8004aa4 <HAL_I2C_IsDeviceReady+0x7c>
 8004a9a:	897b      	ldrh	r3, [r7, #10]
 8004a9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aa0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	6812      	ldr	r2, [r2, #0]
 8004aa8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004aaa:	f7ff f82b 	bl	8003b04 <HAL_GetTick>
 8004aae:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	bf0c      	ite	eq
 8004abe:	2301      	moveq	r3, #1
 8004ac0:	2300      	movne	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b10      	cmp	r3, #16
 8004ad2:	bf0c      	ite	eq
 8004ad4:	2301      	moveq	r3, #1
 8004ad6:	2300      	movne	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004adc:	e034      	b.n	8004b48 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ae4:	d01a      	beq.n	8004b1c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ae6:	f7ff f80d 	bl	8003b04 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d302      	bcc.n	8004afc <HAL_I2C_IsDeviceReady+0xd4>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10f      	bne.n	8004b1c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b08:	f043 0220 	orr.w	r2, r3, #32
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e088      	b.n	8004c2e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	bf0c      	ite	eq
 8004b2a:	2301      	moveq	r3, #1
 8004b2c:	2300      	movne	r3, #0
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b10      	cmp	r3, #16
 8004b3e:	bf0c      	ite	eq
 8004b40:	2301      	moveq	r3, #1
 8004b42:	2300      	movne	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004b48:	7ffb      	ldrb	r3, [r7, #31]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d102      	bne.n	8004b54 <HAL_I2C_IsDeviceReady+0x12c>
 8004b4e:	7fbb      	ldrb	r3, [r7, #30]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0c4      	beq.n	8004ade <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	2b10      	cmp	r3, #16
 8004b60:	d01a      	beq.n	8004b98 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2120      	movs	r1, #32
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f92f 	bl	8004dd0 <I2C_WaitOnFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e058      	b.n	8004c2e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2220      	movs	r2, #32
 8004b82:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	e04a      	b.n	8004c2e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2120      	movs	r1, #32
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 f914 	bl	8004dd0 <I2C_WaitOnFlagUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e03d      	b.n	8004c2e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2210      	movs	r2, #16
 8004bb8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d118      	bne.n	8004bfc <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bd8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2200      	movs	r2, #0
 8004be2:	2120      	movs	r1, #32
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f8f3 	bl	8004dd0 <I2C_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e01c      	b.n	8004c2e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	f63f af3b 	bhi.w	8004a82 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c18:	f043 0220 	orr.w	r2, r3, #32
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004c2c:	2302      	movs	r3, #2
  }
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3720      	adds	r7, #32
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	4608      	mov	r0, r1
 8004c42:	4611      	mov	r1, r2
 8004c44:	461a      	mov	r2, r3
 8004c46:	4603      	mov	r3, r0
 8004c48:	817b      	strh	r3, [r7, #10]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	813b      	strh	r3, [r7, #8]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	8979      	ldrh	r1, [r7, #10]
 8004c58:	4b20      	ldr	r3, [pc, #128]	; (8004cdc <I2C_RequestMemoryWrite+0xa4>)
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 fa5d 	bl	8005120 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c66:	69fa      	ldr	r2, [r7, #28]
 8004c68:	69b9      	ldr	r1, [r7, #24]
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 f8f0 	bl	8004e50 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e02c      	b.n	8004cd4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d105      	bne.n	8004c8c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c80:	893b      	ldrh	r3, [r7, #8]
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	629a      	str	r2, [r3, #40]	; 0x28
 8004c8a:	e015      	b.n	8004cb8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c8c:	893b      	ldrh	r3, [r7, #8]
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9a:	69fa      	ldr	r2, [r7, #28]
 8004c9c:	69b9      	ldr	r1, [r7, #24]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f8d6 	bl	8004e50 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e012      	b.n	8004cd4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cae:	893b      	ldrh	r3, [r7, #8]
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2180      	movs	r1, #128	; 0x80
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 f884 	bl	8004dd0 <I2C_WaitOnFlagUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	80002000 	.word	0x80002000

08004ce0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	4608      	mov	r0, r1
 8004cea:	4611      	mov	r1, r2
 8004cec:	461a      	mov	r2, r3
 8004cee:	4603      	mov	r3, r0
 8004cf0:	817b      	strh	r3, [r7, #10]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	813b      	strh	r3, [r7, #8]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	8979      	ldrh	r1, [r7, #10]
 8004d00:	4b20      	ldr	r3, [pc, #128]	; (8004d84 <I2C_RequestMemoryRead+0xa4>)
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	2300      	movs	r3, #0
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 fa0a 	bl	8005120 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d0c:	69fa      	ldr	r2, [r7, #28]
 8004d0e:	69b9      	ldr	r1, [r7, #24]
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f89d 	bl	8004e50 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e02c      	b.n	8004d7a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d20:	88fb      	ldrh	r3, [r7, #6]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d105      	bne.n	8004d32 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d26:	893b      	ldrh	r3, [r7, #8]
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	629a      	str	r2, [r3, #40]	; 0x28
 8004d30:	e015      	b.n	8004d5e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d32:	893b      	ldrh	r3, [r7, #8]
 8004d34:	0a1b      	lsrs	r3, r3, #8
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	69b9      	ldr	r1, [r7, #24]
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f883 	bl	8004e50 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e012      	b.n	8004d7a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d54:	893b      	ldrh	r3, [r7, #8]
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2200      	movs	r2, #0
 8004d66:	2140      	movs	r1, #64	; 0x40
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 f831 	bl	8004dd0 <I2C_WaitOnFlagUntilTimeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	80002000 	.word	0x80002000

08004d88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d103      	bne.n	8004da6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2200      	movs	r2, #0
 8004da4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d007      	beq.n	8004dc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	619a      	str	r2, [r3, #24]
  }
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004de0:	e022      	b.n	8004e28 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004de8:	d01e      	beq.n	8004e28 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dea:	f7fe fe8b 	bl	8003b04 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d302      	bcc.n	8004e00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d113      	bne.n	8004e28 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e04:	f043 0220 	orr.w	r2, r3, #32
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e00f      	b.n	8004e48 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699a      	ldr	r2, [r3, #24]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4013      	ands	r3, r2
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	bf0c      	ite	eq
 8004e38:	2301      	moveq	r3, #1
 8004e3a:	2300      	movne	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	461a      	mov	r2, r3
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d0cd      	beq.n	8004de2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e5c:	e02c      	b.n	8004eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 f870 	bl	8004f48 <I2C_IsErrorOccurred>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e02a      	b.n	8004ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e78:	d01e      	beq.n	8004eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e7a:	f7fe fe43 	bl	8003b04 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d302      	bcc.n	8004e90 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d113      	bne.n	8004eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e94:	f043 0220 	orr.w	r2, r3, #32
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e007      	b.n	8004ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d1cb      	bne.n	8004e5e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004edc:	e028      	b.n	8004f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	68b9      	ldr	r1, [r7, #8]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 f830 	bl	8004f48 <I2C_IsErrorOccurred>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e026      	b.n	8004f40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef2:	f7fe fe07 	bl	8003b04 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d302      	bcc.n	8004f08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d113      	bne.n	8004f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0c:	f043 0220 	orr.w	r2, r3, #32
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e007      	b.n	8004f40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d1cf      	bne.n	8004ede <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08a      	sub	sp, #40	; 0x28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d075      	beq.n	8005060 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2210      	movs	r2, #16
 8004f7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f7c:	e056      	b.n	800502c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f84:	d052      	beq.n	800502c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f86:	f7fe fdbd 	bl	8003b04 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d302      	bcc.n	8004f9c <I2C_IsErrorOccurred+0x54>
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d147      	bne.n	800502c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fbe:	d12e      	bne.n	800501e <I2C_IsErrorOccurred+0xd6>
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fc6:	d02a      	beq.n	800501e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004fc8:	7cfb      	ldrb	r3, [r7, #19]
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d027      	beq.n	800501e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fdc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004fde:	f7fe fd91 	bl	8003b04 <HAL_GetTick>
 8004fe2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fe4:	e01b      	b.n	800501e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004fe6:	f7fe fd8d 	bl	8003b04 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b19      	cmp	r3, #25
 8004ff2:	d914      	bls.n	800501e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff8:	f043 0220 	orr.w	r2, r3, #32
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b20      	cmp	r3, #32
 800502a:	d1dc      	bne.n	8004fe6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b20      	cmp	r3, #32
 8005038:	d003      	beq.n	8005042 <I2C_IsErrorOccurred+0xfa>
 800503a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800503e:	2b00      	cmp	r3, #0
 8005040:	d09d      	beq.n	8004f7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005046:	2b00      	cmp	r3, #0
 8005048:	d103      	bne.n	8005052 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2220      	movs	r2, #32
 8005050:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	f043 0304 	orr.w	r3, r3, #4
 8005058:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00b      	beq.n	800508a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	f043 0301 	orr.w	r3, r3, #1
 8005078:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005082:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00b      	beq.n	80050ac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	f043 0308 	orr.w	r3, r3, #8
 800509a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00b      	beq.n	80050ce <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	f043 0302 	orr.w	r3, r3, #2
 80050bc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80050ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d01c      	beq.n	8005110 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f7ff fe56 	bl	8004d88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6859      	ldr	r1, [r3, #4]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4b0d      	ldr	r3, [pc, #52]	; (800511c <I2C_IsErrorOccurred+0x1d4>)
 80050e8:	400b      	ands	r3, r1
 80050ea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	431a      	orrs	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005114:	4618      	mov	r0, r3
 8005116:	3728      	adds	r7, #40	; 0x28
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	fe00e800 	.word	0xfe00e800

08005120 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	607b      	str	r3, [r7, #4]
 800512a:	460b      	mov	r3, r1
 800512c:	817b      	strh	r3, [r7, #10]
 800512e:	4613      	mov	r3, r2
 8005130:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005132:	897b      	ldrh	r3, [r7, #10]
 8005134:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005138:	7a7b      	ldrb	r3, [r7, #9]
 800513a:	041b      	lsls	r3, r3, #16
 800513c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005140:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	4313      	orrs	r3, r2
 800514a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800514e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	0d5b      	lsrs	r3, r3, #21
 800515a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800515e:	4b08      	ldr	r3, [pc, #32]	; (8005180 <I2C_TransferConfig+0x60>)
 8005160:	430b      	orrs	r3, r1
 8005162:	43db      	mvns	r3, r3
 8005164:	ea02 0103 	and.w	r1, r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	430a      	orrs	r2, r1
 8005170:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	03ff63ff 	.word	0x03ff63ff

08005184 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b20      	cmp	r3, #32
 8005198:	d138      	bne.n	800520c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e032      	b.n	800520e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2224      	movs	r2, #36	; 0x24
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0201 	bic.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6819      	ldr	r1, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0201 	orr.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005208:	2300      	movs	r3, #0
 800520a:	e000      	b.n	800520e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800520c:	2302      	movs	r3, #2
  }
}
 800520e:	4618      	mov	r0, r3
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800521a:	b480      	push	{r7}
 800521c:	b085      	sub	sp, #20
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b20      	cmp	r3, #32
 800522e:	d139      	bne.n	80052a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005236:	2b01      	cmp	r3, #1
 8005238:	d101      	bne.n	800523e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800523a:	2302      	movs	r3, #2
 800523c:	e033      	b.n	80052a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2224      	movs	r2, #36	; 0x24
 800524a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0201 	bic.w	r2, r2, #1
 800525c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800526c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	021b      	lsls	r3, r3, #8
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0201 	orr.w	r2, r2, #1
 800528e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2220      	movs	r2, #32
 8005294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	e000      	b.n	80052a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052a4:	2302      	movs	r3, #2
  }
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
	...

080052b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80052b8:	4b04      	ldr	r3, [pc, #16]	; (80052cc <HAL_PWREx_GetVoltageRange+0x18>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40007000 	.word	0x40007000

080052d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052de:	d130      	bne.n	8005342 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80052e0:	4b23      	ldr	r3, [pc, #140]	; (8005370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ec:	d038      	beq.n	8005360 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052ee:	4b20      	ldr	r3, [pc, #128]	; (8005370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052f6:	4a1e      	ldr	r2, [pc, #120]	; (8005370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052fe:	4b1d      	ldr	r3, [pc, #116]	; (8005374 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2232      	movs	r2, #50	; 0x32
 8005304:	fb02 f303 	mul.w	r3, r2, r3
 8005308:	4a1b      	ldr	r2, [pc, #108]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800530a:	fba2 2303 	umull	r2, r3, r2, r3
 800530e:	0c9b      	lsrs	r3, r3, #18
 8005310:	3301      	adds	r3, #1
 8005312:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005314:	e002      	b.n	800531c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3b01      	subs	r3, #1
 800531a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800531c:	4b14      	ldr	r3, [pc, #80]	; (8005370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005328:	d102      	bne.n	8005330 <HAL_PWREx_ControlVoltageScaling+0x60>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1f2      	bne.n	8005316 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005330:	4b0f      	ldr	r3, [pc, #60]	; (8005370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533c:	d110      	bne.n	8005360 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e00f      	b.n	8005362 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005342:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800534a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800534e:	d007      	beq.n	8005360 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005350:	4b07      	ldr	r3, [pc, #28]	; (8005370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005358:	4a05      	ldr	r2, [pc, #20]	; (8005370 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800535a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800535e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40007000 	.word	0x40007000
 8005374:	20000000 	.word	0x20000000
 8005378:	431bde83 	.word	0x431bde83

0800537c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b088      	sub	sp, #32
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d102      	bne.n	8005390 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	f000 bc02 	b.w	8005b94 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005390:	4b96      	ldr	r3, [pc, #600]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 030c 	and.w	r3, r3, #12
 8005398:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800539a:	4b94      	ldr	r3, [pc, #592]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0310 	and.w	r3, r3, #16
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 80e4 	beq.w	800557a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d007      	beq.n	80053c8 <HAL_RCC_OscConfig+0x4c>
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	2b0c      	cmp	r3, #12
 80053bc:	f040 808b 	bne.w	80054d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	f040 8087 	bne.w	80054d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053c8:	4b88      	ldr	r3, [pc, #544]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_RCC_OscConfig+0x64>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e3d9      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a1a      	ldr	r2, [r3, #32]
 80053e4:	4b81      	ldr	r3, [pc, #516]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d004      	beq.n	80053fa <HAL_RCC_OscConfig+0x7e>
 80053f0:	4b7e      	ldr	r3, [pc, #504]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053f8:	e005      	b.n	8005406 <HAL_RCC_OscConfig+0x8a>
 80053fa:	4b7c      	ldr	r3, [pc, #496]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 80053fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005400:	091b      	lsrs	r3, r3, #4
 8005402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005406:	4293      	cmp	r3, r2
 8005408:	d223      	bcs.n	8005452 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fd54 	bl	8005ebc <RCC_SetFlashLatencyFromMSIRange>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e3ba      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800541e:	4b73      	ldr	r3, [pc, #460]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a72      	ldr	r2, [pc, #456]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 8005424:	f043 0308 	orr.w	r3, r3, #8
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	4b70      	ldr	r3, [pc, #448]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	496d      	ldr	r1, [pc, #436]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 8005438:	4313      	orrs	r3, r2
 800543a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800543c:	4b6b      	ldr	r3, [pc, #428]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	021b      	lsls	r3, r3, #8
 800544a:	4968      	ldr	r1, [pc, #416]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 800544c:	4313      	orrs	r3, r2
 800544e:	604b      	str	r3, [r1, #4]
 8005450:	e025      	b.n	800549e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005452:	4b66      	ldr	r3, [pc, #408]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a65      	ldr	r2, [pc, #404]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 8005458:	f043 0308 	orr.w	r3, r3, #8
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	4b63      	ldr	r3, [pc, #396]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	4960      	ldr	r1, [pc, #384]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 800546c:	4313      	orrs	r3, r2
 800546e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005470:	4b5e      	ldr	r3, [pc, #376]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	021b      	lsls	r3, r3, #8
 800547e:	495b      	ldr	r1, [pc, #364]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 8005480:	4313      	orrs	r3, r2
 8005482:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d109      	bne.n	800549e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fd14 	bl	8005ebc <RCC_SetFlashLatencyFromMSIRange>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e37a      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800549e:	f000 fc81 	bl	8005da4 <HAL_RCC_GetSysClockFreq>
 80054a2:	4602      	mov	r2, r0
 80054a4:	4b51      	ldr	r3, [pc, #324]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	091b      	lsrs	r3, r3, #4
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	4950      	ldr	r1, [pc, #320]	; (80055f0 <HAL_RCC_OscConfig+0x274>)
 80054b0:	5ccb      	ldrb	r3, [r1, r3]
 80054b2:	f003 031f 	and.w	r3, r3, #31
 80054b6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ba:	4a4e      	ldr	r2, [pc, #312]	; (80055f4 <HAL_RCC_OscConfig+0x278>)
 80054bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80054be:	4b4e      	ldr	r3, [pc, #312]	; (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fe face 	bl	8003a64 <HAL_InitTick>
 80054c8:	4603      	mov	r3, r0
 80054ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d052      	beq.n	8005578 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	e35e      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d032      	beq.n	8005544 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80054de:	4b43      	ldr	r3, [pc, #268]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a42      	ldr	r2, [pc, #264]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 80054e4:	f043 0301 	orr.w	r3, r3, #1
 80054e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054ea:	f7fe fb0b 	bl	8003b04 <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054f2:	f7fe fb07 	bl	8003b04 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e347      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005504:	4b39      	ldr	r3, [pc, #228]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0f0      	beq.n	80054f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005510:	4b36      	ldr	r3, [pc, #216]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a35      	ldr	r2, [pc, #212]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 8005516:	f043 0308 	orr.w	r3, r3, #8
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	4b33      	ldr	r3, [pc, #204]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	4930      	ldr	r1, [pc, #192]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 800552a:	4313      	orrs	r3, r2
 800552c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800552e:	4b2f      	ldr	r3, [pc, #188]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	021b      	lsls	r3, r3, #8
 800553c:	492b      	ldr	r1, [pc, #172]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 800553e:	4313      	orrs	r3, r2
 8005540:	604b      	str	r3, [r1, #4]
 8005542:	e01a      	b.n	800557a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005544:	4b29      	ldr	r3, [pc, #164]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a28      	ldr	r2, [pc, #160]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 800554a:	f023 0301 	bic.w	r3, r3, #1
 800554e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005550:	f7fe fad8 	bl	8003b04 <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005558:	f7fe fad4 	bl	8003b04 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e314      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800556a:	4b20      	ldr	r3, [pc, #128]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1f0      	bne.n	8005558 <HAL_RCC_OscConfig+0x1dc>
 8005576:	e000      	b.n	800557a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005578:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d073      	beq.n	800566e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	2b08      	cmp	r3, #8
 800558a:	d005      	beq.n	8005598 <HAL_RCC_OscConfig+0x21c>
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	2b0c      	cmp	r3, #12
 8005590:	d10e      	bne.n	80055b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b03      	cmp	r3, #3
 8005596:	d10b      	bne.n	80055b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005598:	4b14      	ldr	r3, [pc, #80]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d063      	beq.n	800566c <HAL_RCC_OscConfig+0x2f0>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d15f      	bne.n	800566c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e2f1      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b8:	d106      	bne.n	80055c8 <HAL_RCC_OscConfig+0x24c>
 80055ba:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a0b      	ldr	r2, [pc, #44]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 80055c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	e025      	b.n	8005614 <HAL_RCC_OscConfig+0x298>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055d0:	d114      	bne.n	80055fc <HAL_RCC_OscConfig+0x280>
 80055d2:	4b06      	ldr	r3, [pc, #24]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a05      	ldr	r2, [pc, #20]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 80055d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	4b03      	ldr	r3, [pc, #12]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a02      	ldr	r2, [pc, #8]	; (80055ec <HAL_RCC_OscConfig+0x270>)
 80055e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	e013      	b.n	8005614 <HAL_RCC_OscConfig+0x298>
 80055ec:	40021000 	.word	0x40021000
 80055f0:	080096d4 	.word	0x080096d4
 80055f4:	20000000 	.word	0x20000000
 80055f8:	20000004 	.word	0x20000004
 80055fc:	4ba0      	ldr	r3, [pc, #640]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a9f      	ldr	r2, [pc, #636]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 8005602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005606:	6013      	str	r3, [r2, #0]
 8005608:	4b9d      	ldr	r3, [pc, #628]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a9c      	ldr	r2, [pc, #624]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 800560e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d013      	beq.n	8005644 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561c:	f7fe fa72 	bl	8003b04 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005624:	f7fe fa6e 	bl	8003b04 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b64      	cmp	r3, #100	; 0x64
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e2ae      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005636:	4b92      	ldr	r3, [pc, #584]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0f0      	beq.n	8005624 <HAL_RCC_OscConfig+0x2a8>
 8005642:	e014      	b.n	800566e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005644:	f7fe fa5e 	bl	8003b04 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800564c:	f7fe fa5a 	bl	8003b04 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b64      	cmp	r3, #100	; 0x64
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e29a      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800565e:	4b88      	ldr	r3, [pc, #544]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0x2d0>
 800566a:	e000      	b.n	800566e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800566c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d060      	beq.n	800573c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	2b04      	cmp	r3, #4
 800567e:	d005      	beq.n	800568c <HAL_RCC_OscConfig+0x310>
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	2b0c      	cmp	r3, #12
 8005684:	d119      	bne.n	80056ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b02      	cmp	r3, #2
 800568a:	d116      	bne.n	80056ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800568c:	4b7c      	ldr	r3, [pc, #496]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <HAL_RCC_OscConfig+0x328>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e277      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056a4:	4b76      	ldr	r3, [pc, #472]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	061b      	lsls	r3, r3, #24
 80056b2:	4973      	ldr	r1, [pc, #460]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056b8:	e040      	b.n	800573c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d023      	beq.n	800570a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056c2:	4b6f      	ldr	r3, [pc, #444]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a6e      	ldr	r2, [pc, #440]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 80056c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ce:	f7fe fa19 	bl	8003b04 <HAL_GetTick>
 80056d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056d4:	e008      	b.n	80056e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056d6:	f7fe fa15 	bl	8003b04 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e255      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056e8:	4b65      	ldr	r3, [pc, #404]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0f0      	beq.n	80056d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f4:	4b62      	ldr	r3, [pc, #392]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	061b      	lsls	r3, r3, #24
 8005702:	495f      	ldr	r1, [pc, #380]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 8005704:	4313      	orrs	r3, r2
 8005706:	604b      	str	r3, [r1, #4]
 8005708:	e018      	b.n	800573c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800570a:	4b5d      	ldr	r3, [pc, #372]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a5c      	ldr	r2, [pc, #368]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 8005710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005716:	f7fe f9f5 	bl	8003b04 <HAL_GetTick>
 800571a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800571c:	e008      	b.n	8005730 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800571e:	f7fe f9f1 	bl	8003b04 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d901      	bls.n	8005730 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e231      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005730:	4b53      	ldr	r3, [pc, #332]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1f0      	bne.n	800571e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d03c      	beq.n	80057c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d01c      	beq.n	800578a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005750:	4b4b      	ldr	r3, [pc, #300]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 8005752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005756:	4a4a      	ldr	r2, [pc, #296]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005760:	f7fe f9d0 	bl	8003b04 <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005768:	f7fe f9cc 	bl	8003b04 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e20c      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800577a:	4b41      	ldr	r3, [pc, #260]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 800577c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0ef      	beq.n	8005768 <HAL_RCC_OscConfig+0x3ec>
 8005788:	e01b      	b.n	80057c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800578a:	4b3d      	ldr	r3, [pc, #244]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 800578c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005790:	4a3b      	ldr	r2, [pc, #236]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 8005792:	f023 0301 	bic.w	r3, r3, #1
 8005796:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800579a:	f7fe f9b3 	bl	8003b04 <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057a0:	e008      	b.n	80057b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057a2:	f7fe f9af 	bl	8003b04 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e1ef      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057b4:	4b32      	ldr	r3, [pc, #200]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 80057b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1ef      	bne.n	80057a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f000 80a6 	beq.w	800591c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057d0:	2300      	movs	r3, #0
 80057d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80057d4:	4b2a      	ldr	r3, [pc, #168]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10d      	bne.n	80057fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057e0:	4b27      	ldr	r3, [pc, #156]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 80057e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e4:	4a26      	ldr	r2, [pc, #152]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 80057e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ea:	6593      	str	r3, [r2, #88]	; 0x58
 80057ec:	4b24      	ldr	r3, [pc, #144]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 80057ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f4:	60bb      	str	r3, [r7, #8]
 80057f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057f8:	2301      	movs	r3, #1
 80057fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057fc:	4b21      	ldr	r3, [pc, #132]	; (8005884 <HAL_RCC_OscConfig+0x508>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005804:	2b00      	cmp	r3, #0
 8005806:	d118      	bne.n	800583a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005808:	4b1e      	ldr	r3, [pc, #120]	; (8005884 <HAL_RCC_OscConfig+0x508>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1d      	ldr	r2, [pc, #116]	; (8005884 <HAL_RCC_OscConfig+0x508>)
 800580e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005812:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005814:	f7fe f976 	bl	8003b04 <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800581c:	f7fe f972 	bl	8003b04 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e1b2      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800582e:	4b15      	ldr	r3, [pc, #84]	; (8005884 <HAL_RCC_OscConfig+0x508>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0f0      	beq.n	800581c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d108      	bne.n	8005854 <HAL_RCC_OscConfig+0x4d8>
 8005842:	4b0f      	ldr	r3, [pc, #60]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 8005844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005848:	4a0d      	ldr	r2, [pc, #52]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 800584a:	f043 0301 	orr.w	r3, r3, #1
 800584e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005852:	e029      	b.n	80058a8 <HAL_RCC_OscConfig+0x52c>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	2b05      	cmp	r3, #5
 800585a:	d115      	bne.n	8005888 <HAL_RCC_OscConfig+0x50c>
 800585c:	4b08      	ldr	r3, [pc, #32]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 800585e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005862:	4a07      	ldr	r2, [pc, #28]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 8005864:	f043 0304 	orr.w	r3, r3, #4
 8005868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800586c:	4b04      	ldr	r3, [pc, #16]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 800586e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005872:	4a03      	ldr	r2, [pc, #12]	; (8005880 <HAL_RCC_OscConfig+0x504>)
 8005874:	f043 0301 	orr.w	r3, r3, #1
 8005878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800587c:	e014      	b.n	80058a8 <HAL_RCC_OscConfig+0x52c>
 800587e:	bf00      	nop
 8005880:	40021000 	.word	0x40021000
 8005884:	40007000 	.word	0x40007000
 8005888:	4b9a      	ldr	r3, [pc, #616]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 800588a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588e:	4a99      	ldr	r2, [pc, #612]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 8005890:	f023 0301 	bic.w	r3, r3, #1
 8005894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005898:	4b96      	ldr	r3, [pc, #600]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 800589a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589e:	4a95      	ldr	r2, [pc, #596]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 80058a0:	f023 0304 	bic.w	r3, r3, #4
 80058a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d016      	beq.n	80058de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b0:	f7fe f928 	bl	8003b04 <HAL_GetTick>
 80058b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058b6:	e00a      	b.n	80058ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058b8:	f7fe f924 	bl	8003b04 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e162      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ce:	4b89      	ldr	r3, [pc, #548]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 80058d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0ed      	beq.n	80058b8 <HAL_RCC_OscConfig+0x53c>
 80058dc:	e015      	b.n	800590a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058de:	f7fe f911 	bl	8003b04 <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058e4:	e00a      	b.n	80058fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e6:	f7fe f90d 	bl	8003b04 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e14b      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058fc:	4b7d      	ldr	r3, [pc, #500]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1ed      	bne.n	80058e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800590a:	7ffb      	ldrb	r3, [r7, #31]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d105      	bne.n	800591c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005910:	4b78      	ldr	r3, [pc, #480]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 8005912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005914:	4a77      	ldr	r2, [pc, #476]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 8005916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800591a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d03c      	beq.n	80059a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01c      	beq.n	800596a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005930:	4b70      	ldr	r3, [pc, #448]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 8005932:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005936:	4a6f      	ldr	r2, [pc, #444]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 8005938:	f043 0301 	orr.w	r3, r3, #1
 800593c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005940:	f7fe f8e0 	bl	8003b04 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005948:	f7fe f8dc 	bl	8003b04 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e11c      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800595a:	4b66      	ldr	r3, [pc, #408]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 800595c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0ef      	beq.n	8005948 <HAL_RCC_OscConfig+0x5cc>
 8005968:	e01b      	b.n	80059a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800596a:	4b62      	ldr	r3, [pc, #392]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 800596c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005970:	4a60      	ldr	r2, [pc, #384]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 8005972:	f023 0301 	bic.w	r3, r3, #1
 8005976:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597a:	f7fe f8c3 	bl	8003b04 <HAL_GetTick>
 800597e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005980:	e008      	b.n	8005994 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005982:	f7fe f8bf 	bl	8003b04 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e0ff      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005994:	4b57      	ldr	r3, [pc, #348]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 8005996:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1ef      	bne.n	8005982 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 80f3 	beq.w	8005b92 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	f040 80c9 	bne.w	8005b48 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80059b6:	4b4f      	ldr	r3, [pc, #316]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f003 0203 	and.w	r2, r3, #3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d12c      	bne.n	8005a24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d4:	3b01      	subs	r3, #1
 80059d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d8:	429a      	cmp	r2, r3
 80059da:	d123      	bne.n	8005a24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d11b      	bne.n	8005a24 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d113      	bne.n	8005a24 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a06:	085b      	lsrs	r3, r3, #1
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d109      	bne.n	8005a24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	085b      	lsrs	r3, r3, #1
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d06b      	beq.n	8005afc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	2b0c      	cmp	r3, #12
 8005a28:	d062      	beq.n	8005af0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a2a:	4b32      	ldr	r3, [pc, #200]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e0ac      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a3a:	4b2e      	ldr	r3, [pc, #184]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a2d      	ldr	r2, [pc, #180]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 8005a40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a46:	f7fe f85d 	bl	8003b04 <HAL_GetTick>
 8005a4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a4e:	f7fe f859 	bl	8003b04 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e099      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a60:	4b24      	ldr	r3, [pc, #144]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1f0      	bne.n	8005a4e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a6c:	4b21      	ldr	r3, [pc, #132]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 8005a6e:	68da      	ldr	r2, [r3, #12]
 8005a70:	4b21      	ldr	r3, [pc, #132]	; (8005af8 <HAL_RCC_OscConfig+0x77c>)
 8005a72:	4013      	ands	r3, r2
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a7c:	3a01      	subs	r2, #1
 8005a7e:	0112      	lsls	r2, r2, #4
 8005a80:	4311      	orrs	r1, r2
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a86:	0212      	lsls	r2, r2, #8
 8005a88:	4311      	orrs	r1, r2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a8e:	0852      	lsrs	r2, r2, #1
 8005a90:	3a01      	subs	r2, #1
 8005a92:	0552      	lsls	r2, r2, #21
 8005a94:	4311      	orrs	r1, r2
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a9a:	0852      	lsrs	r2, r2, #1
 8005a9c:	3a01      	subs	r2, #1
 8005a9e:	0652      	lsls	r2, r2, #25
 8005aa0:	4311      	orrs	r1, r2
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005aa6:	06d2      	lsls	r2, r2, #27
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	4912      	ldr	r1, [pc, #72]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ab0:	4b10      	ldr	r3, [pc, #64]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a0f      	ldr	r2, [pc, #60]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 8005ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005abc:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	4a0c      	ldr	r2, [pc, #48]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 8005ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ac6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ac8:	f7fe f81c 	bl	8003b04 <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad0:	f7fe f818 	bl	8003b04 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e058      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ae2:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <HAL_RCC_OscConfig+0x778>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0f0      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005aee:	e050      	b.n	8005b92 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e04f      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
 8005af4:	40021000 	.word	0x40021000
 8005af8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005afc:	4b27      	ldr	r3, [pc, #156]	; (8005b9c <HAL_RCC_OscConfig+0x820>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d144      	bne.n	8005b92 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b08:	4b24      	ldr	r3, [pc, #144]	; (8005b9c <HAL_RCC_OscConfig+0x820>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a23      	ldr	r2, [pc, #140]	; (8005b9c <HAL_RCC_OscConfig+0x820>)
 8005b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b14:	4b21      	ldr	r3, [pc, #132]	; (8005b9c <HAL_RCC_OscConfig+0x820>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	4a20      	ldr	r2, [pc, #128]	; (8005b9c <HAL_RCC_OscConfig+0x820>)
 8005b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b20:	f7fd fff0 	bl	8003b04 <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b28:	f7fd ffec 	bl	8003b04 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e02c      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b3a:	4b18      	ldr	r3, [pc, #96]	; (8005b9c <HAL_RCC_OscConfig+0x820>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0f0      	beq.n	8005b28 <HAL_RCC_OscConfig+0x7ac>
 8005b46:	e024      	b.n	8005b92 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	2b0c      	cmp	r3, #12
 8005b4c:	d01f      	beq.n	8005b8e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b4e:	4b13      	ldr	r3, [pc, #76]	; (8005b9c <HAL_RCC_OscConfig+0x820>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a12      	ldr	r2, [pc, #72]	; (8005b9c <HAL_RCC_OscConfig+0x820>)
 8005b54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5a:	f7fd ffd3 	bl	8003b04 <HAL_GetTick>
 8005b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b60:	e008      	b.n	8005b74 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b62:	f7fd ffcf 	bl	8003b04 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e00f      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b74:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <HAL_RCC_OscConfig+0x820>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1f0      	bne.n	8005b62 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005b80:	4b06      	ldr	r3, [pc, #24]	; (8005b9c <HAL_RCC_OscConfig+0x820>)
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	4905      	ldr	r1, [pc, #20]	; (8005b9c <HAL_RCC_OscConfig+0x820>)
 8005b86:	4b06      	ldr	r3, [pc, #24]	; (8005ba0 <HAL_RCC_OscConfig+0x824>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	60cb      	str	r3, [r1, #12]
 8005b8c:	e001      	b.n	8005b92 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3720      	adds	r7, #32
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	feeefffc 	.word	0xfeeefffc

08005ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e0e7      	b.n	8005d88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bb8:	4b75      	ldr	r3, [pc, #468]	; (8005d90 <HAL_RCC_ClockConfig+0x1ec>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0307 	and.w	r3, r3, #7
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d910      	bls.n	8005be8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc6:	4b72      	ldr	r3, [pc, #456]	; (8005d90 <HAL_RCC_ClockConfig+0x1ec>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f023 0207 	bic.w	r2, r3, #7
 8005bce:	4970      	ldr	r1, [pc, #448]	; (8005d90 <HAL_RCC_ClockConfig+0x1ec>)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd6:	4b6e      	ldr	r3, [pc, #440]	; (8005d90 <HAL_RCC_ClockConfig+0x1ec>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d001      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e0cf      	b.n	8005d88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d010      	beq.n	8005c16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	4b66      	ldr	r3, [pc, #408]	; (8005d94 <HAL_RCC_ClockConfig+0x1f0>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d908      	bls.n	8005c16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c04:	4b63      	ldr	r3, [pc, #396]	; (8005d94 <HAL_RCC_ClockConfig+0x1f0>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	4960      	ldr	r1, [pc, #384]	; (8005d94 <HAL_RCC_ClockConfig+0x1f0>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d04c      	beq.n	8005cbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b03      	cmp	r3, #3
 8005c28:	d107      	bne.n	8005c3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c2a:	4b5a      	ldr	r3, [pc, #360]	; (8005d94 <HAL_RCC_ClockConfig+0x1f0>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d121      	bne.n	8005c7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e0a6      	b.n	8005d88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d107      	bne.n	8005c52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c42:	4b54      	ldr	r3, [pc, #336]	; (8005d94 <HAL_RCC_ClockConfig+0x1f0>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d115      	bne.n	8005c7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e09a      	b.n	8005d88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d107      	bne.n	8005c6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c5a:	4b4e      	ldr	r3, [pc, #312]	; (8005d94 <HAL_RCC_ClockConfig+0x1f0>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d109      	bne.n	8005c7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e08e      	b.n	8005d88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c6a:	4b4a      	ldr	r3, [pc, #296]	; (8005d94 <HAL_RCC_ClockConfig+0x1f0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e086      	b.n	8005d88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c7a:	4b46      	ldr	r3, [pc, #280]	; (8005d94 <HAL_RCC_ClockConfig+0x1f0>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f023 0203 	bic.w	r2, r3, #3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	4943      	ldr	r1, [pc, #268]	; (8005d94 <HAL_RCC_ClockConfig+0x1f0>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c8c:	f7fd ff3a 	bl	8003b04 <HAL_GetTick>
 8005c90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c92:	e00a      	b.n	8005caa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c94:	f7fd ff36 	bl	8003b04 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e06e      	b.n	8005d88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005caa:	4b3a      	ldr	r3, [pc, #232]	; (8005d94 <HAL_RCC_ClockConfig+0x1f0>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f003 020c 	and.w	r2, r3, #12
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d1eb      	bne.n	8005c94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d010      	beq.n	8005cea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	4b31      	ldr	r3, [pc, #196]	; (8005d94 <HAL_RCC_ClockConfig+0x1f0>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d208      	bcs.n	8005cea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cd8:	4b2e      	ldr	r3, [pc, #184]	; (8005d94 <HAL_RCC_ClockConfig+0x1f0>)
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	492b      	ldr	r1, [pc, #172]	; (8005d94 <HAL_RCC_ClockConfig+0x1f0>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cea:	4b29      	ldr	r3, [pc, #164]	; (8005d90 <HAL_RCC_ClockConfig+0x1ec>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d210      	bcs.n	8005d1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf8:	4b25      	ldr	r3, [pc, #148]	; (8005d90 <HAL_RCC_ClockConfig+0x1ec>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f023 0207 	bic.w	r2, r3, #7
 8005d00:	4923      	ldr	r1, [pc, #140]	; (8005d90 <HAL_RCC_ClockConfig+0x1ec>)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d08:	4b21      	ldr	r3, [pc, #132]	; (8005d90 <HAL_RCC_ClockConfig+0x1ec>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d001      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e036      	b.n	8005d88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0304 	and.w	r3, r3, #4
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d008      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d26:	4b1b      	ldr	r3, [pc, #108]	; (8005d94 <HAL_RCC_ClockConfig+0x1f0>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	4918      	ldr	r1, [pc, #96]	; (8005d94 <HAL_RCC_ClockConfig+0x1f0>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0308 	and.w	r3, r3, #8
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d009      	beq.n	8005d58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d44:	4b13      	ldr	r3, [pc, #76]	; (8005d94 <HAL_RCC_ClockConfig+0x1f0>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	00db      	lsls	r3, r3, #3
 8005d52:	4910      	ldr	r1, [pc, #64]	; (8005d94 <HAL_RCC_ClockConfig+0x1f0>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d58:	f000 f824 	bl	8005da4 <HAL_RCC_GetSysClockFreq>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <HAL_RCC_ClockConfig+0x1f0>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	091b      	lsrs	r3, r3, #4
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	490b      	ldr	r1, [pc, #44]	; (8005d98 <HAL_RCC_ClockConfig+0x1f4>)
 8005d6a:	5ccb      	ldrb	r3, [r1, r3]
 8005d6c:	f003 031f 	and.w	r3, r3, #31
 8005d70:	fa22 f303 	lsr.w	r3, r2, r3
 8005d74:	4a09      	ldr	r2, [pc, #36]	; (8005d9c <HAL_RCC_ClockConfig+0x1f8>)
 8005d76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d78:	4b09      	ldr	r3, [pc, #36]	; (8005da0 <HAL_RCC_ClockConfig+0x1fc>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fd fe71 	bl	8003a64 <HAL_InitTick>
 8005d82:	4603      	mov	r3, r0
 8005d84:	72fb      	strb	r3, [r7, #11]

  return status;
 8005d86:	7afb      	ldrb	r3, [r7, #11]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40022000 	.word	0x40022000
 8005d94:	40021000 	.word	0x40021000
 8005d98:	080096d4 	.word	0x080096d4
 8005d9c:	20000000 	.word	0x20000000
 8005da0:	20000004 	.word	0x20000004

08005da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b089      	sub	sp, #36	; 0x24
 8005da8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	2300      	movs	r3, #0
 8005db0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005db2:	4b3e      	ldr	r3, [pc, #248]	; (8005eac <HAL_RCC_GetSysClockFreq+0x108>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 030c 	and.w	r3, r3, #12
 8005dba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dbc:	4b3b      	ldr	r3, [pc, #236]	; (8005eac <HAL_RCC_GetSysClockFreq+0x108>)
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f003 0303 	and.w	r3, r3, #3
 8005dc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d005      	beq.n	8005dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	2b0c      	cmp	r3, #12
 8005dd0:	d121      	bne.n	8005e16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d11e      	bne.n	8005e16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005dd8:	4b34      	ldr	r3, [pc, #208]	; (8005eac <HAL_RCC_GetSysClockFreq+0x108>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0308 	and.w	r3, r3, #8
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d107      	bne.n	8005df4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005de4:	4b31      	ldr	r3, [pc, #196]	; (8005eac <HAL_RCC_GetSysClockFreq+0x108>)
 8005de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dea:	0a1b      	lsrs	r3, r3, #8
 8005dec:	f003 030f 	and.w	r3, r3, #15
 8005df0:	61fb      	str	r3, [r7, #28]
 8005df2:	e005      	b.n	8005e00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005df4:	4b2d      	ldr	r3, [pc, #180]	; (8005eac <HAL_RCC_GetSysClockFreq+0x108>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	091b      	lsrs	r3, r3, #4
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e00:	4a2b      	ldr	r2, [pc, #172]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10d      	bne.n	8005e2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e14:	e00a      	b.n	8005e2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	2b04      	cmp	r3, #4
 8005e1a:	d102      	bne.n	8005e22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e1c:	4b25      	ldr	r3, [pc, #148]	; (8005eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e1e:	61bb      	str	r3, [r7, #24]
 8005e20:	e004      	b.n	8005e2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d101      	bne.n	8005e2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e28:	4b23      	ldr	r3, [pc, #140]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	2b0c      	cmp	r3, #12
 8005e30:	d134      	bne.n	8005e9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e32:	4b1e      	ldr	r3, [pc, #120]	; (8005eac <HAL_RCC_GetSysClockFreq+0x108>)
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d003      	beq.n	8005e4a <HAL_RCC_GetSysClockFreq+0xa6>
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2b03      	cmp	r3, #3
 8005e46:	d003      	beq.n	8005e50 <HAL_RCC_GetSysClockFreq+0xac>
 8005e48:	e005      	b.n	8005e56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005e4a:	4b1a      	ldr	r3, [pc, #104]	; (8005eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e4c:	617b      	str	r3, [r7, #20]
      break;
 8005e4e:	e005      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005e50:	4b19      	ldr	r3, [pc, #100]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e52:	617b      	str	r3, [r7, #20]
      break;
 8005e54:	e002      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	617b      	str	r3, [r7, #20]
      break;
 8005e5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e5c:	4b13      	ldr	r3, [pc, #76]	; (8005eac <HAL_RCC_GetSysClockFreq+0x108>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	091b      	lsrs	r3, r3, #4
 8005e62:	f003 0307 	and.w	r3, r3, #7
 8005e66:	3301      	adds	r3, #1
 8005e68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e6a:	4b10      	ldr	r3, [pc, #64]	; (8005eac <HAL_RCC_GetSysClockFreq+0x108>)
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	0a1b      	lsrs	r3, r3, #8
 8005e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	fb03 f202 	mul.w	r2, r3, r2
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e82:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <HAL_RCC_GetSysClockFreq+0x108>)
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	0e5b      	lsrs	r3, r3, #25
 8005e88:	f003 0303 	and.w	r3, r3, #3
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005e9c:	69bb      	ldr	r3, [r7, #24]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3724      	adds	r7, #36	; 0x24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	080096e4 	.word	0x080096e4
 8005eb4:	00f42400 	.word	0x00f42400
 8005eb8:	016e3600 	.word	0x016e3600

08005ebc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ec8:	4b2a      	ldr	r3, [pc, #168]	; (8005f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ed4:	f7ff f9ee 	bl	80052b4 <HAL_PWREx_GetVoltageRange>
 8005ed8:	6178      	str	r0, [r7, #20]
 8005eda:	e014      	b.n	8005f06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005edc:	4b25      	ldr	r3, [pc, #148]	; (8005f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee0:	4a24      	ldr	r2, [pc, #144]	; (8005f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee6:	6593      	str	r3, [r2, #88]	; 0x58
 8005ee8:	4b22      	ldr	r3, [pc, #136]	; (8005f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef0:	60fb      	str	r3, [r7, #12]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ef4:	f7ff f9de 	bl	80052b4 <HAL_PWREx_GetVoltageRange>
 8005ef8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005efa:	4b1e      	ldr	r3, [pc, #120]	; (8005f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efe:	4a1d      	ldr	r2, [pc, #116]	; (8005f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f0c:	d10b      	bne.n	8005f26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b80      	cmp	r3, #128	; 0x80
 8005f12:	d919      	bls.n	8005f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2ba0      	cmp	r3, #160	; 0xa0
 8005f18:	d902      	bls.n	8005f20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	613b      	str	r3, [r7, #16]
 8005f1e:	e013      	b.n	8005f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f20:	2301      	movs	r3, #1
 8005f22:	613b      	str	r3, [r7, #16]
 8005f24:	e010      	b.n	8005f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b80      	cmp	r3, #128	; 0x80
 8005f2a:	d902      	bls.n	8005f32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	e00a      	b.n	8005f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b80      	cmp	r3, #128	; 0x80
 8005f36:	d102      	bne.n	8005f3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f38:	2302      	movs	r3, #2
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	e004      	b.n	8005f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b70      	cmp	r3, #112	; 0x70
 8005f42:	d101      	bne.n	8005f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f44:	2301      	movs	r3, #1
 8005f46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005f48:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f023 0207 	bic.w	r2, r3, #7
 8005f50:	4909      	ldr	r1, [pc, #36]	; (8005f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005f58:	4b07      	ldr	r3, [pc, #28]	; (8005f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d001      	beq.n	8005f6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e000      	b.n	8005f6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	40021000 	.word	0x40021000
 8005f78:	40022000 	.word	0x40022000

08005f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f84:	2300      	movs	r3, #0
 8005f86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f88:	2300      	movs	r3, #0
 8005f8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d031      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005fa0:	d01a      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005fa2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005fa6:	d814      	bhi.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d009      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005fac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005fb0:	d10f      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005fb2:	4b5d      	ldr	r3, [pc, #372]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	4a5c      	ldr	r2, [pc, #368]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fbc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005fbe:	e00c      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 f9ce 	bl	8006368 <RCCEx_PLLSAI1_Config>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005fd0:	e003      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	74fb      	strb	r3, [r7, #19]
      break;
 8005fd6:	e000      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005fd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fda:	7cfb      	ldrb	r3, [r7, #19]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10b      	bne.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fe0:	4b51      	ldr	r3, [pc, #324]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fee:	494e      	ldr	r1, [pc, #312]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005ff6:	e001      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff8:	7cfb      	ldrb	r3, [r7, #19]
 8005ffa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 809e 	beq.w	8006146 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800600a:	2300      	movs	r3, #0
 800600c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800600e:	4b46      	ldr	r3, [pc, #280]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800601a:	2301      	movs	r3, #1
 800601c:	e000      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800601e:	2300      	movs	r3, #0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00d      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006024:	4b40      	ldr	r3, [pc, #256]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006028:	4a3f      	ldr	r2, [pc, #252]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800602a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800602e:	6593      	str	r3, [r2, #88]	; 0x58
 8006030:	4b3d      	ldr	r3, [pc, #244]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006038:	60bb      	str	r3, [r7, #8]
 800603a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800603c:	2301      	movs	r3, #1
 800603e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006040:	4b3a      	ldr	r3, [pc, #232]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a39      	ldr	r2, [pc, #228]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800604a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800604c:	f7fd fd5a 	bl	8003b04 <HAL_GetTick>
 8006050:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006052:	e009      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006054:	f7fd fd56 	bl	8003b04 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d902      	bls.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	74fb      	strb	r3, [r7, #19]
        break;
 8006066:	e005      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006068:	4b30      	ldr	r3, [pc, #192]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0ef      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006074:	7cfb      	ldrb	r3, [r7, #19]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d15a      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800607a:	4b2b      	ldr	r3, [pc, #172]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800607c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006084:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d01e      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	429a      	cmp	r2, r3
 8006094:	d019      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006096:	4b24      	ldr	r3, [pc, #144]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060a2:	4b21      	ldr	r3, [pc, #132]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a8:	4a1f      	ldr	r2, [pc, #124]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060b2:	4b1d      	ldr	r3, [pc, #116]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b8:	4a1b      	ldr	r2, [pc, #108]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060c2:	4a19      	ldr	r2, [pc, #100]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d016      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d4:	f7fd fd16 	bl	8003b04 <HAL_GetTick>
 80060d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060da:	e00b      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060dc:	f7fd fd12 	bl	8003b04 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d902      	bls.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	74fb      	strb	r3, [r7, #19]
            break;
 80060f2:	e006      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060f4:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0ec      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006102:	7cfb      	ldrb	r3, [r7, #19]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10b      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006108:	4b07      	ldr	r3, [pc, #28]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800610a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006116:	4904      	ldr	r1, [pc, #16]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800611e:	e009      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006120:	7cfb      	ldrb	r3, [r7, #19]
 8006122:	74bb      	strb	r3, [r7, #18]
 8006124:	e006      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006126:	bf00      	nop
 8006128:	40021000 	.word	0x40021000
 800612c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006130:	7cfb      	ldrb	r3, [r7, #19]
 8006132:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006134:	7c7b      	ldrb	r3, [r7, #17]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d105      	bne.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800613a:	4b8a      	ldr	r3, [pc, #552]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800613c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613e:	4a89      	ldr	r2, [pc, #548]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006144:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006152:	4b84      	ldr	r3, [pc, #528]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006158:	f023 0203 	bic.w	r2, r3, #3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	4980      	ldr	r1, [pc, #512]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006162:	4313      	orrs	r3, r2
 8006164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00a      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006174:	4b7b      	ldr	r3, [pc, #492]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617a:	f023 020c 	bic.w	r2, r3, #12
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	4978      	ldr	r1, [pc, #480]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006184:	4313      	orrs	r3, r2
 8006186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006196:	4b73      	ldr	r3, [pc, #460]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a4:	496f      	ldr	r1, [pc, #444]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061b8:	4b6a      	ldr	r3, [pc, #424]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061be:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c6:	4967      	ldr	r1, [pc, #412]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061da:	4b62      	ldr	r3, [pc, #392]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	495e      	ldr	r1, [pc, #376]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00a      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061fc:	4b59      	ldr	r3, [pc, #356]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006202:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	4956      	ldr	r1, [pc, #344]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800620c:	4313      	orrs	r3, r2
 800620e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800621e:	4b51      	ldr	r3, [pc, #324]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006224:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622c:	494d      	ldr	r1, [pc, #308]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800622e:	4313      	orrs	r3, r2
 8006230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d028      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006240:	4b48      	ldr	r3, [pc, #288]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006246:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	4945      	ldr	r1, [pc, #276]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006250:	4313      	orrs	r3, r2
 8006252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800625e:	d106      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006260:	4b40      	ldr	r3, [pc, #256]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	4a3f      	ldr	r2, [pc, #252]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006266:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800626a:	60d3      	str	r3, [r2, #12]
 800626c:	e011      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006276:	d10c      	bne.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	3304      	adds	r3, #4
 800627c:	2101      	movs	r1, #1
 800627e:	4618      	mov	r0, r3
 8006280:	f000 f872 	bl	8006368 <RCCEx_PLLSAI1_Config>
 8006284:	4603      	mov	r3, r0
 8006286:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006288:	7cfb      	ldrb	r3, [r7, #19]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800628e:	7cfb      	ldrb	r3, [r7, #19]
 8006290:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d028      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800629e:	4b31      	ldr	r3, [pc, #196]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ac:	492d      	ldr	r1, [pc, #180]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062bc:	d106      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062be:	4b29      	ldr	r3, [pc, #164]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	4a28      	ldr	r2, [pc, #160]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062c8:	60d3      	str	r3, [r2, #12]
 80062ca:	e011      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062d4:	d10c      	bne.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	3304      	adds	r3, #4
 80062da:	2101      	movs	r1, #1
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 f843 	bl	8006368 <RCCEx_PLLSAI1_Config>
 80062e2:	4603      	mov	r3, r0
 80062e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062e6:	7cfb      	ldrb	r3, [r7, #19]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80062ec:	7cfb      	ldrb	r3, [r7, #19]
 80062ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d01c      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062fc:	4b19      	ldr	r3, [pc, #100]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006302:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800630a:	4916      	ldr	r1, [pc, #88]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800630c:	4313      	orrs	r3, r2
 800630e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800631a:	d10c      	bne.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3304      	adds	r3, #4
 8006320:	2102      	movs	r1, #2
 8006322:	4618      	mov	r0, r3
 8006324:	f000 f820 	bl	8006368 <RCCEx_PLLSAI1_Config>
 8006328:	4603      	mov	r3, r0
 800632a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800632c:	7cfb      	ldrb	r3, [r7, #19]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006332:	7cfb      	ldrb	r3, [r7, #19]
 8006334:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00a      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006342:	4b08      	ldr	r3, [pc, #32]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006348:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006350:	4904      	ldr	r1, [pc, #16]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006352:	4313      	orrs	r3, r2
 8006354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006358:	7cbb      	ldrb	r3, [r7, #18]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	40021000 	.word	0x40021000

08006368 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006376:	4b74      	ldr	r3, [pc, #464]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f003 0303 	and.w	r3, r3, #3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d018      	beq.n	80063b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006382:	4b71      	ldr	r3, [pc, #452]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f003 0203 	and.w	r2, r3, #3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	429a      	cmp	r2, r3
 8006390:	d10d      	bne.n	80063ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
       ||
 8006396:	2b00      	cmp	r3, #0
 8006398:	d009      	beq.n	80063ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800639a:	4b6b      	ldr	r3, [pc, #428]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	091b      	lsrs	r3, r3, #4
 80063a0:	f003 0307 	and.w	r3, r3, #7
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
       ||
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d047      	beq.n	800643e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	73fb      	strb	r3, [r7, #15]
 80063b2:	e044      	b.n	800643e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d018      	beq.n	80063ee <RCCEx_PLLSAI1_Config+0x86>
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d825      	bhi.n	800640c <RCCEx_PLLSAI1_Config+0xa4>
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d002      	beq.n	80063ca <RCCEx_PLLSAI1_Config+0x62>
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d009      	beq.n	80063dc <RCCEx_PLLSAI1_Config+0x74>
 80063c8:	e020      	b.n	800640c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80063ca:	4b5f      	ldr	r3, [pc, #380]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d11d      	bne.n	8006412 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063da:	e01a      	b.n	8006412 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063dc:	4b5a      	ldr	r3, [pc, #360]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d116      	bne.n	8006416 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063ec:	e013      	b.n	8006416 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80063ee:	4b56      	ldr	r3, [pc, #344]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10f      	bne.n	800641a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80063fa:	4b53      	ldr	r3, [pc, #332]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d109      	bne.n	800641a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800640a:	e006      	b.n	800641a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	73fb      	strb	r3, [r7, #15]
      break;
 8006410:	e004      	b.n	800641c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006412:	bf00      	nop
 8006414:	e002      	b.n	800641c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006416:	bf00      	nop
 8006418:	e000      	b.n	800641c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800641a:	bf00      	nop
    }

    if(status == HAL_OK)
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10d      	bne.n	800643e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006422:	4b49      	ldr	r3, [pc, #292]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6819      	ldr	r1, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	3b01      	subs	r3, #1
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	430b      	orrs	r3, r1
 8006438:	4943      	ldr	r1, [pc, #268]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 800643a:	4313      	orrs	r3, r2
 800643c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800643e:	7bfb      	ldrb	r3, [r7, #15]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d17c      	bne.n	800653e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006444:	4b40      	ldr	r3, [pc, #256]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a3f      	ldr	r2, [pc, #252]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 800644a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800644e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006450:	f7fd fb58 	bl	8003b04 <HAL_GetTick>
 8006454:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006456:	e009      	b.n	800646c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006458:	f7fd fb54 	bl	8003b04 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d902      	bls.n	800646c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	73fb      	strb	r3, [r7, #15]
        break;
 800646a:	e005      	b.n	8006478 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800646c:	4b36      	ldr	r3, [pc, #216]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1ef      	bne.n	8006458 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d15f      	bne.n	800653e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d110      	bne.n	80064a6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006484:	4b30      	ldr	r3, [pc, #192]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800648c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6892      	ldr	r2, [r2, #8]
 8006494:	0211      	lsls	r1, r2, #8
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	68d2      	ldr	r2, [r2, #12]
 800649a:	06d2      	lsls	r2, r2, #27
 800649c:	430a      	orrs	r2, r1
 800649e:	492a      	ldr	r1, [pc, #168]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	610b      	str	r3, [r1, #16]
 80064a4:	e027      	b.n	80064f6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d112      	bne.n	80064d2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064ac:	4b26      	ldr	r3, [pc, #152]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80064b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6892      	ldr	r2, [r2, #8]
 80064bc:	0211      	lsls	r1, r2, #8
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	6912      	ldr	r2, [r2, #16]
 80064c2:	0852      	lsrs	r2, r2, #1
 80064c4:	3a01      	subs	r2, #1
 80064c6:	0552      	lsls	r2, r2, #21
 80064c8:	430a      	orrs	r2, r1
 80064ca:	491f      	ldr	r1, [pc, #124]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	610b      	str	r3, [r1, #16]
 80064d0:	e011      	b.n	80064f6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064d2:	4b1d      	ldr	r3, [pc, #116]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80064da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6892      	ldr	r2, [r2, #8]
 80064e2:	0211      	lsls	r1, r2, #8
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6952      	ldr	r2, [r2, #20]
 80064e8:	0852      	lsrs	r2, r2, #1
 80064ea:	3a01      	subs	r2, #1
 80064ec:	0652      	lsls	r2, r2, #25
 80064ee:	430a      	orrs	r2, r1
 80064f0:	4915      	ldr	r1, [pc, #84]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80064f6:	4b14      	ldr	r3, [pc, #80]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a13      	ldr	r2, [pc, #76]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006500:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006502:	f7fd faff 	bl	8003b04 <HAL_GetTick>
 8006506:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006508:	e009      	b.n	800651e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800650a:	f7fd fafb 	bl	8003b04 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d902      	bls.n	800651e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	73fb      	strb	r3, [r7, #15]
          break;
 800651c:	e005      	b.n	800652a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800651e:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0ef      	beq.n	800650a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d106      	bne.n	800653e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006530:	4b05      	ldr	r3, [pc, #20]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006532:	691a      	ldr	r2, [r3, #16]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	4903      	ldr	r1, [pc, #12]	; (8006548 <RCCEx_PLLSAI1_Config+0x1e0>)
 800653a:	4313      	orrs	r3, r2
 800653c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800653e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40021000 	.word	0x40021000

0800654c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e095      	b.n	800668a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	2b00      	cmp	r3, #0
 8006564:	d108      	bne.n	8006578 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800656e:	d009      	beq.n	8006584 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	61da      	str	r2, [r3, #28]
 8006576:	e005      	b.n	8006584 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d106      	bne.n	80065a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7fc fe60 	bl	8003264 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065c4:	d902      	bls.n	80065cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	e002      	b.n	80065d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80065cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80065da:	d007      	beq.n	80065ec <HAL_SPI_Init+0xa0>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065e4:	d002      	beq.n	80065ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80065fc:	431a      	orrs	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	431a      	orrs	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	431a      	orrs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800661a:	431a      	orrs	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006624:	431a      	orrs	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662e:	ea42 0103 	orr.w	r1, r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006636:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	0c1b      	lsrs	r3, r3, #16
 8006648:	f003 0204 	and.w	r2, r3, #4
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	f003 0310 	and.w	r3, r3, #16
 8006654:	431a      	orrs	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665a:	f003 0308 	and.w	r3, r3, #8
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006668:	ea42 0103 	orr.w	r1, r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b088      	sub	sp, #32
 8006696:	af00      	add	r7, sp, #0
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	603b      	str	r3, [r7, #0]
 800669e:	4613      	mov	r3, r2
 80066a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_SPI_Transmit+0x22>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e158      	b.n	8006966 <HAL_SPI_Transmit+0x2d4>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066bc:	f7fd fa22 	bl	8003b04 <HAL_GetTick>
 80066c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d002      	beq.n	80066d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80066d2:	2302      	movs	r3, #2
 80066d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80066d6:	e13d      	b.n	8006954 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <HAL_SPI_Transmit+0x52>
 80066de:	88fb      	ldrh	r3, [r7, #6]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d102      	bne.n	80066ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80066e8:	e134      	b.n	8006954 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2203      	movs	r2, #3
 80066ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	88fa      	ldrh	r2, [r7, #6]
 8006702:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	88fa      	ldrh	r2, [r7, #6]
 8006708:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006734:	d10f      	bne.n	8006756 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006744:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006754:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006760:	2b40      	cmp	r3, #64	; 0x40
 8006762:	d007      	beq.n	8006774 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006772:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800677c:	d94b      	bls.n	8006816 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <HAL_SPI_Transmit+0xfa>
 8006786:	8afb      	ldrh	r3, [r7, #22]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d13e      	bne.n	800680a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006790:	881a      	ldrh	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679c:	1c9a      	adds	r2, r3, #2
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80067b0:	e02b      	b.n	800680a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d112      	bne.n	80067e6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c4:	881a      	ldrh	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d0:	1c9a      	adds	r2, r3, #2
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067da:	b29b      	uxth	r3, r3
 80067dc:	3b01      	subs	r3, #1
 80067de:	b29a      	uxth	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067e4:	e011      	b.n	800680a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067e6:	f7fd f98d 	bl	8003b04 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d803      	bhi.n	80067fe <HAL_SPI_Transmit+0x16c>
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067fc:	d102      	bne.n	8006804 <HAL_SPI_Transmit+0x172>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d102      	bne.n	800680a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006808:	e0a4      	b.n	8006954 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800680e:	b29b      	uxth	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1ce      	bne.n	80067b2 <HAL_SPI_Transmit+0x120>
 8006814:	e07c      	b.n	8006910 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <HAL_SPI_Transmit+0x192>
 800681e:	8afb      	ldrh	r3, [r7, #22]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d170      	bne.n	8006906 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006828:	b29b      	uxth	r3, r3
 800682a:	2b01      	cmp	r3, #1
 800682c:	d912      	bls.n	8006854 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006832:	881a      	ldrh	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683e:	1c9a      	adds	r2, r3, #2
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006848:	b29b      	uxth	r3, r3
 800684a:	3b02      	subs	r3, #2
 800684c:	b29a      	uxth	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006852:	e058      	b.n	8006906 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	330c      	adds	r3, #12
 800685e:	7812      	ldrb	r2, [r2, #0]
 8006860:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006870:	b29b      	uxth	r3, r3
 8006872:	3b01      	subs	r3, #1
 8006874:	b29a      	uxth	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800687a:	e044      	b.n	8006906 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b02      	cmp	r3, #2
 8006888:	d12b      	bne.n	80068e2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800688e:	b29b      	uxth	r3, r3
 8006890:	2b01      	cmp	r3, #1
 8006892:	d912      	bls.n	80068ba <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	881a      	ldrh	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	1c9a      	adds	r2, r3, #2
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	3b02      	subs	r3, #2
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068b8:	e025      	b.n	8006906 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	330c      	adds	r3, #12
 80068c4:	7812      	ldrb	r2, [r2, #0]
 80068c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068e0:	e011      	b.n	8006906 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068e2:	f7fd f90f 	bl	8003b04 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d803      	bhi.n	80068fa <HAL_SPI_Transmit+0x268>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068f8:	d102      	bne.n	8006900 <HAL_SPI_Transmit+0x26e>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d102      	bne.n	8006906 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006904:	e026      	b.n	8006954 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800690a:	b29b      	uxth	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1b5      	bne.n	800687c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 fe77 	bl	8007608 <SPI_EndRxTxTransaction>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2220      	movs	r2, #32
 8006924:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10a      	bne.n	8006944 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800692e:	2300      	movs	r3, #0
 8006930:	613b      	str	r3, [r7, #16]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	613b      	str	r3, [r7, #16]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	613b      	str	r3, [r7, #16]
 8006942:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	77fb      	strb	r3, [r7, #31]
 8006950:	e000      	b.n	8006954 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006952:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006964:	7ffb      	ldrb	r3, [r7, #31]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3720      	adds	r7, #32
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b088      	sub	sp, #32
 8006972:	af02      	add	r7, sp, #8
 8006974:	60f8      	str	r0, [r7, #12]
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	603b      	str	r3, [r7, #0]
 800697a:	4613      	mov	r3, r2
 800697c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800698a:	d112      	bne.n	80069b2 <HAL_SPI_Receive+0x44>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10e      	bne.n	80069b2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2204      	movs	r2, #4
 8006998:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800699c:	88fa      	ldrh	r2, [r7, #6]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	4613      	mov	r3, r2
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	68b9      	ldr	r1, [r7, #8]
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 f910 	bl	8006bce <HAL_SPI_TransmitReceive>
 80069ae:	4603      	mov	r3, r0
 80069b0:	e109      	b.n	8006bc6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d101      	bne.n	80069c0 <HAL_SPI_Receive+0x52>
 80069bc:	2302      	movs	r3, #2
 80069be:	e102      	b.n	8006bc6 <HAL_SPI_Receive+0x258>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069c8:	f7fd f89c 	bl	8003b04 <HAL_GetTick>
 80069cc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d002      	beq.n	80069e0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80069da:	2302      	movs	r3, #2
 80069dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069de:	e0e9      	b.n	8006bb4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <HAL_SPI_Receive+0x7e>
 80069e6:	88fb      	ldrh	r3, [r7, #6]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d102      	bne.n	80069f2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069f0:	e0e0      	b.n	8006bb4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2204      	movs	r2, #4
 80069f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	88fa      	ldrh	r2, [r7, #6]
 8006a0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	88fa      	ldrh	r2, [r7, #6]
 8006a12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a3c:	d908      	bls.n	8006a50 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a4c:	605a      	str	r2, [r3, #4]
 8006a4e:	e007      	b.n	8006a60 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a5e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a68:	d10f      	bne.n	8006a8a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a88:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a94:	2b40      	cmp	r3, #64	; 0x40
 8006a96:	d007      	beq.n	8006aa8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aa6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ab0:	d867      	bhi.n	8006b82 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006ab2:	e030      	b.n	8006b16 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d117      	bne.n	8006af2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f103 020c 	add.w	r2, r3, #12
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	7812      	ldrb	r2, [r2, #0]
 8006ad0:	b2d2      	uxtb	r2, r2
 8006ad2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006af0:	e011      	b.n	8006b16 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006af2:	f7fd f807 	bl	8003b04 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d803      	bhi.n	8006b0a <HAL_SPI_Receive+0x19c>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b08:	d102      	bne.n	8006b10 <HAL_SPI_Receive+0x1a2>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d102      	bne.n	8006b16 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b14:	e04e      	b.n	8006bb4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1c8      	bne.n	8006ab4 <HAL_SPI_Receive+0x146>
 8006b22:	e034      	b.n	8006b8e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d115      	bne.n	8006b5e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68da      	ldr	r2, [r3, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	b292      	uxth	r2, r2
 8006b3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	1c9a      	adds	r2, r3, #2
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	3b01      	subs	r3, #1
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006b5c:	e011      	b.n	8006b82 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b5e:	f7fc ffd1 	bl	8003b04 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d803      	bhi.n	8006b76 <HAL_SPI_Receive+0x208>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b74:	d102      	bne.n	8006b7c <HAL_SPI_Receive+0x20e>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d102      	bne.n	8006b82 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b80:	e018      	b.n	8006bb4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1ca      	bne.n	8006b24 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 fce0 	bl	8007558 <SPI_EndRxTransaction>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	75fb      	strb	r3, [r7, #23]
 8006bb0:	e000      	b.n	8006bb4 <HAL_SPI_Receive+0x246>
  }

error :
 8006bb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b08a      	sub	sp, #40	; 0x28
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	607a      	str	r2, [r7, #4]
 8006bda:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d101      	bne.n	8006bf4 <HAL_SPI_TransmitReceive+0x26>
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	e1fb      	b.n	8006fec <HAL_SPI_TransmitReceive+0x41e>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bfc:	f7fc ff82 	bl	8003b04 <HAL_GetTick>
 8006c00:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c08:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006c10:	887b      	ldrh	r3, [r7, #2]
 8006c12:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006c14:	887b      	ldrh	r3, [r7, #2]
 8006c16:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c18:	7efb      	ldrb	r3, [r7, #27]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d00e      	beq.n	8006c3c <HAL_SPI_TransmitReceive+0x6e>
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c24:	d106      	bne.n	8006c34 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d102      	bne.n	8006c34 <HAL_SPI_TransmitReceive+0x66>
 8006c2e:	7efb      	ldrb	r3, [r7, #27]
 8006c30:	2b04      	cmp	r3, #4
 8006c32:	d003      	beq.n	8006c3c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006c34:	2302      	movs	r3, #2
 8006c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006c3a:	e1cd      	b.n	8006fd8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d005      	beq.n	8006c4e <HAL_SPI_TransmitReceive+0x80>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <HAL_SPI_TransmitReceive+0x80>
 8006c48:	887b      	ldrh	r3, [r7, #2]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d103      	bne.n	8006c56 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006c54:	e1c0      	b.n	8006fd8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	d003      	beq.n	8006c6a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2205      	movs	r2, #5
 8006c66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	887a      	ldrh	r2, [r7, #2]
 8006c7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	887a      	ldrh	r2, [r7, #2]
 8006c82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	887a      	ldrh	r2, [r7, #2]
 8006c90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	887a      	ldrh	r2, [r7, #2]
 8006c96:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cac:	d802      	bhi.n	8006cb4 <HAL_SPI_TransmitReceive+0xe6>
 8006cae:	8a3b      	ldrh	r3, [r7, #16]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d908      	bls.n	8006cc6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006cc2:	605a      	str	r2, [r3, #4]
 8006cc4:	e007      	b.n	8006cd6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cd4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce0:	2b40      	cmp	r3, #64	; 0x40
 8006ce2:	d007      	beq.n	8006cf4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cfc:	d97c      	bls.n	8006df8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <HAL_SPI_TransmitReceive+0x13e>
 8006d06:	8a7b      	ldrh	r3, [r7, #18]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d169      	bne.n	8006de0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d10:	881a      	ldrh	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1c:	1c9a      	adds	r2, r3, #2
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d30:	e056      	b.n	8006de0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d11b      	bne.n	8006d78 <HAL_SPI_TransmitReceive+0x1aa>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d016      	beq.n	8006d78 <HAL_SPI_TransmitReceive+0x1aa>
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d113      	bne.n	8006d78 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d54:	881a      	ldrh	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d60:	1c9a      	adds	r2, r3, #2
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d11c      	bne.n	8006dc0 <HAL_SPI_TransmitReceive+0x1f2>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d016      	beq.n	8006dc0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9c:	b292      	uxth	r2, r2
 8006d9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da4:	1c9a      	adds	r2, r3, #2
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006dc0:	f7fc fea0 	bl	8003b04 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d807      	bhi.n	8006de0 <HAL_SPI_TransmitReceive+0x212>
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dd6:	d003      	beq.n	8006de0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006dde:	e0fb      	b.n	8006fd8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1a3      	bne.n	8006d32 <HAL_SPI_TransmitReceive+0x164>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d19d      	bne.n	8006d32 <HAL_SPI_TransmitReceive+0x164>
 8006df6:	e0df      	b.n	8006fb8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d003      	beq.n	8006e08 <HAL_SPI_TransmitReceive+0x23a>
 8006e00:	8a7b      	ldrh	r3, [r7, #18]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	f040 80cb 	bne.w	8006f9e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d912      	bls.n	8006e38 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e16:	881a      	ldrh	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e22:	1c9a      	adds	r2, r3, #2
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	3b02      	subs	r3, #2
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e36:	e0b2      	b.n	8006f9e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	330c      	adds	r3, #12
 8006e42:	7812      	ldrb	r2, [r2, #0]
 8006e44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4a:	1c5a      	adds	r2, r3, #1
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	3b01      	subs	r3, #1
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e5e:	e09e      	b.n	8006f9e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d134      	bne.n	8006ed8 <HAL_SPI_TransmitReceive+0x30a>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d02f      	beq.n	8006ed8 <HAL_SPI_TransmitReceive+0x30a>
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d12c      	bne.n	8006ed8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d912      	bls.n	8006eae <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8c:	881a      	ldrh	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e98:	1c9a      	adds	r2, r3, #2
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3b02      	subs	r3, #2
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006eac:	e012      	b.n	8006ed4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	330c      	adds	r3, #12
 8006eb8:	7812      	ldrb	r2, [r2, #0]
 8006eba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d148      	bne.n	8006f78 <HAL_SPI_TransmitReceive+0x3aa>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d042      	beq.n	8006f78 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d923      	bls.n	8006f46 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68da      	ldr	r2, [r3, #12]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	b292      	uxth	r2, r2
 8006f0a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f10:	1c9a      	adds	r2, r3, #2
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	3b02      	subs	r3, #2
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d81f      	bhi.n	8006f74 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f42:	605a      	str	r2, [r3, #4]
 8006f44:	e016      	b.n	8006f74 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f103 020c 	add.w	r2, r3, #12
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f52:	7812      	ldrb	r2, [r2, #0]
 8006f54:	b2d2      	uxtb	r2, r2
 8006f56:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f74:	2301      	movs	r3, #1
 8006f76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006f78:	f7fc fdc4 	bl	8003b04 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d803      	bhi.n	8006f90 <HAL_SPI_TransmitReceive+0x3c2>
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f8e:	d102      	bne.n	8006f96 <HAL_SPI_TransmitReceive+0x3c8>
 8006f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d103      	bne.n	8006f9e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006f9c:	e01c      	b.n	8006fd8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f47f af5b 	bne.w	8006e60 <HAL_SPI_TransmitReceive+0x292>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f47f af54 	bne.w	8006e60 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fb8:	69fa      	ldr	r2, [r7, #28]
 8006fba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 fb23 	bl	8007608 <SPI_EndRxTxTransaction>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d006      	beq.n	8006fd6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	661a      	str	r2, [r3, #96]	; 0x60
 8006fd4:	e000      	b.n	8006fd8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006fd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006fe8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3728      	adds	r7, #40	; 0x28
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	4613      	mov	r3, r2
 8007000:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800700c:	2b01      	cmp	r3, #1
 800700e:	d101      	bne.n	8007014 <HAL_SPI_Transmit_DMA+0x20>
 8007010:	2302      	movs	r3, #2
 8007012:	e0d8      	b.n	80071c6 <HAL_SPI_Transmit_DMA+0x1d2>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b01      	cmp	r3, #1
 8007026:	d002      	beq.n	800702e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007028:	2302      	movs	r3, #2
 800702a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800702c:	e0c6      	b.n	80071bc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <HAL_SPI_Transmit_DMA+0x46>
 8007034:	88fb      	ldrh	r3, [r7, #6]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d102      	bne.n	8007040 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800703e:	e0bd      	b.n	80071bc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2203      	movs	r2, #3
 8007044:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	88fa      	ldrh	r2, [r7, #6]
 8007058:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	88fa      	ldrh	r2, [r7, #6]
 800705e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800708a:	d10f      	bne.n	80070ac <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800709a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b0:	4a47      	ldr	r2, [pc, #284]	; (80071d0 <HAL_SPI_Transmit_DMA+0x1dc>)
 80070b2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b8:	4a46      	ldr	r2, [pc, #280]	; (80071d4 <HAL_SPI_Transmit_DMA+0x1e0>)
 80070ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c0:	4a45      	ldr	r2, [pc, #276]	; (80071d8 <HAL_SPI_Transmit_DMA+0x1e4>)
 80070c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c8:	2200      	movs	r2, #0
 80070ca:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070da:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070e4:	d82d      	bhi.n	8007142 <HAL_SPI_Transmit_DMA+0x14e>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070f0:	d127      	bne.n	8007142 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	f003 0301 	and.w	r3, r3, #1
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10f      	bne.n	8007120 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800710e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007114:	b29b      	uxth	r3, r3
 8007116:	085b      	lsrs	r3, r3, #1
 8007118:	b29a      	uxth	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800711e:	e010      	b.n	8007142 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800712e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007134:	b29b      	uxth	r3, r3
 8007136:	085b      	lsrs	r3, r3, #1
 8007138:	b29b      	uxth	r3, r3
 800713a:	3301      	adds	r3, #1
 800713c:	b29a      	uxth	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714a:	4619      	mov	r1, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	330c      	adds	r3, #12
 8007152:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007158:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800715a:	f7fc fecd 	bl	8003ef8 <HAL_DMA_Start_IT>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00c      	beq.n	800717e <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007168:	f043 0210 	orr.w	r2, r3, #16
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800717c:	e01e      	b.n	80071bc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007188:	2b40      	cmp	r3, #64	; 0x40
 800718a:	d007      	beq.n	800719c <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800719a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f042 0220 	orr.w	r2, r2, #32
 80071aa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0202 	orr.w	r2, r2, #2
 80071ba:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80071c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3718      	adds	r7, #24
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	080072bf 	.word	0x080072bf
 80071d4:	08007219 	.word	0x08007219
 80071d8:	080072db 	.word	0x080072db

080071dc <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007224:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007226:	f7fc fc6d 	bl	8003b04 <HAL_GetTick>
 800722a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0320 	and.w	r3, r3, #32
 8007236:	2b20      	cmp	r3, #32
 8007238:	d03b      	beq.n	80072b2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f022 0220 	bic.w	r2, r2, #32
 8007248:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 0202 	bic.w	r2, r2, #2
 8007258:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	2164      	movs	r1, #100	; 0x64
 800725e:	6978      	ldr	r0, [r7, #20]
 8007260:	f000 f9d2 	bl	8007608 <SPI_EndRxTxTransaction>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d005      	beq.n	8007276 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800726e:	f043 0220 	orr.w	r2, r3, #32
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10a      	bne.n	8007294 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800727e:	2300      	movs	r3, #0
 8007280:	60fb      	str	r3, [r7, #12]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2200      	movs	r2, #0
 8007298:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80072aa:	6978      	ldr	r0, [r7, #20]
 80072ac:	f7ff ffaa 	bl	8007204 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80072b0:	e002      	b.n	80072b8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80072b2:	6978      	ldr	r0, [r7, #20]
 80072b4:	f7ff ff92 	bl	80071dc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b084      	sub	sp, #16
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f7ff ff8f 	bl	80071f0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b084      	sub	sp, #16
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0203 	bic.w	r2, r2, #3
 80072f6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072fc:	f043 0210 	orr.w	r2, r3, #16
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f7ff ff79 	bl	8007204 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007312:	bf00      	nop
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b088      	sub	sp, #32
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	603b      	str	r3, [r7, #0]
 8007328:	4613      	mov	r3, r2
 800732a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800732c:	f7fc fbea 	bl	8003b04 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007334:	1a9b      	subs	r3, r3, r2
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	4413      	add	r3, r2
 800733a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800733c:	f7fc fbe2 	bl	8003b04 <HAL_GetTick>
 8007340:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007342:	4b39      	ldr	r3, [pc, #228]	; (8007428 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	015b      	lsls	r3, r3, #5
 8007348:	0d1b      	lsrs	r3, r3, #20
 800734a:	69fa      	ldr	r2, [r7, #28]
 800734c:	fb02 f303 	mul.w	r3, r2, r3
 8007350:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007352:	e054      	b.n	80073fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800735a:	d050      	beq.n	80073fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800735c:	f7fc fbd2 	bl	8003b04 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	69fa      	ldr	r2, [r7, #28]
 8007368:	429a      	cmp	r2, r3
 800736a:	d902      	bls.n	8007372 <SPI_WaitFlagStateUntilTimeout+0x56>
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d13d      	bne.n	80073ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007380:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800738a:	d111      	bne.n	80073b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007394:	d004      	beq.n	80073a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800739e:	d107      	bne.n	80073b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073b8:	d10f      	bne.n	80073da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073c8:	601a      	str	r2, [r3, #0]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e017      	b.n	800741e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689a      	ldr	r2, [r3, #8]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	4013      	ands	r3, r2
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	429a      	cmp	r2, r3
 800740c:	bf0c      	ite	eq
 800740e:	2301      	moveq	r3, #1
 8007410:	2300      	movne	r3, #0
 8007412:	b2db      	uxtb	r3, r3
 8007414:	461a      	mov	r2, r3
 8007416:	79fb      	ldrb	r3, [r7, #7]
 8007418:	429a      	cmp	r2, r3
 800741a:	d19b      	bne.n	8007354 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3720      	adds	r7, #32
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	20000000 	.word	0x20000000

0800742c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b08a      	sub	sp, #40	; 0x28
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
 8007438:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800743a:	2300      	movs	r3, #0
 800743c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800743e:	f7fc fb61 	bl	8003b04 <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	1a9b      	subs	r3, r3, r2
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	4413      	add	r3, r2
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800744e:	f7fc fb59 	bl	8003b04 <HAL_GetTick>
 8007452:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	330c      	adds	r3, #12
 800745a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800745c:	4b3d      	ldr	r3, [pc, #244]	; (8007554 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	4613      	mov	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	00da      	lsls	r2, r3, #3
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	0d1b      	lsrs	r3, r3, #20
 800746c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800746e:	fb02 f303 	mul.w	r3, r2, r3
 8007472:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007474:	e060      	b.n	8007538 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800747c:	d107      	bne.n	800748e <SPI_WaitFifoStateUntilTimeout+0x62>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d104      	bne.n	800748e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	b2db      	uxtb	r3, r3
 800748a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800748c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007494:	d050      	beq.n	8007538 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007496:	f7fc fb35 	bl	8003b04 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d902      	bls.n	80074ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d13d      	bne.n	8007528 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074c4:	d111      	bne.n	80074ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ce:	d004      	beq.n	80074da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074d8:	d107      	bne.n	80074ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074f2:	d10f      	bne.n	8007514 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007512:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e010      	b.n	800754a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d101      	bne.n	8007532 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800752e:	2300      	movs	r3, #0
 8007530:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	3b01      	subs	r3, #1
 8007536:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689a      	ldr	r2, [r3, #8]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	4013      	ands	r3, r2
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	429a      	cmp	r2, r3
 8007546:	d196      	bne.n	8007476 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3728      	adds	r7, #40	; 0x28
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	20000000 	.word	0x20000000

08007558 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af02      	add	r7, sp, #8
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800756c:	d111      	bne.n	8007592 <SPI_EndRxTransaction+0x3a>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007576:	d004      	beq.n	8007582 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007580:	d107      	bne.n	8007592 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007590:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2200      	movs	r2, #0
 800759a:	2180      	movs	r1, #128	; 0x80
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f7ff febd 	bl	800731c <SPI_WaitFlagStateUntilTimeout>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d007      	beq.n	80075b8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ac:	f043 0220 	orr.w	r2, r3, #32
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e023      	b.n	8007600 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075c0:	d11d      	bne.n	80075fe <SPI_EndRxTransaction+0xa6>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075ca:	d004      	beq.n	80075d6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d4:	d113      	bne.n	80075fe <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	2200      	movs	r2, #0
 80075de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f7ff ff22 	bl	800742c <SPI_WaitFifoStateUntilTimeout>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d007      	beq.n	80075fe <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075f2:	f043 0220 	orr.w	r2, r3, #32
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e000      	b.n	8007600 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af02      	add	r7, sp, #8
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2200      	movs	r2, #0
 800761c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f7ff ff03 	bl	800742c <SPI_WaitFifoStateUntilTimeout>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d007      	beq.n	800763c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007630:	f043 0220 	orr.w	r2, r3, #32
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e027      	b.n	800768c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2200      	movs	r2, #0
 8007644:	2180      	movs	r1, #128	; 0x80
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f7ff fe68 	bl	800731c <SPI_WaitFlagStateUntilTimeout>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d007      	beq.n	8007662 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007656:	f043 0220 	orr.w	r2, r3, #32
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e014      	b.n	800768c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2200      	movs	r2, #0
 800766a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f7ff fedc 	bl	800742c <SPI_WaitFifoStateUntilTimeout>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d007      	beq.n	800768a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800767e:	f043 0220 	orr.w	r2, r3, #32
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e000      	b.n	800768c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e049      	b.n	800773a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d106      	bne.n	80076c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7fc f916 	bl	80038ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2202      	movs	r2, #2
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3304      	adds	r3, #4
 80076d0:	4619      	mov	r1, r3
 80076d2:	4610      	mov	r0, r2
 80076d4:	f000 fc10 	bl	8007ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
	...

08007744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b01      	cmp	r3, #1
 8007756:	d001      	beq.n	800775c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e03b      	b.n	80077d4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f042 0201 	orr.w	r2, r2, #1
 8007772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a19      	ldr	r2, [pc, #100]	; (80077e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d009      	beq.n	8007792 <HAL_TIM_Base_Start_IT+0x4e>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007786:	d004      	beq.n	8007792 <HAL_TIM_Base_Start_IT+0x4e>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a15      	ldr	r2, [pc, #84]	; (80077e4 <HAL_TIM_Base_Start_IT+0xa0>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d115      	bne.n	80077be <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	4b13      	ldr	r3, [pc, #76]	; (80077e8 <HAL_TIM_Base_Start_IT+0xa4>)
 800779a:	4013      	ands	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2b06      	cmp	r3, #6
 80077a2:	d015      	beq.n	80077d0 <HAL_TIM_Base_Start_IT+0x8c>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077aa:	d011      	beq.n	80077d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f042 0201 	orr.w	r2, r2, #1
 80077ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077bc:	e008      	b.n	80077d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f042 0201 	orr.w	r2, r2, #1
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	e000      	b.n	80077d2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	40012c00 	.word	0x40012c00
 80077e4:	40014000 	.word	0x40014000
 80077e8:	00010007 	.word	0x00010007

080077ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e049      	b.n	8007892 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d106      	bne.n	8007818 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f841 	bl	800789a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3304      	adds	r3, #4
 8007828:	4619      	mov	r1, r3
 800782a:	4610      	mov	r0, r2
 800782c:	f000 fb64 	bl	8007ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800789a:	b480      	push	{r7}
 800789c:	b083      	sub	sp, #12
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078a2:	bf00      	nop
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b082      	sub	sp, #8
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	f003 0302 	and.w	r3, r3, #2
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d122      	bne.n	800790a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f003 0302 	and.w	r3, r3, #2
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d11b      	bne.n	800790a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f06f 0202 	mvn.w	r2, #2
 80078da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	f003 0303 	and.w	r3, r3, #3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d003      	beq.n	80078f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fae2 	bl	8007eba <HAL_TIM_IC_CaptureCallback>
 80078f6:	e005      	b.n	8007904 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fad4 	bl	8007ea6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fae5 	bl	8007ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	f003 0304 	and.w	r3, r3, #4
 8007914:	2b04      	cmp	r3, #4
 8007916:	d122      	bne.n	800795e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	f003 0304 	and.w	r3, r3, #4
 8007922:	2b04      	cmp	r3, #4
 8007924:	d11b      	bne.n	800795e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f06f 0204 	mvn.w	r2, #4
 800792e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	699b      	ldr	r3, [r3, #24]
 800793c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fab8 	bl	8007eba <HAL_TIM_IC_CaptureCallback>
 800794a:	e005      	b.n	8007958 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 faaa 	bl	8007ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fabb 	bl	8007ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	f003 0308 	and.w	r3, r3, #8
 8007968:	2b08      	cmp	r3, #8
 800796a:	d122      	bne.n	80079b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	f003 0308 	and.w	r3, r3, #8
 8007976:	2b08      	cmp	r3, #8
 8007978:	d11b      	bne.n	80079b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f06f 0208 	mvn.w	r2, #8
 8007982:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2204      	movs	r2, #4
 8007988:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	69db      	ldr	r3, [r3, #28]
 8007990:	f003 0303 	and.w	r3, r3, #3
 8007994:	2b00      	cmp	r3, #0
 8007996:	d003      	beq.n	80079a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fa8e 	bl	8007eba <HAL_TIM_IC_CaptureCallback>
 800799e:	e005      	b.n	80079ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fa80 	bl	8007ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fa91 	bl	8007ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	f003 0310 	and.w	r3, r3, #16
 80079bc:	2b10      	cmp	r3, #16
 80079be:	d122      	bne.n	8007a06 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	f003 0310 	and.w	r3, r3, #16
 80079ca:	2b10      	cmp	r3, #16
 80079cc:	d11b      	bne.n	8007a06 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f06f 0210 	mvn.w	r2, #16
 80079d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2208      	movs	r2, #8
 80079dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fa64 	bl	8007eba <HAL_TIM_IC_CaptureCallback>
 80079f2:	e005      	b.n	8007a00 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fa56 	bl	8007ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fa67 	bl	8007ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	f003 0301 	and.w	r3, r3, #1
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d10e      	bne.n	8007a32 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d107      	bne.n	8007a32 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f06f 0201 	mvn.w	r2, #1
 8007a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7fb fb6b 	bl	8003108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a3c:	2b80      	cmp	r3, #128	; 0x80
 8007a3e:	d10e      	bne.n	8007a5e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4a:	2b80      	cmp	r3, #128	; 0x80
 8007a4c:	d107      	bne.n	8007a5e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 feb1 	bl	80087c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a6c:	d10e      	bne.n	8007a8c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a78:	2b80      	cmp	r3, #128	; 0x80
 8007a7a:	d107      	bne.n	8007a8c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fea4 	bl	80087d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a96:	2b40      	cmp	r3, #64	; 0x40
 8007a98:	d10e      	bne.n	8007ab8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa4:	2b40      	cmp	r3, #64	; 0x40
 8007aa6:	d107      	bne.n	8007ab8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fa15 	bl	8007ee2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	f003 0320 	and.w	r3, r3, #32
 8007ac2:	2b20      	cmp	r3, #32
 8007ac4:	d10e      	bne.n	8007ae4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f003 0320 	and.w	r3, r3, #32
 8007ad0:	2b20      	cmp	r3, #32
 8007ad2:	d107      	bne.n	8007ae4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f06f 0220 	mvn.w	r2, #32
 8007adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fe64 	bl	80087ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ae4:	bf00      	nop
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d101      	bne.n	8007b0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b06:	2302      	movs	r3, #2
 8007b08:	e0ff      	b.n	8007d0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b14      	cmp	r3, #20
 8007b16:	f200 80f0 	bhi.w	8007cfa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007b1a:	a201      	add	r2, pc, #4	; (adr r2, 8007b20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b20:	08007b75 	.word	0x08007b75
 8007b24:	08007cfb 	.word	0x08007cfb
 8007b28:	08007cfb 	.word	0x08007cfb
 8007b2c:	08007cfb 	.word	0x08007cfb
 8007b30:	08007bb5 	.word	0x08007bb5
 8007b34:	08007cfb 	.word	0x08007cfb
 8007b38:	08007cfb 	.word	0x08007cfb
 8007b3c:	08007cfb 	.word	0x08007cfb
 8007b40:	08007bf7 	.word	0x08007bf7
 8007b44:	08007cfb 	.word	0x08007cfb
 8007b48:	08007cfb 	.word	0x08007cfb
 8007b4c:	08007cfb 	.word	0x08007cfb
 8007b50:	08007c37 	.word	0x08007c37
 8007b54:	08007cfb 	.word	0x08007cfb
 8007b58:	08007cfb 	.word	0x08007cfb
 8007b5c:	08007cfb 	.word	0x08007cfb
 8007b60:	08007c79 	.word	0x08007c79
 8007b64:	08007cfb 	.word	0x08007cfb
 8007b68:	08007cfb 	.word	0x08007cfb
 8007b6c:	08007cfb 	.word	0x08007cfb
 8007b70:	08007cb9 	.word	0x08007cb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68b9      	ldr	r1, [r7, #8]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f000 fa20 	bl	8007fc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	699a      	ldr	r2, [r3, #24]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f042 0208 	orr.w	r2, r2, #8
 8007b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	699a      	ldr	r2, [r3, #24]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f022 0204 	bic.w	r2, r2, #4
 8007b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6999      	ldr	r1, [r3, #24]
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	691a      	ldr	r2, [r3, #16]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	619a      	str	r2, [r3, #24]
      break;
 8007bb2:	e0a5      	b.n	8007d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68b9      	ldr	r1, [r7, #8]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 fa7c 	bl	80080b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	699a      	ldr	r2, [r3, #24]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	699a      	ldr	r2, [r3, #24]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6999      	ldr	r1, [r3, #24]
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	021a      	lsls	r2, r3, #8
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	619a      	str	r2, [r3, #24]
      break;
 8007bf4:	e084      	b.n	8007d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68b9      	ldr	r1, [r7, #8]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 fad5 	bl	80081ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	69da      	ldr	r2, [r3, #28]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f042 0208 	orr.w	r2, r2, #8
 8007c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	69da      	ldr	r2, [r3, #28]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 0204 	bic.w	r2, r2, #4
 8007c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	69d9      	ldr	r1, [r3, #28]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	691a      	ldr	r2, [r3, #16]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	430a      	orrs	r2, r1
 8007c32:	61da      	str	r2, [r3, #28]
      break;
 8007c34:	e064      	b.n	8007d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68b9      	ldr	r1, [r7, #8]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 fb2d 	bl	800829c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	69da      	ldr	r2, [r3, #28]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	69da      	ldr	r2, [r3, #28]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	69d9      	ldr	r1, [r3, #28]
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	021a      	lsls	r2, r3, #8
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	430a      	orrs	r2, r1
 8007c74:	61da      	str	r2, [r3, #28]
      break;
 8007c76:	e043      	b.n	8007d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68b9      	ldr	r1, [r7, #8]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 fb6a 	bl	8008358 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f042 0208 	orr.w	r2, r2, #8
 8007c92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0204 	bic.w	r2, r2, #4
 8007ca2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	691a      	ldr	r2, [r3, #16]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007cb6:	e023      	b.n	8007d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68b9      	ldr	r1, [r7, #8]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 fba2 	bl	8008408 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ce2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	021a      	lsls	r2, r3, #8
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007cf8:	e002      	b.n	8007d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8007cfe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3718      	adds	r7, #24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop

08007d14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d101      	bne.n	8007d30 <HAL_TIM_ConfigClockSource+0x1c>
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	e0b6      	b.n	8007e9e <HAL_TIM_ConfigClockSource+0x18a>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d6c:	d03e      	beq.n	8007dec <HAL_TIM_ConfigClockSource+0xd8>
 8007d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d72:	f200 8087 	bhi.w	8007e84 <HAL_TIM_ConfigClockSource+0x170>
 8007d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d7a:	f000 8086 	beq.w	8007e8a <HAL_TIM_ConfigClockSource+0x176>
 8007d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d82:	d87f      	bhi.n	8007e84 <HAL_TIM_ConfigClockSource+0x170>
 8007d84:	2b70      	cmp	r3, #112	; 0x70
 8007d86:	d01a      	beq.n	8007dbe <HAL_TIM_ConfigClockSource+0xaa>
 8007d88:	2b70      	cmp	r3, #112	; 0x70
 8007d8a:	d87b      	bhi.n	8007e84 <HAL_TIM_ConfigClockSource+0x170>
 8007d8c:	2b60      	cmp	r3, #96	; 0x60
 8007d8e:	d050      	beq.n	8007e32 <HAL_TIM_ConfigClockSource+0x11e>
 8007d90:	2b60      	cmp	r3, #96	; 0x60
 8007d92:	d877      	bhi.n	8007e84 <HAL_TIM_ConfigClockSource+0x170>
 8007d94:	2b50      	cmp	r3, #80	; 0x50
 8007d96:	d03c      	beq.n	8007e12 <HAL_TIM_ConfigClockSource+0xfe>
 8007d98:	2b50      	cmp	r3, #80	; 0x50
 8007d9a:	d873      	bhi.n	8007e84 <HAL_TIM_ConfigClockSource+0x170>
 8007d9c:	2b40      	cmp	r3, #64	; 0x40
 8007d9e:	d058      	beq.n	8007e52 <HAL_TIM_ConfigClockSource+0x13e>
 8007da0:	2b40      	cmp	r3, #64	; 0x40
 8007da2:	d86f      	bhi.n	8007e84 <HAL_TIM_ConfigClockSource+0x170>
 8007da4:	2b30      	cmp	r3, #48	; 0x30
 8007da6:	d064      	beq.n	8007e72 <HAL_TIM_ConfigClockSource+0x15e>
 8007da8:	2b30      	cmp	r3, #48	; 0x30
 8007daa:	d86b      	bhi.n	8007e84 <HAL_TIM_ConfigClockSource+0x170>
 8007dac:	2b20      	cmp	r3, #32
 8007dae:	d060      	beq.n	8007e72 <HAL_TIM_ConfigClockSource+0x15e>
 8007db0:	2b20      	cmp	r3, #32
 8007db2:	d867      	bhi.n	8007e84 <HAL_TIM_ConfigClockSource+0x170>
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d05c      	beq.n	8007e72 <HAL_TIM_ConfigClockSource+0x15e>
 8007db8:	2b10      	cmp	r3, #16
 8007dba:	d05a      	beq.n	8007e72 <HAL_TIM_ConfigClockSource+0x15e>
 8007dbc:	e062      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6818      	ldr	r0, [r3, #0]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	6899      	ldr	r1, [r3, #8]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	f000 fbef 	bl	80085b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007de0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	609a      	str	r2, [r3, #8]
      break;
 8007dea:	e04f      	b.n	8007e8c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6818      	ldr	r0, [r3, #0]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	6899      	ldr	r1, [r3, #8]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	685a      	ldr	r2, [r3, #4]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f000 fbd8 	bl	80085b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689a      	ldr	r2, [r3, #8]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e0e:	609a      	str	r2, [r3, #8]
      break;
 8007e10:	e03c      	b.n	8007e8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6818      	ldr	r0, [r3, #0]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	6859      	ldr	r1, [r3, #4]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	f000 fb4c 	bl	80084bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2150      	movs	r1, #80	; 0x50
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 fba5 	bl	800857a <TIM_ITRx_SetConfig>
      break;
 8007e30:	e02c      	b.n	8007e8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6818      	ldr	r0, [r3, #0]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	6859      	ldr	r1, [r3, #4]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	f000 fb6b 	bl	800851a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2160      	movs	r1, #96	; 0x60
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 fb95 	bl	800857a <TIM_ITRx_SetConfig>
      break;
 8007e50:	e01c      	b.n	8007e8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6818      	ldr	r0, [r3, #0]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	6859      	ldr	r1, [r3, #4]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f000 fb2c 	bl	80084bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2140      	movs	r1, #64	; 0x40
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 fb85 	bl	800857a <TIM_ITRx_SetConfig>
      break;
 8007e70:	e00c      	b.n	8007e8c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	4610      	mov	r0, r2
 8007e7e:	f000 fb7c 	bl	800857a <TIM_ITRx_SetConfig>
      break;
 8007e82:	e003      	b.n	8007e8c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	73fb      	strb	r3, [r7, #15]
      break;
 8007e88:	e000      	b.n	8007e8c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007e8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b083      	sub	sp, #12
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007eae:	bf00      	nop
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b083      	sub	sp, #12
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ed6:	bf00      	nop
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b083      	sub	sp, #12
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
	...

08007ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a2a      	ldr	r2, [pc, #168]	; (8007fb4 <TIM_Base_SetConfig+0xbc>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d003      	beq.n	8007f18 <TIM_Base_SetConfig+0x20>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f16:	d108      	bne.n	8007f2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a21      	ldr	r2, [pc, #132]	; (8007fb4 <TIM_Base_SetConfig+0xbc>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d00b      	beq.n	8007f4a <TIM_Base_SetConfig+0x52>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f38:	d007      	beq.n	8007f4a <TIM_Base_SetConfig+0x52>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a1e      	ldr	r2, [pc, #120]	; (8007fb8 <TIM_Base_SetConfig+0xc0>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d003      	beq.n	8007f4a <TIM_Base_SetConfig+0x52>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a1d      	ldr	r2, [pc, #116]	; (8007fbc <TIM_Base_SetConfig+0xc4>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d108      	bne.n	8007f5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	689a      	ldr	r2, [r3, #8]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a0c      	ldr	r2, [pc, #48]	; (8007fb4 <TIM_Base_SetConfig+0xbc>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d007      	beq.n	8007f98 <TIM_Base_SetConfig+0xa0>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a0b      	ldr	r2, [pc, #44]	; (8007fb8 <TIM_Base_SetConfig+0xc0>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d003      	beq.n	8007f98 <TIM_Base_SetConfig+0xa0>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a0a      	ldr	r2, [pc, #40]	; (8007fbc <TIM_Base_SetConfig+0xc4>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d103      	bne.n	8007fa0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	691a      	ldr	r2, [r3, #16]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	615a      	str	r2, [r3, #20]
}
 8007fa6:	bf00      	nop
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	40012c00 	.word	0x40012c00
 8007fb8:	40014000 	.word	0x40014000
 8007fbc:	40014400 	.word	0x40014400

08007fc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b087      	sub	sp, #28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	f023 0201 	bic.w	r2, r3, #1
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f023 0303 	bic.w	r3, r3, #3
 8007ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	4313      	orrs	r3, r2
 8008004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f023 0302 	bic.w	r3, r3, #2
 800800c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	4313      	orrs	r3, r2
 8008016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a24      	ldr	r2, [pc, #144]	; (80080ac <TIM_OC1_SetConfig+0xec>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d007      	beq.n	8008030 <TIM_OC1_SetConfig+0x70>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a23      	ldr	r2, [pc, #140]	; (80080b0 <TIM_OC1_SetConfig+0xf0>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d003      	beq.n	8008030 <TIM_OC1_SetConfig+0x70>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a22      	ldr	r2, [pc, #136]	; (80080b4 <TIM_OC1_SetConfig+0xf4>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d10c      	bne.n	800804a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f023 0308 	bic.w	r3, r3, #8
 8008036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	4313      	orrs	r3, r2
 8008040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f023 0304 	bic.w	r3, r3, #4
 8008048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a17      	ldr	r2, [pc, #92]	; (80080ac <TIM_OC1_SetConfig+0xec>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d007      	beq.n	8008062 <TIM_OC1_SetConfig+0xa2>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a16      	ldr	r2, [pc, #88]	; (80080b0 <TIM_OC1_SetConfig+0xf0>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d003      	beq.n	8008062 <TIM_OC1_SetConfig+0xa2>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a15      	ldr	r2, [pc, #84]	; (80080b4 <TIM_OC1_SetConfig+0xf4>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d111      	bne.n	8008086 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	4313      	orrs	r3, r2
 800807a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	4313      	orrs	r3, r2
 8008084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	697a      	ldr	r2, [r7, #20]
 800809e:	621a      	str	r2, [r3, #32]
}
 80080a0:	bf00      	nop
 80080a2:	371c      	adds	r7, #28
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	40012c00 	.word	0x40012c00
 80080b0:	40014000 	.word	0x40014000
 80080b4:	40014400 	.word	0x40014400

080080b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b087      	sub	sp, #28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	f023 0210 	bic.w	r2, r3, #16
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	021b      	lsls	r3, r3, #8
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	f023 0320 	bic.w	r3, r3, #32
 8008106:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	011b      	lsls	r3, r3, #4
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	4313      	orrs	r3, r2
 8008112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a22      	ldr	r2, [pc, #136]	; (80081a0 <TIM_OC2_SetConfig+0xe8>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d10d      	bne.n	8008138 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	011b      	lsls	r3, r3, #4
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	4313      	orrs	r3, r2
 800812e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008136:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a19      	ldr	r2, [pc, #100]	; (80081a0 <TIM_OC2_SetConfig+0xe8>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d007      	beq.n	8008150 <TIM_OC2_SetConfig+0x98>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a18      	ldr	r2, [pc, #96]	; (80081a4 <TIM_OC2_SetConfig+0xec>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d003      	beq.n	8008150 <TIM_OC2_SetConfig+0x98>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a17      	ldr	r2, [pc, #92]	; (80081a8 <TIM_OC2_SetConfig+0xf0>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d113      	bne.n	8008178 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008156:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800815e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	4313      	orrs	r3, r2
 800816a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	693a      	ldr	r2, [r7, #16]
 8008174:	4313      	orrs	r3, r2
 8008176:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	621a      	str	r2, [r3, #32]
}
 8008192:	bf00      	nop
 8008194:	371c      	adds	r7, #28
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	40012c00 	.word	0x40012c00
 80081a4:	40014000 	.word	0x40014000
 80081a8:	40014400 	.word	0x40014400

080081ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b087      	sub	sp, #28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	69db      	ldr	r3, [r3, #28]
 80081d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f023 0303 	bic.w	r3, r3, #3
 80081e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	021b      	lsls	r3, r3, #8
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	4313      	orrs	r3, r2
 8008204:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a21      	ldr	r2, [pc, #132]	; (8008290 <TIM_OC3_SetConfig+0xe4>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d10d      	bne.n	800822a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	021b      	lsls	r3, r3, #8
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	4313      	orrs	r3, r2
 8008220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a18      	ldr	r2, [pc, #96]	; (8008290 <TIM_OC3_SetConfig+0xe4>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d007      	beq.n	8008242 <TIM_OC3_SetConfig+0x96>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a17      	ldr	r2, [pc, #92]	; (8008294 <TIM_OC3_SetConfig+0xe8>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d003      	beq.n	8008242 <TIM_OC3_SetConfig+0x96>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a16      	ldr	r2, [pc, #88]	; (8008298 <TIM_OC3_SetConfig+0xec>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d113      	bne.n	800826a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4313      	orrs	r3, r2
 800825c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	011b      	lsls	r3, r3, #4
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	4313      	orrs	r3, r2
 8008268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	685a      	ldr	r2, [r3, #4]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	621a      	str	r2, [r3, #32]
}
 8008284:	bf00      	nop
 8008286:	371c      	adds	r7, #28
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	40012c00 	.word	0x40012c00
 8008294:	40014000 	.word	0x40014000
 8008298:	40014400 	.word	0x40014400

0800829c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	021b      	lsls	r3, r3, #8
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	031b      	lsls	r3, r3, #12
 80082f2:	693a      	ldr	r2, [r7, #16]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a14      	ldr	r2, [pc, #80]	; (800834c <TIM_OC4_SetConfig+0xb0>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d007      	beq.n	8008310 <TIM_OC4_SetConfig+0x74>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a13      	ldr	r2, [pc, #76]	; (8008350 <TIM_OC4_SetConfig+0xb4>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d003      	beq.n	8008310 <TIM_OC4_SetConfig+0x74>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a12      	ldr	r2, [pc, #72]	; (8008354 <TIM_OC4_SetConfig+0xb8>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d109      	bne.n	8008324 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008316:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	019b      	lsls	r3, r3, #6
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	4313      	orrs	r3, r2
 8008322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	621a      	str	r2, [r3, #32]
}
 800833e:	bf00      	nop
 8008340:	371c      	adds	r7, #28
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	40012c00 	.word	0x40012c00
 8008350:	40014000 	.word	0x40014000
 8008354:	40014400 	.word	0x40014400

08008358 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800837e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800838a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	4313      	orrs	r3, r2
 8008394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800839c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	041b      	lsls	r3, r3, #16
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a13      	ldr	r2, [pc, #76]	; (80083fc <TIM_OC5_SetConfig+0xa4>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d007      	beq.n	80083c2 <TIM_OC5_SetConfig+0x6a>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a12      	ldr	r2, [pc, #72]	; (8008400 <TIM_OC5_SetConfig+0xa8>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d003      	beq.n	80083c2 <TIM_OC5_SetConfig+0x6a>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a11      	ldr	r2, [pc, #68]	; (8008404 <TIM_OC5_SetConfig+0xac>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d109      	bne.n	80083d6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	021b      	lsls	r3, r3, #8
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	697a      	ldr	r2, [r7, #20]
 80083da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	621a      	str	r2, [r3, #32]
}
 80083f0:	bf00      	nop
 80083f2:	371c      	adds	r7, #28
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	40012c00 	.word	0x40012c00
 8008400:	40014000 	.word	0x40014000
 8008404:	40014400 	.word	0x40014400

08008408 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008408:	b480      	push	{r7}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a1b      	ldr	r3, [r3, #32]
 8008416:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800842e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800843a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	021b      	lsls	r3, r3, #8
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	4313      	orrs	r3, r2
 8008446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800844e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	051b      	lsls	r3, r3, #20
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	4313      	orrs	r3, r2
 800845a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a14      	ldr	r2, [pc, #80]	; (80084b0 <TIM_OC6_SetConfig+0xa8>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d007      	beq.n	8008474 <TIM_OC6_SetConfig+0x6c>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a13      	ldr	r2, [pc, #76]	; (80084b4 <TIM_OC6_SetConfig+0xac>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d003      	beq.n	8008474 <TIM_OC6_SetConfig+0x6c>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a12      	ldr	r2, [pc, #72]	; (80084b8 <TIM_OC6_SetConfig+0xb0>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d109      	bne.n	8008488 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800847a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	029b      	lsls	r3, r3, #10
 8008482:	697a      	ldr	r2, [r7, #20]
 8008484:	4313      	orrs	r3, r2
 8008486:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	685a      	ldr	r2, [r3, #4]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	693a      	ldr	r2, [r7, #16]
 80084a0:	621a      	str	r2, [r3, #32]
}
 80084a2:	bf00      	nop
 80084a4:	371c      	adds	r7, #28
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	40012c00 	.word	0x40012c00
 80084b4:	40014000 	.word	0x40014000
 80084b8:	40014400 	.word	0x40014400

080084bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084bc:	b480      	push	{r7}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	f023 0201 	bic.w	r2, r3, #1
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	011b      	lsls	r3, r3, #4
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f023 030a 	bic.w	r3, r3, #10
 80084f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	4313      	orrs	r3, r2
 8008500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	621a      	str	r2, [r3, #32]
}
 800850e:	bf00      	nop
 8008510:	371c      	adds	r7, #28
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800851a:	b480      	push	{r7}
 800851c:	b087      	sub	sp, #28
 800851e:	af00      	add	r7, sp, #0
 8008520:	60f8      	str	r0, [r7, #12]
 8008522:	60b9      	str	r1, [r7, #8]
 8008524:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	f023 0210 	bic.w	r2, r3, #16
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008544:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	031b      	lsls	r3, r3, #12
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	4313      	orrs	r3, r2
 800854e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008556:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	011b      	lsls	r3, r3, #4
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	4313      	orrs	r3, r2
 8008560:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	621a      	str	r2, [r3, #32]
}
 800856e:	bf00      	nop
 8008570:	371c      	adds	r7, #28
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800857a:	b480      	push	{r7}
 800857c:	b085      	sub	sp, #20
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008590:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	4313      	orrs	r3, r2
 8008598:	f043 0307 	orr.w	r3, r3, #7
 800859c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	609a      	str	r2, [r3, #8]
}
 80085a4:	bf00      	nop
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	021a      	lsls	r2, r3, #8
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	431a      	orrs	r2, r3
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	4313      	orrs	r3, r2
 80085dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	609a      	str	r2, [r3, #8]
}
 80085e4:	bf00      	nop
 80085e6:	371c      	adds	r7, #28
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008600:	2b01      	cmp	r3, #1
 8008602:	d101      	bne.n	8008608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008604:	2302      	movs	r3, #2
 8008606:	e04f      	b.n	80086a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2202      	movs	r2, #2
 8008614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a21      	ldr	r2, [pc, #132]	; (80086b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d108      	bne.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008638:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	4313      	orrs	r3, r2
 8008642:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800864a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	4313      	orrs	r3, r2
 8008654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a14      	ldr	r2, [pc, #80]	; (80086b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d009      	beq.n	800867c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008670:	d004      	beq.n	800867c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a10      	ldr	r2, [pc, #64]	; (80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d10c      	bne.n	8008696 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008682:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	4313      	orrs	r3, r2
 800868c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2201      	movs	r2, #1
 800869a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr
 80086b4:	40012c00 	.word	0x40012c00
 80086b8:	40014000 	.word	0x40014000

080086bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d101      	bne.n	80086d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80086d4:	2302      	movs	r3, #2
 80086d6:	e060      	b.n	800879a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	4313      	orrs	r3, r2
 8008708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4313      	orrs	r3, r2
 8008716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	4313      	orrs	r3, r2
 8008724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	4313      	orrs	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	041b      	lsls	r3, r3, #16
 800874e:	4313      	orrs	r3, r2
 8008750:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a14      	ldr	r2, [pc, #80]	; (80087a8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d115      	bne.n	8008788 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008766:	051b      	lsls	r3, r3, #20
 8008768:	4313      	orrs	r3, r2
 800876a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	4313      	orrs	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	6a1b      	ldr	r3, [r3, #32]
 8008784:	4313      	orrs	r3, r2
 8008786:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3714      	adds	r7, #20
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	40012c00 	.word	0x40012c00

080087ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087c8:	bf00      	nop
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80087dc:	bf00      	nop
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <__errno>:
 80087e8:	4b01      	ldr	r3, [pc, #4]	; (80087f0 <__errno+0x8>)
 80087ea:	6818      	ldr	r0, [r3, #0]
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	2000000c 	.word	0x2000000c

080087f4 <__libc_init_array>:
 80087f4:	b570      	push	{r4, r5, r6, lr}
 80087f6:	4d0d      	ldr	r5, [pc, #52]	; (800882c <__libc_init_array+0x38>)
 80087f8:	4c0d      	ldr	r4, [pc, #52]	; (8008830 <__libc_init_array+0x3c>)
 80087fa:	1b64      	subs	r4, r4, r5
 80087fc:	10a4      	asrs	r4, r4, #2
 80087fe:	2600      	movs	r6, #0
 8008800:	42a6      	cmp	r6, r4
 8008802:	d109      	bne.n	8008818 <__libc_init_array+0x24>
 8008804:	4d0b      	ldr	r5, [pc, #44]	; (8008834 <__libc_init_array+0x40>)
 8008806:	4c0c      	ldr	r4, [pc, #48]	; (8008838 <__libc_init_array+0x44>)
 8008808:	f000 ff48 	bl	800969c <_init>
 800880c:	1b64      	subs	r4, r4, r5
 800880e:	10a4      	asrs	r4, r4, #2
 8008810:	2600      	movs	r6, #0
 8008812:	42a6      	cmp	r6, r4
 8008814:	d105      	bne.n	8008822 <__libc_init_array+0x2e>
 8008816:	bd70      	pop	{r4, r5, r6, pc}
 8008818:	f855 3b04 	ldr.w	r3, [r5], #4
 800881c:	4798      	blx	r3
 800881e:	3601      	adds	r6, #1
 8008820:	e7ee      	b.n	8008800 <__libc_init_array+0xc>
 8008822:	f855 3b04 	ldr.w	r3, [r5], #4
 8008826:	4798      	blx	r3
 8008828:	3601      	adds	r6, #1
 800882a:	e7f2      	b.n	8008812 <__libc_init_array+0x1e>
 800882c:	08009750 	.word	0x08009750
 8008830:	08009750 	.word	0x08009750
 8008834:	08009750 	.word	0x08009750
 8008838:	08009754 	.word	0x08009754

0800883c <memcpy>:
 800883c:	440a      	add	r2, r1
 800883e:	4291      	cmp	r1, r2
 8008840:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008844:	d100      	bne.n	8008848 <memcpy+0xc>
 8008846:	4770      	bx	lr
 8008848:	b510      	push	{r4, lr}
 800884a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800884e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008852:	4291      	cmp	r1, r2
 8008854:	d1f9      	bne.n	800884a <memcpy+0xe>
 8008856:	bd10      	pop	{r4, pc}

08008858 <memset>:
 8008858:	4402      	add	r2, r0
 800885a:	4603      	mov	r3, r0
 800885c:	4293      	cmp	r3, r2
 800885e:	d100      	bne.n	8008862 <memset+0xa>
 8008860:	4770      	bx	lr
 8008862:	f803 1b01 	strb.w	r1, [r3], #1
 8008866:	e7f9      	b.n	800885c <memset+0x4>

08008868 <pow>:
 8008868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886a:	ed2d 8b02 	vpush	{d8}
 800886e:	eeb0 8a40 	vmov.f32	s16, s0
 8008872:	eef0 8a60 	vmov.f32	s17, s1
 8008876:	ec55 4b11 	vmov	r4, r5, d1
 800887a:	f000 f865 	bl	8008948 <__ieee754_pow>
 800887e:	4622      	mov	r2, r4
 8008880:	462b      	mov	r3, r5
 8008882:	4620      	mov	r0, r4
 8008884:	4629      	mov	r1, r5
 8008886:	ec57 6b10 	vmov	r6, r7, d0
 800888a:	f7f8 f8ff 	bl	8000a8c <__aeabi_dcmpun>
 800888e:	2800      	cmp	r0, #0
 8008890:	d13b      	bne.n	800890a <pow+0xa2>
 8008892:	ec51 0b18 	vmov	r0, r1, d8
 8008896:	2200      	movs	r2, #0
 8008898:	2300      	movs	r3, #0
 800889a:	f7f8 f8c5 	bl	8000a28 <__aeabi_dcmpeq>
 800889e:	b1b8      	cbz	r0, 80088d0 <pow+0x68>
 80088a0:	2200      	movs	r2, #0
 80088a2:	2300      	movs	r3, #0
 80088a4:	4620      	mov	r0, r4
 80088a6:	4629      	mov	r1, r5
 80088a8:	f7f8 f8be 	bl	8000a28 <__aeabi_dcmpeq>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	d146      	bne.n	800893e <pow+0xd6>
 80088b0:	ec45 4b10 	vmov	d0, r4, r5
 80088b4:	f000 fe61 	bl	800957a <finite>
 80088b8:	b338      	cbz	r0, 800890a <pow+0xa2>
 80088ba:	2200      	movs	r2, #0
 80088bc:	2300      	movs	r3, #0
 80088be:	4620      	mov	r0, r4
 80088c0:	4629      	mov	r1, r5
 80088c2:	f7f8 f8bb 	bl	8000a3c <__aeabi_dcmplt>
 80088c6:	b300      	cbz	r0, 800890a <pow+0xa2>
 80088c8:	f7ff ff8e 	bl	80087e8 <__errno>
 80088cc:	2322      	movs	r3, #34	; 0x22
 80088ce:	e01b      	b.n	8008908 <pow+0xa0>
 80088d0:	ec47 6b10 	vmov	d0, r6, r7
 80088d4:	f000 fe51 	bl	800957a <finite>
 80088d8:	b9e0      	cbnz	r0, 8008914 <pow+0xac>
 80088da:	eeb0 0a48 	vmov.f32	s0, s16
 80088de:	eef0 0a68 	vmov.f32	s1, s17
 80088e2:	f000 fe4a 	bl	800957a <finite>
 80088e6:	b1a8      	cbz	r0, 8008914 <pow+0xac>
 80088e8:	ec45 4b10 	vmov	d0, r4, r5
 80088ec:	f000 fe45 	bl	800957a <finite>
 80088f0:	b180      	cbz	r0, 8008914 <pow+0xac>
 80088f2:	4632      	mov	r2, r6
 80088f4:	463b      	mov	r3, r7
 80088f6:	4630      	mov	r0, r6
 80088f8:	4639      	mov	r1, r7
 80088fa:	f7f8 f8c7 	bl	8000a8c <__aeabi_dcmpun>
 80088fe:	2800      	cmp	r0, #0
 8008900:	d0e2      	beq.n	80088c8 <pow+0x60>
 8008902:	f7ff ff71 	bl	80087e8 <__errno>
 8008906:	2321      	movs	r3, #33	; 0x21
 8008908:	6003      	str	r3, [r0, #0]
 800890a:	ecbd 8b02 	vpop	{d8}
 800890e:	ec47 6b10 	vmov	d0, r6, r7
 8008912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008914:	2200      	movs	r2, #0
 8008916:	2300      	movs	r3, #0
 8008918:	4630      	mov	r0, r6
 800891a:	4639      	mov	r1, r7
 800891c:	f7f8 f884 	bl	8000a28 <__aeabi_dcmpeq>
 8008920:	2800      	cmp	r0, #0
 8008922:	d0f2      	beq.n	800890a <pow+0xa2>
 8008924:	eeb0 0a48 	vmov.f32	s0, s16
 8008928:	eef0 0a68 	vmov.f32	s1, s17
 800892c:	f000 fe25 	bl	800957a <finite>
 8008930:	2800      	cmp	r0, #0
 8008932:	d0ea      	beq.n	800890a <pow+0xa2>
 8008934:	ec45 4b10 	vmov	d0, r4, r5
 8008938:	f000 fe1f 	bl	800957a <finite>
 800893c:	e7c3      	b.n	80088c6 <pow+0x5e>
 800893e:	4f01      	ldr	r7, [pc, #4]	; (8008944 <pow+0xdc>)
 8008940:	2600      	movs	r6, #0
 8008942:	e7e2      	b.n	800890a <pow+0xa2>
 8008944:	3ff00000 	.word	0x3ff00000

08008948 <__ieee754_pow>:
 8008948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894c:	ed2d 8b06 	vpush	{d8-d10}
 8008950:	b089      	sub	sp, #36	; 0x24
 8008952:	ed8d 1b00 	vstr	d1, [sp]
 8008956:	e9dd 2900 	ldrd	r2, r9, [sp]
 800895a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800895e:	ea58 0102 	orrs.w	r1, r8, r2
 8008962:	ec57 6b10 	vmov	r6, r7, d0
 8008966:	d115      	bne.n	8008994 <__ieee754_pow+0x4c>
 8008968:	19b3      	adds	r3, r6, r6
 800896a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800896e:	4152      	adcs	r2, r2
 8008970:	4299      	cmp	r1, r3
 8008972:	4b89      	ldr	r3, [pc, #548]	; (8008b98 <__ieee754_pow+0x250>)
 8008974:	4193      	sbcs	r3, r2
 8008976:	f080 84d2 	bcs.w	800931e <__ieee754_pow+0x9d6>
 800897a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800897e:	4630      	mov	r0, r6
 8008980:	4639      	mov	r1, r7
 8008982:	f7f7 fc33 	bl	80001ec <__adddf3>
 8008986:	ec41 0b10 	vmov	d0, r0, r1
 800898a:	b009      	add	sp, #36	; 0x24
 800898c:	ecbd 8b06 	vpop	{d8-d10}
 8008990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008994:	4b81      	ldr	r3, [pc, #516]	; (8008b9c <__ieee754_pow+0x254>)
 8008996:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800899a:	429c      	cmp	r4, r3
 800899c:	ee10 aa10 	vmov	sl, s0
 80089a0:	463d      	mov	r5, r7
 80089a2:	dc06      	bgt.n	80089b2 <__ieee754_pow+0x6a>
 80089a4:	d101      	bne.n	80089aa <__ieee754_pow+0x62>
 80089a6:	2e00      	cmp	r6, #0
 80089a8:	d1e7      	bne.n	800897a <__ieee754_pow+0x32>
 80089aa:	4598      	cmp	r8, r3
 80089ac:	dc01      	bgt.n	80089b2 <__ieee754_pow+0x6a>
 80089ae:	d10f      	bne.n	80089d0 <__ieee754_pow+0x88>
 80089b0:	b172      	cbz	r2, 80089d0 <__ieee754_pow+0x88>
 80089b2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80089b6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80089ba:	ea55 050a 	orrs.w	r5, r5, sl
 80089be:	d1dc      	bne.n	800897a <__ieee754_pow+0x32>
 80089c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80089c4:	18db      	adds	r3, r3, r3
 80089c6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80089ca:	4152      	adcs	r2, r2
 80089cc:	429d      	cmp	r5, r3
 80089ce:	e7d0      	b.n	8008972 <__ieee754_pow+0x2a>
 80089d0:	2d00      	cmp	r5, #0
 80089d2:	da3b      	bge.n	8008a4c <__ieee754_pow+0x104>
 80089d4:	4b72      	ldr	r3, [pc, #456]	; (8008ba0 <__ieee754_pow+0x258>)
 80089d6:	4598      	cmp	r8, r3
 80089d8:	dc51      	bgt.n	8008a7e <__ieee754_pow+0x136>
 80089da:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80089de:	4598      	cmp	r8, r3
 80089e0:	f340 84ac 	ble.w	800933c <__ieee754_pow+0x9f4>
 80089e4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80089e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80089ec:	2b14      	cmp	r3, #20
 80089ee:	dd0f      	ble.n	8008a10 <__ieee754_pow+0xc8>
 80089f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80089f4:	fa22 f103 	lsr.w	r1, r2, r3
 80089f8:	fa01 f303 	lsl.w	r3, r1, r3
 80089fc:	4293      	cmp	r3, r2
 80089fe:	f040 849d 	bne.w	800933c <__ieee754_pow+0x9f4>
 8008a02:	f001 0101 	and.w	r1, r1, #1
 8008a06:	f1c1 0302 	rsb	r3, r1, #2
 8008a0a:	9304      	str	r3, [sp, #16]
 8008a0c:	b182      	cbz	r2, 8008a30 <__ieee754_pow+0xe8>
 8008a0e:	e05f      	b.n	8008ad0 <__ieee754_pow+0x188>
 8008a10:	2a00      	cmp	r2, #0
 8008a12:	d15b      	bne.n	8008acc <__ieee754_pow+0x184>
 8008a14:	f1c3 0314 	rsb	r3, r3, #20
 8008a18:	fa48 f103 	asr.w	r1, r8, r3
 8008a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a20:	4543      	cmp	r3, r8
 8008a22:	f040 8488 	bne.w	8009336 <__ieee754_pow+0x9ee>
 8008a26:	f001 0101 	and.w	r1, r1, #1
 8008a2a:	f1c1 0302 	rsb	r3, r1, #2
 8008a2e:	9304      	str	r3, [sp, #16]
 8008a30:	4b5c      	ldr	r3, [pc, #368]	; (8008ba4 <__ieee754_pow+0x25c>)
 8008a32:	4598      	cmp	r8, r3
 8008a34:	d132      	bne.n	8008a9c <__ieee754_pow+0x154>
 8008a36:	f1b9 0f00 	cmp.w	r9, #0
 8008a3a:	f280 8478 	bge.w	800932e <__ieee754_pow+0x9e6>
 8008a3e:	4959      	ldr	r1, [pc, #356]	; (8008ba4 <__ieee754_pow+0x25c>)
 8008a40:	4632      	mov	r2, r6
 8008a42:	463b      	mov	r3, r7
 8008a44:	2000      	movs	r0, #0
 8008a46:	f7f7 feb1 	bl	80007ac <__aeabi_ddiv>
 8008a4a:	e79c      	b.n	8008986 <__ieee754_pow+0x3e>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	9304      	str	r3, [sp, #16]
 8008a50:	2a00      	cmp	r2, #0
 8008a52:	d13d      	bne.n	8008ad0 <__ieee754_pow+0x188>
 8008a54:	4b51      	ldr	r3, [pc, #324]	; (8008b9c <__ieee754_pow+0x254>)
 8008a56:	4598      	cmp	r8, r3
 8008a58:	d1ea      	bne.n	8008a30 <__ieee754_pow+0xe8>
 8008a5a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008a5e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008a62:	ea53 030a 	orrs.w	r3, r3, sl
 8008a66:	f000 845a 	beq.w	800931e <__ieee754_pow+0x9d6>
 8008a6a:	4b4f      	ldr	r3, [pc, #316]	; (8008ba8 <__ieee754_pow+0x260>)
 8008a6c:	429c      	cmp	r4, r3
 8008a6e:	dd08      	ble.n	8008a82 <__ieee754_pow+0x13a>
 8008a70:	f1b9 0f00 	cmp.w	r9, #0
 8008a74:	f2c0 8457 	blt.w	8009326 <__ieee754_pow+0x9de>
 8008a78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a7c:	e783      	b.n	8008986 <__ieee754_pow+0x3e>
 8008a7e:	2302      	movs	r3, #2
 8008a80:	e7e5      	b.n	8008a4e <__ieee754_pow+0x106>
 8008a82:	f1b9 0f00 	cmp.w	r9, #0
 8008a86:	f04f 0000 	mov.w	r0, #0
 8008a8a:	f04f 0100 	mov.w	r1, #0
 8008a8e:	f6bf af7a 	bge.w	8008986 <__ieee754_pow+0x3e>
 8008a92:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008a96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008a9a:	e774      	b.n	8008986 <__ieee754_pow+0x3e>
 8008a9c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008aa0:	d106      	bne.n	8008ab0 <__ieee754_pow+0x168>
 8008aa2:	4632      	mov	r2, r6
 8008aa4:	463b      	mov	r3, r7
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	4639      	mov	r1, r7
 8008aaa:	f7f7 fd55 	bl	8000558 <__aeabi_dmul>
 8008aae:	e76a      	b.n	8008986 <__ieee754_pow+0x3e>
 8008ab0:	4b3e      	ldr	r3, [pc, #248]	; (8008bac <__ieee754_pow+0x264>)
 8008ab2:	4599      	cmp	r9, r3
 8008ab4:	d10c      	bne.n	8008ad0 <__ieee754_pow+0x188>
 8008ab6:	2d00      	cmp	r5, #0
 8008ab8:	db0a      	blt.n	8008ad0 <__ieee754_pow+0x188>
 8008aba:	ec47 6b10 	vmov	d0, r6, r7
 8008abe:	b009      	add	sp, #36	; 0x24
 8008ac0:	ecbd 8b06 	vpop	{d8-d10}
 8008ac4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac8:	f000 bc6c 	b.w	80093a4 <__ieee754_sqrt>
 8008acc:	2300      	movs	r3, #0
 8008ace:	9304      	str	r3, [sp, #16]
 8008ad0:	ec47 6b10 	vmov	d0, r6, r7
 8008ad4:	f000 fd48 	bl	8009568 <fabs>
 8008ad8:	ec51 0b10 	vmov	r0, r1, d0
 8008adc:	f1ba 0f00 	cmp.w	sl, #0
 8008ae0:	d129      	bne.n	8008b36 <__ieee754_pow+0x1ee>
 8008ae2:	b124      	cbz	r4, 8008aee <__ieee754_pow+0x1a6>
 8008ae4:	4b2f      	ldr	r3, [pc, #188]	; (8008ba4 <__ieee754_pow+0x25c>)
 8008ae6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d123      	bne.n	8008b36 <__ieee754_pow+0x1ee>
 8008aee:	f1b9 0f00 	cmp.w	r9, #0
 8008af2:	da05      	bge.n	8008b00 <__ieee754_pow+0x1b8>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	2000      	movs	r0, #0
 8008afa:	492a      	ldr	r1, [pc, #168]	; (8008ba4 <__ieee754_pow+0x25c>)
 8008afc:	f7f7 fe56 	bl	80007ac <__aeabi_ddiv>
 8008b00:	2d00      	cmp	r5, #0
 8008b02:	f6bf af40 	bge.w	8008986 <__ieee754_pow+0x3e>
 8008b06:	9b04      	ldr	r3, [sp, #16]
 8008b08:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008b0c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008b10:	4323      	orrs	r3, r4
 8008b12:	d108      	bne.n	8008b26 <__ieee754_pow+0x1de>
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	4610      	mov	r0, r2
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	f7f7 fb64 	bl	80001e8 <__aeabi_dsub>
 8008b20:	4602      	mov	r2, r0
 8008b22:	460b      	mov	r3, r1
 8008b24:	e78f      	b.n	8008a46 <__ieee754_pow+0xfe>
 8008b26:	9b04      	ldr	r3, [sp, #16]
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	f47f af2c 	bne.w	8008986 <__ieee754_pow+0x3e>
 8008b2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b32:	4619      	mov	r1, r3
 8008b34:	e727      	b.n	8008986 <__ieee754_pow+0x3e>
 8008b36:	0feb      	lsrs	r3, r5, #31
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	9306      	str	r3, [sp, #24]
 8008b3c:	9a06      	ldr	r2, [sp, #24]
 8008b3e:	9b04      	ldr	r3, [sp, #16]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	d102      	bne.n	8008b4a <__ieee754_pow+0x202>
 8008b44:	4632      	mov	r2, r6
 8008b46:	463b      	mov	r3, r7
 8008b48:	e7e6      	b.n	8008b18 <__ieee754_pow+0x1d0>
 8008b4a:	4b19      	ldr	r3, [pc, #100]	; (8008bb0 <__ieee754_pow+0x268>)
 8008b4c:	4598      	cmp	r8, r3
 8008b4e:	f340 80fb 	ble.w	8008d48 <__ieee754_pow+0x400>
 8008b52:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008b56:	4598      	cmp	r8, r3
 8008b58:	4b13      	ldr	r3, [pc, #76]	; (8008ba8 <__ieee754_pow+0x260>)
 8008b5a:	dd0c      	ble.n	8008b76 <__ieee754_pow+0x22e>
 8008b5c:	429c      	cmp	r4, r3
 8008b5e:	dc0f      	bgt.n	8008b80 <__ieee754_pow+0x238>
 8008b60:	f1b9 0f00 	cmp.w	r9, #0
 8008b64:	da0f      	bge.n	8008b86 <__ieee754_pow+0x23e>
 8008b66:	2000      	movs	r0, #0
 8008b68:	b009      	add	sp, #36	; 0x24
 8008b6a:	ecbd 8b06 	vpop	{d8-d10}
 8008b6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b72:	f000 bcf0 	b.w	8009556 <__math_oflow>
 8008b76:	429c      	cmp	r4, r3
 8008b78:	dbf2      	blt.n	8008b60 <__ieee754_pow+0x218>
 8008b7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ba4 <__ieee754_pow+0x25c>)
 8008b7c:	429c      	cmp	r4, r3
 8008b7e:	dd19      	ble.n	8008bb4 <__ieee754_pow+0x26c>
 8008b80:	f1b9 0f00 	cmp.w	r9, #0
 8008b84:	dcef      	bgt.n	8008b66 <__ieee754_pow+0x21e>
 8008b86:	2000      	movs	r0, #0
 8008b88:	b009      	add	sp, #36	; 0x24
 8008b8a:	ecbd 8b06 	vpop	{d8-d10}
 8008b8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b92:	f000 bcd7 	b.w	8009544 <__math_uflow>
 8008b96:	bf00      	nop
 8008b98:	fff00000 	.word	0xfff00000
 8008b9c:	7ff00000 	.word	0x7ff00000
 8008ba0:	433fffff 	.word	0x433fffff
 8008ba4:	3ff00000 	.word	0x3ff00000
 8008ba8:	3fefffff 	.word	0x3fefffff
 8008bac:	3fe00000 	.word	0x3fe00000
 8008bb0:	41e00000 	.word	0x41e00000
 8008bb4:	4b60      	ldr	r3, [pc, #384]	; (8008d38 <__ieee754_pow+0x3f0>)
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f7f7 fb16 	bl	80001e8 <__aeabi_dsub>
 8008bbc:	a354      	add	r3, pc, #336	; (adr r3, 8008d10 <__ieee754_pow+0x3c8>)
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	460d      	mov	r5, r1
 8008bc6:	f7f7 fcc7 	bl	8000558 <__aeabi_dmul>
 8008bca:	a353      	add	r3, pc, #332	; (adr r3, 8008d18 <__ieee754_pow+0x3d0>)
 8008bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd0:	4606      	mov	r6, r0
 8008bd2:	460f      	mov	r7, r1
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	4629      	mov	r1, r5
 8008bd8:	f7f7 fcbe 	bl	8000558 <__aeabi_dmul>
 8008bdc:	4b57      	ldr	r3, [pc, #348]	; (8008d3c <__ieee754_pow+0x3f4>)
 8008bde:	4682      	mov	sl, r0
 8008be0:	468b      	mov	fp, r1
 8008be2:	2200      	movs	r2, #0
 8008be4:	4620      	mov	r0, r4
 8008be6:	4629      	mov	r1, r5
 8008be8:	f7f7 fcb6 	bl	8000558 <__aeabi_dmul>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	a14b      	add	r1, pc, #300	; (adr r1, 8008d20 <__ieee754_pow+0x3d8>)
 8008bf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bf6:	f7f7 faf7 	bl	80001e8 <__aeabi_dsub>
 8008bfa:	4622      	mov	r2, r4
 8008bfc:	462b      	mov	r3, r5
 8008bfe:	f7f7 fcab 	bl	8000558 <__aeabi_dmul>
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	2000      	movs	r0, #0
 8008c08:	494d      	ldr	r1, [pc, #308]	; (8008d40 <__ieee754_pow+0x3f8>)
 8008c0a:	f7f7 faed 	bl	80001e8 <__aeabi_dsub>
 8008c0e:	4622      	mov	r2, r4
 8008c10:	4680      	mov	r8, r0
 8008c12:	4689      	mov	r9, r1
 8008c14:	462b      	mov	r3, r5
 8008c16:	4620      	mov	r0, r4
 8008c18:	4629      	mov	r1, r5
 8008c1a:	f7f7 fc9d 	bl	8000558 <__aeabi_dmul>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	4640      	mov	r0, r8
 8008c24:	4649      	mov	r1, r9
 8008c26:	f7f7 fc97 	bl	8000558 <__aeabi_dmul>
 8008c2a:	a33f      	add	r3, pc, #252	; (adr r3, 8008d28 <__ieee754_pow+0x3e0>)
 8008c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c30:	f7f7 fc92 	bl	8000558 <__aeabi_dmul>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4650      	mov	r0, sl
 8008c3a:	4659      	mov	r1, fp
 8008c3c:	f7f7 fad4 	bl	80001e8 <__aeabi_dsub>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	4680      	mov	r8, r0
 8008c46:	4689      	mov	r9, r1
 8008c48:	4630      	mov	r0, r6
 8008c4a:	4639      	mov	r1, r7
 8008c4c:	f7f7 face 	bl	80001ec <__adddf3>
 8008c50:	2000      	movs	r0, #0
 8008c52:	4632      	mov	r2, r6
 8008c54:	463b      	mov	r3, r7
 8008c56:	4604      	mov	r4, r0
 8008c58:	460d      	mov	r5, r1
 8008c5a:	f7f7 fac5 	bl	80001e8 <__aeabi_dsub>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4640      	mov	r0, r8
 8008c64:	4649      	mov	r1, r9
 8008c66:	f7f7 fabf 	bl	80001e8 <__aeabi_dsub>
 8008c6a:	9b04      	ldr	r3, [sp, #16]
 8008c6c:	9a06      	ldr	r2, [sp, #24]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	4313      	orrs	r3, r2
 8008c72:	4682      	mov	sl, r0
 8008c74:	468b      	mov	fp, r1
 8008c76:	f040 81e7 	bne.w	8009048 <__ieee754_pow+0x700>
 8008c7a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008d30 <__ieee754_pow+0x3e8>
 8008c7e:	eeb0 8a47 	vmov.f32	s16, s14
 8008c82:	eef0 8a67 	vmov.f32	s17, s15
 8008c86:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008c8a:	2600      	movs	r6, #0
 8008c8c:	4632      	mov	r2, r6
 8008c8e:	463b      	mov	r3, r7
 8008c90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c94:	f7f7 faa8 	bl	80001e8 <__aeabi_dsub>
 8008c98:	4622      	mov	r2, r4
 8008c9a:	462b      	mov	r3, r5
 8008c9c:	f7f7 fc5c 	bl	8000558 <__aeabi_dmul>
 8008ca0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ca4:	4680      	mov	r8, r0
 8008ca6:	4689      	mov	r9, r1
 8008ca8:	4650      	mov	r0, sl
 8008caa:	4659      	mov	r1, fp
 8008cac:	f7f7 fc54 	bl	8000558 <__aeabi_dmul>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4640      	mov	r0, r8
 8008cb6:	4649      	mov	r1, r9
 8008cb8:	f7f7 fa98 	bl	80001ec <__adddf3>
 8008cbc:	4632      	mov	r2, r6
 8008cbe:	463b      	mov	r3, r7
 8008cc0:	4680      	mov	r8, r0
 8008cc2:	4689      	mov	r9, r1
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	f7f7 fc46 	bl	8000558 <__aeabi_dmul>
 8008ccc:	460b      	mov	r3, r1
 8008cce:	4604      	mov	r4, r0
 8008cd0:	460d      	mov	r5, r1
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	4649      	mov	r1, r9
 8008cd6:	4640      	mov	r0, r8
 8008cd8:	f7f7 fa88 	bl	80001ec <__adddf3>
 8008cdc:	4b19      	ldr	r3, [pc, #100]	; (8008d44 <__ieee754_pow+0x3fc>)
 8008cde:	4299      	cmp	r1, r3
 8008ce0:	ec45 4b19 	vmov	d9, r4, r5
 8008ce4:	4606      	mov	r6, r0
 8008ce6:	460f      	mov	r7, r1
 8008ce8:	468b      	mov	fp, r1
 8008cea:	f340 82f1 	ble.w	80092d0 <__ieee754_pow+0x988>
 8008cee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008cf2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008cf6:	4303      	orrs	r3, r0
 8008cf8:	f000 81e4 	beq.w	80090c4 <__ieee754_pow+0x77c>
 8008cfc:	ec51 0b18 	vmov	r0, r1, d8
 8008d00:	2200      	movs	r2, #0
 8008d02:	2300      	movs	r3, #0
 8008d04:	f7f7 fe9a 	bl	8000a3c <__aeabi_dcmplt>
 8008d08:	3800      	subs	r0, #0
 8008d0a:	bf18      	it	ne
 8008d0c:	2001      	movne	r0, #1
 8008d0e:	e72b      	b.n	8008b68 <__ieee754_pow+0x220>
 8008d10:	60000000 	.word	0x60000000
 8008d14:	3ff71547 	.word	0x3ff71547
 8008d18:	f85ddf44 	.word	0xf85ddf44
 8008d1c:	3e54ae0b 	.word	0x3e54ae0b
 8008d20:	55555555 	.word	0x55555555
 8008d24:	3fd55555 	.word	0x3fd55555
 8008d28:	652b82fe 	.word	0x652b82fe
 8008d2c:	3ff71547 	.word	0x3ff71547
 8008d30:	00000000 	.word	0x00000000
 8008d34:	bff00000 	.word	0xbff00000
 8008d38:	3ff00000 	.word	0x3ff00000
 8008d3c:	3fd00000 	.word	0x3fd00000
 8008d40:	3fe00000 	.word	0x3fe00000
 8008d44:	408fffff 	.word	0x408fffff
 8008d48:	4bd5      	ldr	r3, [pc, #852]	; (80090a0 <__ieee754_pow+0x758>)
 8008d4a:	402b      	ands	r3, r5
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	b92b      	cbnz	r3, 8008d5c <__ieee754_pow+0x414>
 8008d50:	4bd4      	ldr	r3, [pc, #848]	; (80090a4 <__ieee754_pow+0x75c>)
 8008d52:	f7f7 fc01 	bl	8000558 <__aeabi_dmul>
 8008d56:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008d5a:	460c      	mov	r4, r1
 8008d5c:	1523      	asrs	r3, r4, #20
 8008d5e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008d62:	4413      	add	r3, r2
 8008d64:	9305      	str	r3, [sp, #20]
 8008d66:	4bd0      	ldr	r3, [pc, #832]	; (80090a8 <__ieee754_pow+0x760>)
 8008d68:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008d6c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008d70:	429c      	cmp	r4, r3
 8008d72:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008d76:	dd08      	ble.n	8008d8a <__ieee754_pow+0x442>
 8008d78:	4bcc      	ldr	r3, [pc, #816]	; (80090ac <__ieee754_pow+0x764>)
 8008d7a:	429c      	cmp	r4, r3
 8008d7c:	f340 8162 	ble.w	8009044 <__ieee754_pow+0x6fc>
 8008d80:	9b05      	ldr	r3, [sp, #20]
 8008d82:	3301      	adds	r3, #1
 8008d84:	9305      	str	r3, [sp, #20]
 8008d86:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008d8a:	2400      	movs	r4, #0
 8008d8c:	00e3      	lsls	r3, r4, #3
 8008d8e:	9307      	str	r3, [sp, #28]
 8008d90:	4bc7      	ldr	r3, [pc, #796]	; (80090b0 <__ieee754_pow+0x768>)
 8008d92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d96:	ed93 7b00 	vldr	d7, [r3]
 8008d9a:	4629      	mov	r1, r5
 8008d9c:	ec53 2b17 	vmov	r2, r3, d7
 8008da0:	eeb0 9a47 	vmov.f32	s18, s14
 8008da4:	eef0 9a67 	vmov.f32	s19, s15
 8008da8:	4682      	mov	sl, r0
 8008daa:	f7f7 fa1d 	bl	80001e8 <__aeabi_dsub>
 8008dae:	4652      	mov	r2, sl
 8008db0:	4606      	mov	r6, r0
 8008db2:	460f      	mov	r7, r1
 8008db4:	462b      	mov	r3, r5
 8008db6:	ec51 0b19 	vmov	r0, r1, d9
 8008dba:	f7f7 fa17 	bl	80001ec <__adddf3>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	49bb      	ldr	r1, [pc, #748]	; (80090b4 <__ieee754_pow+0x76c>)
 8008dc6:	f7f7 fcf1 	bl	80007ac <__aeabi_ddiv>
 8008dca:	ec41 0b1a 	vmov	d10, r0, r1
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	4639      	mov	r1, r7
 8008dd6:	f7f7 fbbf 	bl	8000558 <__aeabi_dmul>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008de0:	9302      	str	r3, [sp, #8]
 8008de2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008de6:	46ab      	mov	fp, r5
 8008de8:	106d      	asrs	r5, r5, #1
 8008dea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008dee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008df2:	ec41 0b18 	vmov	d8, r0, r1
 8008df6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	4640      	mov	r0, r8
 8008dfe:	4649      	mov	r1, r9
 8008e00:	4614      	mov	r4, r2
 8008e02:	461d      	mov	r5, r3
 8008e04:	f7f7 fba8 	bl	8000558 <__aeabi_dmul>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	4639      	mov	r1, r7
 8008e10:	f7f7 f9ea 	bl	80001e8 <__aeabi_dsub>
 8008e14:	ec53 2b19 	vmov	r2, r3, d9
 8008e18:	4606      	mov	r6, r0
 8008e1a:	460f      	mov	r7, r1
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	4629      	mov	r1, r5
 8008e20:	f7f7 f9e2 	bl	80001e8 <__aeabi_dsub>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	4650      	mov	r0, sl
 8008e2a:	4659      	mov	r1, fp
 8008e2c:	f7f7 f9dc 	bl	80001e8 <__aeabi_dsub>
 8008e30:	4642      	mov	r2, r8
 8008e32:	464b      	mov	r3, r9
 8008e34:	f7f7 fb90 	bl	8000558 <__aeabi_dmul>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	4639      	mov	r1, r7
 8008e40:	f7f7 f9d2 	bl	80001e8 <__aeabi_dsub>
 8008e44:	ec53 2b1a 	vmov	r2, r3, d10
 8008e48:	f7f7 fb86 	bl	8000558 <__aeabi_dmul>
 8008e4c:	ec53 2b18 	vmov	r2, r3, d8
 8008e50:	ec41 0b19 	vmov	d9, r0, r1
 8008e54:	ec51 0b18 	vmov	r0, r1, d8
 8008e58:	f7f7 fb7e 	bl	8000558 <__aeabi_dmul>
 8008e5c:	a37c      	add	r3, pc, #496	; (adr r3, 8009050 <__ieee754_pow+0x708>)
 8008e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e62:	4604      	mov	r4, r0
 8008e64:	460d      	mov	r5, r1
 8008e66:	f7f7 fb77 	bl	8000558 <__aeabi_dmul>
 8008e6a:	a37b      	add	r3, pc, #492	; (adr r3, 8009058 <__ieee754_pow+0x710>)
 8008e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e70:	f7f7 f9bc 	bl	80001ec <__adddf3>
 8008e74:	4622      	mov	r2, r4
 8008e76:	462b      	mov	r3, r5
 8008e78:	f7f7 fb6e 	bl	8000558 <__aeabi_dmul>
 8008e7c:	a378      	add	r3, pc, #480	; (adr r3, 8009060 <__ieee754_pow+0x718>)
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	f7f7 f9b3 	bl	80001ec <__adddf3>
 8008e86:	4622      	mov	r2, r4
 8008e88:	462b      	mov	r3, r5
 8008e8a:	f7f7 fb65 	bl	8000558 <__aeabi_dmul>
 8008e8e:	a376      	add	r3, pc, #472	; (adr r3, 8009068 <__ieee754_pow+0x720>)
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	f7f7 f9aa 	bl	80001ec <__adddf3>
 8008e98:	4622      	mov	r2, r4
 8008e9a:	462b      	mov	r3, r5
 8008e9c:	f7f7 fb5c 	bl	8000558 <__aeabi_dmul>
 8008ea0:	a373      	add	r3, pc, #460	; (adr r3, 8009070 <__ieee754_pow+0x728>)
 8008ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea6:	f7f7 f9a1 	bl	80001ec <__adddf3>
 8008eaa:	4622      	mov	r2, r4
 8008eac:	462b      	mov	r3, r5
 8008eae:	f7f7 fb53 	bl	8000558 <__aeabi_dmul>
 8008eb2:	a371      	add	r3, pc, #452	; (adr r3, 8009078 <__ieee754_pow+0x730>)
 8008eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb8:	f7f7 f998 	bl	80001ec <__adddf3>
 8008ebc:	4622      	mov	r2, r4
 8008ebe:	4606      	mov	r6, r0
 8008ec0:	460f      	mov	r7, r1
 8008ec2:	462b      	mov	r3, r5
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	f7f7 fb46 	bl	8000558 <__aeabi_dmul>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	4639      	mov	r1, r7
 8008ed4:	f7f7 fb40 	bl	8000558 <__aeabi_dmul>
 8008ed8:	4642      	mov	r2, r8
 8008eda:	4604      	mov	r4, r0
 8008edc:	460d      	mov	r5, r1
 8008ede:	464b      	mov	r3, r9
 8008ee0:	ec51 0b18 	vmov	r0, r1, d8
 8008ee4:	f7f7 f982 	bl	80001ec <__adddf3>
 8008ee8:	ec53 2b19 	vmov	r2, r3, d9
 8008eec:	f7f7 fb34 	bl	8000558 <__aeabi_dmul>
 8008ef0:	4622      	mov	r2, r4
 8008ef2:	462b      	mov	r3, r5
 8008ef4:	f7f7 f97a 	bl	80001ec <__adddf3>
 8008ef8:	4642      	mov	r2, r8
 8008efa:	4682      	mov	sl, r0
 8008efc:	468b      	mov	fp, r1
 8008efe:	464b      	mov	r3, r9
 8008f00:	4640      	mov	r0, r8
 8008f02:	4649      	mov	r1, r9
 8008f04:	f7f7 fb28 	bl	8000558 <__aeabi_dmul>
 8008f08:	4b6b      	ldr	r3, [pc, #428]	; (80090b8 <__ieee754_pow+0x770>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	4606      	mov	r6, r0
 8008f0e:	460f      	mov	r7, r1
 8008f10:	f7f7 f96c 	bl	80001ec <__adddf3>
 8008f14:	4652      	mov	r2, sl
 8008f16:	465b      	mov	r3, fp
 8008f18:	f7f7 f968 	bl	80001ec <__adddf3>
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	4604      	mov	r4, r0
 8008f20:	460d      	mov	r5, r1
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	4640      	mov	r0, r8
 8008f28:	4649      	mov	r1, r9
 8008f2a:	f7f7 fb15 	bl	8000558 <__aeabi_dmul>
 8008f2e:	4b62      	ldr	r3, [pc, #392]	; (80090b8 <__ieee754_pow+0x770>)
 8008f30:	4680      	mov	r8, r0
 8008f32:	4689      	mov	r9, r1
 8008f34:	2200      	movs	r2, #0
 8008f36:	4620      	mov	r0, r4
 8008f38:	4629      	mov	r1, r5
 8008f3a:	f7f7 f955 	bl	80001e8 <__aeabi_dsub>
 8008f3e:	4632      	mov	r2, r6
 8008f40:	463b      	mov	r3, r7
 8008f42:	f7f7 f951 	bl	80001e8 <__aeabi_dsub>
 8008f46:	4602      	mov	r2, r0
 8008f48:	460b      	mov	r3, r1
 8008f4a:	4650      	mov	r0, sl
 8008f4c:	4659      	mov	r1, fp
 8008f4e:	f7f7 f94b 	bl	80001e8 <__aeabi_dsub>
 8008f52:	ec53 2b18 	vmov	r2, r3, d8
 8008f56:	f7f7 faff 	bl	8000558 <__aeabi_dmul>
 8008f5a:	4622      	mov	r2, r4
 8008f5c:	4606      	mov	r6, r0
 8008f5e:	460f      	mov	r7, r1
 8008f60:	462b      	mov	r3, r5
 8008f62:	ec51 0b19 	vmov	r0, r1, d9
 8008f66:	f7f7 faf7 	bl	8000558 <__aeabi_dmul>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4630      	mov	r0, r6
 8008f70:	4639      	mov	r1, r7
 8008f72:	f7f7 f93b 	bl	80001ec <__adddf3>
 8008f76:	4606      	mov	r6, r0
 8008f78:	460f      	mov	r7, r1
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	4640      	mov	r0, r8
 8008f80:	4649      	mov	r1, r9
 8008f82:	f7f7 f933 	bl	80001ec <__adddf3>
 8008f86:	a33e      	add	r3, pc, #248	; (adr r3, 8009080 <__ieee754_pow+0x738>)
 8008f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	4604      	mov	r4, r0
 8008f90:	460d      	mov	r5, r1
 8008f92:	f7f7 fae1 	bl	8000558 <__aeabi_dmul>
 8008f96:	4642      	mov	r2, r8
 8008f98:	ec41 0b18 	vmov	d8, r0, r1
 8008f9c:	464b      	mov	r3, r9
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	f7f7 f921 	bl	80001e8 <__aeabi_dsub>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4630      	mov	r0, r6
 8008fac:	4639      	mov	r1, r7
 8008fae:	f7f7 f91b 	bl	80001e8 <__aeabi_dsub>
 8008fb2:	a335      	add	r3, pc, #212	; (adr r3, 8009088 <__ieee754_pow+0x740>)
 8008fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb8:	f7f7 face 	bl	8000558 <__aeabi_dmul>
 8008fbc:	a334      	add	r3, pc, #208	; (adr r3, 8009090 <__ieee754_pow+0x748>)
 8008fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc2:	4606      	mov	r6, r0
 8008fc4:	460f      	mov	r7, r1
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	4629      	mov	r1, r5
 8008fca:	f7f7 fac5 	bl	8000558 <__aeabi_dmul>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	4639      	mov	r1, r7
 8008fd6:	f7f7 f909 	bl	80001ec <__adddf3>
 8008fda:	9a07      	ldr	r2, [sp, #28]
 8008fdc:	4b37      	ldr	r3, [pc, #220]	; (80090bc <__ieee754_pow+0x774>)
 8008fde:	4413      	add	r3, r2
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	f7f7 f902 	bl	80001ec <__adddf3>
 8008fe8:	4682      	mov	sl, r0
 8008fea:	9805      	ldr	r0, [sp, #20]
 8008fec:	468b      	mov	fp, r1
 8008fee:	f7f7 fa49 	bl	8000484 <__aeabi_i2d>
 8008ff2:	9a07      	ldr	r2, [sp, #28]
 8008ff4:	4b32      	ldr	r3, [pc, #200]	; (80090c0 <__ieee754_pow+0x778>)
 8008ff6:	4413      	add	r3, r2
 8008ff8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ffc:	4606      	mov	r6, r0
 8008ffe:	460f      	mov	r7, r1
 8009000:	4652      	mov	r2, sl
 8009002:	465b      	mov	r3, fp
 8009004:	ec51 0b18 	vmov	r0, r1, d8
 8009008:	f7f7 f8f0 	bl	80001ec <__adddf3>
 800900c:	4642      	mov	r2, r8
 800900e:	464b      	mov	r3, r9
 8009010:	f7f7 f8ec 	bl	80001ec <__adddf3>
 8009014:	4632      	mov	r2, r6
 8009016:	463b      	mov	r3, r7
 8009018:	f7f7 f8e8 	bl	80001ec <__adddf3>
 800901c:	2000      	movs	r0, #0
 800901e:	4632      	mov	r2, r6
 8009020:	463b      	mov	r3, r7
 8009022:	4604      	mov	r4, r0
 8009024:	460d      	mov	r5, r1
 8009026:	f7f7 f8df 	bl	80001e8 <__aeabi_dsub>
 800902a:	4642      	mov	r2, r8
 800902c:	464b      	mov	r3, r9
 800902e:	f7f7 f8db 	bl	80001e8 <__aeabi_dsub>
 8009032:	ec53 2b18 	vmov	r2, r3, d8
 8009036:	f7f7 f8d7 	bl	80001e8 <__aeabi_dsub>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	4650      	mov	r0, sl
 8009040:	4659      	mov	r1, fp
 8009042:	e610      	b.n	8008c66 <__ieee754_pow+0x31e>
 8009044:	2401      	movs	r4, #1
 8009046:	e6a1      	b.n	8008d8c <__ieee754_pow+0x444>
 8009048:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009098 <__ieee754_pow+0x750>
 800904c:	e617      	b.n	8008c7e <__ieee754_pow+0x336>
 800904e:	bf00      	nop
 8009050:	4a454eef 	.word	0x4a454eef
 8009054:	3fca7e28 	.word	0x3fca7e28
 8009058:	93c9db65 	.word	0x93c9db65
 800905c:	3fcd864a 	.word	0x3fcd864a
 8009060:	a91d4101 	.word	0xa91d4101
 8009064:	3fd17460 	.word	0x3fd17460
 8009068:	518f264d 	.word	0x518f264d
 800906c:	3fd55555 	.word	0x3fd55555
 8009070:	db6fabff 	.word	0xdb6fabff
 8009074:	3fdb6db6 	.word	0x3fdb6db6
 8009078:	33333303 	.word	0x33333303
 800907c:	3fe33333 	.word	0x3fe33333
 8009080:	e0000000 	.word	0xe0000000
 8009084:	3feec709 	.word	0x3feec709
 8009088:	dc3a03fd 	.word	0xdc3a03fd
 800908c:	3feec709 	.word	0x3feec709
 8009090:	145b01f5 	.word	0x145b01f5
 8009094:	be3e2fe0 	.word	0xbe3e2fe0
 8009098:	00000000 	.word	0x00000000
 800909c:	3ff00000 	.word	0x3ff00000
 80090a0:	7ff00000 	.word	0x7ff00000
 80090a4:	43400000 	.word	0x43400000
 80090a8:	0003988e 	.word	0x0003988e
 80090ac:	000bb679 	.word	0x000bb679
 80090b0:	08009718 	.word	0x08009718
 80090b4:	3ff00000 	.word	0x3ff00000
 80090b8:	40080000 	.word	0x40080000
 80090bc:	08009738 	.word	0x08009738
 80090c0:	08009728 	.word	0x08009728
 80090c4:	a3b5      	add	r3, pc, #724	; (adr r3, 800939c <__ieee754_pow+0xa54>)
 80090c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ca:	4640      	mov	r0, r8
 80090cc:	4649      	mov	r1, r9
 80090ce:	f7f7 f88d 	bl	80001ec <__adddf3>
 80090d2:	4622      	mov	r2, r4
 80090d4:	ec41 0b1a 	vmov	d10, r0, r1
 80090d8:	462b      	mov	r3, r5
 80090da:	4630      	mov	r0, r6
 80090dc:	4639      	mov	r1, r7
 80090de:	f7f7 f883 	bl	80001e8 <__aeabi_dsub>
 80090e2:	4602      	mov	r2, r0
 80090e4:	460b      	mov	r3, r1
 80090e6:	ec51 0b1a 	vmov	r0, r1, d10
 80090ea:	f7f7 fcc5 	bl	8000a78 <__aeabi_dcmpgt>
 80090ee:	2800      	cmp	r0, #0
 80090f0:	f47f ae04 	bne.w	8008cfc <__ieee754_pow+0x3b4>
 80090f4:	4aa4      	ldr	r2, [pc, #656]	; (8009388 <__ieee754_pow+0xa40>)
 80090f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80090fa:	4293      	cmp	r3, r2
 80090fc:	f340 8108 	ble.w	8009310 <__ieee754_pow+0x9c8>
 8009100:	151b      	asrs	r3, r3, #20
 8009102:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009106:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800910a:	fa4a f303 	asr.w	r3, sl, r3
 800910e:	445b      	add	r3, fp
 8009110:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009114:	4e9d      	ldr	r6, [pc, #628]	; (800938c <__ieee754_pow+0xa44>)
 8009116:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800911a:	4116      	asrs	r6, r2
 800911c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009120:	2000      	movs	r0, #0
 8009122:	ea23 0106 	bic.w	r1, r3, r6
 8009126:	f1c2 0214 	rsb	r2, r2, #20
 800912a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800912e:	fa4a fa02 	asr.w	sl, sl, r2
 8009132:	f1bb 0f00 	cmp.w	fp, #0
 8009136:	4602      	mov	r2, r0
 8009138:	460b      	mov	r3, r1
 800913a:	4620      	mov	r0, r4
 800913c:	4629      	mov	r1, r5
 800913e:	bfb8      	it	lt
 8009140:	f1ca 0a00 	rsblt	sl, sl, #0
 8009144:	f7f7 f850 	bl	80001e8 <__aeabi_dsub>
 8009148:	ec41 0b19 	vmov	d9, r0, r1
 800914c:	4642      	mov	r2, r8
 800914e:	464b      	mov	r3, r9
 8009150:	ec51 0b19 	vmov	r0, r1, d9
 8009154:	f7f7 f84a 	bl	80001ec <__adddf3>
 8009158:	a37b      	add	r3, pc, #492	; (adr r3, 8009348 <__ieee754_pow+0xa00>)
 800915a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915e:	2000      	movs	r0, #0
 8009160:	4604      	mov	r4, r0
 8009162:	460d      	mov	r5, r1
 8009164:	f7f7 f9f8 	bl	8000558 <__aeabi_dmul>
 8009168:	ec53 2b19 	vmov	r2, r3, d9
 800916c:	4606      	mov	r6, r0
 800916e:	460f      	mov	r7, r1
 8009170:	4620      	mov	r0, r4
 8009172:	4629      	mov	r1, r5
 8009174:	f7f7 f838 	bl	80001e8 <__aeabi_dsub>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	4640      	mov	r0, r8
 800917e:	4649      	mov	r1, r9
 8009180:	f7f7 f832 	bl	80001e8 <__aeabi_dsub>
 8009184:	a372      	add	r3, pc, #456	; (adr r3, 8009350 <__ieee754_pow+0xa08>)
 8009186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918a:	f7f7 f9e5 	bl	8000558 <__aeabi_dmul>
 800918e:	a372      	add	r3, pc, #456	; (adr r3, 8009358 <__ieee754_pow+0xa10>)
 8009190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009194:	4680      	mov	r8, r0
 8009196:	4689      	mov	r9, r1
 8009198:	4620      	mov	r0, r4
 800919a:	4629      	mov	r1, r5
 800919c:	f7f7 f9dc 	bl	8000558 <__aeabi_dmul>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4640      	mov	r0, r8
 80091a6:	4649      	mov	r1, r9
 80091a8:	f7f7 f820 	bl	80001ec <__adddf3>
 80091ac:	4604      	mov	r4, r0
 80091ae:	460d      	mov	r5, r1
 80091b0:	4602      	mov	r2, r0
 80091b2:	460b      	mov	r3, r1
 80091b4:	4630      	mov	r0, r6
 80091b6:	4639      	mov	r1, r7
 80091b8:	f7f7 f818 	bl	80001ec <__adddf3>
 80091bc:	4632      	mov	r2, r6
 80091be:	463b      	mov	r3, r7
 80091c0:	4680      	mov	r8, r0
 80091c2:	4689      	mov	r9, r1
 80091c4:	f7f7 f810 	bl	80001e8 <__aeabi_dsub>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	4620      	mov	r0, r4
 80091ce:	4629      	mov	r1, r5
 80091d0:	f7f7 f80a 	bl	80001e8 <__aeabi_dsub>
 80091d4:	4642      	mov	r2, r8
 80091d6:	4606      	mov	r6, r0
 80091d8:	460f      	mov	r7, r1
 80091da:	464b      	mov	r3, r9
 80091dc:	4640      	mov	r0, r8
 80091de:	4649      	mov	r1, r9
 80091e0:	f7f7 f9ba 	bl	8000558 <__aeabi_dmul>
 80091e4:	a35e      	add	r3, pc, #376	; (adr r3, 8009360 <__ieee754_pow+0xa18>)
 80091e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ea:	4604      	mov	r4, r0
 80091ec:	460d      	mov	r5, r1
 80091ee:	f7f7 f9b3 	bl	8000558 <__aeabi_dmul>
 80091f2:	a35d      	add	r3, pc, #372	; (adr r3, 8009368 <__ieee754_pow+0xa20>)
 80091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f8:	f7f6 fff6 	bl	80001e8 <__aeabi_dsub>
 80091fc:	4622      	mov	r2, r4
 80091fe:	462b      	mov	r3, r5
 8009200:	f7f7 f9aa 	bl	8000558 <__aeabi_dmul>
 8009204:	a35a      	add	r3, pc, #360	; (adr r3, 8009370 <__ieee754_pow+0xa28>)
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f7f6 ffef 	bl	80001ec <__adddf3>
 800920e:	4622      	mov	r2, r4
 8009210:	462b      	mov	r3, r5
 8009212:	f7f7 f9a1 	bl	8000558 <__aeabi_dmul>
 8009216:	a358      	add	r3, pc, #352	; (adr r3, 8009378 <__ieee754_pow+0xa30>)
 8009218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921c:	f7f6 ffe4 	bl	80001e8 <__aeabi_dsub>
 8009220:	4622      	mov	r2, r4
 8009222:	462b      	mov	r3, r5
 8009224:	f7f7 f998 	bl	8000558 <__aeabi_dmul>
 8009228:	a355      	add	r3, pc, #340	; (adr r3, 8009380 <__ieee754_pow+0xa38>)
 800922a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922e:	f7f6 ffdd 	bl	80001ec <__adddf3>
 8009232:	4622      	mov	r2, r4
 8009234:	462b      	mov	r3, r5
 8009236:	f7f7 f98f 	bl	8000558 <__aeabi_dmul>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	4640      	mov	r0, r8
 8009240:	4649      	mov	r1, r9
 8009242:	f7f6 ffd1 	bl	80001e8 <__aeabi_dsub>
 8009246:	4604      	mov	r4, r0
 8009248:	460d      	mov	r5, r1
 800924a:	4602      	mov	r2, r0
 800924c:	460b      	mov	r3, r1
 800924e:	4640      	mov	r0, r8
 8009250:	4649      	mov	r1, r9
 8009252:	f7f7 f981 	bl	8000558 <__aeabi_dmul>
 8009256:	2200      	movs	r2, #0
 8009258:	ec41 0b19 	vmov	d9, r0, r1
 800925c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009260:	4620      	mov	r0, r4
 8009262:	4629      	mov	r1, r5
 8009264:	f7f6 ffc0 	bl	80001e8 <__aeabi_dsub>
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	ec51 0b19 	vmov	r0, r1, d9
 8009270:	f7f7 fa9c 	bl	80007ac <__aeabi_ddiv>
 8009274:	4632      	mov	r2, r6
 8009276:	4604      	mov	r4, r0
 8009278:	460d      	mov	r5, r1
 800927a:	463b      	mov	r3, r7
 800927c:	4640      	mov	r0, r8
 800927e:	4649      	mov	r1, r9
 8009280:	f7f7 f96a 	bl	8000558 <__aeabi_dmul>
 8009284:	4632      	mov	r2, r6
 8009286:	463b      	mov	r3, r7
 8009288:	f7f6 ffb0 	bl	80001ec <__adddf3>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	4620      	mov	r0, r4
 8009292:	4629      	mov	r1, r5
 8009294:	f7f6 ffa8 	bl	80001e8 <__aeabi_dsub>
 8009298:	4642      	mov	r2, r8
 800929a:	464b      	mov	r3, r9
 800929c:	f7f6 ffa4 	bl	80001e8 <__aeabi_dsub>
 80092a0:	460b      	mov	r3, r1
 80092a2:	4602      	mov	r2, r0
 80092a4:	493a      	ldr	r1, [pc, #232]	; (8009390 <__ieee754_pow+0xa48>)
 80092a6:	2000      	movs	r0, #0
 80092a8:	f7f6 ff9e 	bl	80001e8 <__aeabi_dsub>
 80092ac:	ec41 0b10 	vmov	d0, r0, r1
 80092b0:	ee10 3a90 	vmov	r3, s1
 80092b4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80092b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092bc:	da2b      	bge.n	8009316 <__ieee754_pow+0x9ce>
 80092be:	4650      	mov	r0, sl
 80092c0:	f000 f966 	bl	8009590 <scalbn>
 80092c4:	ec51 0b10 	vmov	r0, r1, d0
 80092c8:	ec53 2b18 	vmov	r2, r3, d8
 80092cc:	f7ff bbed 	b.w	8008aaa <__ieee754_pow+0x162>
 80092d0:	4b30      	ldr	r3, [pc, #192]	; (8009394 <__ieee754_pow+0xa4c>)
 80092d2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80092d6:	429e      	cmp	r6, r3
 80092d8:	f77f af0c 	ble.w	80090f4 <__ieee754_pow+0x7ac>
 80092dc:	4b2e      	ldr	r3, [pc, #184]	; (8009398 <__ieee754_pow+0xa50>)
 80092de:	440b      	add	r3, r1
 80092e0:	4303      	orrs	r3, r0
 80092e2:	d009      	beq.n	80092f8 <__ieee754_pow+0x9b0>
 80092e4:	ec51 0b18 	vmov	r0, r1, d8
 80092e8:	2200      	movs	r2, #0
 80092ea:	2300      	movs	r3, #0
 80092ec:	f7f7 fba6 	bl	8000a3c <__aeabi_dcmplt>
 80092f0:	3800      	subs	r0, #0
 80092f2:	bf18      	it	ne
 80092f4:	2001      	movne	r0, #1
 80092f6:	e447      	b.n	8008b88 <__ieee754_pow+0x240>
 80092f8:	4622      	mov	r2, r4
 80092fa:	462b      	mov	r3, r5
 80092fc:	f7f6 ff74 	bl	80001e8 <__aeabi_dsub>
 8009300:	4642      	mov	r2, r8
 8009302:	464b      	mov	r3, r9
 8009304:	f7f7 fbae 	bl	8000a64 <__aeabi_dcmpge>
 8009308:	2800      	cmp	r0, #0
 800930a:	f43f aef3 	beq.w	80090f4 <__ieee754_pow+0x7ac>
 800930e:	e7e9      	b.n	80092e4 <__ieee754_pow+0x99c>
 8009310:	f04f 0a00 	mov.w	sl, #0
 8009314:	e71a      	b.n	800914c <__ieee754_pow+0x804>
 8009316:	ec51 0b10 	vmov	r0, r1, d0
 800931a:	4619      	mov	r1, r3
 800931c:	e7d4      	b.n	80092c8 <__ieee754_pow+0x980>
 800931e:	491c      	ldr	r1, [pc, #112]	; (8009390 <__ieee754_pow+0xa48>)
 8009320:	2000      	movs	r0, #0
 8009322:	f7ff bb30 	b.w	8008986 <__ieee754_pow+0x3e>
 8009326:	2000      	movs	r0, #0
 8009328:	2100      	movs	r1, #0
 800932a:	f7ff bb2c 	b.w	8008986 <__ieee754_pow+0x3e>
 800932e:	4630      	mov	r0, r6
 8009330:	4639      	mov	r1, r7
 8009332:	f7ff bb28 	b.w	8008986 <__ieee754_pow+0x3e>
 8009336:	9204      	str	r2, [sp, #16]
 8009338:	f7ff bb7a 	b.w	8008a30 <__ieee754_pow+0xe8>
 800933c:	2300      	movs	r3, #0
 800933e:	f7ff bb64 	b.w	8008a0a <__ieee754_pow+0xc2>
 8009342:	bf00      	nop
 8009344:	f3af 8000 	nop.w
 8009348:	00000000 	.word	0x00000000
 800934c:	3fe62e43 	.word	0x3fe62e43
 8009350:	fefa39ef 	.word	0xfefa39ef
 8009354:	3fe62e42 	.word	0x3fe62e42
 8009358:	0ca86c39 	.word	0x0ca86c39
 800935c:	be205c61 	.word	0xbe205c61
 8009360:	72bea4d0 	.word	0x72bea4d0
 8009364:	3e663769 	.word	0x3e663769
 8009368:	c5d26bf1 	.word	0xc5d26bf1
 800936c:	3ebbbd41 	.word	0x3ebbbd41
 8009370:	af25de2c 	.word	0xaf25de2c
 8009374:	3f11566a 	.word	0x3f11566a
 8009378:	16bebd93 	.word	0x16bebd93
 800937c:	3f66c16c 	.word	0x3f66c16c
 8009380:	5555553e 	.word	0x5555553e
 8009384:	3fc55555 	.word	0x3fc55555
 8009388:	3fe00000 	.word	0x3fe00000
 800938c:	000fffff 	.word	0x000fffff
 8009390:	3ff00000 	.word	0x3ff00000
 8009394:	4090cbff 	.word	0x4090cbff
 8009398:	3f6f3400 	.word	0x3f6f3400
 800939c:	652b82fe 	.word	0x652b82fe
 80093a0:	3c971547 	.word	0x3c971547

080093a4 <__ieee754_sqrt>:
 80093a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a8:	ec55 4b10 	vmov	r4, r5, d0
 80093ac:	4e55      	ldr	r6, [pc, #340]	; (8009504 <__ieee754_sqrt+0x160>)
 80093ae:	43ae      	bics	r6, r5
 80093b0:	ee10 0a10 	vmov	r0, s0
 80093b4:	ee10 3a10 	vmov	r3, s0
 80093b8:	462a      	mov	r2, r5
 80093ba:	4629      	mov	r1, r5
 80093bc:	d110      	bne.n	80093e0 <__ieee754_sqrt+0x3c>
 80093be:	ee10 2a10 	vmov	r2, s0
 80093c2:	462b      	mov	r3, r5
 80093c4:	f7f7 f8c8 	bl	8000558 <__aeabi_dmul>
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	4620      	mov	r0, r4
 80093ce:	4629      	mov	r1, r5
 80093d0:	f7f6 ff0c 	bl	80001ec <__adddf3>
 80093d4:	4604      	mov	r4, r0
 80093d6:	460d      	mov	r5, r1
 80093d8:	ec45 4b10 	vmov	d0, r4, r5
 80093dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e0:	2d00      	cmp	r5, #0
 80093e2:	dc10      	bgt.n	8009406 <__ieee754_sqrt+0x62>
 80093e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80093e8:	4330      	orrs	r0, r6
 80093ea:	d0f5      	beq.n	80093d8 <__ieee754_sqrt+0x34>
 80093ec:	b15d      	cbz	r5, 8009406 <__ieee754_sqrt+0x62>
 80093ee:	ee10 2a10 	vmov	r2, s0
 80093f2:	462b      	mov	r3, r5
 80093f4:	ee10 0a10 	vmov	r0, s0
 80093f8:	f7f6 fef6 	bl	80001e8 <__aeabi_dsub>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	f7f7 f9d4 	bl	80007ac <__aeabi_ddiv>
 8009404:	e7e6      	b.n	80093d4 <__ieee754_sqrt+0x30>
 8009406:	1512      	asrs	r2, r2, #20
 8009408:	d074      	beq.n	80094f4 <__ieee754_sqrt+0x150>
 800940a:	07d4      	lsls	r4, r2, #31
 800940c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009410:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009414:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009418:	bf5e      	ittt	pl
 800941a:	0fda      	lsrpl	r2, r3, #31
 800941c:	005b      	lslpl	r3, r3, #1
 800941e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009422:	2400      	movs	r4, #0
 8009424:	0fda      	lsrs	r2, r3, #31
 8009426:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800942a:	107f      	asrs	r7, r7, #1
 800942c:	005b      	lsls	r3, r3, #1
 800942e:	2516      	movs	r5, #22
 8009430:	4620      	mov	r0, r4
 8009432:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009436:	1886      	adds	r6, r0, r2
 8009438:	428e      	cmp	r6, r1
 800943a:	bfde      	ittt	le
 800943c:	1b89      	suble	r1, r1, r6
 800943e:	18b0      	addle	r0, r6, r2
 8009440:	18a4      	addle	r4, r4, r2
 8009442:	0049      	lsls	r1, r1, #1
 8009444:	3d01      	subs	r5, #1
 8009446:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800944a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800944e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009452:	d1f0      	bne.n	8009436 <__ieee754_sqrt+0x92>
 8009454:	462a      	mov	r2, r5
 8009456:	f04f 0e20 	mov.w	lr, #32
 800945a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800945e:	4281      	cmp	r1, r0
 8009460:	eb06 0c05 	add.w	ip, r6, r5
 8009464:	dc02      	bgt.n	800946c <__ieee754_sqrt+0xc8>
 8009466:	d113      	bne.n	8009490 <__ieee754_sqrt+0xec>
 8009468:	459c      	cmp	ip, r3
 800946a:	d811      	bhi.n	8009490 <__ieee754_sqrt+0xec>
 800946c:	f1bc 0f00 	cmp.w	ip, #0
 8009470:	eb0c 0506 	add.w	r5, ip, r6
 8009474:	da43      	bge.n	80094fe <__ieee754_sqrt+0x15a>
 8009476:	2d00      	cmp	r5, #0
 8009478:	db41      	blt.n	80094fe <__ieee754_sqrt+0x15a>
 800947a:	f100 0801 	add.w	r8, r0, #1
 800947e:	1a09      	subs	r1, r1, r0
 8009480:	459c      	cmp	ip, r3
 8009482:	bf88      	it	hi
 8009484:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8009488:	eba3 030c 	sub.w	r3, r3, ip
 800948c:	4432      	add	r2, r6
 800948e:	4640      	mov	r0, r8
 8009490:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009494:	f1be 0e01 	subs.w	lr, lr, #1
 8009498:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800949c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80094a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80094a4:	d1db      	bne.n	800945e <__ieee754_sqrt+0xba>
 80094a6:	430b      	orrs	r3, r1
 80094a8:	d006      	beq.n	80094b8 <__ieee754_sqrt+0x114>
 80094aa:	1c50      	adds	r0, r2, #1
 80094ac:	bf13      	iteet	ne
 80094ae:	3201      	addne	r2, #1
 80094b0:	3401      	addeq	r4, #1
 80094b2:	4672      	moveq	r2, lr
 80094b4:	f022 0201 	bicne.w	r2, r2, #1
 80094b8:	1063      	asrs	r3, r4, #1
 80094ba:	0852      	lsrs	r2, r2, #1
 80094bc:	07e1      	lsls	r1, r4, #31
 80094be:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80094c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80094c6:	bf48      	it	mi
 80094c8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80094cc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80094d0:	4614      	mov	r4, r2
 80094d2:	e781      	b.n	80093d8 <__ieee754_sqrt+0x34>
 80094d4:	0ad9      	lsrs	r1, r3, #11
 80094d6:	3815      	subs	r0, #21
 80094d8:	055b      	lsls	r3, r3, #21
 80094da:	2900      	cmp	r1, #0
 80094dc:	d0fa      	beq.n	80094d4 <__ieee754_sqrt+0x130>
 80094de:	02cd      	lsls	r5, r1, #11
 80094e0:	d50a      	bpl.n	80094f8 <__ieee754_sqrt+0x154>
 80094e2:	f1c2 0420 	rsb	r4, r2, #32
 80094e6:	fa23 f404 	lsr.w	r4, r3, r4
 80094ea:	1e55      	subs	r5, r2, #1
 80094ec:	4093      	lsls	r3, r2
 80094ee:	4321      	orrs	r1, r4
 80094f0:	1b42      	subs	r2, r0, r5
 80094f2:	e78a      	b.n	800940a <__ieee754_sqrt+0x66>
 80094f4:	4610      	mov	r0, r2
 80094f6:	e7f0      	b.n	80094da <__ieee754_sqrt+0x136>
 80094f8:	0049      	lsls	r1, r1, #1
 80094fa:	3201      	adds	r2, #1
 80094fc:	e7ef      	b.n	80094de <__ieee754_sqrt+0x13a>
 80094fe:	4680      	mov	r8, r0
 8009500:	e7bd      	b.n	800947e <__ieee754_sqrt+0xda>
 8009502:	bf00      	nop
 8009504:	7ff00000 	.word	0x7ff00000

08009508 <with_errno>:
 8009508:	b570      	push	{r4, r5, r6, lr}
 800950a:	4604      	mov	r4, r0
 800950c:	460d      	mov	r5, r1
 800950e:	4616      	mov	r6, r2
 8009510:	f7ff f96a 	bl	80087e8 <__errno>
 8009514:	4629      	mov	r1, r5
 8009516:	6006      	str	r6, [r0, #0]
 8009518:	4620      	mov	r0, r4
 800951a:	bd70      	pop	{r4, r5, r6, pc}

0800951c <xflow>:
 800951c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800951e:	4614      	mov	r4, r2
 8009520:	461d      	mov	r5, r3
 8009522:	b108      	cbz	r0, 8009528 <xflow+0xc>
 8009524:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009528:	e9cd 2300 	strd	r2, r3, [sp]
 800952c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009530:	4620      	mov	r0, r4
 8009532:	4629      	mov	r1, r5
 8009534:	f7f7 f810 	bl	8000558 <__aeabi_dmul>
 8009538:	2222      	movs	r2, #34	; 0x22
 800953a:	b003      	add	sp, #12
 800953c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009540:	f7ff bfe2 	b.w	8009508 <with_errno>

08009544 <__math_uflow>:
 8009544:	b508      	push	{r3, lr}
 8009546:	2200      	movs	r2, #0
 8009548:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800954c:	f7ff ffe6 	bl	800951c <xflow>
 8009550:	ec41 0b10 	vmov	d0, r0, r1
 8009554:	bd08      	pop	{r3, pc}

08009556 <__math_oflow>:
 8009556:	b508      	push	{r3, lr}
 8009558:	2200      	movs	r2, #0
 800955a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800955e:	f7ff ffdd 	bl	800951c <xflow>
 8009562:	ec41 0b10 	vmov	d0, r0, r1
 8009566:	bd08      	pop	{r3, pc}

08009568 <fabs>:
 8009568:	ec51 0b10 	vmov	r0, r1, d0
 800956c:	ee10 2a10 	vmov	r2, s0
 8009570:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009574:	ec43 2b10 	vmov	d0, r2, r3
 8009578:	4770      	bx	lr

0800957a <finite>:
 800957a:	b082      	sub	sp, #8
 800957c:	ed8d 0b00 	vstr	d0, [sp]
 8009580:	9801      	ldr	r0, [sp, #4]
 8009582:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009586:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800958a:	0fc0      	lsrs	r0, r0, #31
 800958c:	b002      	add	sp, #8
 800958e:	4770      	bx	lr

08009590 <scalbn>:
 8009590:	b570      	push	{r4, r5, r6, lr}
 8009592:	ec55 4b10 	vmov	r4, r5, d0
 8009596:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800959a:	4606      	mov	r6, r0
 800959c:	462b      	mov	r3, r5
 800959e:	b99a      	cbnz	r2, 80095c8 <scalbn+0x38>
 80095a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80095a4:	4323      	orrs	r3, r4
 80095a6:	d036      	beq.n	8009616 <scalbn+0x86>
 80095a8:	4b39      	ldr	r3, [pc, #228]	; (8009690 <scalbn+0x100>)
 80095aa:	4629      	mov	r1, r5
 80095ac:	ee10 0a10 	vmov	r0, s0
 80095b0:	2200      	movs	r2, #0
 80095b2:	f7f6 ffd1 	bl	8000558 <__aeabi_dmul>
 80095b6:	4b37      	ldr	r3, [pc, #220]	; (8009694 <scalbn+0x104>)
 80095b8:	429e      	cmp	r6, r3
 80095ba:	4604      	mov	r4, r0
 80095bc:	460d      	mov	r5, r1
 80095be:	da10      	bge.n	80095e2 <scalbn+0x52>
 80095c0:	a32b      	add	r3, pc, #172	; (adr r3, 8009670 <scalbn+0xe0>)
 80095c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c6:	e03a      	b.n	800963e <scalbn+0xae>
 80095c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80095cc:	428a      	cmp	r2, r1
 80095ce:	d10c      	bne.n	80095ea <scalbn+0x5a>
 80095d0:	ee10 2a10 	vmov	r2, s0
 80095d4:	4620      	mov	r0, r4
 80095d6:	4629      	mov	r1, r5
 80095d8:	f7f6 fe08 	bl	80001ec <__adddf3>
 80095dc:	4604      	mov	r4, r0
 80095de:	460d      	mov	r5, r1
 80095e0:	e019      	b.n	8009616 <scalbn+0x86>
 80095e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80095e6:	460b      	mov	r3, r1
 80095e8:	3a36      	subs	r2, #54	; 0x36
 80095ea:	4432      	add	r2, r6
 80095ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80095f0:	428a      	cmp	r2, r1
 80095f2:	dd08      	ble.n	8009606 <scalbn+0x76>
 80095f4:	2d00      	cmp	r5, #0
 80095f6:	a120      	add	r1, pc, #128	; (adr r1, 8009678 <scalbn+0xe8>)
 80095f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095fc:	da1c      	bge.n	8009638 <scalbn+0xa8>
 80095fe:	a120      	add	r1, pc, #128	; (adr r1, 8009680 <scalbn+0xf0>)
 8009600:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009604:	e018      	b.n	8009638 <scalbn+0xa8>
 8009606:	2a00      	cmp	r2, #0
 8009608:	dd08      	ble.n	800961c <scalbn+0x8c>
 800960a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800960e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009612:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009616:	ec45 4b10 	vmov	d0, r4, r5
 800961a:	bd70      	pop	{r4, r5, r6, pc}
 800961c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009620:	da19      	bge.n	8009656 <scalbn+0xc6>
 8009622:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009626:	429e      	cmp	r6, r3
 8009628:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800962c:	dd0a      	ble.n	8009644 <scalbn+0xb4>
 800962e:	a112      	add	r1, pc, #72	; (adr r1, 8009678 <scalbn+0xe8>)
 8009630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1e2      	bne.n	80095fe <scalbn+0x6e>
 8009638:	a30f      	add	r3, pc, #60	; (adr r3, 8009678 <scalbn+0xe8>)
 800963a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963e:	f7f6 ff8b 	bl	8000558 <__aeabi_dmul>
 8009642:	e7cb      	b.n	80095dc <scalbn+0x4c>
 8009644:	a10a      	add	r1, pc, #40	; (adr r1, 8009670 <scalbn+0xe0>)
 8009646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d0b8      	beq.n	80095c0 <scalbn+0x30>
 800964e:	a10e      	add	r1, pc, #56	; (adr r1, 8009688 <scalbn+0xf8>)
 8009650:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009654:	e7b4      	b.n	80095c0 <scalbn+0x30>
 8009656:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800965a:	3236      	adds	r2, #54	; 0x36
 800965c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009660:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009664:	4620      	mov	r0, r4
 8009666:	4b0c      	ldr	r3, [pc, #48]	; (8009698 <scalbn+0x108>)
 8009668:	2200      	movs	r2, #0
 800966a:	e7e8      	b.n	800963e <scalbn+0xae>
 800966c:	f3af 8000 	nop.w
 8009670:	c2f8f359 	.word	0xc2f8f359
 8009674:	01a56e1f 	.word	0x01a56e1f
 8009678:	8800759c 	.word	0x8800759c
 800967c:	7e37e43c 	.word	0x7e37e43c
 8009680:	8800759c 	.word	0x8800759c
 8009684:	fe37e43c 	.word	0xfe37e43c
 8009688:	c2f8f359 	.word	0xc2f8f359
 800968c:	81a56e1f 	.word	0x81a56e1f
 8009690:	43500000 	.word	0x43500000
 8009694:	ffff3cb0 	.word	0xffff3cb0
 8009698:	3c900000 	.word	0x3c900000

0800969c <_init>:
 800969c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969e:	bf00      	nop
 80096a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096a2:	bc08      	pop	{r3}
 80096a4:	469e      	mov	lr, r3
 80096a6:	4770      	bx	lr

080096a8 <_fini>:
 80096a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096aa:	bf00      	nop
 80096ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ae:	bc08      	pop	{r3}
 80096b0:	469e      	mov	lr, r3
 80096b2:	4770      	bx	lr
