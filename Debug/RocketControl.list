
RocketControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005c80  08005c80  00015c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d60  08005d60  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005d60  08005d60  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d60  08005d60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d60  08005d60  00015d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d64  08005d64  00015d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000070  08005dd8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200001b8  08005dd8  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001265c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c0d  00000000  00000000  000326fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00035310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  000365b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003cd4  00000000  00000000  000376e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016478  00000000  00000000  0003b3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb6e5  00000000  00000000  00051834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011cf19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055fc  00000000  00000000  0011cf6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c68 	.word	0x08005c68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005c68 	.word	0x08005c68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15 (JTDI)   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	4b26      	ldr	r3, [pc, #152]	; (8000afc <MX_GPIO_Init+0xb0>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a25      	ldr	r2, [pc, #148]	; (8000afc <MX_GPIO_Init+0xb0>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b23      	ldr	r3, [pc, #140]	; (8000afc <MX_GPIO_Init+0xb0>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b20      	ldr	r3, [pc, #128]	; (8000afc <MX_GPIO_Init+0xb0>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a1f      	ldr	r2, [pc, #124]	; (8000afc <MX_GPIO_Init+0xb0>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <MX_GPIO_Init+0xb0>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_GPIO_Init+0xb0>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a19      	ldr	r2, [pc, #100]	; (8000afc <MX_GPIO_Init+0xb0>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MX_GPIO_Init+0xb0>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2108      	movs	r1, #8
 8000aae:	4814      	ldr	r0, [pc, #80]	; (8000b00 <MX_GPIO_Init+0xb4>)
 8000ab0:	f001 f860 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000ab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ab8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad4:	f000 fee4 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	4619      	mov	r1, r3
 8000aee:	4804      	ldr	r0, [pc, #16]	; (8000b00 <MX_GPIO_Init+0xb4>)
 8000af0:	f000 fed6 	bl	80018a0 <HAL_GPIO_Init>

}
 8000af4:	bf00      	nop
 8000af6:	3720      	adds	r7, #32
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40021000 	.word	0x40021000
 8000b00:	48000400 	.word	0x48000400

08000b04 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <MX_I2C1_Init+0x74>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <MX_I2C1_Init+0x78>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00400F35;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_I2C1_Init+0x74>)
 8000b10:	4a1b      	ldr	r2, [pc, #108]	; (8000b80 <MX_I2C1_Init+0x7c>)
 8000b12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <MX_I2C1_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_I2C1_Init+0x74>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <MX_I2C1_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_I2C1_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_I2C1_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_I2C1_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_I2C1_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b3e:	480e      	ldr	r0, [pc, #56]	; (8000b78 <MX_I2C1_Init+0x74>)
 8000b40:	f001 f830 	bl	8001ba4 <HAL_I2C_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b4a:	f000 f8f0 	bl	8000d2e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4809      	ldr	r0, [pc, #36]	; (8000b78 <MX_I2C1_Init+0x74>)
 8000b52:	f001 fe4e 	bl	80027f2 <HAL_I2CEx_ConfigAnalogFilter>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b5c:	f000 f8e7 	bl	8000d2e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b60:	2100      	movs	r1, #0
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_I2C1_Init+0x74>)
 8000b64:	f001 fe90 	bl	8002888 <HAL_I2CEx_ConfigDigitalFilter>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b6e:	f000 f8de 	bl	8000d2e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000008c 	.word	0x2000008c
 8000b7c:	40005400 	.word	0x40005400
 8000b80:	00400f35 	.word	0x00400f35

08000b84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b09e      	sub	sp, #120	; 0x78
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	2254      	movs	r2, #84	; 0x54
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f004 f8c9 	bl	8004d3c <memset>
  if(i2cHandle->Instance==I2C1)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a26      	ldr	r2, [pc, #152]	; (8000c48 <HAL_I2C_MspInit+0xc4>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d145      	bne.n	8000c40 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bb4:	2340      	movs	r3, #64	; 0x40
 8000bb6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f002 fd11 	bl	80035e8 <HAL_RCCEx_PeriphCLKConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000bcc:	f000 f8af 	bl	8000d2e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <HAL_I2C_MspInit+0xc8>)
 8000bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd4:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <HAL_I2C_MspInit+0xc8>)
 8000bd6:	f043 0302 	orr.w	r3, r3, #2
 8000bda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <HAL_I2C_MspInit+0xc8>)
 8000bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000be8:	23c0      	movs	r3, #192	; 0xc0
 8000bea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bec:	2312      	movs	r3, #18
 8000bee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c00:	4619      	mov	r1, r3
 8000c02:	4813      	ldr	r0, [pc, #76]	; (8000c50 <HAL_I2C_MspInit+0xcc>)
 8000c04:	f000 fe4c 	bl	80018a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <HAL_I2C_MspInit+0xc8>)
 8000c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0c:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <HAL_I2C_MspInit+0xc8>)
 8000c0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c12:	6593      	str	r3, [r2, #88]	; 0x58
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <HAL_I2C_MspInit+0xc8>)
 8000c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	201f      	movs	r0, #31
 8000c26:	f000 fdb6 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c2a:	201f      	movs	r0, #31
 8000c2c:	f000 fdcf 	bl	80017ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	2020      	movs	r0, #32
 8000c36:	f000 fdae 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c3a:	2020      	movs	r0, #32
 8000c3c:	f000 fdc7 	bl	80017ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c40:	bf00      	nop
 8000c42:	3778      	adds	r7, #120	; 0x78
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40005400 	.word	0x40005400
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	48000400 	.word	0x48000400

08000c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c58:	f000 fc29 	bl	80014ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5c:	f000 f816 	bl	8000c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c60:	f7ff fef4 	bl	8000a4c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c64:	f7ff ff4e 	bl	8000b04 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000c68:	f000 face 	bl	8001208 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000c6c:	f000 f932 	bl	8000ed4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  Servo_Init();
 8000c70:	f000 f862 	bl	8000d38 <Servo_Init>

  printf("started");
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <main+0x34>)
 8000c76:	f004 f869 	bl	8004d4c <iprintf>

  Check_Servos_Manually();
 8000c7a:	f000 f88b 	bl	8000d94 <Check_Servos_Manually>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 8000c7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c82:	f000 fc89 	bl	8001598 <HAL_Delay>
 8000c86:	e7fa      	b.n	8000c7e <main+0x2a>
 8000c88:	08005c80 	.word	0x08005c80

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b096      	sub	sp, #88	; 0x58
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	2244      	movs	r2, #68	; 0x44
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f004 f84e 	bl	8004d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cb2:	f001 fe43 	bl	800293c <HAL_PWREx_ControlVoltageScaling>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000cbc:	f000 f837 	bl	8000d2e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cca:	2310      	movs	r3, #16
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000cda:	2308      	movs	r3, #8
 8000cdc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cde:	2307      	movs	r3, #7
 8000ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 fe7a 	bl	80029e8 <HAL_RCC_OscConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000cfa:	f000 f818 	bl	8000d2e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfe:	230f      	movs	r3, #15
 8000d00:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d02:	2303      	movs	r3, #3
 8000d04:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d12:	463b      	mov	r3, r7
 8000d14:	2101      	movs	r1, #1
 8000d16:	4618      	mov	r0, r3
 8000d18:	f002 fa7a 	bl	8003210 <HAL_RCC_ClockConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d22:	f000 f804 	bl	8000d2e <Error_Handler>
  }
}
 8000d26:	bf00      	nop
 8000d28:	3758      	adds	r7, #88	; 0x58
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d32:	b672      	cpsid	i
}
 8000d34:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <Error_Handler+0x8>

08000d38 <Servo_Init>:
 * Starting the timer of each channel.
 * Storing Capture Compare Registers in the servo module.
 * Set the servos to their default (0deg) position.
 * All the funtions below require to call this before using them.
 */
void Servo_Init(){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	480f      	ldr	r0, [pc, #60]	; (8000d7c <Servo_Init+0x44>)
 8000d40:	f003 f896 	bl	8003e70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000d44:	2104      	movs	r1, #4
 8000d46:	480d      	ldr	r0, [pc, #52]	; (8000d7c <Servo_Init+0x44>)
 8000d48:	f003 f892 	bl	8003e70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000d4c:	2108      	movs	r1, #8
 8000d4e:	480b      	ldr	r0, [pc, #44]	; (8000d7c <Servo_Init+0x44>)
 8000d50:	f003 f88e 	bl	8003e70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000d54:	210c      	movs	r1, #12
 8000d56:	4809      	ldr	r0, [pc, #36]	; (8000d7c <Servo_Init+0x44>)
 8000d58:	f003 f88a 	bl	8003e70 <HAL_TIM_PWM_Start>

	servoDutyCycles.Servo1DutyCycle = &TIM1->CCR1;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <Servo_Init+0x48>)
 8000d5e:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <Servo_Init+0x4c>)
 8000d60:	601a      	str	r2, [r3, #0]
	servoDutyCycles.Servo2DutyCycle = &TIM1->CCR2;
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <Servo_Init+0x48>)
 8000d64:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <Servo_Init+0x50>)
 8000d66:	605a      	str	r2, [r3, #4]
	servoDutyCycles.Servo3DutyCycle = &TIM1->CCR3;
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <Servo_Init+0x48>)
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <Servo_Init+0x54>)
 8000d6c:	609a      	str	r2, [r3, #8]
	servoDutyCycles.Servo4DutyCycle = &TIM1->CCR4;
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <Servo_Init+0x48>)
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <Servo_Init+0x58>)
 8000d72:	60da      	str	r2, [r3, #12]

	Set_Servos_Into_Default_Position();
 8000d74:	f000 f83e 	bl	8000df4 <Set_Servos_Into_Default_Position>
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000158 	.word	0x20000158
 8000d80:	200000e0 	.word	0x200000e0
 8000d84:	40012c34 	.word	0x40012c34
 8000d88:	40012c38 	.word	0x40012c38
 8000d8c:	40012c3c 	.word	0x40012c3c
 8000d90:	40012c40 	.word	0x40012c40

08000d94 <Check_Servos_Manually>:
 * Checking if the servos work properly.
 * Starts to move the servos, checking every possible position. User needs to confirm.
 * If something is not right power off the device! The rocket will probably crash if even one of
 * the servos is not working properly.
 */
void Check_Servos_Manually(){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
	int8_t degree = LOWEST_PITCH_DEG;
 8000d9a:	23a6      	movs	r3, #166	; 0xa6
 8000d9c:	73fb      	strb	r3, [r7, #15]

	for (int servo = 1; servo <= NUM_OF_SERVO_MOTORS; servo++){
 8000d9e:	2301      	movs	r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	e01d      	b.n	8000de0 <Check_Servos_Manually+0x4c>
		for (int i = 0; i < 10; i++){
 8000da4:	2300      	movs	r3, #0
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	e012      	b.n	8000dd0 <Check_Servos_Manually+0x3c>
			_Move_Servo(servo, degree);
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 f833 	bl	8000e20 <_Move_Servo>
			degree += 20;
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	3314      	adds	r3, #20
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(1000);
 8000dc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc6:	f000 fbe7 	bl	8001598 <HAL_Delay>
		for (int i = 0; i < 10; i++){
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b09      	cmp	r3, #9
 8000dd4:	dde9      	ble.n	8000daa <Check_Servos_Manually+0x16>
		}
		degree = LOWEST_PITCH_DEG;
 8000dd6:	23a6      	movs	r3, #166	; 0xa6
 8000dd8:	73fb      	strb	r3, [r7, #15]
	for (int servo = 1; servo <= NUM_OF_SERVO_MOTORS; servo++){
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	ddde      	ble.n	8000da4 <Check_Servos_Manually+0x10>
	}

	Set_Servos_Into_Default_Position();
 8000de6:	f000 f805 	bl	8000df4 <Set_Servos_Into_Default_Position>

}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <Set_Servos_Into_Default_Position>:


void Set_Servos_Into_Default_Position(){
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
	TIM1->CCR1 = INLINE_DUTY_CYCLE;
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <Set_Servos_Into_Default_Position+0x28>)
 8000dfa:	2296      	movs	r2, #150	; 0x96
 8000dfc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = INLINE_DUTY_CYCLE;
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <Set_Servos_Into_Default_Position+0x28>)
 8000e00:	2296      	movs	r2, #150	; 0x96
 8000e02:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = INLINE_DUTY_CYCLE;
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <Set_Servos_Into_Default_Position+0x28>)
 8000e06:	2296      	movs	r2, #150	; 0x96
 8000e08:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = INLINE_DUTY_CYCLE;
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <Set_Servos_Into_Default_Position+0x28>)
 8000e0c:	2296      	movs	r2, #150	; 0x96
 8000e0e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40012c00 	.word	0x40012c00

08000e20 <_Move_Servo>:

/*
 * @param num_of_servo choose servo to move
 * @param degree to rotate the servo into (from -90 to +90)
 */
void _Move_Servo(int8_t num_of_servo, int8_t degree){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	460a      	mov	r2, r1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	71bb      	strb	r3, [r7, #6]
	uint8_t duty_cycle;

	if (degree < LOWEST_PITCH_DEG){
 8000e30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e34:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 8000e38:	da02      	bge.n	8000e40 <_Move_Servo+0x20>
		duty_cycle = LOWEST_PITCH_DUTY_CYCLE; // -90deg
 8000e3a:	2364      	movs	r3, #100	; 0x64
 8000e3c:	73fb      	strb	r3, [r7, #15]
 8000e3e:	e01b      	b.n	8000e78 <_Move_Servo+0x58>

	} else if (degree > HIGHEST_ENABLED_PICH_DEG){
 8000e40:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e44:	2b2d      	cmp	r3, #45	; 0x2d
 8000e46:	dd02      	ble.n	8000e4e <_Move_Servo+0x2e>
		duty_cycle = HIGHEST_PITCH_DUTY_CYCLE; // +90deg
 8000e48:	23c8      	movs	r3, #200	; 0xc8
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	e014      	b.n	8000e78 <_Move_Servo+0x58>

	} else {
		/* To get the duty cycle to the according degree we need this equation*/
		duty_cycle = (uint8_t) ( ( degree - (-90) ) / 1.8 ) + 100;
 8000e4e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e52:	335a      	adds	r3, #90	; 0x5a
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fb5d 	bl	8000514 <__aeabi_i2d>
 8000e5a:	a31c      	add	r3, pc, #112	; (adr r3, 8000ecc <_Move_Servo+0xac>)
 8000e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e60:	f7ff fcec 	bl	800083c <__aeabi_ddiv>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	4610      	mov	r0, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f7ff fdce 	bl	8000a0c <__aeabi_d2uiz>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	3364      	adds	r3, #100	; 0x64
 8000e76:	73fb      	strb	r3, [r7, #15]
	}

	switch (num_of_servo){
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d81e      	bhi.n	8000ec0 <_Move_Servo+0xa0>
 8000e82:	a201      	add	r2, pc, #4	; (adr r2, 8000e88 <_Move_Servo+0x68>)
 8000e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e88:	08000e99 	.word	0x08000e99
 8000e8c:	08000ea3 	.word	0x08000ea3
 8000e90:	08000ead 	.word	0x08000ead
 8000e94:	08000eb7 	.word	0x08000eb7
		case NORTH_SERVO:
			*servoDutyCycles.Servo1DutyCycle = duty_cycle;
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <_Move_Servo+0xa8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	7bfa      	ldrb	r2, [r7, #15]
 8000e9e:	601a      	str	r2, [r3, #0]
			break;
 8000ea0:	e00e      	b.n	8000ec0 <_Move_Servo+0xa0>

		case EAST_SERVO:
			*servoDutyCycles.Servo2DutyCycle = duty_cycle;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <_Move_Servo+0xa8>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	7bfa      	ldrb	r2, [r7, #15]
 8000ea8:	601a      	str	r2, [r3, #0]
			break;
 8000eaa:	e009      	b.n	8000ec0 <_Move_Servo+0xa0>

		case SOUTH_SERVO:
			*servoDutyCycles.Servo3DutyCycle = duty_cycle;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <_Move_Servo+0xa8>)
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	7bfa      	ldrb	r2, [r7, #15]
 8000eb2:	601a      	str	r2, [r3, #0]
			break;
 8000eb4:	e004      	b.n	8000ec0 <_Move_Servo+0xa0>

		case WEST_SERVO:
			*servoDutyCycles.Servo4DutyCycle = duty_cycle;
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <_Move_Servo+0xa8>)
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	7bfa      	ldrb	r2, [r7, #15]
 8000ebc:	601a      	str	r2, [r3, #0]
			break;
 8000ebe:	bf00      	nop
	}
}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200000e0 	.word	0x200000e0
 8000ecc:	cccccccd 	.word	0xcccccccd
 8000ed0:	3ffccccc 	.word	0x3ffccccc

08000ed4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <MX_SPI1_Init+0x74>)
 8000eda:	4a1c      	ldr	r2, [pc, #112]	; (8000f4c <MX_SPI1_Init+0x78>)
 8000edc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <MX_SPI1_Init+0x74>)
 8000ee0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ee4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <MX_SPI1_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <MX_SPI1_Init+0x74>)
 8000eee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ef2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <MX_SPI1_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <MX_SPI1_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_SPI1_Init+0x74>)
 8000f02:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <MX_SPI1_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_SPI1_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_SPI1_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <MX_SPI1_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_SPI1_Init+0x74>)
 8000f22:	2207      	movs	r2, #7
 8000f24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <MX_SPI1_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_SPI1_Init+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_SPI1_Init+0x74>)
 8000f34:	f002 fe40 	bl	8003bb8 <HAL_SPI_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f3e:	f7ff fef6 	bl	8000d2e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200000f0 	.word	0x200000f0
 8000f4c:	40013000 	.word	0x40013000

08000f50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <HAL_SPI_MspInit+0x80>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d129      	bne.n	8000fc6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <HAL_SPI_MspInit+0x84>)
 8000f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f76:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <HAL_SPI_MspInit+0x84>)
 8000f78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_SPI_MspInit+0x84>)
 8000f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_SPI_MspInit+0x84>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	4a11      	ldr	r2, [pc, #68]	; (8000fd4 <HAL_SPI_MspInit+0x84>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <HAL_SPI_MspInit+0x84>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_12;
 8000fa2:	f241 0352 	movw	r3, #4178	; 0x1052
 8000fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fb4:	2305      	movs	r3, #5
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc2:	f000 fc6d 	bl	80018a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	3728      	adds	r7, #40	; 0x28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40013000 	.word	0x40013000
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_MspInit+0x44>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_MspInit+0x44>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_MspInit+0x44>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_MspInit+0x44>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_MspInit+0x44>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	6593      	str	r3, [r2, #88]	; 0x58
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_MspInit+0x44>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <NMI_Handler+0x4>

08001026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <MemManage_Handler+0x4>

08001032 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <UsageFault_Handler+0x4>

0800103e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106c:	f000 fa74 	bl	8001558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <I2C1_EV_IRQHandler+0x10>)
 800107a:	f000 fe22 	bl	8001cc2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000008c 	.word	0x2000008c

08001088 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <I2C1_ER_IRQHandler+0x10>)
 800108e:	f000 fe32 	bl	8001cf6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000008c 	.word	0x2000008c

0800109c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	e00a      	b.n	80010c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010ae:	f3af 8000 	nop.w
 80010b2:	4601      	mov	r1, r0
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	60ba      	str	r2, [r7, #8]
 80010ba:	b2ca      	uxtb	r2, r1
 80010bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3301      	adds	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	dbf0      	blt.n	80010ae <_read+0x12>
	}

return len;
 80010cc:	687b      	ldr	r3, [r7, #4]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	e009      	b.n	80010fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	60ba      	str	r2, [r7, #8]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	3301      	adds	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	429a      	cmp	r2, r3
 8001102:	dbf1      	blt.n	80010e8 <_write+0x12>
	}
	return len;
 8001104:	687b      	ldr	r3, [r7, #4]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <_close>:

int _close(int file)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
	return -1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001136:	605a      	str	r2, [r3, #4]
	return 0;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <_isatty>:

int _isatty(int file)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
	return 1;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
	return 0;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <_sbrk+0x5c>)
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <_sbrk+0x60>)
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <_sbrk+0x64>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <_sbrk+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d207      	bcs.n	80011b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a8:	f003 fd9e 	bl	8004ce8 <__errno>
 80011ac:	4603      	mov	r3, r0
 80011ae:	220c      	movs	r2, #12
 80011b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	e009      	b.n	80011cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <_sbrk+0x64>)
 80011c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20010000 	.word	0x20010000
 80011d8:	00000400 	.word	0x00000400
 80011dc:	20000154 	.word	0x20000154
 80011e0:	200001b8 	.word	0x200001b8

080011e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <SystemInit+0x20>)
 80011ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <SystemInit+0x20>)
 80011f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b09a      	sub	sp, #104	; 0x68
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001228:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	615a      	str	r2, [r3, #20]
 800123a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	222c      	movs	r2, #44	; 0x2c
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f003 fd7a 	bl	8004d3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001248:	4b56      	ldr	r3, [pc, #344]	; (80013a4 <MX_TIM1_Init+0x19c>)
 800124a:	4a57      	ldr	r2, [pc, #348]	; (80013a8 <MX_TIM1_Init+0x1a0>)
 800124c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320-1;
 800124e:	4b55      	ldr	r3, [pc, #340]	; (80013a4 <MX_TIM1_Init+0x19c>)
 8001250:	f240 123f 	movw	r2, #319	; 0x13f
 8001254:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b53      	ldr	r3, [pc, #332]	; (80013a4 <MX_TIM1_Init+0x19c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 800125c:	4b51      	ldr	r3, [pc, #324]	; (80013a4 <MX_TIM1_Init+0x19c>)
 800125e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001262:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	4b4f      	ldr	r3, [pc, #316]	; (80013a4 <MX_TIM1_Init+0x19c>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800126a:	4b4e      	ldr	r3, [pc, #312]	; (80013a4 <MX_TIM1_Init+0x19c>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001270:	4b4c      	ldr	r3, [pc, #304]	; (80013a4 <MX_TIM1_Init+0x19c>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001276:	484b      	ldr	r0, [pc, #300]	; (80013a4 <MX_TIM1_Init+0x19c>)
 8001278:	f002 fd41 	bl	8003cfe <HAL_TIM_Base_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001282:	f7ff fd54 	bl	8000d2e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800128c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001290:	4619      	mov	r1, r3
 8001292:	4844      	ldr	r0, [pc, #272]	; (80013a4 <MX_TIM1_Init+0x19c>)
 8001294:	f002 ffde 	bl	8004254 <HAL_TIM_ConfigClockSource>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800129e:	f7ff fd46 	bl	8000d2e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012a2:	4840      	ldr	r0, [pc, #256]	; (80013a4 <MX_TIM1_Init+0x19c>)
 80012a4:	f002 fd82 	bl	8003dac <HAL_TIM_PWM_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80012ae:	f7ff fd3e 	bl	8000d2e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012c2:	4619      	mov	r1, r3
 80012c4:	4837      	ldr	r0, [pc, #220]	; (80013a4 <MX_TIM1_Init+0x19c>)
 80012c6:	f003 fc31 	bl	8004b2c <HAL_TIMEx_MasterConfigSynchronization>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80012d0:	f7ff fd2d 	bl	8000d2e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d4:	2360      	movs	r3, #96	; 0x60
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012dc:	2300      	movs	r3, #0
 80012de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012e0:	2300      	movs	r3, #0
 80012e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012e8:	2300      	movs	r3, #0
 80012ea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012ec:	2300      	movs	r3, #0
 80012ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012f4:	2200      	movs	r2, #0
 80012f6:	4619      	mov	r1, r3
 80012f8:	482a      	ldr	r0, [pc, #168]	; (80013a4 <MX_TIM1_Init+0x19c>)
 80012fa:	f002 fe97 	bl	800402c <HAL_TIM_PWM_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001304:	f7ff fd13 	bl	8000d2e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001308:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800130c:	2204      	movs	r2, #4
 800130e:	4619      	mov	r1, r3
 8001310:	4824      	ldr	r0, [pc, #144]	; (80013a4 <MX_TIM1_Init+0x19c>)
 8001312:	f002 fe8b 	bl	800402c <HAL_TIM_PWM_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800131c:	f7ff fd07 	bl	8000d2e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001320:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001324:	2208      	movs	r2, #8
 8001326:	4619      	mov	r1, r3
 8001328:	481e      	ldr	r0, [pc, #120]	; (80013a4 <MX_TIM1_Init+0x19c>)
 800132a:	f002 fe7f 	bl	800402c <HAL_TIM_PWM_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001334:	f7ff fcfb 	bl	8000d2e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001338:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800133c:	220c      	movs	r2, #12
 800133e:	4619      	mov	r1, r3
 8001340:	4818      	ldr	r0, [pc, #96]	; (80013a4 <MX_TIM1_Init+0x19c>)
 8001342:	f002 fe73 	bl	800402c <HAL_TIM_PWM_ConfigChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800134c:	f7ff fcef 	bl	8000d2e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001368:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001372:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4619      	mov	r1, r3
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <MX_TIM1_Init+0x19c>)
 8001386:	f003 fc37 	bl	8004bf8 <HAL_TIMEx_ConfigBreakDeadTime>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8001390:	f7ff fccd 	bl	8000d2e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001394:	4803      	ldr	r0, [pc, #12]	; (80013a4 <MX_TIM1_Init+0x19c>)
 8001396:	f000 f829 	bl	80013ec <HAL_TIM_MspPostInit>

}
 800139a:	bf00      	nop
 800139c:	3768      	adds	r7, #104	; 0x68
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000158 	.word	0x20000158
 80013a8:	40012c00 	.word	0x40012c00

080013ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <HAL_TIM_Base_MspInit+0x38>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d10b      	bne.n	80013d6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_TIM_Base_MspInit+0x3c>)
 80013c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c2:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <HAL_TIM_Base_MspInit+0x3c>)
 80013c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013c8:	6613      	str	r3, [r2, #96]	; 0x60
 80013ca:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <HAL_TIM_Base_MspInit+0x3c>)
 80013cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40012c00 	.word	0x40012c00
 80013e8:	40021000 	.word	0x40021000

080013ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a12      	ldr	r2, [pc, #72]	; (8001454 <HAL_TIM_MspPostInit+0x68>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d11d      	bne.n	800144a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_TIM_MspPostInit+0x6c>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	4a11      	ldr	r2, [pc, #68]	; (8001458 <HAL_TIM_MspPostInit+0x6c>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_TIM_MspPostInit+0x6c>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001426:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800142a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001438:	2301      	movs	r3, #1
 800143a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	4619      	mov	r1, r3
 8001442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001446:	f000 fa2b 	bl	80018a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800144a:	bf00      	nop
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40012c00 	.word	0x40012c00
 8001458:	40021000 	.word	0x40021000

0800145c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800145c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001494 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001460:	f7ff fec0 	bl	80011e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001464:	480c      	ldr	r0, [pc, #48]	; (8001498 <LoopForever+0x6>)
  ldr r1, =_edata
 8001466:	490d      	ldr	r1, [pc, #52]	; (800149c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001468:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <LoopForever+0xe>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800147c:	4c0a      	ldr	r4, [pc, #40]	; (80014a8 <LoopForever+0x16>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800148a:	f003 fc33 	bl	8004cf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800148e:	f7ff fbe1 	bl	8000c54 <main>

08001492 <LoopForever>:

LoopForever:
    b LoopForever
 8001492:	e7fe      	b.n	8001492 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001494:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800149c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014a0:	08005d68 	.word	0x08005d68
  ldr r2, =_sbss
 80014a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014a8:	200001b8 	.word	0x200001b8

080014ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC1_IRQHandler>

080014ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b8:	2003      	movs	r0, #3
 80014ba:	f000 f961 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014be:	2000      	movs	r0, #0
 80014c0:	f000 f80e 	bl	80014e0 <HAL_InitTick>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	71fb      	strb	r3, [r7, #7]
 80014ce:	e001      	b.n	80014d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014d0:	f7ff fd82 	bl	8000fd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014d4:	79fb      	ldrb	r3, [r7, #7]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_InitTick+0x6c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d023      	beq.n	800153c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_InitTick+0x70>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <HAL_InitTick+0x6c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001502:	fbb3 f3f1 	udiv	r3, r3, r1
 8001506:	fbb2 f3f3 	udiv	r3, r2, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f96d 	bl	80017ea <HAL_SYSTICK_Config>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10f      	bne.n	8001536 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b0f      	cmp	r3, #15
 800151a:	d809      	bhi.n	8001530 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800151c:	2200      	movs	r2, #0
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f000 f937 	bl	8001796 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001528:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <HAL_InitTick+0x74>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e007      	b.n	8001540 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	e004      	b.n	8001540 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	73fb      	strb	r3, [r7, #15]
 800153a:	e001      	b.n	8001540 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000008 	.word	0x20000008
 8001550:	20000000 	.word	0x20000000
 8001554:	20000004 	.word	0x20000004

08001558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_IncTick+0x20>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_IncTick+0x24>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4413      	add	r3, r2
 8001568:	4a04      	ldr	r2, [pc, #16]	; (800157c <HAL_IncTick+0x24>)
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000008 	.word	0x20000008
 800157c:	200001a4 	.word	0x200001a4

08001580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <HAL_GetTick+0x14>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	200001a4 	.word	0x200001a4

08001598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff ffee 	bl	8001580 <HAL_GetTick>
 80015a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b0:	d005      	beq.n	80015be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_Delay+0x44>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015be:	bf00      	nop
 80015c0:	f7ff ffde 	bl	8001580 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d8f7      	bhi.n	80015c0 <HAL_Delay+0x28>
  {
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000008 	.word	0x20000008

080015e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800160c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4907      	ldr	r1, [pc, #28]	; (800167c <__NVIC_EnableIRQ+0x38>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	; (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	; (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800174c:	d301      	bcc.n	8001752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174e:	2301      	movs	r3, #1
 8001750:	e00f      	b.n	8001772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <SysTick_Config+0x40>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175a:	210f      	movs	r1, #15
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f7ff ff8e 	bl	8001680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <SysTick_Config+0x40>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <SysTick_Config+0x40>)
 800176c:	2207      	movs	r2, #7
 800176e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	e000e010 	.word	0xe000e010

08001780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff29 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017a8:	f7ff ff3e 	bl	8001628 <__NVIC_GetPriorityGrouping>
 80017ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	6978      	ldr	r0, [r7, #20]
 80017b4:	f7ff ff8e 	bl	80016d4 <NVIC_EncodePriority>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff5d 	bl	8001680 <__NVIC_SetPriority>
}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff31 	bl	8001644 <__NVIC_EnableIRQ>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ffa2 	bl	800173c <SysTick_Config>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d005      	beq.n	8001826 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2204      	movs	r2, #4
 800181e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
 8001824:	e029      	b.n	800187a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 020e 	bic.w	r2, r2, #14
 8001834:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0201 	bic.w	r2, r2, #1
 8001844:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f003 021c 	and.w	r2, r3, #28
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	2101      	movs	r1, #1
 8001854:	fa01 f202 	lsl.w	r2, r1, r2
 8001858:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	4798      	blx	r3
    }
  }
  return status;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001892:	b2db      	uxtb	r3, r3
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ae:	e148      	b.n	8001b42 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	2101      	movs	r1, #1
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	4013      	ands	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 813a 	beq.w	8001b3c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d005      	beq.n	80018e0 <HAL_GPIO_Init+0x40>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d130      	bne.n	8001942 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	2203      	movs	r2, #3
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4313      	orrs	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001916:	2201      	movs	r2, #1
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	091b      	lsrs	r3, r3, #4
 800192c:	f003 0201 	and.w	r2, r3, #1
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b03      	cmp	r3, #3
 800194c:	d017      	beq.n	800197e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d123      	bne.n	80019d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	08da      	lsrs	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3208      	adds	r2, #8
 8001992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001996:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	220f      	movs	r2, #15
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	08da      	lsrs	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3208      	adds	r2, #8
 80019cc:	6939      	ldr	r1, [r7, #16]
 80019ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0203 	and.w	r2, r3, #3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 8094 	beq.w	8001b3c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a14:	4b52      	ldr	r3, [pc, #328]	; (8001b60 <HAL_GPIO_Init+0x2c0>)
 8001a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a18:	4a51      	ldr	r2, [pc, #324]	; (8001b60 <HAL_GPIO_Init+0x2c0>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6613      	str	r3, [r2, #96]	; 0x60
 8001a20:	4b4f      	ldr	r3, [pc, #316]	; (8001b60 <HAL_GPIO_Init+0x2c0>)
 8001a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a2c:	4a4d      	ldr	r2, [pc, #308]	; (8001b64 <HAL_GPIO_Init+0x2c4>)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	3302      	adds	r3, #2
 8001a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a56:	d00d      	beq.n	8001a74 <HAL_GPIO_Init+0x1d4>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a43      	ldr	r2, [pc, #268]	; (8001b68 <HAL_GPIO_Init+0x2c8>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d007      	beq.n	8001a70 <HAL_GPIO_Init+0x1d0>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a42      	ldr	r2, [pc, #264]	; (8001b6c <HAL_GPIO_Init+0x2cc>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d101      	bne.n	8001a6c <HAL_GPIO_Init+0x1cc>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e004      	b.n	8001a76 <HAL_GPIO_Init+0x1d6>
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	e002      	b.n	8001a76 <HAL_GPIO_Init+0x1d6>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <HAL_GPIO_Init+0x1d6>
 8001a74:	2300      	movs	r3, #0
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	f002 0203 	and.w	r2, r2, #3
 8001a7c:	0092      	lsls	r2, r2, #2
 8001a7e:	4093      	lsls	r3, r2
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a86:	4937      	ldr	r1, [pc, #220]	; (8001b64 <HAL_GPIO_Init+0x2c4>)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a94:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ab8:	4a2d      	ldr	r2, [pc, #180]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001abe:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ae2:	4a23      	ldr	r2, [pc, #140]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ae8:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b0c:	4a18      	ldr	r2, [pc, #96]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b12:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b36:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <HAL_GPIO_Init+0x2d0>)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f47f aeaf 	bne.w	80018b0 <HAL_GPIO_Init+0x10>
  }
}
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
 8001b56:	371c      	adds	r7, #28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010000 	.word	0x40010000
 8001b68:	48000400 	.word	0x48000400
 8001b6c:	48000800 	.word	0x48000800
 8001b70:	40010400 	.word	0x40010400

08001b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
 8001b80:	4613      	mov	r3, r2
 8001b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b84:	787b      	ldrb	r3, [r7, #1]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b90:	e002      	b.n	8001b98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e081      	b.n	8001cba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d106      	bne.n	8001bd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7fe ffda 	bl	8000b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2224      	movs	r2, #36	; 0x24
 8001bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0201 	bic.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bf4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d107      	bne.n	8001c1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	e006      	b.n	8001c2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d104      	bne.n	8001c3e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69d9      	ldr	r1, [r3, #28]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1a      	ldr	r2, [r3, #32]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	68f9      	ldr	r1, [r7, #12]
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	4798      	blx	r3
  }
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d010      	beq.n	8001d3c <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	09db      	lsrs	r3, r3, #7
 8001d1e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00a      	beq.n	8001d3c <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f043 0201 	orr.w	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d3a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	0a9b      	lsrs	r3, r3, #10
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d010      	beq.n	8001d6a <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	09db      	lsrs	r3, r3, #7
 8001d4c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00a      	beq.n	8001d6a <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d58:	f043 0208 	orr.w	r2, r3, #8
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d68:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	0a5b      	lsrs	r3, r3, #9
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d010      	beq.n	8001d98 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	09db      	lsrs	r3, r3, #7
 8001d7a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00a      	beq.n	8001d98 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	f043 0202 	orr.w	r2, r3, #2
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d96:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f003 030b 	and.w	r3, r3, #11
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8001da8:	68f9      	ldr	r1, [r7, #12]
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fb8a 	bl	80024c4 <I2C_ITError>
  }
}
 8001db0:	bf00      	nop
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	70fb      	strb	r3, [r7, #3]
 8001dec:	4613      	mov	r3, r2
 8001dee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <I2C_Slave_ISR_IT+0x24>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e0ec      	b.n	8002036 <I2C_Slave_ISR_IT+0x1fe>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d009      	beq.n	8001e84 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001e7c:	6939      	ldr	r1, [r7, #16]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f9c0 	bl	8002204 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d04d      	beq.n	8001f2c <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d047      	beq.n	8001f2c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d128      	bne.n	8001ef8 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b28      	cmp	r3, #40	; 0x28
 8001eb0:	d108      	bne.n	8001ec4 <I2C_Slave_ISR_IT+0x8c>
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001eb8:	d104      	bne.n	8001ec4 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001eba:	6939      	ldr	r1, [r7, #16]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 faab 	bl	8002418 <I2C_ITListenCplt>
 8001ec2:	e032      	b.n	8001f2a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b29      	cmp	r3, #41	; 0x29
 8001ece:	d10e      	bne.n	8001eee <I2C_Slave_ISR_IT+0xb6>
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ed6:	d00a      	beq.n	8001eee <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2210      	movs	r2, #16
 8001ede:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 fbe6 	bl	80026b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 f92d 	bl	8002146 <I2C_ITSlaveSeqCplt>
 8001eec:	e01d      	b.n	8001f2a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2210      	movs	r2, #16
 8001ef4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001ef6:	e096      	b.n	8002026 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2210      	movs	r2, #16
 8001efe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	f043 0204 	orr.w	r2, r3, #4
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d004      	beq.n	8001f1c <I2C_Slave_ISR_IT+0xe4>
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f18:	f040 8085 	bne.w	8002026 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f20:	4619      	mov	r1, r3
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 face 	bl	80024c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001f28:	e07d      	b.n	8002026 <I2C_Slave_ISR_IT+0x1ee>
 8001f2a:	e07c      	b.n	8002026 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d030      	beq.n	8001f9a <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d02a      	beq.n	8001f9a <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d018      	beq.n	8001f80 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d14f      	bne.n	800202a <I2C_Slave_ISR_IT+0x1f2>
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f90:	d04b      	beq.n	800202a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f8d7 	bl	8002146 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001f98:	e047      	b.n	800202a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	08db      	lsrs	r3, r3, #3
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	08db      	lsrs	r3, r3, #3
 8001faa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d004      	beq.n	8001fbc <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001fb2:	6939      	ldr	r1, [r7, #16]
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 f842 	bl	800203e <I2C_ITAddrCplt>
 8001fba:	e037      	b.n	800202c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d031      	beq.n	800202c <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	085b      	lsrs	r3, r3, #1
 8001fcc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d02b      	beq.n	800202c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d018      	beq.n	8002010 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	781a      	ldrb	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	851a      	strh	r2, [r3, #40]	; 0x28
 800200e:	e00d      	b.n	800202c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002016:	d002      	beq.n	800201e <I2C_Slave_ISR_IT+0x1e6>
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f891 	bl	8002146 <I2C_ITSlaveSeqCplt>
 8002024:	e002      	b.n	800202c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002026:	bf00      	nop
 8002028:	e000      	b.n	800202c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800202a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002054:	2b28      	cmp	r3, #40	; 0x28
 8002056:	d16a      	bne.n	800212e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	0c1b      	lsrs	r3, r3, #16
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	0c1b      	lsrs	r3, r3, #16
 8002070:	b29b      	uxth	r3, r3
 8002072:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002076:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	b29b      	uxth	r3, r3
 8002080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002084:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	b29b      	uxth	r3, r3
 800208e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002092:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d138      	bne.n	800210e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800209c:	897b      	ldrh	r3, [r7, #10]
 800209e:	09db      	lsrs	r3, r3, #7
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	89bb      	ldrh	r3, [r7, #12]
 80020a4:	4053      	eors	r3, r2
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	f003 0306 	and.w	r3, r3, #6
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d11c      	bne.n	80020ea <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80020b0:	897b      	ldrh	r3, [r7, #10]
 80020b2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d13b      	bne.n	800213e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2208      	movs	r2, #8
 80020d2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80020dc:	89ba      	ldrh	r2, [r7, #12]
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	4619      	mov	r1, r3
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff fe7c 	bl	8001de0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80020e8:	e029      	b.n	800213e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80020ea:	893b      	ldrh	r3, [r7, #8]
 80020ec:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80020ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 fb1f 	bl	8002736 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002100:	89ba      	ldrh	r2, [r7, #12]
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	4619      	mov	r1, r3
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff fe6a 	bl	8001de0 <HAL_I2C_AddrCallback>
}
 800210c:	e017      	b.n	800213e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800210e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fb0f 	bl	8002736 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002120:	89ba      	ldrh	r2, [r7, #12]
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	4619      	mov	r1, r3
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff fe5a 	bl	8001de0 <HAL_I2C_AddrCallback>
}
 800212c:	e007      	b.n	800213e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2208      	movs	r2, #8
 8002134:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	0b9b      	lsrs	r3, r3, #14
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d008      	beq.n	800217c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	e00d      	b.n	8002198 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	0bdb      	lsrs	r3, r3, #15
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d007      	beq.n	8002198 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002196:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b29      	cmp	r3, #41	; 0x29
 80021a2:	d112      	bne.n	80021ca <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2228      	movs	r2, #40	; 0x28
 80021a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2221      	movs	r2, #33	; 0x21
 80021b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80021b2:	2101      	movs	r1, #1
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 fabe 	bl	8002736 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff fdf8 	bl	8001db8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80021c8:	e017      	b.n	80021fa <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b2a      	cmp	r3, #42	; 0x2a
 80021d4:	d111      	bne.n	80021fa <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2228      	movs	r2, #40	; 0x28
 80021da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2222      	movs	r2, #34	; 0x22
 80021e2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80021e4:	2102      	movs	r1, #2
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 faa5 	bl	8002736 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff fde9 	bl	8001dcc <HAL_I2C_SlaveRxCpltCallback>
}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002220:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2220      	movs	r2, #32
 8002228:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	2b21      	cmp	r3, #33	; 0x21
 800222e:	d002      	beq.n	8002236 <I2C_ITSlaveCplt+0x32>
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	2b29      	cmp	r3, #41	; 0x29
 8002234:	d108      	bne.n	8002248 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002236:	f248 0101 	movw	r1, #32769	; 0x8001
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fa7b 	bl	8002736 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2221      	movs	r2, #33	; 0x21
 8002244:	631a      	str	r2, [r3, #48]	; 0x30
 8002246:	e00d      	b.n	8002264 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	2b22      	cmp	r3, #34	; 0x22
 800224c:	d002      	beq.n	8002254 <I2C_ITSlaveCplt+0x50>
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	2b2a      	cmp	r3, #42	; 0x2a
 8002252:	d107      	bne.n	8002264 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002254:	f248 0102 	movw	r1, #32770	; 0x8002
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 fa6c 	bl	8002736 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2222      	movs	r2, #34	; 0x22
 8002262:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002272:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6859      	ldr	r1, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	4b64      	ldr	r3, [pc, #400]	; (8002410 <I2C_ITSlaveCplt+0x20c>)
 8002280:	400b      	ands	r3, r1
 8002282:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 fa14 	bl	80026b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	0b9b      	lsrs	r3, r3, #14
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d013      	beq.n	80022be <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022a4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d020      	beq.n	80022f0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022bc:	e018      	b.n	80022f0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	0bdb      	lsrs	r3, r3, #15
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d012      	beq.n	80022f0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022d8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d006      	beq.n	80022f0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	089b      	lsrs	r3, r3, #2
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d020      	beq.n	800233e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f023 0304 	bic.w	r3, r3, #4
 8002302:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00c      	beq.n	800233e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002328:	3b01      	subs	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002334:	b29b      	uxth	r3, r3
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234c:	f043 0204 	orr.w	r2, r3, #4
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	2b00      	cmp	r3, #0
 8002368:	d010      	beq.n	800238c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	4619      	mov	r1, r3
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f8a7 	bl	80024c4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b28      	cmp	r3, #40	; 0x28
 8002380:	d141      	bne.n	8002406 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002382:	6979      	ldr	r1, [r7, #20]
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f847 	bl	8002418 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800238a:	e03c      	b.n	8002406 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002394:	d014      	beq.n	80023c0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff fed5 	bl	8002146 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a1d      	ldr	r2, [pc, #116]	; (8002414 <I2C_ITSlaveCplt+0x210>)
 80023a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff fd1f 	bl	8001dfc <HAL_I2C_ListenCpltCallback>
}
 80023be:	e022      	b.n	8002406 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b22      	cmp	r3, #34	; 0x22
 80023ca:	d10e      	bne.n	80023ea <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff fcf2 	bl	8001dcc <HAL_I2C_SlaveRxCpltCallback>
}
 80023e8:	e00d      	b.n	8002406 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff fcd9 	bl	8001db8 <HAL_I2C_SlaveTxCpltCallback>
}
 8002406:	bf00      	nop
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	fe00e800 	.word	0xfe00e800
 8002414:	ffff0000 	.word	0xffff0000

08002418 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a26      	ldr	r2, [pc, #152]	; (80024c0 <I2C_ITListenCplt+0xa8>)
 8002426:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2220      	movs	r2, #32
 8002432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d022      	beq.n	8002496 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	2b00      	cmp	r3, #0
 800246e:	d012      	beq.n	8002496 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002480:	b29b      	uxth	r3, r3
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f043 0204 	orr.w	r2, r3, #4
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002496:	f248 0103 	movw	r1, #32771	; 0x8003
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f94b 	bl	8002736 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2210      	movs	r2, #16
 80024a6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff fca3 	bl	8001dfc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	ffff0000 	.word	0xffff0000

080024c4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a5d      	ldr	r2, [pc, #372]	; (8002658 <I2C_ITError+0x194>)
 80024e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	2b28      	cmp	r3, #40	; 0x28
 80024fa:	d005      	beq.n	8002508 <I2C_ITError+0x44>
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	2b29      	cmp	r3, #41	; 0x29
 8002500:	d002      	beq.n	8002508 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	2b2a      	cmp	r3, #42	; 0x2a
 8002506:	d10b      	bne.n	8002520 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002508:	2103      	movs	r1, #3
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f913 	bl	8002736 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2228      	movs	r2, #40	; 0x28
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a50      	ldr	r2, [pc, #320]	; (800265c <I2C_ITError+0x198>)
 800251c:	635a      	str	r2, [r3, #52]	; 0x34
 800251e:	e011      	b.n	8002544 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002520:	f248 0103 	movw	r1, #32771	; 0x8003
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f906 	bl	8002736 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b60      	cmp	r3, #96	; 0x60
 8002534:	d003      	beq.n	800253e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254e:	2b00      	cmp	r3, #0
 8002550:	d039      	beq.n	80025c6 <I2C_ITError+0x102>
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2b11      	cmp	r3, #17
 8002556:	d002      	beq.n	800255e <I2C_ITError+0x9a>
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b21      	cmp	r3, #33	; 0x21
 800255c:	d133      	bne.n	80025c6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800256c:	d107      	bne.n	800257e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800257c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff f97e 	bl	8001884 <HAL_DMA_GetState>
 8002588:	4603      	mov	r3, r0
 800258a:	2b01      	cmp	r3, #1
 800258c:	d017      	beq.n	80025be <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002592:	4a33      	ldr	r2, [pc, #204]	; (8002660 <I2C_ITError+0x19c>)
 8002594:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff f92d 	bl	8001802 <HAL_DMA_Abort_IT>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d04d      	beq.n	800264a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025b8:	4610      	mov	r0, r2
 80025ba:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80025bc:	e045      	b.n	800264a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f850 	bl	8002664 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80025c4:	e041      	b.n	800264a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d039      	beq.n	8002642 <I2C_ITError+0x17e>
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b12      	cmp	r3, #18
 80025d2:	d002      	beq.n	80025da <I2C_ITError+0x116>
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b22      	cmp	r3, #34	; 0x22
 80025d8:	d133      	bne.n	8002642 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025e8:	d107      	bne.n	80025fa <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025f8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff f940 	bl	8001884 <HAL_DMA_GetState>
 8002604:	4603      	mov	r3, r0
 8002606:	2b01      	cmp	r3, #1
 8002608:	d017      	beq.n	800263a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260e:	4a14      	ldr	r2, [pc, #80]	; (8002660 <I2C_ITError+0x19c>)
 8002610:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff f8ef 	bl	8001802 <HAL_DMA_Abort_IT>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d011      	beq.n	800264e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002634:	4610      	mov	r0, r2
 8002636:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002638:	e009      	b.n	800264e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f812 	bl	8002664 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002640:	e005      	b.n	800264e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f80e 	bl	8002664 <I2C_TreatErrorCallback>
  }
}
 8002648:	e002      	b.n	8002650 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800264a:	bf00      	nop
 800264c:	e000      	b.n	8002650 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800264e:	bf00      	nop
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	ffff0000 	.word	0xffff0000
 800265c:	08001e39 	.word	0x08001e39
 8002660:	080026fb 	.word	0x080026fb

08002664 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b60      	cmp	r3, #96	; 0x60
 8002676:	d10e      	bne.n	8002696 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff fbc8 	bl	8001e24 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002694:	e009      	b.n	80026aa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff fbb3 	bl	8001e10 <HAL_I2C_ErrorCallback>
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d103      	bne.n	80026d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2200      	movs	r2, #0
 80026ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d007      	beq.n	80026ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	699a      	ldr	r2, [r3, #24]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	619a      	str	r2, [r3, #24]
  }
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002714:	2200      	movs	r2, #0
 8002716:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002724:	2200      	movs	r2, #0
 8002726:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f7ff ff9b 	bl	8002664 <I2C_TreatErrorCallback>
}
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002736:	b480      	push	{r7}
 8002738:	b085      	sub	sp, #20
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002746:	887b      	ldrh	r3, [r7, #2]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00f      	beq.n	8002770 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002756:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002764:	2b28      	cmp	r3, #40	; 0x28
 8002766:	d003      	beq.n	8002770 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800276e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002770:	887b      	ldrh	r3, [r7, #2]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00f      	beq.n	800279a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002780:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800278e:	2b28      	cmp	r3, #40	; 0x28
 8002790:	d003      	beq.n	800279a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002798:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800279a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	da03      	bge.n	80027aa <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80027a8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80027aa:	887b      	ldrh	r3, [r7, #2]
 80027ac:	2b10      	cmp	r3, #16
 80027ae:	d103      	bne.n	80027b8 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80027b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	d103      	bne.n	80027c6 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f043 0320 	orr.w	r3, r3, #32
 80027c4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80027c6:	887b      	ldrh	r3, [r7, #2]
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d103      	bne.n	80027d4 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027d2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6819      	ldr	r1, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	43da      	mvns	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	400a      	ands	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b20      	cmp	r3, #32
 8002806:	d138      	bne.n	800287a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002812:	2302      	movs	r3, #2
 8002814:	e032      	b.n	800287c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2224      	movs	r2, #36	; 0x24
 8002822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002844:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6819      	ldr	r1, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 0201 	orr.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	e000      	b.n	800287c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800287a:	2302      	movs	r3, #2
  }
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b20      	cmp	r3, #32
 800289c:	d139      	bne.n	8002912 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e033      	b.n	8002914 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2224      	movs	r2, #36	; 0x24
 80028b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0201 	bic.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0201 	orr.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2220      	movs	r2, #32
 8002902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e000      	b.n	8002914 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002912:	2302      	movs	r3, #2
  }
}
 8002914:	4618      	mov	r0, r3
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <HAL_PWREx_GetVoltageRange+0x18>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40007000 	.word	0x40007000

0800293c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800294a:	d130      	bne.n	80029ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800294c:	4b23      	ldr	r3, [pc, #140]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002958:	d038      	beq.n	80029cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800295a:	4b20      	ldr	r3, [pc, #128]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002962:	4a1e      	ldr	r2, [pc, #120]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002964:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002968:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800296a:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2232      	movs	r2, #50	; 0x32
 8002970:	fb02 f303 	mul.w	r3, r2, r3
 8002974:	4a1b      	ldr	r2, [pc, #108]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	0c9b      	lsrs	r3, r3, #18
 800297c:	3301      	adds	r3, #1
 800297e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002980:	e002      	b.n	8002988 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	3b01      	subs	r3, #1
 8002986:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002988:	4b14      	ldr	r3, [pc, #80]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002994:	d102      	bne.n	800299c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f2      	bne.n	8002982 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800299c:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a8:	d110      	bne.n	80029cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e00f      	b.n	80029ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ba:	d007      	beq.n	80029cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029bc:	4b07      	ldr	r3, [pc, #28]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029c4:	4a05      	ldr	r2, [pc, #20]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40007000 	.word	0x40007000
 80029e0:	20000000 	.word	0x20000000
 80029e4:	431bde83 	.word	0x431bde83

080029e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d102      	bne.n	80029fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	f000 bc02 	b.w	8003200 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029fc:	4b96      	ldr	r3, [pc, #600]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a06:	4b94      	ldr	r3, [pc, #592]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80e4 	beq.w	8002be6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <HAL_RCC_OscConfig+0x4c>
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2b0c      	cmp	r3, #12
 8002a28:	f040 808b 	bne.w	8002b42 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	f040 8087 	bne.w	8002b42 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a34:	4b88      	ldr	r3, [pc, #544]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_OscConfig+0x64>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e3d9      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1a      	ldr	r2, [r3, #32]
 8002a50:	4b81      	ldr	r3, [pc, #516]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d004      	beq.n	8002a66 <HAL_RCC_OscConfig+0x7e>
 8002a5c:	4b7e      	ldr	r3, [pc, #504]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a64:	e005      	b.n	8002a72 <HAL_RCC_OscConfig+0x8a>
 8002a66:	4b7c      	ldr	r3, [pc, #496]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d223      	bcs.n	8002abe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fd54 	bl	8003528 <RCC_SetFlashLatencyFromMSIRange>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e3ba      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a8a:	4b73      	ldr	r3, [pc, #460]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a72      	ldr	r2, [pc, #456]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a90:	f043 0308 	orr.w	r3, r3, #8
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	4b70      	ldr	r3, [pc, #448]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	496d      	ldr	r1, [pc, #436]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa8:	4b6b      	ldr	r3, [pc, #428]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	4968      	ldr	r1, [pc, #416]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
 8002abc:	e025      	b.n	8002b0a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002abe:	4b66      	ldr	r3, [pc, #408]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a65      	ldr	r2, [pc, #404]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002ac4:	f043 0308 	orr.w	r3, r3, #8
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	4b63      	ldr	r3, [pc, #396]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	4960      	ldr	r1, [pc, #384]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002adc:	4b5e      	ldr	r3, [pc, #376]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	021b      	lsls	r3, r3, #8
 8002aea:	495b      	ldr	r1, [pc, #364]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 fd14 	bl	8003528 <RCC_SetFlashLatencyFromMSIRange>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e37a      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b0a:	f000 fc81 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	4b51      	ldr	r3, [pc, #324]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	4950      	ldr	r1, [pc, #320]	; (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002b1c:	5ccb      	ldrb	r3, [r1, r3]
 8002b1e:	f003 031f 	and.w	r3, r3, #31
 8002b22:	fa22 f303 	lsr.w	r3, r2, r3
 8002b26:	4a4e      	ldr	r2, [pc, #312]	; (8002c60 <HAL_RCC_OscConfig+0x278>)
 8002b28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b2a:	4b4e      	ldr	r3, [pc, #312]	; (8002c64 <HAL_RCC_OscConfig+0x27c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fcd6 	bl	80014e0 <HAL_InitTick>
 8002b34:	4603      	mov	r3, r0
 8002b36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d052      	beq.n	8002be4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	e35e      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d032      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b4a:	4b43      	ldr	r3, [pc, #268]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a42      	ldr	r2, [pc, #264]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b56:	f7fe fd13 	bl	8001580 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b5e:	f7fe fd0f 	bl	8001580 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e347      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b70:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b7c:	4b36      	ldr	r3, [pc, #216]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a35      	ldr	r2, [pc, #212]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b82:	f043 0308 	orr.w	r3, r3, #8
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b33      	ldr	r3, [pc, #204]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	4930      	ldr	r1, [pc, #192]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b9a:	4b2f      	ldr	r3, [pc, #188]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	492b      	ldr	r1, [pc, #172]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
 8002bae:	e01a      	b.n	8002be6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bb0:	4b29      	ldr	r3, [pc, #164]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a28      	ldr	r2, [pc, #160]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002bb6:	f023 0301 	bic.w	r3, r3, #1
 8002bba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fce0 	bl	8001580 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bc4:	f7fe fcdc 	bl	8001580 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e314      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bd6:	4b20      	ldr	r3, [pc, #128]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x1dc>
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002be4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d073      	beq.n	8002cda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_OscConfig+0x21c>
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2b0c      	cmp	r3, #12
 8002bfc:	d10e      	bne.n	8002c1c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d10b      	bne.n	8002c1c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c04:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d063      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x2f0>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d15f      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e2f1      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c24:	d106      	bne.n	8002c34 <HAL_RCC_OscConfig+0x24c>
 8002c26:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e025      	b.n	8002c80 <HAL_RCC_OscConfig+0x298>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c3c:	d114      	bne.n	8002c68 <HAL_RCC_OscConfig+0x280>
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a05      	ldr	r2, [pc, #20]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	4b03      	ldr	r3, [pc, #12]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a02      	ldr	r2, [pc, #8]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	e013      	b.n	8002c80 <HAL_RCC_OscConfig+0x298>
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	08005c88 	.word	0x08005c88
 8002c60:	20000000 	.word	0x20000000
 8002c64:	20000004 	.word	0x20000004
 8002c68:	4ba0      	ldr	r3, [pc, #640]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a9f      	ldr	r2, [pc, #636]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b9d      	ldr	r3, [pc, #628]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a9c      	ldr	r2, [pc, #624]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe fc7a 	bl	8001580 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fe fc76 	bl	8001580 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e2ae      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ca2:	4b92      	ldr	r3, [pc, #584]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x2a8>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fc66 	bl	8001580 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fe fc62 	bl	8001580 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e29a      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cca:	4b88      	ldr	r3, [pc, #544]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x2d0>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d060      	beq.n	8002da8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x310>
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b0c      	cmp	r3, #12
 8002cf0:	d119      	bne.n	8002d26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d116      	bne.n	8002d26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cf8:	4b7c      	ldr	r3, [pc, #496]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_OscConfig+0x328>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e277      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d10:	4b76      	ldr	r3, [pc, #472]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	061b      	lsls	r3, r3, #24
 8002d1e:	4973      	ldr	r1, [pc, #460]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d24:	e040      	b.n	8002da8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d023      	beq.n	8002d76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d2e:	4b6f      	ldr	r3, [pc, #444]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a6e      	ldr	r2, [pc, #440]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7fe fc21 	bl	8001580 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d42:	f7fe fc1d 	bl	8001580 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e255      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d54:	4b65      	ldr	r3, [pc, #404]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d60:	4b62      	ldr	r3, [pc, #392]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	061b      	lsls	r3, r3, #24
 8002d6e:	495f      	ldr	r1, [pc, #380]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]
 8002d74:	e018      	b.n	8002da8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d76:	4b5d      	ldr	r3, [pc, #372]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a5c      	ldr	r2, [pc, #368]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d82:	f7fe fbfd 	bl	8001580 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8a:	f7fe fbf9 	bl	8001580 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e231      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d9c:	4b53      	ldr	r3, [pc, #332]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f0      	bne.n	8002d8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d03c      	beq.n	8002e2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01c      	beq.n	8002df6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dbc:	4b4b      	ldr	r3, [pc, #300]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc2:	4a4a      	ldr	r2, [pc, #296]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dcc:	f7fe fbd8 	bl	8001580 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd4:	f7fe fbd4 	bl	8001580 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e20c      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002de6:	4b41      	ldr	r3, [pc, #260]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0ef      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x3ec>
 8002df4:	e01b      	b.n	8002e2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df6:	4b3d      	ldr	r3, [pc, #244]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfc:	4a3b      	ldr	r2, [pc, #236]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e06:	f7fe fbbb 	bl	8001580 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0e:	f7fe fbb7 	bl	8001580 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e1ef      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e20:	4b32      	ldr	r3, [pc, #200]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1ef      	bne.n	8002e0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 80a6 	beq.w	8002f88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e40:	4b2a      	ldr	r3, [pc, #168]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10d      	bne.n	8002e68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4c:	4b27      	ldr	r3, [pc, #156]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e50:	4a26      	ldr	r2, [pc, #152]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e56:	6593      	str	r3, [r2, #88]	; 0x58
 8002e58:	4b24      	ldr	r3, [pc, #144]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e64:	2301      	movs	r3, #1
 8002e66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e68:	4b21      	ldr	r3, [pc, #132]	; (8002ef0 <HAL_RCC_OscConfig+0x508>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d118      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e74:	4b1e      	ldr	r3, [pc, #120]	; (8002ef0 <HAL_RCC_OscConfig+0x508>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a1d      	ldr	r2, [pc, #116]	; (8002ef0 <HAL_RCC_OscConfig+0x508>)
 8002e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e80:	f7fe fb7e 	bl	8001580 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e88:	f7fe fb7a 	bl	8001580 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e1b2      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <HAL_RCC_OscConfig+0x508>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d108      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x4d8>
 8002eae:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ebe:	e029      	b.n	8002f14 <HAL_RCC_OscConfig+0x52c>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	d115      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x50c>
 8002ec8:	4b08      	ldr	r3, [pc, #32]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	4a07      	ldr	r2, [pc, #28]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002ed0:	f043 0304 	orr.w	r3, r3, #4
 8002ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed8:	4b04      	ldr	r3, [pc, #16]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ede:	4a03      	ldr	r2, [pc, #12]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ee8:	e014      	b.n	8002f14 <HAL_RCC_OscConfig+0x52c>
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	4b9a      	ldr	r3, [pc, #616]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	4a99      	ldr	r2, [pc, #612]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f04:	4b96      	ldr	r3, [pc, #600]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	4a95      	ldr	r2, [pc, #596]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d016      	beq.n	8002f4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7fe fb30 	bl	8001580 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f24:	f7fe fb2c 	bl	8001580 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e162      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f3a:	4b89      	ldr	r3, [pc, #548]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0ed      	beq.n	8002f24 <HAL_RCC_OscConfig+0x53c>
 8002f48:	e015      	b.n	8002f76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4a:	f7fe fb19 	bl	8001580 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7fe fb15 	bl	8001580 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e14b      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f68:	4b7d      	ldr	r3, [pc, #500]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1ed      	bne.n	8002f52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f76:	7ffb      	ldrb	r3, [r7, #31]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d105      	bne.n	8002f88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7c:	4b78      	ldr	r3, [pc, #480]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f80:	4a77      	ldr	r2, [pc, #476]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d03c      	beq.n	800300e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01c      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f9c:	4b70      	ldr	r3, [pc, #448]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fa2:	4a6f      	ldr	r2, [pc, #444]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fac:	f7fe fae8 	bl	8001580 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fb4:	f7fe fae4 	bl	8001580 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e11c      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fc6:	4b66      	ldr	r3, [pc, #408]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0ef      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x5cc>
 8002fd4:	e01b      	b.n	800300e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fd6:	4b62      	ldr	r3, [pc, #392]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fdc:	4a60      	ldr	r2, [pc, #384]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe6:	f7fe facb 	bl	8001580 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fee:	f7fe fac7 	bl	8001580 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e0ff      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003000:	4b57      	ldr	r3, [pc, #348]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8003002:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1ef      	bne.n	8002fee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80f3 	beq.w	80031fe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	2b02      	cmp	r3, #2
 800301e:	f040 80c9 	bne.w	80031b4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003022:	4b4f      	ldr	r3, [pc, #316]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f003 0203 	and.w	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	429a      	cmp	r2, r3
 8003034:	d12c      	bne.n	8003090 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	3b01      	subs	r3, #1
 8003042:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d123      	bne.n	8003090 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003052:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003054:	429a      	cmp	r2, r3
 8003056:	d11b      	bne.n	8003090 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d113      	bne.n	8003090 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	3b01      	subs	r3, #1
 8003076:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d109      	bne.n	8003090 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	3b01      	subs	r3, #1
 800308a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d06b      	beq.n	8003168 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	2b0c      	cmp	r3, #12
 8003094:	d062      	beq.n	800315c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003096:	4b32      	ldr	r3, [pc, #200]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e0ac      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030a6:	4b2e      	ldr	r3, [pc, #184]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a2d      	ldr	r2, [pc, #180]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 80030ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030b2:	f7fe fa65 	bl	8001580 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fe fa61 	bl	8001580 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e099      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030cc:	4b24      	ldr	r3, [pc, #144]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f0      	bne.n	80030ba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d8:	4b21      	ldr	r3, [pc, #132]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	4b21      	ldr	r3, [pc, #132]	; (8003164 <HAL_RCC_OscConfig+0x77c>)
 80030de:	4013      	ands	r3, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030e8:	3a01      	subs	r2, #1
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	4311      	orrs	r1, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030f2:	0212      	lsls	r2, r2, #8
 80030f4:	4311      	orrs	r1, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030fa:	0852      	lsrs	r2, r2, #1
 80030fc:	3a01      	subs	r2, #1
 80030fe:	0552      	lsls	r2, r2, #21
 8003100:	4311      	orrs	r1, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003106:	0852      	lsrs	r2, r2, #1
 8003108:	3a01      	subs	r2, #1
 800310a:	0652      	lsls	r2, r2, #25
 800310c:	4311      	orrs	r1, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003112:	06d2      	lsls	r2, r2, #27
 8003114:	430a      	orrs	r2, r1
 8003116:	4912      	ldr	r1, [pc, #72]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8003118:	4313      	orrs	r3, r2
 800311a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800311c:	4b10      	ldr	r3, [pc, #64]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a0f      	ldr	r2, [pc, #60]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8003122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003126:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003128:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4a0c      	ldr	r2, [pc, #48]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 800312e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003132:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003134:	f7fe fa24 	bl	8001580 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313c:	f7fe fa20 	bl	8001580 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e058      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314e:	4b04      	ldr	r3, [pc, #16]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800315a:	e050      	b.n	80031fe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e04f      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
 8003160:	40021000 	.word	0x40021000
 8003164:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003168:	4b27      	ldr	r3, [pc, #156]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d144      	bne.n	80031fe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003174:	4b24      	ldr	r3, [pc, #144]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a23      	ldr	r2, [pc, #140]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 800317a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800317e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003180:	4b21      	ldr	r3, [pc, #132]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4a20      	ldr	r2, [pc, #128]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 8003186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800318a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800318c:	f7fe f9f8 	bl	8001580 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003194:	f7fe f9f4 	bl	8001580 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e02c      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a6:	4b18      	ldr	r3, [pc, #96]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x7ac>
 80031b2:	e024      	b.n	80031fe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	2b0c      	cmp	r3, #12
 80031b8:	d01f      	beq.n	80031fa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ba:	4b13      	ldr	r3, [pc, #76]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a12      	ldr	r2, [pc, #72]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 80031c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c6:	f7fe f9db 	bl	8001580 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ce:	f7fe f9d7 	bl	8001580 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e00f      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e0:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f0      	bne.n	80031ce <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	4905      	ldr	r1, [pc, #20]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_RCC_OscConfig+0x824>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	60cb      	str	r3, [r1, #12]
 80031f8:	e001      	b.n	80031fe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3720      	adds	r7, #32
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40021000 	.word	0x40021000
 800320c:	feeefffc 	.word	0xfeeefffc

08003210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0e7      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003224:	4b75      	ldr	r3, [pc, #468]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d910      	bls.n	8003254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b72      	ldr	r3, [pc, #456]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 0207 	bic.w	r2, r3, #7
 800323a:	4970      	ldr	r1, [pc, #448]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	4b6e      	ldr	r3, [pc, #440]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0cf      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d010      	beq.n	8003282 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	4b66      	ldr	r3, [pc, #408]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800326c:	429a      	cmp	r2, r3
 800326e:	d908      	bls.n	8003282 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b63      	ldr	r3, [pc, #396]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4960      	ldr	r1, [pc, #384]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d04c      	beq.n	8003328 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003296:	4b5a      	ldr	r3, [pc, #360]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d121      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e0a6      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d107      	bne.n	80032be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ae:	4b54      	ldr	r3, [pc, #336]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d115      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e09a      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d107      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032c6:	4b4e      	ldr	r3, [pc, #312]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e08e      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d6:	4b4a      	ldr	r3, [pc, #296]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e086      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032e6:	4b46      	ldr	r3, [pc, #280]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f023 0203 	bic.w	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	4943      	ldr	r1, [pc, #268]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f8:	f7fe f942 	bl	8001580 <HAL_GetTick>
 80032fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fe:	e00a      	b.n	8003316 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003300:	f7fe f93e 	bl	8001580 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	; 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e06e      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003316:	4b3a      	ldr	r3, [pc, #232]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 020c 	and.w	r2, r3, #12
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	429a      	cmp	r2, r3
 8003326:	d1eb      	bne.n	8003300 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d010      	beq.n	8003356 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	4b31      	ldr	r3, [pc, #196]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003340:	429a      	cmp	r2, r3
 8003342:	d208      	bcs.n	8003356 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003344:	4b2e      	ldr	r3, [pc, #184]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	492b      	ldr	r1, [pc, #172]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003356:	4b29      	ldr	r3, [pc, #164]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d210      	bcs.n	8003386 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003364:	4b25      	ldr	r3, [pc, #148]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f023 0207 	bic.w	r2, r3, #7
 800336c:	4923      	ldr	r1, [pc, #140]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	4313      	orrs	r3, r2
 8003372:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003374:	4b21      	ldr	r3, [pc, #132]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d001      	beq.n	8003386 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e036      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003392:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	4918      	ldr	r1, [pc, #96]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d009      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033b0:	4b13      	ldr	r3, [pc, #76]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4910      	ldr	r1, [pc, #64]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033c4:	f000 f824 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	490b      	ldr	r1, [pc, #44]	; (8003404 <HAL_RCC_ClockConfig+0x1f4>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
 80033e0:	4a09      	ldr	r2, [pc, #36]	; (8003408 <HAL_RCC_ClockConfig+0x1f8>)
 80033e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033e4:	4b09      	ldr	r3, [pc, #36]	; (800340c <HAL_RCC_ClockConfig+0x1fc>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fe f879 	bl	80014e0 <HAL_InitTick>
 80033ee:	4603      	mov	r3, r0
 80033f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80033f2:	7afb      	ldrb	r3, [r7, #11]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40022000 	.word	0x40022000
 8003400:	40021000 	.word	0x40021000
 8003404:	08005c88 	.word	0x08005c88
 8003408:	20000000 	.word	0x20000000
 800340c:	20000004 	.word	0x20000004

08003410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003410:	b480      	push	{r7}
 8003412:	b089      	sub	sp, #36	; 0x24
 8003414:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	2300      	movs	r3, #0
 800341c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800341e:	4b3e      	ldr	r3, [pc, #248]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003428:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0x34>
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b0c      	cmp	r3, #12
 800343c:	d121      	bne.n	8003482 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d11e      	bne.n	8003482 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003444:	4b34      	ldr	r3, [pc, #208]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b00      	cmp	r3, #0
 800344e:	d107      	bne.n	8003460 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003450:	4b31      	ldr	r3, [pc, #196]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 8003452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	e005      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003460:	4b2d      	ldr	r3, [pc, #180]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800346c:	4a2b      	ldr	r2, [pc, #172]	; (800351c <HAL_RCC_GetSysClockFreq+0x10c>)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003474:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10d      	bne.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2b04      	cmp	r3, #4
 8003486:	d102      	bne.n	800348e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003488:	4b25      	ldr	r3, [pc, #148]	; (8003520 <HAL_RCC_GetSysClockFreq+0x110>)
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	e004      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d101      	bne.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003494:	4b23      	ldr	r3, [pc, #140]	; (8003524 <HAL_RCC_GetSysClockFreq+0x114>)
 8003496:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b0c      	cmp	r3, #12
 800349c:	d134      	bne.n	8003508 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800349e:	4b1e      	ldr	r3, [pc, #120]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d003      	beq.n	80034b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d003      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0xac>
 80034b4:	e005      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034b6:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <HAL_RCC_GetSysClockFreq+0x110>)
 80034b8:	617b      	str	r3, [r7, #20]
      break;
 80034ba:	e005      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034bc:	4b19      	ldr	r3, [pc, #100]	; (8003524 <HAL_RCC_GetSysClockFreq+0x114>)
 80034be:	617b      	str	r3, [r7, #20]
      break;
 80034c0:	e002      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	617b      	str	r3, [r7, #20]
      break;
 80034c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034c8:	4b13      	ldr	r3, [pc, #76]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	3301      	adds	r3, #1
 80034d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034d6:	4b10      	ldr	r3, [pc, #64]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	fb03 f202 	mul.w	r2, r3, r2
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034ee:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	0e5b      	lsrs	r3, r3, #25
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	3301      	adds	r3, #1
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	fbb2 f3f3 	udiv	r3, r2, r3
 8003506:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003508:	69bb      	ldr	r3, [r7, #24]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3724      	adds	r7, #36	; 0x24
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	08005c98 	.word	0x08005c98
 8003520:	00f42400 	.word	0x00f42400
 8003524:	016e3600 	.word	0x016e3600

08003528 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003530:	2300      	movs	r3, #0
 8003532:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003534:	4b2a      	ldr	r3, [pc, #168]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003540:	f7ff f9ee 	bl	8002920 <HAL_PWREx_GetVoltageRange>
 8003544:	6178      	str	r0, [r7, #20]
 8003546:	e014      	b.n	8003572 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003548:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354c:	4a24      	ldr	r2, [pc, #144]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003552:	6593      	str	r3, [r2, #88]	; 0x58
 8003554:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003560:	f7ff f9de 	bl	8002920 <HAL_PWREx_GetVoltageRange>
 8003564:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003566:	4b1e      	ldr	r3, [pc, #120]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	4a1d      	ldr	r2, [pc, #116]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800356c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003570:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003578:	d10b      	bne.n	8003592 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b80      	cmp	r3, #128	; 0x80
 800357e:	d919      	bls.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2ba0      	cmp	r3, #160	; 0xa0
 8003584:	d902      	bls.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003586:	2302      	movs	r3, #2
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	e013      	b.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800358c:	2301      	movs	r3, #1
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	e010      	b.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b80      	cmp	r3, #128	; 0x80
 8003596:	d902      	bls.n	800359e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003598:	2303      	movs	r3, #3
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	e00a      	b.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b80      	cmp	r3, #128	; 0x80
 80035a2:	d102      	bne.n	80035aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035a4:	2302      	movs	r3, #2
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	e004      	b.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b70      	cmp	r3, #112	; 0x70
 80035ae:	d101      	bne.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035b0:	2301      	movs	r3, #1
 80035b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f023 0207 	bic.w	r2, r3, #7
 80035bc:	4909      	ldr	r1, [pc, #36]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035c4:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d001      	beq.n	80035d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40021000 	.word	0x40021000
 80035e4:	40022000 	.word	0x40022000

080035e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035f0:	2300      	movs	r3, #0
 80035f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035f4:	2300      	movs	r3, #0
 80035f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003600:	2b00      	cmp	r3, #0
 8003602:	d031      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003608:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800360c:	d01a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800360e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003612:	d814      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003618:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800361c:	d10f      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800361e:	4b5d      	ldr	r3, [pc, #372]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	4a5c      	ldr	r2, [pc, #368]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003628:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800362a:	e00c      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	2100      	movs	r1, #0
 8003632:	4618      	mov	r0, r3
 8003634:	f000 f9ce 	bl	80039d4 <RCCEx_PLLSAI1_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800363c:	e003      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	74fb      	strb	r3, [r7, #19]
      break;
 8003642:	e000      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003646:	7cfb      	ldrb	r3, [r7, #19]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10b      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800364c:	4b51      	ldr	r3, [pc, #324]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	494e      	ldr	r1, [pc, #312]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003662:	e001      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003664:	7cfb      	ldrb	r3, [r7, #19]
 8003666:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 809e 	beq.w	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003676:	2300      	movs	r3, #0
 8003678:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800367a:	4b46      	ldr	r3, [pc, #280]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800368a:	2300      	movs	r3, #0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00d      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003690:	4b40      	ldr	r3, [pc, #256]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003694:	4a3f      	ldr	r2, [pc, #252]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369a:	6593      	str	r3, [r2, #88]	; 0x58
 800369c:	4b3d      	ldr	r3, [pc, #244]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800369e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a8:	2301      	movs	r3, #1
 80036aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036ac:	4b3a      	ldr	r3, [pc, #232]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a39      	ldr	r2, [pc, #228]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036b8:	f7fd ff62 	bl	8001580 <HAL_GetTick>
 80036bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036be:	e009      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c0:	f7fd ff5e 	bl	8001580 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d902      	bls.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	74fb      	strb	r3, [r7, #19]
        break;
 80036d2:	e005      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036d4:	4b30      	ldr	r3, [pc, #192]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0ef      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80036e0:	7cfb      	ldrb	r3, [r7, #19]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d15a      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036e6:	4b2b      	ldr	r3, [pc, #172]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01e      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d019      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003702:	4b24      	ldr	r3, [pc, #144]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800370e:	4b21      	ldr	r3, [pc, #132]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003714:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800371e:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800372a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800372e:	4a19      	ldr	r2, [pc, #100]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d016      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fd ff1e 	bl	8001580 <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003746:	e00b      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003748:	f7fd ff1a 	bl	8001580 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f241 3288 	movw	r2, #5000	; 0x1388
 8003756:	4293      	cmp	r3, r2
 8003758:	d902      	bls.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	74fb      	strb	r3, [r7, #19]
            break;
 800375e:	e006      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0ec      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800376e:	7cfb      	ldrb	r3, [r7, #19]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10b      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003774:	4b07      	ldr	r3, [pc, #28]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003782:	4904      	ldr	r1, [pc, #16]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800378a:	e009      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	74bb      	strb	r3, [r7, #18]
 8003790:	e006      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
 8003798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037a0:	7c7b      	ldrb	r3, [r7, #17]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d105      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a6:	4b8a      	ldr	r3, [pc, #552]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	4a89      	ldr	r2, [pc, #548]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037be:	4b84      	ldr	r3, [pc, #528]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c4:	f023 0203 	bic.w	r2, r3, #3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	4980      	ldr	r1, [pc, #512]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037e0:	4b7b      	ldr	r3, [pc, #492]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	f023 020c 	bic.w	r2, r3, #12
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	4978      	ldr	r1, [pc, #480]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0320 	and.w	r3, r3, #32
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003802:	4b73      	ldr	r3, [pc, #460]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	496f      	ldr	r1, [pc, #444]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003824:	4b6a      	ldr	r3, [pc, #424]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003832:	4967      	ldr	r1, [pc, #412]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003846:	4b62      	ldr	r3, [pc, #392]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	495e      	ldr	r1, [pc, #376]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003868:	4b59      	ldr	r3, [pc, #356]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	4956      	ldr	r1, [pc, #344]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800388a:	4b51      	ldr	r3, [pc, #324]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	494d      	ldr	r1, [pc, #308]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d028      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038ac:	4b48      	ldr	r3, [pc, #288]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	4945      	ldr	r1, [pc, #276]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ca:	d106      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038cc:	4b40      	ldr	r3, [pc, #256]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4a3f      	ldr	r2, [pc, #252]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038d6:	60d3      	str	r3, [r2, #12]
 80038d8:	e011      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038e2:	d10c      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3304      	adds	r3, #4
 80038e8:	2101      	movs	r1, #1
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f872 	bl	80039d4 <RCCEx_PLLSAI1_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80038fa:	7cfb      	ldrb	r3, [r7, #19]
 80038fc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d028      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800390a:	4b31      	ldr	r3, [pc, #196]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003910:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003918:	492d      	ldr	r1, [pc, #180]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003924:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003928:	d106      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800392a:	4b29      	ldr	r3, [pc, #164]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	4a28      	ldr	r2, [pc, #160]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003934:	60d3      	str	r3, [r2, #12]
 8003936:	e011      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003940:	d10c      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3304      	adds	r3, #4
 8003946:	2101      	movs	r1, #1
 8003948:	4618      	mov	r0, r3
 800394a:	f000 f843 	bl	80039d4 <RCCEx_PLLSAI1_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003952:	7cfb      	ldrb	r3, [r7, #19]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01c      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003968:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003976:	4916      	ldr	r1, [pc, #88]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003986:	d10c      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3304      	adds	r3, #4
 800398c:	2102      	movs	r1, #2
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f820 	bl	80039d4 <RCCEx_PLLSAI1_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003998:	7cfb      	ldrb	r3, [r7, #19]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800399e:	7cfb      	ldrb	r3, [r7, #19]
 80039a0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039ae:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039bc:	4904      	ldr	r1, [pc, #16]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40021000 	.word	0x40021000

080039d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039e2:	4b74      	ldr	r3, [pc, #464]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d018      	beq.n	8003a20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039ee:	4b71      	ldr	r3, [pc, #452]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0203 	and.w	r2, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d10d      	bne.n	8003a1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
       ||
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a06:	4b6b      	ldr	r3, [pc, #428]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
       ||
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d047      	beq.n	8003aaa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	73fb      	strb	r3, [r7, #15]
 8003a1e:	e044      	b.n	8003aaa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d018      	beq.n	8003a5a <RCCEx_PLLSAI1_Config+0x86>
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d825      	bhi.n	8003a78 <RCCEx_PLLSAI1_Config+0xa4>
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d002      	beq.n	8003a36 <RCCEx_PLLSAI1_Config+0x62>
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d009      	beq.n	8003a48 <RCCEx_PLLSAI1_Config+0x74>
 8003a34:	e020      	b.n	8003a78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a36:	4b5f      	ldr	r3, [pc, #380]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d11d      	bne.n	8003a7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a46:	e01a      	b.n	8003a7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a48:	4b5a      	ldr	r3, [pc, #360]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d116      	bne.n	8003a82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a58:	e013      	b.n	8003a82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a5a:	4b56      	ldr	r3, [pc, #344]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10f      	bne.n	8003a86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a66:	4b53      	ldr	r3, [pc, #332]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a76:	e006      	b.n	8003a86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a7c:	e004      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a7e:	bf00      	nop
 8003a80:	e002      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a82:	bf00      	nop
 8003a84:	e000      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a86:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10d      	bne.n	8003aaa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a8e:	4b49      	ldr	r3, [pc, #292]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6819      	ldr	r1, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	4943      	ldr	r1, [pc, #268]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d17c      	bne.n	8003baa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ab0:	4b40      	ldr	r3, [pc, #256]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a3f      	ldr	r2, [pc, #252]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003abc:	f7fd fd60 	bl	8001580 <HAL_GetTick>
 8003ac0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ac2:	e009      	b.n	8003ad8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ac4:	f7fd fd5c 	bl	8001580 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d902      	bls.n	8003ad8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ad6:	e005      	b.n	8003ae4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ad8:	4b36      	ldr	r3, [pc, #216]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1ef      	bne.n	8003ac4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d15f      	bne.n	8003baa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d110      	bne.n	8003b12 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003af0:	4b30      	ldr	r3, [pc, #192]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003af8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6892      	ldr	r2, [r2, #8]
 8003b00:	0211      	lsls	r1, r2, #8
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68d2      	ldr	r2, [r2, #12]
 8003b06:	06d2      	lsls	r2, r2, #27
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	492a      	ldr	r1, [pc, #168]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	610b      	str	r3, [r1, #16]
 8003b10:	e027      	b.n	8003b62 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d112      	bne.n	8003b3e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b18:	4b26      	ldr	r3, [pc, #152]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6892      	ldr	r2, [r2, #8]
 8003b28:	0211      	lsls	r1, r2, #8
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6912      	ldr	r2, [r2, #16]
 8003b2e:	0852      	lsrs	r2, r2, #1
 8003b30:	3a01      	subs	r2, #1
 8003b32:	0552      	lsls	r2, r2, #21
 8003b34:	430a      	orrs	r2, r1
 8003b36:	491f      	ldr	r1, [pc, #124]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	610b      	str	r3, [r1, #16]
 8003b3c:	e011      	b.n	8003b62 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b3e:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b46:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6892      	ldr	r2, [r2, #8]
 8003b4e:	0211      	lsls	r1, r2, #8
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6952      	ldr	r2, [r2, #20]
 8003b54:	0852      	lsrs	r2, r2, #1
 8003b56:	3a01      	subs	r2, #1
 8003b58:	0652      	lsls	r2, r2, #25
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	4915      	ldr	r1, [pc, #84]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b62:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a13      	ldr	r2, [pc, #76]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6e:	f7fd fd07 	bl	8001580 <HAL_GetTick>
 8003b72:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b74:	e009      	b.n	8003b8a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b76:	f7fd fd03 	bl	8001580 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d902      	bls.n	8003b8a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	73fb      	strb	r3, [r7, #15]
          break;
 8003b88:	e005      	b.n	8003b96 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0ef      	beq.n	8003b76 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	4903      	ldr	r1, [pc, #12]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e095      	b.n	8003cf6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d108      	bne.n	8003be4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bda:	d009      	beq.n	8003bf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	61da      	str	r2, [r3, #28]
 8003be2:	e005      	b.n	8003bf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fd f9a0 	bl	8000f50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c30:	d902      	bls.n	8003c38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	e002      	b.n	8003c3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c46:	d007      	beq.n	8003c58 <HAL_SPI_Init+0xa0>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c50:	d002      	beq.n	8003c58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9a:	ea42 0103 	orr.w	r1, r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	0c1b      	lsrs	r3, r3, #16
 8003cb4:	f003 0204 	and.w	r2, r3, #4
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	f003 0310 	and.w	r3, r3, #16
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003cd4:	ea42 0103 	orr.w	r1, r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e049      	b.n	8003da4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d106      	bne.n	8003d2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7fd fb41 	bl	80013ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	f000 fb53 	bl	80043e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e049      	b.n	8003e52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f841 	bl	8003e5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3304      	adds	r3, #4
 8003de8:	4619      	mov	r1, r3
 8003dea:	4610      	mov	r0, r2
 8003dec:	f000 fafc 	bl	80043e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
	...

08003e70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <HAL_TIM_PWM_Start+0x24>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	bf14      	ite	ne
 8003e8c:	2301      	movne	r3, #1
 8003e8e:	2300      	moveq	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	e03c      	b.n	8003f0e <HAL_TIM_PWM_Start+0x9e>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d109      	bne.n	8003eae <HAL_TIM_PWM_Start+0x3e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	bf14      	ite	ne
 8003ea6:	2301      	movne	r3, #1
 8003ea8:	2300      	moveq	r3, #0
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	e02f      	b.n	8003f0e <HAL_TIM_PWM_Start+0x9e>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d109      	bne.n	8003ec8 <HAL_TIM_PWM_Start+0x58>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	bf14      	ite	ne
 8003ec0:	2301      	movne	r3, #1
 8003ec2:	2300      	moveq	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	e022      	b.n	8003f0e <HAL_TIM_PWM_Start+0x9e>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2b0c      	cmp	r3, #12
 8003ecc:	d109      	bne.n	8003ee2 <HAL_TIM_PWM_Start+0x72>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	bf14      	ite	ne
 8003eda:	2301      	movne	r3, #1
 8003edc:	2300      	moveq	r3, #0
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	e015      	b.n	8003f0e <HAL_TIM_PWM_Start+0x9e>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b10      	cmp	r3, #16
 8003ee6:	d109      	bne.n	8003efc <HAL_TIM_PWM_Start+0x8c>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	bf14      	ite	ne
 8003ef4:	2301      	movne	r3, #1
 8003ef6:	2300      	moveq	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	e008      	b.n	8003f0e <HAL_TIM_PWM_Start+0x9e>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	bf14      	ite	ne
 8003f08:	2301      	movne	r3, #1
 8003f0a:	2300      	moveq	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e07e      	b.n	8004014 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d104      	bne.n	8003f26 <HAL_TIM_PWM_Start+0xb6>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f24:	e023      	b.n	8003f6e <HAL_TIM_PWM_Start+0xfe>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d104      	bne.n	8003f36 <HAL_TIM_PWM_Start+0xc6>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f34:	e01b      	b.n	8003f6e <HAL_TIM_PWM_Start+0xfe>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d104      	bne.n	8003f46 <HAL_TIM_PWM_Start+0xd6>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f44:	e013      	b.n	8003f6e <HAL_TIM_PWM_Start+0xfe>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b0c      	cmp	r3, #12
 8003f4a:	d104      	bne.n	8003f56 <HAL_TIM_PWM_Start+0xe6>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f54:	e00b      	b.n	8003f6e <HAL_TIM_PWM_Start+0xfe>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b10      	cmp	r3, #16
 8003f5a:	d104      	bne.n	8003f66 <HAL_TIM_PWM_Start+0xf6>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f64:	e003      	b.n	8003f6e <HAL_TIM_PWM_Start+0xfe>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2201      	movs	r2, #1
 8003f74:	6839      	ldr	r1, [r7, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fdb2 	bl	8004ae0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a26      	ldr	r2, [pc, #152]	; (800401c <HAL_TIM_PWM_Start+0x1ac>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d009      	beq.n	8003f9a <HAL_TIM_PWM_Start+0x12a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a25      	ldr	r2, [pc, #148]	; (8004020 <HAL_TIM_PWM_Start+0x1b0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d004      	beq.n	8003f9a <HAL_TIM_PWM_Start+0x12a>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a23      	ldr	r2, [pc, #140]	; (8004024 <HAL_TIM_PWM_Start+0x1b4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d101      	bne.n	8003f9e <HAL_TIM_PWM_Start+0x12e>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <HAL_TIM_PWM_Start+0x130>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fb2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a18      	ldr	r2, [pc, #96]	; (800401c <HAL_TIM_PWM_Start+0x1ac>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d009      	beq.n	8003fd2 <HAL_TIM_PWM_Start+0x162>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc6:	d004      	beq.n	8003fd2 <HAL_TIM_PWM_Start+0x162>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a14      	ldr	r2, [pc, #80]	; (8004020 <HAL_TIM_PWM_Start+0x1b0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d115      	bne.n	8003ffe <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	4b13      	ldr	r3, [pc, #76]	; (8004028 <HAL_TIM_PWM_Start+0x1b8>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b06      	cmp	r3, #6
 8003fe2:	d015      	beq.n	8004010 <HAL_TIM_PWM_Start+0x1a0>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fea:	d011      	beq.n	8004010 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffc:	e008      	b.n	8004010 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0201 	orr.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	e000      	b.n	8004012 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004010:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40012c00 	.word	0x40012c00
 8004020:	40014000 	.word	0x40014000
 8004024:	40014400 	.word	0x40014400
 8004028:	00010007 	.word	0x00010007

0800402c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004046:	2302      	movs	r3, #2
 8004048:	e0ff      	b.n	800424a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b14      	cmp	r3, #20
 8004056:	f200 80f0 	bhi.w	800423a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800405a:	a201      	add	r2, pc, #4	; (adr r2, 8004060 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800405c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004060:	080040b5 	.word	0x080040b5
 8004064:	0800423b 	.word	0x0800423b
 8004068:	0800423b 	.word	0x0800423b
 800406c:	0800423b 	.word	0x0800423b
 8004070:	080040f5 	.word	0x080040f5
 8004074:	0800423b 	.word	0x0800423b
 8004078:	0800423b 	.word	0x0800423b
 800407c:	0800423b 	.word	0x0800423b
 8004080:	08004137 	.word	0x08004137
 8004084:	0800423b 	.word	0x0800423b
 8004088:	0800423b 	.word	0x0800423b
 800408c:	0800423b 	.word	0x0800423b
 8004090:	08004177 	.word	0x08004177
 8004094:	0800423b 	.word	0x0800423b
 8004098:	0800423b 	.word	0x0800423b
 800409c:	0800423b 	.word	0x0800423b
 80040a0:	080041b9 	.word	0x080041b9
 80040a4:	0800423b 	.word	0x0800423b
 80040a8:	0800423b 	.word	0x0800423b
 80040ac:	0800423b 	.word	0x0800423b
 80040b0:	080041f9 	.word	0x080041f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f9f8 	bl	80044b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0208 	orr.w	r2, r2, #8
 80040ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0204 	bic.w	r2, r2, #4
 80040de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6999      	ldr	r1, [r3, #24]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	619a      	str	r2, [r3, #24]
      break;
 80040f2:	e0a5      	b.n	8004240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fa54 	bl	80045a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699a      	ldr	r2, [r3, #24]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800410e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6999      	ldr	r1, [r3, #24]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	021a      	lsls	r2, r3, #8
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	619a      	str	r2, [r3, #24]
      break;
 8004134:	e084      	b.n	8004240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	4618      	mov	r0, r3
 800413e:	f000 faad 	bl	800469c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0208 	orr.w	r2, r2, #8
 8004150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69da      	ldr	r2, [r3, #28]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0204 	bic.w	r2, r2, #4
 8004160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69d9      	ldr	r1, [r3, #28]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	61da      	str	r2, [r3, #28]
      break;
 8004174:	e064      	b.n	8004240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68b9      	ldr	r1, [r7, #8]
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fb05 	bl	800478c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69da      	ldr	r2, [r3, #28]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69d9      	ldr	r1, [r3, #28]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	021a      	lsls	r2, r3, #8
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	61da      	str	r2, [r3, #28]
      break;
 80041b6:	e043      	b.n	8004240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fb42 	bl	8004848 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0208 	orr.w	r2, r2, #8
 80041d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0204 	bic.w	r2, r2, #4
 80041e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041f6:	e023      	b.n	8004240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68b9      	ldr	r1, [r7, #8]
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fb7a 	bl	80048f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004212:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004222:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	021a      	lsls	r2, r3, #8
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004238:	e002      	b.n	8004240 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	75fb      	strb	r3, [r7, #23]
      break;
 800423e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004248:	7dfb      	ldrb	r3, [r7, #23]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop

08004254 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_TIM_ConfigClockSource+0x1c>
 800426c:	2302      	movs	r3, #2
 800426e:	e0b6      	b.n	80043de <HAL_TIM_ConfigClockSource+0x18a>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800429a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ac:	d03e      	beq.n	800432c <HAL_TIM_ConfigClockSource+0xd8>
 80042ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b2:	f200 8087 	bhi.w	80043c4 <HAL_TIM_ConfigClockSource+0x170>
 80042b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ba:	f000 8086 	beq.w	80043ca <HAL_TIM_ConfigClockSource+0x176>
 80042be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c2:	d87f      	bhi.n	80043c4 <HAL_TIM_ConfigClockSource+0x170>
 80042c4:	2b70      	cmp	r3, #112	; 0x70
 80042c6:	d01a      	beq.n	80042fe <HAL_TIM_ConfigClockSource+0xaa>
 80042c8:	2b70      	cmp	r3, #112	; 0x70
 80042ca:	d87b      	bhi.n	80043c4 <HAL_TIM_ConfigClockSource+0x170>
 80042cc:	2b60      	cmp	r3, #96	; 0x60
 80042ce:	d050      	beq.n	8004372 <HAL_TIM_ConfigClockSource+0x11e>
 80042d0:	2b60      	cmp	r3, #96	; 0x60
 80042d2:	d877      	bhi.n	80043c4 <HAL_TIM_ConfigClockSource+0x170>
 80042d4:	2b50      	cmp	r3, #80	; 0x50
 80042d6:	d03c      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0xfe>
 80042d8:	2b50      	cmp	r3, #80	; 0x50
 80042da:	d873      	bhi.n	80043c4 <HAL_TIM_ConfigClockSource+0x170>
 80042dc:	2b40      	cmp	r3, #64	; 0x40
 80042de:	d058      	beq.n	8004392 <HAL_TIM_ConfigClockSource+0x13e>
 80042e0:	2b40      	cmp	r3, #64	; 0x40
 80042e2:	d86f      	bhi.n	80043c4 <HAL_TIM_ConfigClockSource+0x170>
 80042e4:	2b30      	cmp	r3, #48	; 0x30
 80042e6:	d064      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0x15e>
 80042e8:	2b30      	cmp	r3, #48	; 0x30
 80042ea:	d86b      	bhi.n	80043c4 <HAL_TIM_ConfigClockSource+0x170>
 80042ec:	2b20      	cmp	r3, #32
 80042ee:	d060      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0x15e>
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	d867      	bhi.n	80043c4 <HAL_TIM_ConfigClockSource+0x170>
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d05c      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0x15e>
 80042f8:	2b10      	cmp	r3, #16
 80042fa:	d05a      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0x15e>
 80042fc:	e062      	b.n	80043c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	6899      	ldr	r1, [r3, #8]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f000 fbc7 	bl	8004aa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004320:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	609a      	str	r2, [r3, #8]
      break;
 800432a:	e04f      	b.n	80043cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6818      	ldr	r0, [r3, #0]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	6899      	ldr	r1, [r3, #8]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f000 fbb0 	bl	8004aa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800434e:	609a      	str	r2, [r3, #8]
      break;
 8004350:	e03c      	b.n	80043cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	6859      	ldr	r1, [r3, #4]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	461a      	mov	r2, r3
 8004360:	f000 fb24 	bl	80049ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2150      	movs	r1, #80	; 0x50
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fb7d 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 8004370:	e02c      	b.n	80043cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	6859      	ldr	r1, [r3, #4]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	461a      	mov	r2, r3
 8004380:	f000 fb43 	bl	8004a0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2160      	movs	r1, #96	; 0x60
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fb6d 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 8004390:	e01c      	b.n	80043cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6859      	ldr	r1, [r3, #4]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	461a      	mov	r2, r3
 80043a0:	f000 fb04 	bl	80049ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2140      	movs	r1, #64	; 0x40
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fb5d 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 80043b0:	e00c      	b.n	80043cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4619      	mov	r1, r3
 80043bc:	4610      	mov	r0, r2
 80043be:	f000 fb54 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 80043c2:	e003      	b.n	80043cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	73fb      	strb	r3, [r7, #15]
      break;
 80043c8:	e000      	b.n	80043cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80043ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a2a      	ldr	r2, [pc, #168]	; (80044a4 <TIM_Base_SetConfig+0xbc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d003      	beq.n	8004408 <TIM_Base_SetConfig+0x20>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004406:	d108      	bne.n	800441a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a21      	ldr	r2, [pc, #132]	; (80044a4 <TIM_Base_SetConfig+0xbc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00b      	beq.n	800443a <TIM_Base_SetConfig+0x52>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004428:	d007      	beq.n	800443a <TIM_Base_SetConfig+0x52>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a1e      	ldr	r2, [pc, #120]	; (80044a8 <TIM_Base_SetConfig+0xc0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d003      	beq.n	800443a <TIM_Base_SetConfig+0x52>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a1d      	ldr	r2, [pc, #116]	; (80044ac <TIM_Base_SetConfig+0xc4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d108      	bne.n	800444c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a0c      	ldr	r2, [pc, #48]	; (80044a4 <TIM_Base_SetConfig+0xbc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d007      	beq.n	8004488 <TIM_Base_SetConfig+0xa0>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a0b      	ldr	r2, [pc, #44]	; (80044a8 <TIM_Base_SetConfig+0xc0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d003      	beq.n	8004488 <TIM_Base_SetConfig+0xa0>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a0a      	ldr	r2, [pc, #40]	; (80044ac <TIM_Base_SetConfig+0xc4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d103      	bne.n	8004490 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	615a      	str	r2, [r3, #20]
}
 8004496:	bf00      	nop
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40014400 	.word	0x40014400

080044b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	f023 0201 	bic.w	r2, r3, #1
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0303 	bic.w	r3, r3, #3
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f023 0302 	bic.w	r3, r3, #2
 80044fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a24      	ldr	r2, [pc, #144]	; (800459c <TIM_OC1_SetConfig+0xec>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d007      	beq.n	8004520 <TIM_OC1_SetConfig+0x70>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a23      	ldr	r2, [pc, #140]	; (80045a0 <TIM_OC1_SetConfig+0xf0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d003      	beq.n	8004520 <TIM_OC1_SetConfig+0x70>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a22      	ldr	r2, [pc, #136]	; (80045a4 <TIM_OC1_SetConfig+0xf4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d10c      	bne.n	800453a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f023 0308 	bic.w	r3, r3, #8
 8004526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f023 0304 	bic.w	r3, r3, #4
 8004538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a17      	ldr	r2, [pc, #92]	; (800459c <TIM_OC1_SetConfig+0xec>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d007      	beq.n	8004552 <TIM_OC1_SetConfig+0xa2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a16      	ldr	r2, [pc, #88]	; (80045a0 <TIM_OC1_SetConfig+0xf0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d003      	beq.n	8004552 <TIM_OC1_SetConfig+0xa2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a15      	ldr	r2, [pc, #84]	; (80045a4 <TIM_OC1_SetConfig+0xf4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d111      	bne.n	8004576 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	621a      	str	r2, [r3, #32]
}
 8004590:	bf00      	nop
 8004592:	371c      	adds	r7, #28
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	40012c00 	.word	0x40012c00
 80045a0:	40014000 	.word	0x40014000
 80045a4:	40014400 	.word	0x40014400

080045a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	f023 0210 	bic.w	r2, r3, #16
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	021b      	lsls	r3, r3, #8
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f023 0320 	bic.w	r3, r3, #32
 80045f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a22      	ldr	r2, [pc, #136]	; (8004690 <TIM_OC2_SetConfig+0xe8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d10d      	bne.n	8004628 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004626:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a19      	ldr	r2, [pc, #100]	; (8004690 <TIM_OC2_SetConfig+0xe8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d007      	beq.n	8004640 <TIM_OC2_SetConfig+0x98>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a18      	ldr	r2, [pc, #96]	; (8004694 <TIM_OC2_SetConfig+0xec>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_OC2_SetConfig+0x98>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a17      	ldr	r2, [pc, #92]	; (8004698 <TIM_OC2_SetConfig+0xf0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d113      	bne.n	8004668 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004646:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800464e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	621a      	str	r2, [r3, #32]
}
 8004682:	bf00      	nop
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40012c00 	.word	0x40012c00
 8004694:	40014000 	.word	0x40014000
 8004698:	40014400 	.word	0x40014400

0800469c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 0303 	bic.w	r3, r3, #3
 80046d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	021b      	lsls	r3, r3, #8
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a21      	ldr	r2, [pc, #132]	; (8004780 <TIM_OC3_SetConfig+0xe4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d10d      	bne.n	800471a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	021b      	lsls	r3, r3, #8
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a18      	ldr	r2, [pc, #96]	; (8004780 <TIM_OC3_SetConfig+0xe4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d007      	beq.n	8004732 <TIM_OC3_SetConfig+0x96>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a17      	ldr	r2, [pc, #92]	; (8004784 <TIM_OC3_SetConfig+0xe8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d003      	beq.n	8004732 <TIM_OC3_SetConfig+0x96>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a16      	ldr	r2, [pc, #88]	; (8004788 <TIM_OC3_SetConfig+0xec>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d113      	bne.n	800475a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	621a      	str	r2, [r3, #32]
}
 8004774:	bf00      	nop
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	40012c00 	.word	0x40012c00
 8004784:	40014000 	.word	0x40014000
 8004788:	40014400 	.word	0x40014400

0800478c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	021b      	lsls	r3, r3, #8
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	031b      	lsls	r3, r3, #12
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a14      	ldr	r2, [pc, #80]	; (800483c <TIM_OC4_SetConfig+0xb0>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d007      	beq.n	8004800 <TIM_OC4_SetConfig+0x74>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a13      	ldr	r2, [pc, #76]	; (8004840 <TIM_OC4_SetConfig+0xb4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d003      	beq.n	8004800 <TIM_OC4_SetConfig+0x74>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a12      	ldr	r2, [pc, #72]	; (8004844 <TIM_OC4_SetConfig+0xb8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d109      	bne.n	8004814 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	019b      	lsls	r3, r3, #6
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	621a      	str	r2, [r3, #32]
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40012c00 	.word	0x40012c00
 8004840:	40014000 	.word	0x40014000
 8004844:	40014400 	.word	0x40014400

08004848 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800488c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	041b      	lsls	r3, r3, #16
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a13      	ldr	r2, [pc, #76]	; (80048ec <TIM_OC5_SetConfig+0xa4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d007      	beq.n	80048b2 <TIM_OC5_SetConfig+0x6a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a12      	ldr	r2, [pc, #72]	; (80048f0 <TIM_OC5_SetConfig+0xa8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_OC5_SetConfig+0x6a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a11      	ldr	r2, [pc, #68]	; (80048f4 <TIM_OC5_SetConfig+0xac>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d109      	bne.n	80048c6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	021b      	lsls	r3, r3, #8
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	621a      	str	r2, [r3, #32]
}
 80048e0:	bf00      	nop
 80048e2:	371c      	adds	r7, #28
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	40012c00 	.word	0x40012c00
 80048f0:	40014000 	.word	0x40014000
 80048f4:	40014400 	.word	0x40014400

080048f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800492a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800493e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	051b      	lsls	r3, r3, #20
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a14      	ldr	r2, [pc, #80]	; (80049a0 <TIM_OC6_SetConfig+0xa8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d007      	beq.n	8004964 <TIM_OC6_SetConfig+0x6c>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a13      	ldr	r2, [pc, #76]	; (80049a4 <TIM_OC6_SetConfig+0xac>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d003      	beq.n	8004964 <TIM_OC6_SetConfig+0x6c>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a12      	ldr	r2, [pc, #72]	; (80049a8 <TIM_OC6_SetConfig+0xb0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d109      	bne.n	8004978 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800496a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	029b      	lsls	r3, r3, #10
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	621a      	str	r2, [r3, #32]
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40012c00 	.word	0x40012c00
 80049a4:	40014000 	.word	0x40014000
 80049a8:	40014400 	.word	0x40014400

080049ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	f023 0201 	bic.w	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f023 030a 	bic.w	r3, r3, #10
 80049e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	621a      	str	r2, [r3, #32]
}
 80049fe:	bf00      	nop
 8004a00:	371c      	adds	r7, #28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b087      	sub	sp, #28
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	f023 0210 	bic.w	r2, r3, #16
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	031b      	lsls	r3, r3, #12
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	621a      	str	r2, [r3, #32]
}
 8004a5e:	bf00      	nop
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b085      	sub	sp, #20
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f043 0307 	orr.w	r3, r3, #7
 8004a8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	609a      	str	r2, [r3, #8]
}
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	021a      	lsls	r2, r3, #8
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	609a      	str	r2, [r3, #8]
}
 8004ad4:	bf00      	nop
 8004ad6:	371c      	adds	r7, #28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f003 031f 	and.w	r3, r3, #31
 8004af2:	2201      	movs	r2, #1
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a1a      	ldr	r2, [r3, #32]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	43db      	mvns	r3, r3
 8004b02:	401a      	ands	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a1a      	ldr	r2, [r3, #32]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f003 031f 	and.w	r3, r3, #31
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	fa01 f303 	lsl.w	r3, r1, r3
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	621a      	str	r2, [r3, #32]
}
 8004b1e:	bf00      	nop
 8004b20:	371c      	adds	r7, #28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
	...

08004b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e04f      	b.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a21      	ldr	r2, [pc, #132]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d108      	bne.n	8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a14      	ldr	r2, [pc, #80]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d009      	beq.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bac:	d004      	beq.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a10      	ldr	r2, [pc, #64]	; (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d10c      	bne.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	40012c00 	.word	0x40012c00
 8004bf4:	40014000 	.word	0x40014000

08004bf8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e060      	b.n	8004cd6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	041b      	lsls	r3, r3, #16
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a14      	ldr	r2, [pc, #80]	; (8004ce4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d115      	bne.n	8004cc4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	051b      	lsls	r3, r3, #20
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40012c00 	.word	0x40012c00

08004ce8 <__errno>:
 8004ce8:	4b01      	ldr	r3, [pc, #4]	; (8004cf0 <__errno+0x8>)
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	2000000c 	.word	0x2000000c

08004cf4 <__libc_init_array>:
 8004cf4:	b570      	push	{r4, r5, r6, lr}
 8004cf6:	4d0d      	ldr	r5, [pc, #52]	; (8004d2c <__libc_init_array+0x38>)
 8004cf8:	4c0d      	ldr	r4, [pc, #52]	; (8004d30 <__libc_init_array+0x3c>)
 8004cfa:	1b64      	subs	r4, r4, r5
 8004cfc:	10a4      	asrs	r4, r4, #2
 8004cfe:	2600      	movs	r6, #0
 8004d00:	42a6      	cmp	r6, r4
 8004d02:	d109      	bne.n	8004d18 <__libc_init_array+0x24>
 8004d04:	4d0b      	ldr	r5, [pc, #44]	; (8004d34 <__libc_init_array+0x40>)
 8004d06:	4c0c      	ldr	r4, [pc, #48]	; (8004d38 <__libc_init_array+0x44>)
 8004d08:	f000 ffae 	bl	8005c68 <_init>
 8004d0c:	1b64      	subs	r4, r4, r5
 8004d0e:	10a4      	asrs	r4, r4, #2
 8004d10:	2600      	movs	r6, #0
 8004d12:	42a6      	cmp	r6, r4
 8004d14:	d105      	bne.n	8004d22 <__libc_init_array+0x2e>
 8004d16:	bd70      	pop	{r4, r5, r6, pc}
 8004d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d1c:	4798      	blx	r3
 8004d1e:	3601      	adds	r6, #1
 8004d20:	e7ee      	b.n	8004d00 <__libc_init_array+0xc>
 8004d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d26:	4798      	blx	r3
 8004d28:	3601      	adds	r6, #1
 8004d2a:	e7f2      	b.n	8004d12 <__libc_init_array+0x1e>
 8004d2c:	08005d60 	.word	0x08005d60
 8004d30:	08005d60 	.word	0x08005d60
 8004d34:	08005d60 	.word	0x08005d60
 8004d38:	08005d64 	.word	0x08005d64

08004d3c <memset>:
 8004d3c:	4402      	add	r2, r0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d100      	bne.n	8004d46 <memset+0xa>
 8004d44:	4770      	bx	lr
 8004d46:	f803 1b01 	strb.w	r1, [r3], #1
 8004d4a:	e7f9      	b.n	8004d40 <memset+0x4>

08004d4c <iprintf>:
 8004d4c:	b40f      	push	{r0, r1, r2, r3}
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <iprintf+0x2c>)
 8004d50:	b513      	push	{r0, r1, r4, lr}
 8004d52:	681c      	ldr	r4, [r3, #0]
 8004d54:	b124      	cbz	r4, 8004d60 <iprintf+0x14>
 8004d56:	69a3      	ldr	r3, [r4, #24]
 8004d58:	b913      	cbnz	r3, 8004d60 <iprintf+0x14>
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	f000 f866 	bl	8004e2c <__sinit>
 8004d60:	ab05      	add	r3, sp, #20
 8004d62:	9a04      	ldr	r2, [sp, #16]
 8004d64:	68a1      	ldr	r1, [r4, #8]
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f000 f9bd 	bl	80050e8 <_vfiprintf_r>
 8004d6e:	b002      	add	sp, #8
 8004d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d74:	b004      	add	sp, #16
 8004d76:	4770      	bx	lr
 8004d78:	2000000c 	.word	0x2000000c

08004d7c <std>:
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	b510      	push	{r4, lr}
 8004d80:	4604      	mov	r4, r0
 8004d82:	e9c0 3300 	strd	r3, r3, [r0]
 8004d86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d8a:	6083      	str	r3, [r0, #8]
 8004d8c:	8181      	strh	r1, [r0, #12]
 8004d8e:	6643      	str	r3, [r0, #100]	; 0x64
 8004d90:	81c2      	strh	r2, [r0, #14]
 8004d92:	6183      	str	r3, [r0, #24]
 8004d94:	4619      	mov	r1, r3
 8004d96:	2208      	movs	r2, #8
 8004d98:	305c      	adds	r0, #92	; 0x5c
 8004d9a:	f7ff ffcf 	bl	8004d3c <memset>
 8004d9e:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <std+0x38>)
 8004da0:	6263      	str	r3, [r4, #36]	; 0x24
 8004da2:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <std+0x3c>)
 8004da4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004da6:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <std+0x40>)
 8004da8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004daa:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <std+0x44>)
 8004dac:	6224      	str	r4, [r4, #32]
 8004dae:	6323      	str	r3, [r4, #48]	; 0x30
 8004db0:	bd10      	pop	{r4, pc}
 8004db2:	bf00      	nop
 8004db4:	08005691 	.word	0x08005691
 8004db8:	080056b3 	.word	0x080056b3
 8004dbc:	080056eb 	.word	0x080056eb
 8004dc0:	0800570f 	.word	0x0800570f

08004dc4 <_cleanup_r>:
 8004dc4:	4901      	ldr	r1, [pc, #4]	; (8004dcc <_cleanup_r+0x8>)
 8004dc6:	f000 b8af 	b.w	8004f28 <_fwalk_reent>
 8004dca:	bf00      	nop
 8004dcc:	080059e9 	.word	0x080059e9

08004dd0 <__sfmoreglue>:
 8004dd0:	b570      	push	{r4, r5, r6, lr}
 8004dd2:	2268      	movs	r2, #104	; 0x68
 8004dd4:	1e4d      	subs	r5, r1, #1
 8004dd6:	4355      	muls	r5, r2
 8004dd8:	460e      	mov	r6, r1
 8004dda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004dde:	f000 f8e5 	bl	8004fac <_malloc_r>
 8004de2:	4604      	mov	r4, r0
 8004de4:	b140      	cbz	r0, 8004df8 <__sfmoreglue+0x28>
 8004de6:	2100      	movs	r1, #0
 8004de8:	e9c0 1600 	strd	r1, r6, [r0]
 8004dec:	300c      	adds	r0, #12
 8004dee:	60a0      	str	r0, [r4, #8]
 8004df0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004df4:	f7ff ffa2 	bl	8004d3c <memset>
 8004df8:	4620      	mov	r0, r4
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}

08004dfc <__sfp_lock_acquire>:
 8004dfc:	4801      	ldr	r0, [pc, #4]	; (8004e04 <__sfp_lock_acquire+0x8>)
 8004dfe:	f000 b8b3 	b.w	8004f68 <__retarget_lock_acquire_recursive>
 8004e02:	bf00      	nop
 8004e04:	200001a9 	.word	0x200001a9

08004e08 <__sfp_lock_release>:
 8004e08:	4801      	ldr	r0, [pc, #4]	; (8004e10 <__sfp_lock_release+0x8>)
 8004e0a:	f000 b8ae 	b.w	8004f6a <__retarget_lock_release_recursive>
 8004e0e:	bf00      	nop
 8004e10:	200001a9 	.word	0x200001a9

08004e14 <__sinit_lock_acquire>:
 8004e14:	4801      	ldr	r0, [pc, #4]	; (8004e1c <__sinit_lock_acquire+0x8>)
 8004e16:	f000 b8a7 	b.w	8004f68 <__retarget_lock_acquire_recursive>
 8004e1a:	bf00      	nop
 8004e1c:	200001aa 	.word	0x200001aa

08004e20 <__sinit_lock_release>:
 8004e20:	4801      	ldr	r0, [pc, #4]	; (8004e28 <__sinit_lock_release+0x8>)
 8004e22:	f000 b8a2 	b.w	8004f6a <__retarget_lock_release_recursive>
 8004e26:	bf00      	nop
 8004e28:	200001aa 	.word	0x200001aa

08004e2c <__sinit>:
 8004e2c:	b510      	push	{r4, lr}
 8004e2e:	4604      	mov	r4, r0
 8004e30:	f7ff fff0 	bl	8004e14 <__sinit_lock_acquire>
 8004e34:	69a3      	ldr	r3, [r4, #24]
 8004e36:	b11b      	cbz	r3, 8004e40 <__sinit+0x14>
 8004e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e3c:	f7ff bff0 	b.w	8004e20 <__sinit_lock_release>
 8004e40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e44:	6523      	str	r3, [r4, #80]	; 0x50
 8004e46:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <__sinit+0x68>)
 8004e48:	4a13      	ldr	r2, [pc, #76]	; (8004e98 <__sinit+0x6c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e4e:	42a3      	cmp	r3, r4
 8004e50:	bf04      	itt	eq
 8004e52:	2301      	moveq	r3, #1
 8004e54:	61a3      	streq	r3, [r4, #24]
 8004e56:	4620      	mov	r0, r4
 8004e58:	f000 f820 	bl	8004e9c <__sfp>
 8004e5c:	6060      	str	r0, [r4, #4]
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f000 f81c 	bl	8004e9c <__sfp>
 8004e64:	60a0      	str	r0, [r4, #8]
 8004e66:	4620      	mov	r0, r4
 8004e68:	f000 f818 	bl	8004e9c <__sfp>
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	60e0      	str	r0, [r4, #12]
 8004e70:	2104      	movs	r1, #4
 8004e72:	6860      	ldr	r0, [r4, #4]
 8004e74:	f7ff ff82 	bl	8004d7c <std>
 8004e78:	68a0      	ldr	r0, [r4, #8]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	2109      	movs	r1, #9
 8004e7e:	f7ff ff7d 	bl	8004d7c <std>
 8004e82:	68e0      	ldr	r0, [r4, #12]
 8004e84:	2202      	movs	r2, #2
 8004e86:	2112      	movs	r1, #18
 8004e88:	f7ff ff78 	bl	8004d7c <std>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	61a3      	str	r3, [r4, #24]
 8004e90:	e7d2      	b.n	8004e38 <__sinit+0xc>
 8004e92:	bf00      	nop
 8004e94:	08005cc8 	.word	0x08005cc8
 8004e98:	08004dc5 	.word	0x08004dc5

08004e9c <__sfp>:
 8004e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9e:	4607      	mov	r7, r0
 8004ea0:	f7ff ffac 	bl	8004dfc <__sfp_lock_acquire>
 8004ea4:	4b1e      	ldr	r3, [pc, #120]	; (8004f20 <__sfp+0x84>)
 8004ea6:	681e      	ldr	r6, [r3, #0]
 8004ea8:	69b3      	ldr	r3, [r6, #24]
 8004eaa:	b913      	cbnz	r3, 8004eb2 <__sfp+0x16>
 8004eac:	4630      	mov	r0, r6
 8004eae:	f7ff ffbd 	bl	8004e2c <__sinit>
 8004eb2:	3648      	adds	r6, #72	; 0x48
 8004eb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	d503      	bpl.n	8004ec4 <__sfp+0x28>
 8004ebc:	6833      	ldr	r3, [r6, #0]
 8004ebe:	b30b      	cbz	r3, 8004f04 <__sfp+0x68>
 8004ec0:	6836      	ldr	r6, [r6, #0]
 8004ec2:	e7f7      	b.n	8004eb4 <__sfp+0x18>
 8004ec4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ec8:	b9d5      	cbnz	r5, 8004f00 <__sfp+0x64>
 8004eca:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <__sfp+0x88>)
 8004ecc:	60e3      	str	r3, [r4, #12]
 8004ece:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ed2:	6665      	str	r5, [r4, #100]	; 0x64
 8004ed4:	f000 f847 	bl	8004f66 <__retarget_lock_init_recursive>
 8004ed8:	f7ff ff96 	bl	8004e08 <__sfp_lock_release>
 8004edc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004ee0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ee4:	6025      	str	r5, [r4, #0]
 8004ee6:	61a5      	str	r5, [r4, #24]
 8004ee8:	2208      	movs	r2, #8
 8004eea:	4629      	mov	r1, r5
 8004eec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ef0:	f7ff ff24 	bl	8004d3c <memset>
 8004ef4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ef8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004efc:	4620      	mov	r0, r4
 8004efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f00:	3468      	adds	r4, #104	; 0x68
 8004f02:	e7d9      	b.n	8004eb8 <__sfp+0x1c>
 8004f04:	2104      	movs	r1, #4
 8004f06:	4638      	mov	r0, r7
 8004f08:	f7ff ff62 	bl	8004dd0 <__sfmoreglue>
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	6030      	str	r0, [r6, #0]
 8004f10:	2800      	cmp	r0, #0
 8004f12:	d1d5      	bne.n	8004ec0 <__sfp+0x24>
 8004f14:	f7ff ff78 	bl	8004e08 <__sfp_lock_release>
 8004f18:	230c      	movs	r3, #12
 8004f1a:	603b      	str	r3, [r7, #0]
 8004f1c:	e7ee      	b.n	8004efc <__sfp+0x60>
 8004f1e:	bf00      	nop
 8004f20:	08005cc8 	.word	0x08005cc8
 8004f24:	ffff0001 	.word	0xffff0001

08004f28 <_fwalk_reent>:
 8004f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f2c:	4606      	mov	r6, r0
 8004f2e:	4688      	mov	r8, r1
 8004f30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f34:	2700      	movs	r7, #0
 8004f36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f3a:	f1b9 0901 	subs.w	r9, r9, #1
 8004f3e:	d505      	bpl.n	8004f4c <_fwalk_reent+0x24>
 8004f40:	6824      	ldr	r4, [r4, #0]
 8004f42:	2c00      	cmp	r4, #0
 8004f44:	d1f7      	bne.n	8004f36 <_fwalk_reent+0xe>
 8004f46:	4638      	mov	r0, r7
 8004f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f4c:	89ab      	ldrh	r3, [r5, #12]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d907      	bls.n	8004f62 <_fwalk_reent+0x3a>
 8004f52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f56:	3301      	adds	r3, #1
 8004f58:	d003      	beq.n	8004f62 <_fwalk_reent+0x3a>
 8004f5a:	4629      	mov	r1, r5
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	47c0      	blx	r8
 8004f60:	4307      	orrs	r7, r0
 8004f62:	3568      	adds	r5, #104	; 0x68
 8004f64:	e7e9      	b.n	8004f3a <_fwalk_reent+0x12>

08004f66 <__retarget_lock_init_recursive>:
 8004f66:	4770      	bx	lr

08004f68 <__retarget_lock_acquire_recursive>:
 8004f68:	4770      	bx	lr

08004f6a <__retarget_lock_release_recursive>:
 8004f6a:	4770      	bx	lr

08004f6c <sbrk_aligned>:
 8004f6c:	b570      	push	{r4, r5, r6, lr}
 8004f6e:	4e0e      	ldr	r6, [pc, #56]	; (8004fa8 <sbrk_aligned+0x3c>)
 8004f70:	460c      	mov	r4, r1
 8004f72:	6831      	ldr	r1, [r6, #0]
 8004f74:	4605      	mov	r5, r0
 8004f76:	b911      	cbnz	r1, 8004f7e <sbrk_aligned+0x12>
 8004f78:	f000 fb7a 	bl	8005670 <_sbrk_r>
 8004f7c:	6030      	str	r0, [r6, #0]
 8004f7e:	4621      	mov	r1, r4
 8004f80:	4628      	mov	r0, r5
 8004f82:	f000 fb75 	bl	8005670 <_sbrk_r>
 8004f86:	1c43      	adds	r3, r0, #1
 8004f88:	d00a      	beq.n	8004fa0 <sbrk_aligned+0x34>
 8004f8a:	1cc4      	adds	r4, r0, #3
 8004f8c:	f024 0403 	bic.w	r4, r4, #3
 8004f90:	42a0      	cmp	r0, r4
 8004f92:	d007      	beq.n	8004fa4 <sbrk_aligned+0x38>
 8004f94:	1a21      	subs	r1, r4, r0
 8004f96:	4628      	mov	r0, r5
 8004f98:	f000 fb6a 	bl	8005670 <_sbrk_r>
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	d101      	bne.n	8004fa4 <sbrk_aligned+0x38>
 8004fa0:	f04f 34ff 	mov.w	r4, #4294967295
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}
 8004fa8:	200001b0 	.word	0x200001b0

08004fac <_malloc_r>:
 8004fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb0:	1ccd      	adds	r5, r1, #3
 8004fb2:	f025 0503 	bic.w	r5, r5, #3
 8004fb6:	3508      	adds	r5, #8
 8004fb8:	2d0c      	cmp	r5, #12
 8004fba:	bf38      	it	cc
 8004fbc:	250c      	movcc	r5, #12
 8004fbe:	2d00      	cmp	r5, #0
 8004fc0:	4607      	mov	r7, r0
 8004fc2:	db01      	blt.n	8004fc8 <_malloc_r+0x1c>
 8004fc4:	42a9      	cmp	r1, r5
 8004fc6:	d905      	bls.n	8004fd4 <_malloc_r+0x28>
 8004fc8:	230c      	movs	r3, #12
 8004fca:	603b      	str	r3, [r7, #0]
 8004fcc:	2600      	movs	r6, #0
 8004fce:	4630      	mov	r0, r6
 8004fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fd4:	4e2e      	ldr	r6, [pc, #184]	; (8005090 <_malloc_r+0xe4>)
 8004fd6:	f000 fdbb 	bl	8005b50 <__malloc_lock>
 8004fda:	6833      	ldr	r3, [r6, #0]
 8004fdc:	461c      	mov	r4, r3
 8004fde:	bb34      	cbnz	r4, 800502e <_malloc_r+0x82>
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	f7ff ffc2 	bl	8004f6c <sbrk_aligned>
 8004fe8:	1c43      	adds	r3, r0, #1
 8004fea:	4604      	mov	r4, r0
 8004fec:	d14d      	bne.n	800508a <_malloc_r+0xde>
 8004fee:	6834      	ldr	r4, [r6, #0]
 8004ff0:	4626      	mov	r6, r4
 8004ff2:	2e00      	cmp	r6, #0
 8004ff4:	d140      	bne.n	8005078 <_malloc_r+0xcc>
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	4631      	mov	r1, r6
 8004ffa:	4638      	mov	r0, r7
 8004ffc:	eb04 0803 	add.w	r8, r4, r3
 8005000:	f000 fb36 	bl	8005670 <_sbrk_r>
 8005004:	4580      	cmp	r8, r0
 8005006:	d13a      	bne.n	800507e <_malloc_r+0xd2>
 8005008:	6821      	ldr	r1, [r4, #0]
 800500a:	3503      	adds	r5, #3
 800500c:	1a6d      	subs	r5, r5, r1
 800500e:	f025 0503 	bic.w	r5, r5, #3
 8005012:	3508      	adds	r5, #8
 8005014:	2d0c      	cmp	r5, #12
 8005016:	bf38      	it	cc
 8005018:	250c      	movcc	r5, #12
 800501a:	4629      	mov	r1, r5
 800501c:	4638      	mov	r0, r7
 800501e:	f7ff ffa5 	bl	8004f6c <sbrk_aligned>
 8005022:	3001      	adds	r0, #1
 8005024:	d02b      	beq.n	800507e <_malloc_r+0xd2>
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	442b      	add	r3, r5
 800502a:	6023      	str	r3, [r4, #0]
 800502c:	e00e      	b.n	800504c <_malloc_r+0xa0>
 800502e:	6822      	ldr	r2, [r4, #0]
 8005030:	1b52      	subs	r2, r2, r5
 8005032:	d41e      	bmi.n	8005072 <_malloc_r+0xc6>
 8005034:	2a0b      	cmp	r2, #11
 8005036:	d916      	bls.n	8005066 <_malloc_r+0xba>
 8005038:	1961      	adds	r1, r4, r5
 800503a:	42a3      	cmp	r3, r4
 800503c:	6025      	str	r5, [r4, #0]
 800503e:	bf18      	it	ne
 8005040:	6059      	strne	r1, [r3, #4]
 8005042:	6863      	ldr	r3, [r4, #4]
 8005044:	bf08      	it	eq
 8005046:	6031      	streq	r1, [r6, #0]
 8005048:	5162      	str	r2, [r4, r5]
 800504a:	604b      	str	r3, [r1, #4]
 800504c:	4638      	mov	r0, r7
 800504e:	f104 060b 	add.w	r6, r4, #11
 8005052:	f000 fd83 	bl	8005b5c <__malloc_unlock>
 8005056:	f026 0607 	bic.w	r6, r6, #7
 800505a:	1d23      	adds	r3, r4, #4
 800505c:	1af2      	subs	r2, r6, r3
 800505e:	d0b6      	beq.n	8004fce <_malloc_r+0x22>
 8005060:	1b9b      	subs	r3, r3, r6
 8005062:	50a3      	str	r3, [r4, r2]
 8005064:	e7b3      	b.n	8004fce <_malloc_r+0x22>
 8005066:	6862      	ldr	r2, [r4, #4]
 8005068:	42a3      	cmp	r3, r4
 800506a:	bf0c      	ite	eq
 800506c:	6032      	streq	r2, [r6, #0]
 800506e:	605a      	strne	r2, [r3, #4]
 8005070:	e7ec      	b.n	800504c <_malloc_r+0xa0>
 8005072:	4623      	mov	r3, r4
 8005074:	6864      	ldr	r4, [r4, #4]
 8005076:	e7b2      	b.n	8004fde <_malloc_r+0x32>
 8005078:	4634      	mov	r4, r6
 800507a:	6876      	ldr	r6, [r6, #4]
 800507c:	e7b9      	b.n	8004ff2 <_malloc_r+0x46>
 800507e:	230c      	movs	r3, #12
 8005080:	603b      	str	r3, [r7, #0]
 8005082:	4638      	mov	r0, r7
 8005084:	f000 fd6a 	bl	8005b5c <__malloc_unlock>
 8005088:	e7a1      	b.n	8004fce <_malloc_r+0x22>
 800508a:	6025      	str	r5, [r4, #0]
 800508c:	e7de      	b.n	800504c <_malloc_r+0xa0>
 800508e:	bf00      	nop
 8005090:	200001ac 	.word	0x200001ac

08005094 <__sfputc_r>:
 8005094:	6893      	ldr	r3, [r2, #8]
 8005096:	3b01      	subs	r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	b410      	push	{r4}
 800509c:	6093      	str	r3, [r2, #8]
 800509e:	da08      	bge.n	80050b2 <__sfputc_r+0x1e>
 80050a0:	6994      	ldr	r4, [r2, #24]
 80050a2:	42a3      	cmp	r3, r4
 80050a4:	db01      	blt.n	80050aa <__sfputc_r+0x16>
 80050a6:	290a      	cmp	r1, #10
 80050a8:	d103      	bne.n	80050b2 <__sfputc_r+0x1e>
 80050aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050ae:	f000 bb33 	b.w	8005718 <__swbuf_r>
 80050b2:	6813      	ldr	r3, [r2, #0]
 80050b4:	1c58      	adds	r0, r3, #1
 80050b6:	6010      	str	r0, [r2, #0]
 80050b8:	7019      	strb	r1, [r3, #0]
 80050ba:	4608      	mov	r0, r1
 80050bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <__sfputs_r>:
 80050c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c4:	4606      	mov	r6, r0
 80050c6:	460f      	mov	r7, r1
 80050c8:	4614      	mov	r4, r2
 80050ca:	18d5      	adds	r5, r2, r3
 80050cc:	42ac      	cmp	r4, r5
 80050ce:	d101      	bne.n	80050d4 <__sfputs_r+0x12>
 80050d0:	2000      	movs	r0, #0
 80050d2:	e007      	b.n	80050e4 <__sfputs_r+0x22>
 80050d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050d8:	463a      	mov	r2, r7
 80050da:	4630      	mov	r0, r6
 80050dc:	f7ff ffda 	bl	8005094 <__sfputc_r>
 80050e0:	1c43      	adds	r3, r0, #1
 80050e2:	d1f3      	bne.n	80050cc <__sfputs_r+0xa>
 80050e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050e8 <_vfiprintf_r>:
 80050e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ec:	460d      	mov	r5, r1
 80050ee:	b09d      	sub	sp, #116	; 0x74
 80050f0:	4614      	mov	r4, r2
 80050f2:	4698      	mov	r8, r3
 80050f4:	4606      	mov	r6, r0
 80050f6:	b118      	cbz	r0, 8005100 <_vfiprintf_r+0x18>
 80050f8:	6983      	ldr	r3, [r0, #24]
 80050fa:	b90b      	cbnz	r3, 8005100 <_vfiprintf_r+0x18>
 80050fc:	f7ff fe96 	bl	8004e2c <__sinit>
 8005100:	4b89      	ldr	r3, [pc, #548]	; (8005328 <_vfiprintf_r+0x240>)
 8005102:	429d      	cmp	r5, r3
 8005104:	d11b      	bne.n	800513e <_vfiprintf_r+0x56>
 8005106:	6875      	ldr	r5, [r6, #4]
 8005108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800510a:	07d9      	lsls	r1, r3, #31
 800510c:	d405      	bmi.n	800511a <_vfiprintf_r+0x32>
 800510e:	89ab      	ldrh	r3, [r5, #12]
 8005110:	059a      	lsls	r2, r3, #22
 8005112:	d402      	bmi.n	800511a <_vfiprintf_r+0x32>
 8005114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005116:	f7ff ff27 	bl	8004f68 <__retarget_lock_acquire_recursive>
 800511a:	89ab      	ldrh	r3, [r5, #12]
 800511c:	071b      	lsls	r3, r3, #28
 800511e:	d501      	bpl.n	8005124 <_vfiprintf_r+0x3c>
 8005120:	692b      	ldr	r3, [r5, #16]
 8005122:	b9eb      	cbnz	r3, 8005160 <_vfiprintf_r+0x78>
 8005124:	4629      	mov	r1, r5
 8005126:	4630      	mov	r0, r6
 8005128:	f000 fb5a 	bl	80057e0 <__swsetup_r>
 800512c:	b1c0      	cbz	r0, 8005160 <_vfiprintf_r+0x78>
 800512e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005130:	07dc      	lsls	r4, r3, #31
 8005132:	d50e      	bpl.n	8005152 <_vfiprintf_r+0x6a>
 8005134:	f04f 30ff 	mov.w	r0, #4294967295
 8005138:	b01d      	add	sp, #116	; 0x74
 800513a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513e:	4b7b      	ldr	r3, [pc, #492]	; (800532c <_vfiprintf_r+0x244>)
 8005140:	429d      	cmp	r5, r3
 8005142:	d101      	bne.n	8005148 <_vfiprintf_r+0x60>
 8005144:	68b5      	ldr	r5, [r6, #8]
 8005146:	e7df      	b.n	8005108 <_vfiprintf_r+0x20>
 8005148:	4b79      	ldr	r3, [pc, #484]	; (8005330 <_vfiprintf_r+0x248>)
 800514a:	429d      	cmp	r5, r3
 800514c:	bf08      	it	eq
 800514e:	68f5      	ldreq	r5, [r6, #12]
 8005150:	e7da      	b.n	8005108 <_vfiprintf_r+0x20>
 8005152:	89ab      	ldrh	r3, [r5, #12]
 8005154:	0598      	lsls	r0, r3, #22
 8005156:	d4ed      	bmi.n	8005134 <_vfiprintf_r+0x4c>
 8005158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800515a:	f7ff ff06 	bl	8004f6a <__retarget_lock_release_recursive>
 800515e:	e7e9      	b.n	8005134 <_vfiprintf_r+0x4c>
 8005160:	2300      	movs	r3, #0
 8005162:	9309      	str	r3, [sp, #36]	; 0x24
 8005164:	2320      	movs	r3, #32
 8005166:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800516a:	f8cd 800c 	str.w	r8, [sp, #12]
 800516e:	2330      	movs	r3, #48	; 0x30
 8005170:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005334 <_vfiprintf_r+0x24c>
 8005174:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005178:	f04f 0901 	mov.w	r9, #1
 800517c:	4623      	mov	r3, r4
 800517e:	469a      	mov	sl, r3
 8005180:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005184:	b10a      	cbz	r2, 800518a <_vfiprintf_r+0xa2>
 8005186:	2a25      	cmp	r2, #37	; 0x25
 8005188:	d1f9      	bne.n	800517e <_vfiprintf_r+0x96>
 800518a:	ebba 0b04 	subs.w	fp, sl, r4
 800518e:	d00b      	beq.n	80051a8 <_vfiprintf_r+0xc0>
 8005190:	465b      	mov	r3, fp
 8005192:	4622      	mov	r2, r4
 8005194:	4629      	mov	r1, r5
 8005196:	4630      	mov	r0, r6
 8005198:	f7ff ff93 	bl	80050c2 <__sfputs_r>
 800519c:	3001      	adds	r0, #1
 800519e:	f000 80aa 	beq.w	80052f6 <_vfiprintf_r+0x20e>
 80051a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051a4:	445a      	add	r2, fp
 80051a6:	9209      	str	r2, [sp, #36]	; 0x24
 80051a8:	f89a 3000 	ldrb.w	r3, [sl]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80a2 	beq.w	80052f6 <_vfiprintf_r+0x20e>
 80051b2:	2300      	movs	r3, #0
 80051b4:	f04f 32ff 	mov.w	r2, #4294967295
 80051b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051bc:	f10a 0a01 	add.w	sl, sl, #1
 80051c0:	9304      	str	r3, [sp, #16]
 80051c2:	9307      	str	r3, [sp, #28]
 80051c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051c8:	931a      	str	r3, [sp, #104]	; 0x68
 80051ca:	4654      	mov	r4, sl
 80051cc:	2205      	movs	r2, #5
 80051ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051d2:	4858      	ldr	r0, [pc, #352]	; (8005334 <_vfiprintf_r+0x24c>)
 80051d4:	f7fa fffc 	bl	80001d0 <memchr>
 80051d8:	9a04      	ldr	r2, [sp, #16]
 80051da:	b9d8      	cbnz	r0, 8005214 <_vfiprintf_r+0x12c>
 80051dc:	06d1      	lsls	r1, r2, #27
 80051de:	bf44      	itt	mi
 80051e0:	2320      	movmi	r3, #32
 80051e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051e6:	0713      	lsls	r3, r2, #28
 80051e8:	bf44      	itt	mi
 80051ea:	232b      	movmi	r3, #43	; 0x2b
 80051ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051f0:	f89a 3000 	ldrb.w	r3, [sl]
 80051f4:	2b2a      	cmp	r3, #42	; 0x2a
 80051f6:	d015      	beq.n	8005224 <_vfiprintf_r+0x13c>
 80051f8:	9a07      	ldr	r2, [sp, #28]
 80051fa:	4654      	mov	r4, sl
 80051fc:	2000      	movs	r0, #0
 80051fe:	f04f 0c0a 	mov.w	ip, #10
 8005202:	4621      	mov	r1, r4
 8005204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005208:	3b30      	subs	r3, #48	; 0x30
 800520a:	2b09      	cmp	r3, #9
 800520c:	d94e      	bls.n	80052ac <_vfiprintf_r+0x1c4>
 800520e:	b1b0      	cbz	r0, 800523e <_vfiprintf_r+0x156>
 8005210:	9207      	str	r2, [sp, #28]
 8005212:	e014      	b.n	800523e <_vfiprintf_r+0x156>
 8005214:	eba0 0308 	sub.w	r3, r0, r8
 8005218:	fa09 f303 	lsl.w	r3, r9, r3
 800521c:	4313      	orrs	r3, r2
 800521e:	9304      	str	r3, [sp, #16]
 8005220:	46a2      	mov	sl, r4
 8005222:	e7d2      	b.n	80051ca <_vfiprintf_r+0xe2>
 8005224:	9b03      	ldr	r3, [sp, #12]
 8005226:	1d19      	adds	r1, r3, #4
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	9103      	str	r1, [sp, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	bfbb      	ittet	lt
 8005230:	425b      	neglt	r3, r3
 8005232:	f042 0202 	orrlt.w	r2, r2, #2
 8005236:	9307      	strge	r3, [sp, #28]
 8005238:	9307      	strlt	r3, [sp, #28]
 800523a:	bfb8      	it	lt
 800523c:	9204      	strlt	r2, [sp, #16]
 800523e:	7823      	ldrb	r3, [r4, #0]
 8005240:	2b2e      	cmp	r3, #46	; 0x2e
 8005242:	d10c      	bne.n	800525e <_vfiprintf_r+0x176>
 8005244:	7863      	ldrb	r3, [r4, #1]
 8005246:	2b2a      	cmp	r3, #42	; 0x2a
 8005248:	d135      	bne.n	80052b6 <_vfiprintf_r+0x1ce>
 800524a:	9b03      	ldr	r3, [sp, #12]
 800524c:	1d1a      	adds	r2, r3, #4
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	9203      	str	r2, [sp, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	bfb8      	it	lt
 8005256:	f04f 33ff 	movlt.w	r3, #4294967295
 800525a:	3402      	adds	r4, #2
 800525c:	9305      	str	r3, [sp, #20]
 800525e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005344 <_vfiprintf_r+0x25c>
 8005262:	7821      	ldrb	r1, [r4, #0]
 8005264:	2203      	movs	r2, #3
 8005266:	4650      	mov	r0, sl
 8005268:	f7fa ffb2 	bl	80001d0 <memchr>
 800526c:	b140      	cbz	r0, 8005280 <_vfiprintf_r+0x198>
 800526e:	2340      	movs	r3, #64	; 0x40
 8005270:	eba0 000a 	sub.w	r0, r0, sl
 8005274:	fa03 f000 	lsl.w	r0, r3, r0
 8005278:	9b04      	ldr	r3, [sp, #16]
 800527a:	4303      	orrs	r3, r0
 800527c:	3401      	adds	r4, #1
 800527e:	9304      	str	r3, [sp, #16]
 8005280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005284:	482c      	ldr	r0, [pc, #176]	; (8005338 <_vfiprintf_r+0x250>)
 8005286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800528a:	2206      	movs	r2, #6
 800528c:	f7fa ffa0 	bl	80001d0 <memchr>
 8005290:	2800      	cmp	r0, #0
 8005292:	d03f      	beq.n	8005314 <_vfiprintf_r+0x22c>
 8005294:	4b29      	ldr	r3, [pc, #164]	; (800533c <_vfiprintf_r+0x254>)
 8005296:	bb1b      	cbnz	r3, 80052e0 <_vfiprintf_r+0x1f8>
 8005298:	9b03      	ldr	r3, [sp, #12]
 800529a:	3307      	adds	r3, #7
 800529c:	f023 0307 	bic.w	r3, r3, #7
 80052a0:	3308      	adds	r3, #8
 80052a2:	9303      	str	r3, [sp, #12]
 80052a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052a6:	443b      	add	r3, r7
 80052a8:	9309      	str	r3, [sp, #36]	; 0x24
 80052aa:	e767      	b.n	800517c <_vfiprintf_r+0x94>
 80052ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80052b0:	460c      	mov	r4, r1
 80052b2:	2001      	movs	r0, #1
 80052b4:	e7a5      	b.n	8005202 <_vfiprintf_r+0x11a>
 80052b6:	2300      	movs	r3, #0
 80052b8:	3401      	adds	r4, #1
 80052ba:	9305      	str	r3, [sp, #20]
 80052bc:	4619      	mov	r1, r3
 80052be:	f04f 0c0a 	mov.w	ip, #10
 80052c2:	4620      	mov	r0, r4
 80052c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052c8:	3a30      	subs	r2, #48	; 0x30
 80052ca:	2a09      	cmp	r2, #9
 80052cc:	d903      	bls.n	80052d6 <_vfiprintf_r+0x1ee>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0c5      	beq.n	800525e <_vfiprintf_r+0x176>
 80052d2:	9105      	str	r1, [sp, #20]
 80052d4:	e7c3      	b.n	800525e <_vfiprintf_r+0x176>
 80052d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80052da:	4604      	mov	r4, r0
 80052dc:	2301      	movs	r3, #1
 80052de:	e7f0      	b.n	80052c2 <_vfiprintf_r+0x1da>
 80052e0:	ab03      	add	r3, sp, #12
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	462a      	mov	r2, r5
 80052e6:	4b16      	ldr	r3, [pc, #88]	; (8005340 <_vfiprintf_r+0x258>)
 80052e8:	a904      	add	r1, sp, #16
 80052ea:	4630      	mov	r0, r6
 80052ec:	f3af 8000 	nop.w
 80052f0:	4607      	mov	r7, r0
 80052f2:	1c78      	adds	r0, r7, #1
 80052f4:	d1d6      	bne.n	80052a4 <_vfiprintf_r+0x1bc>
 80052f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052f8:	07d9      	lsls	r1, r3, #31
 80052fa:	d405      	bmi.n	8005308 <_vfiprintf_r+0x220>
 80052fc:	89ab      	ldrh	r3, [r5, #12]
 80052fe:	059a      	lsls	r2, r3, #22
 8005300:	d402      	bmi.n	8005308 <_vfiprintf_r+0x220>
 8005302:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005304:	f7ff fe31 	bl	8004f6a <__retarget_lock_release_recursive>
 8005308:	89ab      	ldrh	r3, [r5, #12]
 800530a:	065b      	lsls	r3, r3, #25
 800530c:	f53f af12 	bmi.w	8005134 <_vfiprintf_r+0x4c>
 8005310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005312:	e711      	b.n	8005138 <_vfiprintf_r+0x50>
 8005314:	ab03      	add	r3, sp, #12
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	462a      	mov	r2, r5
 800531a:	4b09      	ldr	r3, [pc, #36]	; (8005340 <_vfiprintf_r+0x258>)
 800531c:	a904      	add	r1, sp, #16
 800531e:	4630      	mov	r0, r6
 8005320:	f000 f880 	bl	8005424 <_printf_i>
 8005324:	e7e4      	b.n	80052f0 <_vfiprintf_r+0x208>
 8005326:	bf00      	nop
 8005328:	08005cec 	.word	0x08005cec
 800532c:	08005d0c 	.word	0x08005d0c
 8005330:	08005ccc 	.word	0x08005ccc
 8005334:	08005d2c 	.word	0x08005d2c
 8005338:	08005d36 	.word	0x08005d36
 800533c:	00000000 	.word	0x00000000
 8005340:	080050c3 	.word	0x080050c3
 8005344:	08005d32 	.word	0x08005d32

08005348 <_printf_common>:
 8005348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800534c:	4616      	mov	r6, r2
 800534e:	4699      	mov	r9, r3
 8005350:	688a      	ldr	r2, [r1, #8]
 8005352:	690b      	ldr	r3, [r1, #16]
 8005354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005358:	4293      	cmp	r3, r2
 800535a:	bfb8      	it	lt
 800535c:	4613      	movlt	r3, r2
 800535e:	6033      	str	r3, [r6, #0]
 8005360:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005364:	4607      	mov	r7, r0
 8005366:	460c      	mov	r4, r1
 8005368:	b10a      	cbz	r2, 800536e <_printf_common+0x26>
 800536a:	3301      	adds	r3, #1
 800536c:	6033      	str	r3, [r6, #0]
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	0699      	lsls	r1, r3, #26
 8005372:	bf42      	ittt	mi
 8005374:	6833      	ldrmi	r3, [r6, #0]
 8005376:	3302      	addmi	r3, #2
 8005378:	6033      	strmi	r3, [r6, #0]
 800537a:	6825      	ldr	r5, [r4, #0]
 800537c:	f015 0506 	ands.w	r5, r5, #6
 8005380:	d106      	bne.n	8005390 <_printf_common+0x48>
 8005382:	f104 0a19 	add.w	sl, r4, #25
 8005386:	68e3      	ldr	r3, [r4, #12]
 8005388:	6832      	ldr	r2, [r6, #0]
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	42ab      	cmp	r3, r5
 800538e:	dc26      	bgt.n	80053de <_printf_common+0x96>
 8005390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005394:	1e13      	subs	r3, r2, #0
 8005396:	6822      	ldr	r2, [r4, #0]
 8005398:	bf18      	it	ne
 800539a:	2301      	movne	r3, #1
 800539c:	0692      	lsls	r2, r2, #26
 800539e:	d42b      	bmi.n	80053f8 <_printf_common+0xb0>
 80053a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053a4:	4649      	mov	r1, r9
 80053a6:	4638      	mov	r0, r7
 80053a8:	47c0      	blx	r8
 80053aa:	3001      	adds	r0, #1
 80053ac:	d01e      	beq.n	80053ec <_printf_common+0xa4>
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	68e5      	ldr	r5, [r4, #12]
 80053b2:	6832      	ldr	r2, [r6, #0]
 80053b4:	f003 0306 	and.w	r3, r3, #6
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	bf08      	it	eq
 80053bc:	1aad      	subeq	r5, r5, r2
 80053be:	68a3      	ldr	r3, [r4, #8]
 80053c0:	6922      	ldr	r2, [r4, #16]
 80053c2:	bf0c      	ite	eq
 80053c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053c8:	2500      	movne	r5, #0
 80053ca:	4293      	cmp	r3, r2
 80053cc:	bfc4      	itt	gt
 80053ce:	1a9b      	subgt	r3, r3, r2
 80053d0:	18ed      	addgt	r5, r5, r3
 80053d2:	2600      	movs	r6, #0
 80053d4:	341a      	adds	r4, #26
 80053d6:	42b5      	cmp	r5, r6
 80053d8:	d11a      	bne.n	8005410 <_printf_common+0xc8>
 80053da:	2000      	movs	r0, #0
 80053dc:	e008      	b.n	80053f0 <_printf_common+0xa8>
 80053de:	2301      	movs	r3, #1
 80053e0:	4652      	mov	r2, sl
 80053e2:	4649      	mov	r1, r9
 80053e4:	4638      	mov	r0, r7
 80053e6:	47c0      	blx	r8
 80053e8:	3001      	adds	r0, #1
 80053ea:	d103      	bne.n	80053f4 <_printf_common+0xac>
 80053ec:	f04f 30ff 	mov.w	r0, #4294967295
 80053f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f4:	3501      	adds	r5, #1
 80053f6:	e7c6      	b.n	8005386 <_printf_common+0x3e>
 80053f8:	18e1      	adds	r1, r4, r3
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	2030      	movs	r0, #48	; 0x30
 80053fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005402:	4422      	add	r2, r4
 8005404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800540c:	3302      	adds	r3, #2
 800540e:	e7c7      	b.n	80053a0 <_printf_common+0x58>
 8005410:	2301      	movs	r3, #1
 8005412:	4622      	mov	r2, r4
 8005414:	4649      	mov	r1, r9
 8005416:	4638      	mov	r0, r7
 8005418:	47c0      	blx	r8
 800541a:	3001      	adds	r0, #1
 800541c:	d0e6      	beq.n	80053ec <_printf_common+0xa4>
 800541e:	3601      	adds	r6, #1
 8005420:	e7d9      	b.n	80053d6 <_printf_common+0x8e>
	...

08005424 <_printf_i>:
 8005424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005428:	7e0f      	ldrb	r7, [r1, #24]
 800542a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800542c:	2f78      	cmp	r7, #120	; 0x78
 800542e:	4691      	mov	r9, r2
 8005430:	4680      	mov	r8, r0
 8005432:	460c      	mov	r4, r1
 8005434:	469a      	mov	sl, r3
 8005436:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800543a:	d807      	bhi.n	800544c <_printf_i+0x28>
 800543c:	2f62      	cmp	r7, #98	; 0x62
 800543e:	d80a      	bhi.n	8005456 <_printf_i+0x32>
 8005440:	2f00      	cmp	r7, #0
 8005442:	f000 80d8 	beq.w	80055f6 <_printf_i+0x1d2>
 8005446:	2f58      	cmp	r7, #88	; 0x58
 8005448:	f000 80a3 	beq.w	8005592 <_printf_i+0x16e>
 800544c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005454:	e03a      	b.n	80054cc <_printf_i+0xa8>
 8005456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800545a:	2b15      	cmp	r3, #21
 800545c:	d8f6      	bhi.n	800544c <_printf_i+0x28>
 800545e:	a101      	add	r1, pc, #4	; (adr r1, 8005464 <_printf_i+0x40>)
 8005460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005464:	080054bd 	.word	0x080054bd
 8005468:	080054d1 	.word	0x080054d1
 800546c:	0800544d 	.word	0x0800544d
 8005470:	0800544d 	.word	0x0800544d
 8005474:	0800544d 	.word	0x0800544d
 8005478:	0800544d 	.word	0x0800544d
 800547c:	080054d1 	.word	0x080054d1
 8005480:	0800544d 	.word	0x0800544d
 8005484:	0800544d 	.word	0x0800544d
 8005488:	0800544d 	.word	0x0800544d
 800548c:	0800544d 	.word	0x0800544d
 8005490:	080055dd 	.word	0x080055dd
 8005494:	08005501 	.word	0x08005501
 8005498:	080055bf 	.word	0x080055bf
 800549c:	0800544d 	.word	0x0800544d
 80054a0:	0800544d 	.word	0x0800544d
 80054a4:	080055ff 	.word	0x080055ff
 80054a8:	0800544d 	.word	0x0800544d
 80054ac:	08005501 	.word	0x08005501
 80054b0:	0800544d 	.word	0x0800544d
 80054b4:	0800544d 	.word	0x0800544d
 80054b8:	080055c7 	.word	0x080055c7
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	1d1a      	adds	r2, r3, #4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	602a      	str	r2, [r5, #0]
 80054c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054cc:	2301      	movs	r3, #1
 80054ce:	e0a3      	b.n	8005618 <_printf_i+0x1f4>
 80054d0:	6820      	ldr	r0, [r4, #0]
 80054d2:	6829      	ldr	r1, [r5, #0]
 80054d4:	0606      	lsls	r6, r0, #24
 80054d6:	f101 0304 	add.w	r3, r1, #4
 80054da:	d50a      	bpl.n	80054f2 <_printf_i+0xce>
 80054dc:	680e      	ldr	r6, [r1, #0]
 80054de:	602b      	str	r3, [r5, #0]
 80054e0:	2e00      	cmp	r6, #0
 80054e2:	da03      	bge.n	80054ec <_printf_i+0xc8>
 80054e4:	232d      	movs	r3, #45	; 0x2d
 80054e6:	4276      	negs	r6, r6
 80054e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ec:	485e      	ldr	r0, [pc, #376]	; (8005668 <_printf_i+0x244>)
 80054ee:	230a      	movs	r3, #10
 80054f0:	e019      	b.n	8005526 <_printf_i+0x102>
 80054f2:	680e      	ldr	r6, [r1, #0]
 80054f4:	602b      	str	r3, [r5, #0]
 80054f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054fa:	bf18      	it	ne
 80054fc:	b236      	sxthne	r6, r6
 80054fe:	e7ef      	b.n	80054e0 <_printf_i+0xbc>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	6820      	ldr	r0, [r4, #0]
 8005504:	1d19      	adds	r1, r3, #4
 8005506:	6029      	str	r1, [r5, #0]
 8005508:	0601      	lsls	r1, r0, #24
 800550a:	d501      	bpl.n	8005510 <_printf_i+0xec>
 800550c:	681e      	ldr	r6, [r3, #0]
 800550e:	e002      	b.n	8005516 <_printf_i+0xf2>
 8005510:	0646      	lsls	r6, r0, #25
 8005512:	d5fb      	bpl.n	800550c <_printf_i+0xe8>
 8005514:	881e      	ldrh	r6, [r3, #0]
 8005516:	4854      	ldr	r0, [pc, #336]	; (8005668 <_printf_i+0x244>)
 8005518:	2f6f      	cmp	r7, #111	; 0x6f
 800551a:	bf0c      	ite	eq
 800551c:	2308      	moveq	r3, #8
 800551e:	230a      	movne	r3, #10
 8005520:	2100      	movs	r1, #0
 8005522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005526:	6865      	ldr	r5, [r4, #4]
 8005528:	60a5      	str	r5, [r4, #8]
 800552a:	2d00      	cmp	r5, #0
 800552c:	bfa2      	ittt	ge
 800552e:	6821      	ldrge	r1, [r4, #0]
 8005530:	f021 0104 	bicge.w	r1, r1, #4
 8005534:	6021      	strge	r1, [r4, #0]
 8005536:	b90e      	cbnz	r6, 800553c <_printf_i+0x118>
 8005538:	2d00      	cmp	r5, #0
 800553a:	d04d      	beq.n	80055d8 <_printf_i+0x1b4>
 800553c:	4615      	mov	r5, r2
 800553e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005542:	fb03 6711 	mls	r7, r3, r1, r6
 8005546:	5dc7      	ldrb	r7, [r0, r7]
 8005548:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800554c:	4637      	mov	r7, r6
 800554e:	42bb      	cmp	r3, r7
 8005550:	460e      	mov	r6, r1
 8005552:	d9f4      	bls.n	800553e <_printf_i+0x11a>
 8005554:	2b08      	cmp	r3, #8
 8005556:	d10b      	bne.n	8005570 <_printf_i+0x14c>
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	07de      	lsls	r6, r3, #31
 800555c:	d508      	bpl.n	8005570 <_printf_i+0x14c>
 800555e:	6923      	ldr	r3, [r4, #16]
 8005560:	6861      	ldr	r1, [r4, #4]
 8005562:	4299      	cmp	r1, r3
 8005564:	bfde      	ittt	le
 8005566:	2330      	movle	r3, #48	; 0x30
 8005568:	f805 3c01 	strble.w	r3, [r5, #-1]
 800556c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005570:	1b52      	subs	r2, r2, r5
 8005572:	6122      	str	r2, [r4, #16]
 8005574:	f8cd a000 	str.w	sl, [sp]
 8005578:	464b      	mov	r3, r9
 800557a:	aa03      	add	r2, sp, #12
 800557c:	4621      	mov	r1, r4
 800557e:	4640      	mov	r0, r8
 8005580:	f7ff fee2 	bl	8005348 <_printf_common>
 8005584:	3001      	adds	r0, #1
 8005586:	d14c      	bne.n	8005622 <_printf_i+0x1fe>
 8005588:	f04f 30ff 	mov.w	r0, #4294967295
 800558c:	b004      	add	sp, #16
 800558e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005592:	4835      	ldr	r0, [pc, #212]	; (8005668 <_printf_i+0x244>)
 8005594:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005598:	6829      	ldr	r1, [r5, #0]
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	f851 6b04 	ldr.w	r6, [r1], #4
 80055a0:	6029      	str	r1, [r5, #0]
 80055a2:	061d      	lsls	r5, r3, #24
 80055a4:	d514      	bpl.n	80055d0 <_printf_i+0x1ac>
 80055a6:	07df      	lsls	r7, r3, #31
 80055a8:	bf44      	itt	mi
 80055aa:	f043 0320 	orrmi.w	r3, r3, #32
 80055ae:	6023      	strmi	r3, [r4, #0]
 80055b0:	b91e      	cbnz	r6, 80055ba <_printf_i+0x196>
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	f023 0320 	bic.w	r3, r3, #32
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	2310      	movs	r3, #16
 80055bc:	e7b0      	b.n	8005520 <_printf_i+0xfc>
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	f043 0320 	orr.w	r3, r3, #32
 80055c4:	6023      	str	r3, [r4, #0]
 80055c6:	2378      	movs	r3, #120	; 0x78
 80055c8:	4828      	ldr	r0, [pc, #160]	; (800566c <_printf_i+0x248>)
 80055ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055ce:	e7e3      	b.n	8005598 <_printf_i+0x174>
 80055d0:	0659      	lsls	r1, r3, #25
 80055d2:	bf48      	it	mi
 80055d4:	b2b6      	uxthmi	r6, r6
 80055d6:	e7e6      	b.n	80055a6 <_printf_i+0x182>
 80055d8:	4615      	mov	r5, r2
 80055da:	e7bb      	b.n	8005554 <_printf_i+0x130>
 80055dc:	682b      	ldr	r3, [r5, #0]
 80055de:	6826      	ldr	r6, [r4, #0]
 80055e0:	6961      	ldr	r1, [r4, #20]
 80055e2:	1d18      	adds	r0, r3, #4
 80055e4:	6028      	str	r0, [r5, #0]
 80055e6:	0635      	lsls	r5, r6, #24
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	d501      	bpl.n	80055f0 <_printf_i+0x1cc>
 80055ec:	6019      	str	r1, [r3, #0]
 80055ee:	e002      	b.n	80055f6 <_printf_i+0x1d2>
 80055f0:	0670      	lsls	r0, r6, #25
 80055f2:	d5fb      	bpl.n	80055ec <_printf_i+0x1c8>
 80055f4:	8019      	strh	r1, [r3, #0]
 80055f6:	2300      	movs	r3, #0
 80055f8:	6123      	str	r3, [r4, #16]
 80055fa:	4615      	mov	r5, r2
 80055fc:	e7ba      	b.n	8005574 <_printf_i+0x150>
 80055fe:	682b      	ldr	r3, [r5, #0]
 8005600:	1d1a      	adds	r2, r3, #4
 8005602:	602a      	str	r2, [r5, #0]
 8005604:	681d      	ldr	r5, [r3, #0]
 8005606:	6862      	ldr	r2, [r4, #4]
 8005608:	2100      	movs	r1, #0
 800560a:	4628      	mov	r0, r5
 800560c:	f7fa fde0 	bl	80001d0 <memchr>
 8005610:	b108      	cbz	r0, 8005616 <_printf_i+0x1f2>
 8005612:	1b40      	subs	r0, r0, r5
 8005614:	6060      	str	r0, [r4, #4]
 8005616:	6863      	ldr	r3, [r4, #4]
 8005618:	6123      	str	r3, [r4, #16]
 800561a:	2300      	movs	r3, #0
 800561c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005620:	e7a8      	b.n	8005574 <_printf_i+0x150>
 8005622:	6923      	ldr	r3, [r4, #16]
 8005624:	462a      	mov	r2, r5
 8005626:	4649      	mov	r1, r9
 8005628:	4640      	mov	r0, r8
 800562a:	47d0      	blx	sl
 800562c:	3001      	adds	r0, #1
 800562e:	d0ab      	beq.n	8005588 <_printf_i+0x164>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	079b      	lsls	r3, r3, #30
 8005634:	d413      	bmi.n	800565e <_printf_i+0x23a>
 8005636:	68e0      	ldr	r0, [r4, #12]
 8005638:	9b03      	ldr	r3, [sp, #12]
 800563a:	4298      	cmp	r0, r3
 800563c:	bfb8      	it	lt
 800563e:	4618      	movlt	r0, r3
 8005640:	e7a4      	b.n	800558c <_printf_i+0x168>
 8005642:	2301      	movs	r3, #1
 8005644:	4632      	mov	r2, r6
 8005646:	4649      	mov	r1, r9
 8005648:	4640      	mov	r0, r8
 800564a:	47d0      	blx	sl
 800564c:	3001      	adds	r0, #1
 800564e:	d09b      	beq.n	8005588 <_printf_i+0x164>
 8005650:	3501      	adds	r5, #1
 8005652:	68e3      	ldr	r3, [r4, #12]
 8005654:	9903      	ldr	r1, [sp, #12]
 8005656:	1a5b      	subs	r3, r3, r1
 8005658:	42ab      	cmp	r3, r5
 800565a:	dcf2      	bgt.n	8005642 <_printf_i+0x21e>
 800565c:	e7eb      	b.n	8005636 <_printf_i+0x212>
 800565e:	2500      	movs	r5, #0
 8005660:	f104 0619 	add.w	r6, r4, #25
 8005664:	e7f5      	b.n	8005652 <_printf_i+0x22e>
 8005666:	bf00      	nop
 8005668:	08005d3d 	.word	0x08005d3d
 800566c:	08005d4e 	.word	0x08005d4e

08005670 <_sbrk_r>:
 8005670:	b538      	push	{r3, r4, r5, lr}
 8005672:	4d06      	ldr	r5, [pc, #24]	; (800568c <_sbrk_r+0x1c>)
 8005674:	2300      	movs	r3, #0
 8005676:	4604      	mov	r4, r0
 8005678:	4608      	mov	r0, r1
 800567a:	602b      	str	r3, [r5, #0]
 800567c:	f7fb fd7c 	bl	8001178 <_sbrk>
 8005680:	1c43      	adds	r3, r0, #1
 8005682:	d102      	bne.n	800568a <_sbrk_r+0x1a>
 8005684:	682b      	ldr	r3, [r5, #0]
 8005686:	b103      	cbz	r3, 800568a <_sbrk_r+0x1a>
 8005688:	6023      	str	r3, [r4, #0]
 800568a:	bd38      	pop	{r3, r4, r5, pc}
 800568c:	200001b4 	.word	0x200001b4

08005690 <__sread>:
 8005690:	b510      	push	{r4, lr}
 8005692:	460c      	mov	r4, r1
 8005694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005698:	f000 fab2 	bl	8005c00 <_read_r>
 800569c:	2800      	cmp	r0, #0
 800569e:	bfab      	itete	ge
 80056a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056a2:	89a3      	ldrhlt	r3, [r4, #12]
 80056a4:	181b      	addge	r3, r3, r0
 80056a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056aa:	bfac      	ite	ge
 80056ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80056ae:	81a3      	strhlt	r3, [r4, #12]
 80056b0:	bd10      	pop	{r4, pc}

080056b2 <__swrite>:
 80056b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b6:	461f      	mov	r7, r3
 80056b8:	898b      	ldrh	r3, [r1, #12]
 80056ba:	05db      	lsls	r3, r3, #23
 80056bc:	4605      	mov	r5, r0
 80056be:	460c      	mov	r4, r1
 80056c0:	4616      	mov	r6, r2
 80056c2:	d505      	bpl.n	80056d0 <__swrite+0x1e>
 80056c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c8:	2302      	movs	r3, #2
 80056ca:	2200      	movs	r2, #0
 80056cc:	f000 f9c8 	bl	8005a60 <_lseek_r>
 80056d0:	89a3      	ldrh	r3, [r4, #12]
 80056d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056da:	81a3      	strh	r3, [r4, #12]
 80056dc:	4632      	mov	r2, r6
 80056de:	463b      	mov	r3, r7
 80056e0:	4628      	mov	r0, r5
 80056e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056e6:	f000 b869 	b.w	80057bc <_write_r>

080056ea <__sseek>:
 80056ea:	b510      	push	{r4, lr}
 80056ec:	460c      	mov	r4, r1
 80056ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056f2:	f000 f9b5 	bl	8005a60 <_lseek_r>
 80056f6:	1c43      	adds	r3, r0, #1
 80056f8:	89a3      	ldrh	r3, [r4, #12]
 80056fa:	bf15      	itete	ne
 80056fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80056fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005702:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005706:	81a3      	strheq	r3, [r4, #12]
 8005708:	bf18      	it	ne
 800570a:	81a3      	strhne	r3, [r4, #12]
 800570c:	bd10      	pop	{r4, pc}

0800570e <__sclose>:
 800570e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005712:	f000 b8d3 	b.w	80058bc <_close_r>
	...

08005718 <__swbuf_r>:
 8005718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571a:	460e      	mov	r6, r1
 800571c:	4614      	mov	r4, r2
 800571e:	4605      	mov	r5, r0
 8005720:	b118      	cbz	r0, 800572a <__swbuf_r+0x12>
 8005722:	6983      	ldr	r3, [r0, #24]
 8005724:	b90b      	cbnz	r3, 800572a <__swbuf_r+0x12>
 8005726:	f7ff fb81 	bl	8004e2c <__sinit>
 800572a:	4b21      	ldr	r3, [pc, #132]	; (80057b0 <__swbuf_r+0x98>)
 800572c:	429c      	cmp	r4, r3
 800572e:	d12b      	bne.n	8005788 <__swbuf_r+0x70>
 8005730:	686c      	ldr	r4, [r5, #4]
 8005732:	69a3      	ldr	r3, [r4, #24]
 8005734:	60a3      	str	r3, [r4, #8]
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	071a      	lsls	r2, r3, #28
 800573a:	d52f      	bpl.n	800579c <__swbuf_r+0x84>
 800573c:	6923      	ldr	r3, [r4, #16]
 800573e:	b36b      	cbz	r3, 800579c <__swbuf_r+0x84>
 8005740:	6923      	ldr	r3, [r4, #16]
 8005742:	6820      	ldr	r0, [r4, #0]
 8005744:	1ac0      	subs	r0, r0, r3
 8005746:	6963      	ldr	r3, [r4, #20]
 8005748:	b2f6      	uxtb	r6, r6
 800574a:	4283      	cmp	r3, r0
 800574c:	4637      	mov	r7, r6
 800574e:	dc04      	bgt.n	800575a <__swbuf_r+0x42>
 8005750:	4621      	mov	r1, r4
 8005752:	4628      	mov	r0, r5
 8005754:	f000 f948 	bl	80059e8 <_fflush_r>
 8005758:	bb30      	cbnz	r0, 80057a8 <__swbuf_r+0x90>
 800575a:	68a3      	ldr	r3, [r4, #8]
 800575c:	3b01      	subs	r3, #1
 800575e:	60a3      	str	r3, [r4, #8]
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	6022      	str	r2, [r4, #0]
 8005766:	701e      	strb	r6, [r3, #0]
 8005768:	6963      	ldr	r3, [r4, #20]
 800576a:	3001      	adds	r0, #1
 800576c:	4283      	cmp	r3, r0
 800576e:	d004      	beq.n	800577a <__swbuf_r+0x62>
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	07db      	lsls	r3, r3, #31
 8005774:	d506      	bpl.n	8005784 <__swbuf_r+0x6c>
 8005776:	2e0a      	cmp	r6, #10
 8005778:	d104      	bne.n	8005784 <__swbuf_r+0x6c>
 800577a:	4621      	mov	r1, r4
 800577c:	4628      	mov	r0, r5
 800577e:	f000 f933 	bl	80059e8 <_fflush_r>
 8005782:	b988      	cbnz	r0, 80057a8 <__swbuf_r+0x90>
 8005784:	4638      	mov	r0, r7
 8005786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005788:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <__swbuf_r+0x9c>)
 800578a:	429c      	cmp	r4, r3
 800578c:	d101      	bne.n	8005792 <__swbuf_r+0x7a>
 800578e:	68ac      	ldr	r4, [r5, #8]
 8005790:	e7cf      	b.n	8005732 <__swbuf_r+0x1a>
 8005792:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <__swbuf_r+0xa0>)
 8005794:	429c      	cmp	r4, r3
 8005796:	bf08      	it	eq
 8005798:	68ec      	ldreq	r4, [r5, #12]
 800579a:	e7ca      	b.n	8005732 <__swbuf_r+0x1a>
 800579c:	4621      	mov	r1, r4
 800579e:	4628      	mov	r0, r5
 80057a0:	f000 f81e 	bl	80057e0 <__swsetup_r>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	d0cb      	beq.n	8005740 <__swbuf_r+0x28>
 80057a8:	f04f 37ff 	mov.w	r7, #4294967295
 80057ac:	e7ea      	b.n	8005784 <__swbuf_r+0x6c>
 80057ae:	bf00      	nop
 80057b0:	08005cec 	.word	0x08005cec
 80057b4:	08005d0c 	.word	0x08005d0c
 80057b8:	08005ccc 	.word	0x08005ccc

080057bc <_write_r>:
 80057bc:	b538      	push	{r3, r4, r5, lr}
 80057be:	4d07      	ldr	r5, [pc, #28]	; (80057dc <_write_r+0x20>)
 80057c0:	4604      	mov	r4, r0
 80057c2:	4608      	mov	r0, r1
 80057c4:	4611      	mov	r1, r2
 80057c6:	2200      	movs	r2, #0
 80057c8:	602a      	str	r2, [r5, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	f7fb fc83 	bl	80010d6 <_write>
 80057d0:	1c43      	adds	r3, r0, #1
 80057d2:	d102      	bne.n	80057da <_write_r+0x1e>
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	b103      	cbz	r3, 80057da <_write_r+0x1e>
 80057d8:	6023      	str	r3, [r4, #0]
 80057da:	bd38      	pop	{r3, r4, r5, pc}
 80057dc:	200001b4 	.word	0x200001b4

080057e0 <__swsetup_r>:
 80057e0:	4b32      	ldr	r3, [pc, #200]	; (80058ac <__swsetup_r+0xcc>)
 80057e2:	b570      	push	{r4, r5, r6, lr}
 80057e4:	681d      	ldr	r5, [r3, #0]
 80057e6:	4606      	mov	r6, r0
 80057e8:	460c      	mov	r4, r1
 80057ea:	b125      	cbz	r5, 80057f6 <__swsetup_r+0x16>
 80057ec:	69ab      	ldr	r3, [r5, #24]
 80057ee:	b913      	cbnz	r3, 80057f6 <__swsetup_r+0x16>
 80057f0:	4628      	mov	r0, r5
 80057f2:	f7ff fb1b 	bl	8004e2c <__sinit>
 80057f6:	4b2e      	ldr	r3, [pc, #184]	; (80058b0 <__swsetup_r+0xd0>)
 80057f8:	429c      	cmp	r4, r3
 80057fa:	d10f      	bne.n	800581c <__swsetup_r+0x3c>
 80057fc:	686c      	ldr	r4, [r5, #4]
 80057fe:	89a3      	ldrh	r3, [r4, #12]
 8005800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005804:	0719      	lsls	r1, r3, #28
 8005806:	d42c      	bmi.n	8005862 <__swsetup_r+0x82>
 8005808:	06dd      	lsls	r5, r3, #27
 800580a:	d411      	bmi.n	8005830 <__swsetup_r+0x50>
 800580c:	2309      	movs	r3, #9
 800580e:	6033      	str	r3, [r6, #0]
 8005810:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005814:	81a3      	strh	r3, [r4, #12]
 8005816:	f04f 30ff 	mov.w	r0, #4294967295
 800581a:	e03e      	b.n	800589a <__swsetup_r+0xba>
 800581c:	4b25      	ldr	r3, [pc, #148]	; (80058b4 <__swsetup_r+0xd4>)
 800581e:	429c      	cmp	r4, r3
 8005820:	d101      	bne.n	8005826 <__swsetup_r+0x46>
 8005822:	68ac      	ldr	r4, [r5, #8]
 8005824:	e7eb      	b.n	80057fe <__swsetup_r+0x1e>
 8005826:	4b24      	ldr	r3, [pc, #144]	; (80058b8 <__swsetup_r+0xd8>)
 8005828:	429c      	cmp	r4, r3
 800582a:	bf08      	it	eq
 800582c:	68ec      	ldreq	r4, [r5, #12]
 800582e:	e7e6      	b.n	80057fe <__swsetup_r+0x1e>
 8005830:	0758      	lsls	r0, r3, #29
 8005832:	d512      	bpl.n	800585a <__swsetup_r+0x7a>
 8005834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005836:	b141      	cbz	r1, 800584a <__swsetup_r+0x6a>
 8005838:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800583c:	4299      	cmp	r1, r3
 800583e:	d002      	beq.n	8005846 <__swsetup_r+0x66>
 8005840:	4630      	mov	r0, r6
 8005842:	f000 f991 	bl	8005b68 <_free_r>
 8005846:	2300      	movs	r3, #0
 8005848:	6363      	str	r3, [r4, #52]	; 0x34
 800584a:	89a3      	ldrh	r3, [r4, #12]
 800584c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005850:	81a3      	strh	r3, [r4, #12]
 8005852:	2300      	movs	r3, #0
 8005854:	6063      	str	r3, [r4, #4]
 8005856:	6923      	ldr	r3, [r4, #16]
 8005858:	6023      	str	r3, [r4, #0]
 800585a:	89a3      	ldrh	r3, [r4, #12]
 800585c:	f043 0308 	orr.w	r3, r3, #8
 8005860:	81a3      	strh	r3, [r4, #12]
 8005862:	6923      	ldr	r3, [r4, #16]
 8005864:	b94b      	cbnz	r3, 800587a <__swsetup_r+0x9a>
 8005866:	89a3      	ldrh	r3, [r4, #12]
 8005868:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800586c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005870:	d003      	beq.n	800587a <__swsetup_r+0x9a>
 8005872:	4621      	mov	r1, r4
 8005874:	4630      	mov	r0, r6
 8005876:	f000 f92b 	bl	8005ad0 <__smakebuf_r>
 800587a:	89a0      	ldrh	r0, [r4, #12]
 800587c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005880:	f010 0301 	ands.w	r3, r0, #1
 8005884:	d00a      	beq.n	800589c <__swsetup_r+0xbc>
 8005886:	2300      	movs	r3, #0
 8005888:	60a3      	str	r3, [r4, #8]
 800588a:	6963      	ldr	r3, [r4, #20]
 800588c:	425b      	negs	r3, r3
 800588e:	61a3      	str	r3, [r4, #24]
 8005890:	6923      	ldr	r3, [r4, #16]
 8005892:	b943      	cbnz	r3, 80058a6 <__swsetup_r+0xc6>
 8005894:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005898:	d1ba      	bne.n	8005810 <__swsetup_r+0x30>
 800589a:	bd70      	pop	{r4, r5, r6, pc}
 800589c:	0781      	lsls	r1, r0, #30
 800589e:	bf58      	it	pl
 80058a0:	6963      	ldrpl	r3, [r4, #20]
 80058a2:	60a3      	str	r3, [r4, #8]
 80058a4:	e7f4      	b.n	8005890 <__swsetup_r+0xb0>
 80058a6:	2000      	movs	r0, #0
 80058a8:	e7f7      	b.n	800589a <__swsetup_r+0xba>
 80058aa:	bf00      	nop
 80058ac:	2000000c 	.word	0x2000000c
 80058b0:	08005cec 	.word	0x08005cec
 80058b4:	08005d0c 	.word	0x08005d0c
 80058b8:	08005ccc 	.word	0x08005ccc

080058bc <_close_r>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	4d06      	ldr	r5, [pc, #24]	; (80058d8 <_close_r+0x1c>)
 80058c0:	2300      	movs	r3, #0
 80058c2:	4604      	mov	r4, r0
 80058c4:	4608      	mov	r0, r1
 80058c6:	602b      	str	r3, [r5, #0]
 80058c8:	f7fb fc21 	bl	800110e <_close>
 80058cc:	1c43      	adds	r3, r0, #1
 80058ce:	d102      	bne.n	80058d6 <_close_r+0x1a>
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	b103      	cbz	r3, 80058d6 <_close_r+0x1a>
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	bd38      	pop	{r3, r4, r5, pc}
 80058d8:	200001b4 	.word	0x200001b4

080058dc <__sflush_r>:
 80058dc:	898a      	ldrh	r2, [r1, #12]
 80058de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e2:	4605      	mov	r5, r0
 80058e4:	0710      	lsls	r0, r2, #28
 80058e6:	460c      	mov	r4, r1
 80058e8:	d458      	bmi.n	800599c <__sflush_r+0xc0>
 80058ea:	684b      	ldr	r3, [r1, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	dc05      	bgt.n	80058fc <__sflush_r+0x20>
 80058f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	dc02      	bgt.n	80058fc <__sflush_r+0x20>
 80058f6:	2000      	movs	r0, #0
 80058f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058fe:	2e00      	cmp	r6, #0
 8005900:	d0f9      	beq.n	80058f6 <__sflush_r+0x1a>
 8005902:	2300      	movs	r3, #0
 8005904:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005908:	682f      	ldr	r7, [r5, #0]
 800590a:	602b      	str	r3, [r5, #0]
 800590c:	d032      	beq.n	8005974 <__sflush_r+0x98>
 800590e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005910:	89a3      	ldrh	r3, [r4, #12]
 8005912:	075a      	lsls	r2, r3, #29
 8005914:	d505      	bpl.n	8005922 <__sflush_r+0x46>
 8005916:	6863      	ldr	r3, [r4, #4]
 8005918:	1ac0      	subs	r0, r0, r3
 800591a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800591c:	b10b      	cbz	r3, 8005922 <__sflush_r+0x46>
 800591e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005920:	1ac0      	subs	r0, r0, r3
 8005922:	2300      	movs	r3, #0
 8005924:	4602      	mov	r2, r0
 8005926:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005928:	6a21      	ldr	r1, [r4, #32]
 800592a:	4628      	mov	r0, r5
 800592c:	47b0      	blx	r6
 800592e:	1c43      	adds	r3, r0, #1
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	d106      	bne.n	8005942 <__sflush_r+0x66>
 8005934:	6829      	ldr	r1, [r5, #0]
 8005936:	291d      	cmp	r1, #29
 8005938:	d82c      	bhi.n	8005994 <__sflush_r+0xb8>
 800593a:	4a2a      	ldr	r2, [pc, #168]	; (80059e4 <__sflush_r+0x108>)
 800593c:	40ca      	lsrs	r2, r1
 800593e:	07d6      	lsls	r6, r2, #31
 8005940:	d528      	bpl.n	8005994 <__sflush_r+0xb8>
 8005942:	2200      	movs	r2, #0
 8005944:	6062      	str	r2, [r4, #4]
 8005946:	04d9      	lsls	r1, r3, #19
 8005948:	6922      	ldr	r2, [r4, #16]
 800594a:	6022      	str	r2, [r4, #0]
 800594c:	d504      	bpl.n	8005958 <__sflush_r+0x7c>
 800594e:	1c42      	adds	r2, r0, #1
 8005950:	d101      	bne.n	8005956 <__sflush_r+0x7a>
 8005952:	682b      	ldr	r3, [r5, #0]
 8005954:	b903      	cbnz	r3, 8005958 <__sflush_r+0x7c>
 8005956:	6560      	str	r0, [r4, #84]	; 0x54
 8005958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800595a:	602f      	str	r7, [r5, #0]
 800595c:	2900      	cmp	r1, #0
 800595e:	d0ca      	beq.n	80058f6 <__sflush_r+0x1a>
 8005960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005964:	4299      	cmp	r1, r3
 8005966:	d002      	beq.n	800596e <__sflush_r+0x92>
 8005968:	4628      	mov	r0, r5
 800596a:	f000 f8fd 	bl	8005b68 <_free_r>
 800596e:	2000      	movs	r0, #0
 8005970:	6360      	str	r0, [r4, #52]	; 0x34
 8005972:	e7c1      	b.n	80058f8 <__sflush_r+0x1c>
 8005974:	6a21      	ldr	r1, [r4, #32]
 8005976:	2301      	movs	r3, #1
 8005978:	4628      	mov	r0, r5
 800597a:	47b0      	blx	r6
 800597c:	1c41      	adds	r1, r0, #1
 800597e:	d1c7      	bne.n	8005910 <__sflush_r+0x34>
 8005980:	682b      	ldr	r3, [r5, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0c4      	beq.n	8005910 <__sflush_r+0x34>
 8005986:	2b1d      	cmp	r3, #29
 8005988:	d001      	beq.n	800598e <__sflush_r+0xb2>
 800598a:	2b16      	cmp	r3, #22
 800598c:	d101      	bne.n	8005992 <__sflush_r+0xb6>
 800598e:	602f      	str	r7, [r5, #0]
 8005990:	e7b1      	b.n	80058f6 <__sflush_r+0x1a>
 8005992:	89a3      	ldrh	r3, [r4, #12]
 8005994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005998:	81a3      	strh	r3, [r4, #12]
 800599a:	e7ad      	b.n	80058f8 <__sflush_r+0x1c>
 800599c:	690f      	ldr	r7, [r1, #16]
 800599e:	2f00      	cmp	r7, #0
 80059a0:	d0a9      	beq.n	80058f6 <__sflush_r+0x1a>
 80059a2:	0793      	lsls	r3, r2, #30
 80059a4:	680e      	ldr	r6, [r1, #0]
 80059a6:	bf08      	it	eq
 80059a8:	694b      	ldreq	r3, [r1, #20]
 80059aa:	600f      	str	r7, [r1, #0]
 80059ac:	bf18      	it	ne
 80059ae:	2300      	movne	r3, #0
 80059b0:	eba6 0807 	sub.w	r8, r6, r7
 80059b4:	608b      	str	r3, [r1, #8]
 80059b6:	f1b8 0f00 	cmp.w	r8, #0
 80059ba:	dd9c      	ble.n	80058f6 <__sflush_r+0x1a>
 80059bc:	6a21      	ldr	r1, [r4, #32]
 80059be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059c0:	4643      	mov	r3, r8
 80059c2:	463a      	mov	r2, r7
 80059c4:	4628      	mov	r0, r5
 80059c6:	47b0      	blx	r6
 80059c8:	2800      	cmp	r0, #0
 80059ca:	dc06      	bgt.n	80059da <__sflush_r+0xfe>
 80059cc:	89a3      	ldrh	r3, [r4, #12]
 80059ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059d2:	81a3      	strh	r3, [r4, #12]
 80059d4:	f04f 30ff 	mov.w	r0, #4294967295
 80059d8:	e78e      	b.n	80058f8 <__sflush_r+0x1c>
 80059da:	4407      	add	r7, r0
 80059dc:	eba8 0800 	sub.w	r8, r8, r0
 80059e0:	e7e9      	b.n	80059b6 <__sflush_r+0xda>
 80059e2:	bf00      	nop
 80059e4:	20400001 	.word	0x20400001

080059e8 <_fflush_r>:
 80059e8:	b538      	push	{r3, r4, r5, lr}
 80059ea:	690b      	ldr	r3, [r1, #16]
 80059ec:	4605      	mov	r5, r0
 80059ee:	460c      	mov	r4, r1
 80059f0:	b913      	cbnz	r3, 80059f8 <_fflush_r+0x10>
 80059f2:	2500      	movs	r5, #0
 80059f4:	4628      	mov	r0, r5
 80059f6:	bd38      	pop	{r3, r4, r5, pc}
 80059f8:	b118      	cbz	r0, 8005a02 <_fflush_r+0x1a>
 80059fa:	6983      	ldr	r3, [r0, #24]
 80059fc:	b90b      	cbnz	r3, 8005a02 <_fflush_r+0x1a>
 80059fe:	f7ff fa15 	bl	8004e2c <__sinit>
 8005a02:	4b14      	ldr	r3, [pc, #80]	; (8005a54 <_fflush_r+0x6c>)
 8005a04:	429c      	cmp	r4, r3
 8005a06:	d11b      	bne.n	8005a40 <_fflush_r+0x58>
 8005a08:	686c      	ldr	r4, [r5, #4]
 8005a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0ef      	beq.n	80059f2 <_fflush_r+0xa>
 8005a12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a14:	07d0      	lsls	r0, r2, #31
 8005a16:	d404      	bmi.n	8005a22 <_fflush_r+0x3a>
 8005a18:	0599      	lsls	r1, r3, #22
 8005a1a:	d402      	bmi.n	8005a22 <_fflush_r+0x3a>
 8005a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a1e:	f7ff faa3 	bl	8004f68 <__retarget_lock_acquire_recursive>
 8005a22:	4628      	mov	r0, r5
 8005a24:	4621      	mov	r1, r4
 8005a26:	f7ff ff59 	bl	80058dc <__sflush_r>
 8005a2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a2c:	07da      	lsls	r2, r3, #31
 8005a2e:	4605      	mov	r5, r0
 8005a30:	d4e0      	bmi.n	80059f4 <_fflush_r+0xc>
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	059b      	lsls	r3, r3, #22
 8005a36:	d4dd      	bmi.n	80059f4 <_fflush_r+0xc>
 8005a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a3a:	f7ff fa96 	bl	8004f6a <__retarget_lock_release_recursive>
 8005a3e:	e7d9      	b.n	80059f4 <_fflush_r+0xc>
 8005a40:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <_fflush_r+0x70>)
 8005a42:	429c      	cmp	r4, r3
 8005a44:	d101      	bne.n	8005a4a <_fflush_r+0x62>
 8005a46:	68ac      	ldr	r4, [r5, #8]
 8005a48:	e7df      	b.n	8005a0a <_fflush_r+0x22>
 8005a4a:	4b04      	ldr	r3, [pc, #16]	; (8005a5c <_fflush_r+0x74>)
 8005a4c:	429c      	cmp	r4, r3
 8005a4e:	bf08      	it	eq
 8005a50:	68ec      	ldreq	r4, [r5, #12]
 8005a52:	e7da      	b.n	8005a0a <_fflush_r+0x22>
 8005a54:	08005cec 	.word	0x08005cec
 8005a58:	08005d0c 	.word	0x08005d0c
 8005a5c:	08005ccc 	.word	0x08005ccc

08005a60 <_lseek_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	4d07      	ldr	r5, [pc, #28]	; (8005a80 <_lseek_r+0x20>)
 8005a64:	4604      	mov	r4, r0
 8005a66:	4608      	mov	r0, r1
 8005a68:	4611      	mov	r1, r2
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	602a      	str	r2, [r5, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f7fb fb74 	bl	800115c <_lseek>
 8005a74:	1c43      	adds	r3, r0, #1
 8005a76:	d102      	bne.n	8005a7e <_lseek_r+0x1e>
 8005a78:	682b      	ldr	r3, [r5, #0]
 8005a7a:	b103      	cbz	r3, 8005a7e <_lseek_r+0x1e>
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	bd38      	pop	{r3, r4, r5, pc}
 8005a80:	200001b4 	.word	0x200001b4

08005a84 <__swhatbuf_r>:
 8005a84:	b570      	push	{r4, r5, r6, lr}
 8005a86:	460e      	mov	r6, r1
 8005a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a8c:	2900      	cmp	r1, #0
 8005a8e:	b096      	sub	sp, #88	; 0x58
 8005a90:	4614      	mov	r4, r2
 8005a92:	461d      	mov	r5, r3
 8005a94:	da08      	bge.n	8005aa8 <__swhatbuf_r+0x24>
 8005a96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	602a      	str	r2, [r5, #0]
 8005a9e:	061a      	lsls	r2, r3, #24
 8005aa0:	d410      	bmi.n	8005ac4 <__swhatbuf_r+0x40>
 8005aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aa6:	e00e      	b.n	8005ac6 <__swhatbuf_r+0x42>
 8005aa8:	466a      	mov	r2, sp
 8005aaa:	f000 f8bb 	bl	8005c24 <_fstat_r>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	dbf1      	blt.n	8005a96 <__swhatbuf_r+0x12>
 8005ab2:	9a01      	ldr	r2, [sp, #4]
 8005ab4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ab8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005abc:	425a      	negs	r2, r3
 8005abe:	415a      	adcs	r2, r3
 8005ac0:	602a      	str	r2, [r5, #0]
 8005ac2:	e7ee      	b.n	8005aa2 <__swhatbuf_r+0x1e>
 8005ac4:	2340      	movs	r3, #64	; 0x40
 8005ac6:	2000      	movs	r0, #0
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	b016      	add	sp, #88	; 0x58
 8005acc:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ad0 <__smakebuf_r>:
 8005ad0:	898b      	ldrh	r3, [r1, #12]
 8005ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ad4:	079d      	lsls	r5, r3, #30
 8005ad6:	4606      	mov	r6, r0
 8005ad8:	460c      	mov	r4, r1
 8005ada:	d507      	bpl.n	8005aec <__smakebuf_r+0x1c>
 8005adc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	6123      	str	r3, [r4, #16]
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	6163      	str	r3, [r4, #20]
 8005ae8:	b002      	add	sp, #8
 8005aea:	bd70      	pop	{r4, r5, r6, pc}
 8005aec:	ab01      	add	r3, sp, #4
 8005aee:	466a      	mov	r2, sp
 8005af0:	f7ff ffc8 	bl	8005a84 <__swhatbuf_r>
 8005af4:	9900      	ldr	r1, [sp, #0]
 8005af6:	4605      	mov	r5, r0
 8005af8:	4630      	mov	r0, r6
 8005afa:	f7ff fa57 	bl	8004fac <_malloc_r>
 8005afe:	b948      	cbnz	r0, 8005b14 <__smakebuf_r+0x44>
 8005b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b04:	059a      	lsls	r2, r3, #22
 8005b06:	d4ef      	bmi.n	8005ae8 <__smakebuf_r+0x18>
 8005b08:	f023 0303 	bic.w	r3, r3, #3
 8005b0c:	f043 0302 	orr.w	r3, r3, #2
 8005b10:	81a3      	strh	r3, [r4, #12]
 8005b12:	e7e3      	b.n	8005adc <__smakebuf_r+0xc>
 8005b14:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <__smakebuf_r+0x7c>)
 8005b16:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	6020      	str	r0, [r4, #0]
 8005b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b20:	81a3      	strh	r3, [r4, #12]
 8005b22:	9b00      	ldr	r3, [sp, #0]
 8005b24:	6163      	str	r3, [r4, #20]
 8005b26:	9b01      	ldr	r3, [sp, #4]
 8005b28:	6120      	str	r0, [r4, #16]
 8005b2a:	b15b      	cbz	r3, 8005b44 <__smakebuf_r+0x74>
 8005b2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b30:	4630      	mov	r0, r6
 8005b32:	f000 f889 	bl	8005c48 <_isatty_r>
 8005b36:	b128      	cbz	r0, 8005b44 <__smakebuf_r+0x74>
 8005b38:	89a3      	ldrh	r3, [r4, #12]
 8005b3a:	f023 0303 	bic.w	r3, r3, #3
 8005b3e:	f043 0301 	orr.w	r3, r3, #1
 8005b42:	81a3      	strh	r3, [r4, #12]
 8005b44:	89a0      	ldrh	r0, [r4, #12]
 8005b46:	4305      	orrs	r5, r0
 8005b48:	81a5      	strh	r5, [r4, #12]
 8005b4a:	e7cd      	b.n	8005ae8 <__smakebuf_r+0x18>
 8005b4c:	08004dc5 	.word	0x08004dc5

08005b50 <__malloc_lock>:
 8005b50:	4801      	ldr	r0, [pc, #4]	; (8005b58 <__malloc_lock+0x8>)
 8005b52:	f7ff ba09 	b.w	8004f68 <__retarget_lock_acquire_recursive>
 8005b56:	bf00      	nop
 8005b58:	200001a8 	.word	0x200001a8

08005b5c <__malloc_unlock>:
 8005b5c:	4801      	ldr	r0, [pc, #4]	; (8005b64 <__malloc_unlock+0x8>)
 8005b5e:	f7ff ba04 	b.w	8004f6a <__retarget_lock_release_recursive>
 8005b62:	bf00      	nop
 8005b64:	200001a8 	.word	0x200001a8

08005b68 <_free_r>:
 8005b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b6a:	2900      	cmp	r1, #0
 8005b6c:	d044      	beq.n	8005bf8 <_free_r+0x90>
 8005b6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b72:	9001      	str	r0, [sp, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f1a1 0404 	sub.w	r4, r1, #4
 8005b7a:	bfb8      	it	lt
 8005b7c:	18e4      	addlt	r4, r4, r3
 8005b7e:	f7ff ffe7 	bl	8005b50 <__malloc_lock>
 8005b82:	4a1e      	ldr	r2, [pc, #120]	; (8005bfc <_free_r+0x94>)
 8005b84:	9801      	ldr	r0, [sp, #4]
 8005b86:	6813      	ldr	r3, [r2, #0]
 8005b88:	b933      	cbnz	r3, 8005b98 <_free_r+0x30>
 8005b8a:	6063      	str	r3, [r4, #4]
 8005b8c:	6014      	str	r4, [r2, #0]
 8005b8e:	b003      	add	sp, #12
 8005b90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b94:	f7ff bfe2 	b.w	8005b5c <__malloc_unlock>
 8005b98:	42a3      	cmp	r3, r4
 8005b9a:	d908      	bls.n	8005bae <_free_r+0x46>
 8005b9c:	6825      	ldr	r5, [r4, #0]
 8005b9e:	1961      	adds	r1, r4, r5
 8005ba0:	428b      	cmp	r3, r1
 8005ba2:	bf01      	itttt	eq
 8005ba4:	6819      	ldreq	r1, [r3, #0]
 8005ba6:	685b      	ldreq	r3, [r3, #4]
 8005ba8:	1949      	addeq	r1, r1, r5
 8005baa:	6021      	streq	r1, [r4, #0]
 8005bac:	e7ed      	b.n	8005b8a <_free_r+0x22>
 8005bae:	461a      	mov	r2, r3
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	b10b      	cbz	r3, 8005bb8 <_free_r+0x50>
 8005bb4:	42a3      	cmp	r3, r4
 8005bb6:	d9fa      	bls.n	8005bae <_free_r+0x46>
 8005bb8:	6811      	ldr	r1, [r2, #0]
 8005bba:	1855      	adds	r5, r2, r1
 8005bbc:	42a5      	cmp	r5, r4
 8005bbe:	d10b      	bne.n	8005bd8 <_free_r+0x70>
 8005bc0:	6824      	ldr	r4, [r4, #0]
 8005bc2:	4421      	add	r1, r4
 8005bc4:	1854      	adds	r4, r2, r1
 8005bc6:	42a3      	cmp	r3, r4
 8005bc8:	6011      	str	r1, [r2, #0]
 8005bca:	d1e0      	bne.n	8005b8e <_free_r+0x26>
 8005bcc:	681c      	ldr	r4, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	6053      	str	r3, [r2, #4]
 8005bd2:	4421      	add	r1, r4
 8005bd4:	6011      	str	r1, [r2, #0]
 8005bd6:	e7da      	b.n	8005b8e <_free_r+0x26>
 8005bd8:	d902      	bls.n	8005be0 <_free_r+0x78>
 8005bda:	230c      	movs	r3, #12
 8005bdc:	6003      	str	r3, [r0, #0]
 8005bde:	e7d6      	b.n	8005b8e <_free_r+0x26>
 8005be0:	6825      	ldr	r5, [r4, #0]
 8005be2:	1961      	adds	r1, r4, r5
 8005be4:	428b      	cmp	r3, r1
 8005be6:	bf04      	itt	eq
 8005be8:	6819      	ldreq	r1, [r3, #0]
 8005bea:	685b      	ldreq	r3, [r3, #4]
 8005bec:	6063      	str	r3, [r4, #4]
 8005bee:	bf04      	itt	eq
 8005bf0:	1949      	addeq	r1, r1, r5
 8005bf2:	6021      	streq	r1, [r4, #0]
 8005bf4:	6054      	str	r4, [r2, #4]
 8005bf6:	e7ca      	b.n	8005b8e <_free_r+0x26>
 8005bf8:	b003      	add	sp, #12
 8005bfa:	bd30      	pop	{r4, r5, pc}
 8005bfc:	200001ac 	.word	0x200001ac

08005c00 <_read_r>:
 8005c00:	b538      	push	{r3, r4, r5, lr}
 8005c02:	4d07      	ldr	r5, [pc, #28]	; (8005c20 <_read_r+0x20>)
 8005c04:	4604      	mov	r4, r0
 8005c06:	4608      	mov	r0, r1
 8005c08:	4611      	mov	r1, r2
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	602a      	str	r2, [r5, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f7fb fa44 	bl	800109c <_read>
 8005c14:	1c43      	adds	r3, r0, #1
 8005c16:	d102      	bne.n	8005c1e <_read_r+0x1e>
 8005c18:	682b      	ldr	r3, [r5, #0]
 8005c1a:	b103      	cbz	r3, 8005c1e <_read_r+0x1e>
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	bd38      	pop	{r3, r4, r5, pc}
 8005c20:	200001b4 	.word	0x200001b4

08005c24 <_fstat_r>:
 8005c24:	b538      	push	{r3, r4, r5, lr}
 8005c26:	4d07      	ldr	r5, [pc, #28]	; (8005c44 <_fstat_r+0x20>)
 8005c28:	2300      	movs	r3, #0
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	4608      	mov	r0, r1
 8005c2e:	4611      	mov	r1, r2
 8005c30:	602b      	str	r3, [r5, #0]
 8005c32:	f7fb fa78 	bl	8001126 <_fstat>
 8005c36:	1c43      	adds	r3, r0, #1
 8005c38:	d102      	bne.n	8005c40 <_fstat_r+0x1c>
 8005c3a:	682b      	ldr	r3, [r5, #0]
 8005c3c:	b103      	cbz	r3, 8005c40 <_fstat_r+0x1c>
 8005c3e:	6023      	str	r3, [r4, #0]
 8005c40:	bd38      	pop	{r3, r4, r5, pc}
 8005c42:	bf00      	nop
 8005c44:	200001b4 	.word	0x200001b4

08005c48 <_isatty_r>:
 8005c48:	b538      	push	{r3, r4, r5, lr}
 8005c4a:	4d06      	ldr	r5, [pc, #24]	; (8005c64 <_isatty_r+0x1c>)
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	4604      	mov	r4, r0
 8005c50:	4608      	mov	r0, r1
 8005c52:	602b      	str	r3, [r5, #0]
 8005c54:	f7fb fa77 	bl	8001146 <_isatty>
 8005c58:	1c43      	adds	r3, r0, #1
 8005c5a:	d102      	bne.n	8005c62 <_isatty_r+0x1a>
 8005c5c:	682b      	ldr	r3, [r5, #0]
 8005c5e:	b103      	cbz	r3, 8005c62 <_isatty_r+0x1a>
 8005c60:	6023      	str	r3, [r4, #0]
 8005c62:	bd38      	pop	{r3, r4, r5, pc}
 8005c64:	200001b4 	.word	0x200001b4

08005c68 <_init>:
 8005c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6a:	bf00      	nop
 8005c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6e:	bc08      	pop	{r3}
 8005c70:	469e      	mov	lr, r3
 8005c72:	4770      	bx	lr

08005c74 <_fini>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	bf00      	nop
 8005c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7a:	bc08      	pop	{r3}
 8005c7c:	469e      	mov	lr, r3
 8005c7e:	4770      	bx	lr
